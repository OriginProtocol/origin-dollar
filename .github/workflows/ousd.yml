name: OUSD
on: 
  pull_request:
    types: [opened, reopened]
  push:
  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: ${{ github.ref_name }}

jobs:
  contracts-lint:
    name: "Contracts Linter"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          cache: "yarn"
          cache-dependency-path: contracts/yarn.lock

      - run: yarn install --frozen-lockfile
        working-directory: ./contracts

      - run: yarn run lint
        working-directory: ./contracts

      - run: yarn prettier:check
        working-directory: ./contracts

  contracts-test:
    name: "Contracts Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          cache: "yarn"
          cache-dependency-path: contracts/yarn.lock

      - run: yarn install --frozen-lockfile
        working-directory: ./contracts

      - run: yarn run test
        working-directory: ./contracts

  contracts-forktest:
    name: "Contracts Fork Tests"
    runs-on: ubuntu-latest
    env:
      HARDHAT_CACHE_DIR: ./cache
      PROVIDER_URL: ${{ secrets.PROVIDER_URL }}
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          cache: "yarn"
          cache-dependency-path: contracts/yarn.lock

      - uses: actions/cache@v3
        id: hardhat-cache
        with:
          path: contracts/cache
          key: ${{ runner.os }}-hardhat-${{ hashFiles('contracts/cache/*.json') }}
          restore-keys: |
            ${{ runner.os }}-hardhat-cache

      - run: yarn install --frozen-lockfile
        working-directory: ./contracts

      - run: yarn run test:fork
        working-directory: ./contracts

  dapp-lint:
    name: "DApp Linter"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          cache: "yarn"
          cache-dependency-path: dapp/yarn.lock

      - run: yarn install --frozen-lockfile
        working-directory: ./dapp

      - run: yarn prettier:check
        working-directory: ./dapp

  slither:
    name: "Slither"
    # As long as we need Python 3.6 here in the test, we can only use up to Ubuntu 20.
    # https://github.com/rwth-i6/returnn/issues/1226
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install dependencies
        run: |
          wget https://github.com/ethereum/solidity/releases/download/v0.5.11/solc-static-linux
          chmod +x solc-static-linux
          sudo mv solc-static-linux /usr/local/bin/solc
          pip3 install slither-analyzer

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          cache: "yarn"
          cache-dependency-path: contracts/yarn.lock

      - run: yarn install --frozen-lockfile
        working-directory: ./contracts

      - name: Test with Slither
        working-directory: ./contracts
        run: yarn run slither

  snyk:
    name: "Snyk"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high  --all-projects

  build-image:
    name: "Deploy App"
    runs-on: ubuntu-latest
    needs: [contracts-lint, dapp-lint]
    environment:
      name: ${{github.ref_name}}
    env:
      HEROKU_TOKEN: ${{ secrets.HEROKU_TOKEN }}
      CURR_BRANCH: ${{ github.ref_name }}
    if: ${{ contains(fromJSON('["master", "staging", "stable"]'), github.ref_name) }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Docker Login
        if: ${{ contains(fromJSON('["staging", "stable"]'), github.ref_name) }}
        run: docker login --username =_ --password=$HEROKU_TOKEN registry.heroku.com

      - name: Identify Heroku App Name
        shell: bash
        run:
          if [[ $CURR_BRANCH == "stable" ]]; then 
            echo "HEROKU_APP_NAME=ousd-dapp" >> $GITHUB_ENV;
          else 
            echo "HEROKU_APP_NAME=ousd-dapp-staging" >> $GITHUB_ENV; 
          fi;
        id: heroku_app

      - name: Heroku Login
        uses: akhileshns/heroku-deploy@v3.12.12
        if: ${{ contains(fromJSON('["staging", "stable"]'), github.ref_name) }}
        with:
          justlogin: true
          heroku_api_key: ${{secrets.HEROKU_TOKEN}}
          heroku_app_name: ${{env.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      - name: Extract Deployment Env
        env:
          HEROKU_APP_NAME: ${{env.HEROKU_APP_NAME}}
        working-directory: dapp
        run: heroku config -s -a $HEROKU_APP_NAME > deploy.env
      - name: Build and Push
        uses: docker/build-push-action@v3
        if: ${{ contains(fromJSON('["staging", "stable"]'), github.ref_name) }}
        env:
          NODE_ENV: production
        with:
          context: .
          push: true
          tags: registry.heroku.com/${{env.HEROKU_APP_NAME}}/web
          provenance: false

      - name: Deploy to Heroku
        if: ${{ contains(fromJSON('["staging", "stable"]'), github.ref_name) }}
        env:
          HEROKU_APP_NAME: ${{env.HEROKU_APP_NAME}}
        run: heroku container:release web -a $HEROKU_APP_NAME
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VaultInterface extends utils.Interface {
  functions: {
    "allocate()": FunctionFragment;
    "assetDefaultStrategies(address)": FunctionFragment;
    "autoAllocateThreshold()": FunctionFragment;
    "burnForStrategy(uint256)": FunctionFragment;
    "calculateRedeemOutputs(uint256)": FunctionFragment;
    "capitalPaused()": FunctionFragment;
    "checkBalance(address)": FunctionFragment;
    "claimGovernance()": FunctionFragment;
    "getAllAssets()": FunctionFragment;
    "getAllStrategies()": FunctionFragment;
    "getAssetCount()": FunctionFragment;
    "getStrategyCount()": FunctionFragment;
    "governor()": FunctionFragment;
    "isGovernor()": FunctionFragment;
    "isSupportedAsset(address)": FunctionFragment;
    "maxSupplyDiff()": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "mintForStrategy(uint256)": FunctionFragment;
    "netOusdMintForStrategyThreshold()": FunctionFragment;
    "netOusdMintedForStrategy()": FunctionFragment;
    "ousdMetaStrategy()": FunctionFragment;
    "priceProvider()": FunctionFragment;
    "rebase()": FunctionFragment;
    "rebasePaused()": FunctionFragment;
    "rebaseThreshold()": FunctionFragment;
    "redeem(uint256,uint256)": FunctionFragment;
    "redeemAll(uint256)": FunctionFragment;
    "redeemFeeBps()": FunctionFragment;
    "setAdminImpl(address)": FunctionFragment;
    "strategistAddr()": FunctionFragment;
    "totalValue()": FunctionFragment;
    "transferGovernance(address)": FunctionFragment;
    "trusteeAddress()": FunctionFragment;
    "trusteeFeeBps()": FunctionFragment;
    "vaultBuffer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allocate"
      | "assetDefaultStrategies"
      | "autoAllocateThreshold"
      | "burnForStrategy"
      | "calculateRedeemOutputs"
      | "capitalPaused"
      | "checkBalance"
      | "claimGovernance"
      | "getAllAssets"
      | "getAllStrategies"
      | "getAssetCount"
      | "getStrategyCount"
      | "governor"
      | "isGovernor"
      | "isSupportedAsset"
      | "maxSupplyDiff"
      | "mint"
      | "mintForStrategy"
      | "netOusdMintForStrategyThreshold"
      | "netOusdMintedForStrategy"
      | "ousdMetaStrategy"
      | "priceProvider"
      | "rebase"
      | "rebasePaused"
      | "rebaseThreshold"
      | "redeem"
      | "redeemAll"
      | "redeemFeeBps"
      | "setAdminImpl"
      | "strategistAddr"
      | "totalValue"
      | "transferGovernance"
      | "trusteeAddress"
      | "trusteeFeeBps"
      | "vaultBuffer"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "allocate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetDefaultStrategies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "autoAllocateThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnForStrategy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRedeemOutputs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "capitalPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyDiff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintForStrategy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "netOusdMintForStrategyThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "netOusdMintedForStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ousdMetaStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebasePaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebaseThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAll",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminImpl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategistAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trusteeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trusteeFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBuffer",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetDefaultStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoAllocateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnForStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRedeemOutputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capitalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintForStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "netOusdMintForStrategyThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "netOusdMintedForStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ousdMetaStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebasePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebaseThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategistAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trusteeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trusteeFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultBuffer",
    data: BytesLike
  ): Result;

  events: {
    "AllocateThresholdUpdated(uint256)": EventFragment;
    "AssetAllocated(address,address,uint256)": EventFragment;
    "AssetDefaultStrategyUpdated(address,address)": EventFragment;
    "AssetSupported(address)": EventFragment;
    "CapitalPaused()": EventFragment;
    "CapitalUnpaused()": EventFragment;
    "GovernorshipTransferred(address,address)": EventFragment;
    "MaxSupplyDiffChanged(uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "NetOusdMintForStrategyThresholdChanged(uint256)": EventFragment;
    "OusdMetaStrategyUpdated(address)": EventFragment;
    "PendingGovernorshipTransfer(address,address)": EventFragment;
    "PriceProviderUpdated(address)": EventFragment;
    "RebasePaused()": EventFragment;
    "RebaseThresholdUpdated(uint256)": EventFragment;
    "RebaseUnpaused()": EventFragment;
    "Redeem(address,uint256)": EventFragment;
    "RedeemFeeUpdated(uint256)": EventFragment;
    "StrategistUpdated(address)": EventFragment;
    "StrategyApproved(address)": EventFragment;
    "StrategyRemoved(address)": EventFragment;
    "TrusteeAddressChanged(address)": EventFragment;
    "TrusteeFeeBpsChanged(uint256)": EventFragment;
    "VaultBufferUpdated(uint256)": EventFragment;
    "YieldDistribution(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocateThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAllocated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetDefaultStrategyUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSupported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapitalPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapitalUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorshipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSupplyDiffChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NetOusdMintForStrategyThresholdChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OusdMetaStrategyUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernorshipTransfer"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceProviderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebasePaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebaseThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebaseUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategistUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrusteeAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrusteeFeeBpsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultBufferUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldDistribution"): EventFragment;
}

export interface AllocateThresholdUpdatedEventObject {
  _threshold: BigNumber;
}
export type AllocateThresholdUpdatedEvent = TypedEvent<
  [BigNumber],
  AllocateThresholdUpdatedEventObject
>;

export type AllocateThresholdUpdatedEventFilter =
  TypedEventFilter<AllocateThresholdUpdatedEvent>;

export interface AssetAllocatedEventObject {
  _asset: string;
  _strategy: string;
  _amount: BigNumber;
}
export type AssetAllocatedEvent = TypedEvent<
  [string, string, BigNumber],
  AssetAllocatedEventObject
>;

export type AssetAllocatedEventFilter = TypedEventFilter<AssetAllocatedEvent>;

export interface AssetDefaultStrategyUpdatedEventObject {
  _asset: string;
  _strategy: string;
}
export type AssetDefaultStrategyUpdatedEvent = TypedEvent<
  [string, string],
  AssetDefaultStrategyUpdatedEventObject
>;

export type AssetDefaultStrategyUpdatedEventFilter =
  TypedEventFilter<AssetDefaultStrategyUpdatedEvent>;

export interface AssetSupportedEventObject {
  _asset: string;
}
export type AssetSupportedEvent = TypedEvent<
  [string],
  AssetSupportedEventObject
>;

export type AssetSupportedEventFilter = TypedEventFilter<AssetSupportedEvent>;

export interface CapitalPausedEventObject {}
export type CapitalPausedEvent = TypedEvent<[], CapitalPausedEventObject>;

export type CapitalPausedEventFilter = TypedEventFilter<CapitalPausedEvent>;

export interface CapitalUnpausedEventObject {}
export type CapitalUnpausedEvent = TypedEvent<[], CapitalUnpausedEventObject>;

export type CapitalUnpausedEventFilter = TypedEventFilter<CapitalUnpausedEvent>;

export interface GovernorshipTransferredEventObject {
  previousGovernor: string;
  newGovernor: string;
}
export type GovernorshipTransferredEvent = TypedEvent<
  [string, string],
  GovernorshipTransferredEventObject
>;

export type GovernorshipTransferredEventFilter =
  TypedEventFilter<GovernorshipTransferredEvent>;

export interface MaxSupplyDiffChangedEventObject {
  maxSupplyDiff: BigNumber;
}
export type MaxSupplyDiffChangedEvent = TypedEvent<
  [BigNumber],
  MaxSupplyDiffChangedEventObject
>;

export type MaxSupplyDiffChangedEventFilter =
  TypedEventFilter<MaxSupplyDiffChangedEvent>;

export interface MintEventObject {
  _addr: string;
  _value: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NetOusdMintForStrategyThresholdChangedEventObject {
  _threshold: BigNumber;
}
export type NetOusdMintForStrategyThresholdChangedEvent = TypedEvent<
  [BigNumber],
  NetOusdMintForStrategyThresholdChangedEventObject
>;

export type NetOusdMintForStrategyThresholdChangedEventFilter =
  TypedEventFilter<NetOusdMintForStrategyThresholdChangedEvent>;

export interface OusdMetaStrategyUpdatedEventObject {
  _ousdMetaStrategy: string;
}
export type OusdMetaStrategyUpdatedEvent = TypedEvent<
  [string],
  OusdMetaStrategyUpdatedEventObject
>;

export type OusdMetaStrategyUpdatedEventFilter =
  TypedEventFilter<OusdMetaStrategyUpdatedEvent>;

export interface PendingGovernorshipTransferEventObject {
  previousGovernor: string;
  newGovernor: string;
}
export type PendingGovernorshipTransferEvent = TypedEvent<
  [string, string],
  PendingGovernorshipTransferEventObject
>;

export type PendingGovernorshipTransferEventFilter =
  TypedEventFilter<PendingGovernorshipTransferEvent>;

export interface PriceProviderUpdatedEventObject {
  _priceProvider: string;
}
export type PriceProviderUpdatedEvent = TypedEvent<
  [string],
  PriceProviderUpdatedEventObject
>;

export type PriceProviderUpdatedEventFilter =
  TypedEventFilter<PriceProviderUpdatedEvent>;

export interface RebasePausedEventObject {}
export type RebasePausedEvent = TypedEvent<[], RebasePausedEventObject>;

export type RebasePausedEventFilter = TypedEventFilter<RebasePausedEvent>;

export interface RebaseThresholdUpdatedEventObject {
  _threshold: BigNumber;
}
export type RebaseThresholdUpdatedEvent = TypedEvent<
  [BigNumber],
  RebaseThresholdUpdatedEventObject
>;

export type RebaseThresholdUpdatedEventFilter =
  TypedEventFilter<RebaseThresholdUpdatedEvent>;

export interface RebaseUnpausedEventObject {}
export type RebaseUnpausedEvent = TypedEvent<[], RebaseUnpausedEventObject>;

export type RebaseUnpausedEventFilter = TypedEventFilter<RebaseUnpausedEvent>;

export interface RedeemEventObject {
  _addr: string;
  _value: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RedeemFeeUpdatedEventObject {
  _redeemFeeBps: BigNumber;
}
export type RedeemFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  RedeemFeeUpdatedEventObject
>;

export type RedeemFeeUpdatedEventFilter =
  TypedEventFilter<RedeemFeeUpdatedEvent>;

export interface StrategistUpdatedEventObject {
  _address: string;
}
export type StrategistUpdatedEvent = TypedEvent<
  [string],
  StrategistUpdatedEventObject
>;

export type StrategistUpdatedEventFilter =
  TypedEventFilter<StrategistUpdatedEvent>;

export interface StrategyApprovedEventObject {
  _addr: string;
}
export type StrategyApprovedEvent = TypedEvent<
  [string],
  StrategyApprovedEventObject
>;

export type StrategyApprovedEventFilter =
  TypedEventFilter<StrategyApprovedEvent>;

export interface StrategyRemovedEventObject {
  _addr: string;
}
export type StrategyRemovedEvent = TypedEvent<
  [string],
  StrategyRemovedEventObject
>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export interface TrusteeAddressChangedEventObject {
  _address: string;
}
export type TrusteeAddressChangedEvent = TypedEvent<
  [string],
  TrusteeAddressChangedEventObject
>;

export type TrusteeAddressChangedEventFilter =
  TypedEventFilter<TrusteeAddressChangedEvent>;

export interface TrusteeFeeBpsChangedEventObject {
  _basis: BigNumber;
}
export type TrusteeFeeBpsChangedEvent = TypedEvent<
  [BigNumber],
  TrusteeFeeBpsChangedEventObject
>;

export type TrusteeFeeBpsChangedEventFilter =
  TypedEventFilter<TrusteeFeeBpsChangedEvent>;

export interface VaultBufferUpdatedEventObject {
  _vaultBuffer: BigNumber;
}
export type VaultBufferUpdatedEvent = TypedEvent<
  [BigNumber],
  VaultBufferUpdatedEventObject
>;

export type VaultBufferUpdatedEventFilter =
  TypedEventFilter<VaultBufferUpdatedEvent>;

export interface YieldDistributionEventObject {
  _to: string;
  _yield: BigNumber;
  _fee: BigNumber;
}
export type YieldDistributionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  YieldDistributionEventObject
>;

export type YieldDistributionEventFilter =
  TypedEventFilter<YieldDistributionEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetDefaultStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    autoAllocateThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateRedeemOutputs(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    capitalPaused(overrides?: CallOverrides): Promise<[boolean]>;

    checkBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllAssets(overrides?: CallOverrides): Promise<[string[]]>;

    getAllStrategies(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStrategyCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    isGovernor(overrides?: CallOverrides): Promise<[boolean]>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxSupplyDiff(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minimumOusdAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    netOusdMintForStrategyThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    netOusdMintedForStrategy(overrides?: CallOverrides): Promise<[BigNumber]>;

    ousdMetaStrategy(overrides?: CallOverrides): Promise<[string]>;

    priceProvider(overrides?: CallOverrides): Promise<[string]>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebasePaused(overrides?: CallOverrides): Promise<[boolean]>;

    rebaseThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      _amount: PromiseOrValue<BigNumberish>,
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemAll(
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAdminImpl(
      newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategistAddr(overrides?: CallOverrides): Promise<[string]>;

    totalValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    transferGovernance(
      _newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trusteeAddress(overrides?: CallOverrides): Promise<[string]>;

    trusteeFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allocate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetDefaultStrategies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  autoAllocateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  burnForStrategy(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateRedeemOutputs(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  capitalPaused(overrides?: CallOverrides): Promise<boolean>;

  checkBalance(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllAssets(overrides?: CallOverrides): Promise<string[]>;

  getAllStrategies(overrides?: CallOverrides): Promise<string[]>;

  getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  getStrategyCount(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  isGovernor(overrides?: CallOverrides): Promise<boolean>;

  isSupportedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxSupplyDiff(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _minimumOusdAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintForStrategy(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  netOusdMintForStrategyThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  netOusdMintedForStrategy(overrides?: CallOverrides): Promise<BigNumber>;

  ousdMetaStrategy(overrides?: CallOverrides): Promise<string>;

  priceProvider(overrides?: CallOverrides): Promise<string>;

  rebase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebasePaused(overrides?: CallOverrides): Promise<boolean>;

  rebaseThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    _amount: PromiseOrValue<BigNumberish>,
    _minimumUnitAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemAll(
    _minimumUnitAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  setAdminImpl(
    newImpl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategistAddr(overrides?: CallOverrides): Promise<string>;

  totalValue(overrides?: CallOverrides): Promise<BigNumber>;

  transferGovernance(
    _newGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trusteeAddress(overrides?: CallOverrides): Promise<string>;

  trusteeFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  vaultBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allocate(overrides?: CallOverrides): Promise<void>;

    assetDefaultStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    autoAllocateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    burnForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRedeemOutputs(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    capitalPaused(overrides?: CallOverrides): Promise<boolean>;

    checkBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimGovernance(overrides?: CallOverrides): Promise<void>;

    getAllAssets(overrides?: CallOverrides): Promise<string[]>;

    getAllStrategies(overrides?: CallOverrides): Promise<string[]>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyCount(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    isGovernor(overrides?: CallOverrides): Promise<boolean>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxSupplyDiff(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minimumOusdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    netOusdMintForStrategyThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    netOusdMintedForStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    ousdMetaStrategy(overrides?: CallOverrides): Promise<string>;

    priceProvider(overrides?: CallOverrides): Promise<string>;

    rebase(overrides?: CallOverrides): Promise<void>;

    rebasePaused(overrides?: CallOverrides): Promise<boolean>;

    rebaseThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _amount: PromiseOrValue<BigNumberish>,
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemAll(
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    setAdminImpl(
      newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategistAddr(overrides?: CallOverrides): Promise<string>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      _newGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trusteeAddress(overrides?: CallOverrides): Promise<string>;

    trusteeFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    vaultBuffer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AllocateThresholdUpdated(uint256)"(
      _threshold?: null
    ): AllocateThresholdUpdatedEventFilter;
    AllocateThresholdUpdated(
      _threshold?: null
    ): AllocateThresholdUpdatedEventFilter;

    "AssetAllocated(address,address,uint256)"(
      _asset?: null,
      _strategy?: null,
      _amount?: null
    ): AssetAllocatedEventFilter;
    AssetAllocated(
      _asset?: null,
      _strategy?: null,
      _amount?: null
    ): AssetAllocatedEventFilter;

    "AssetDefaultStrategyUpdated(address,address)"(
      _asset?: null,
      _strategy?: null
    ): AssetDefaultStrategyUpdatedEventFilter;
    AssetDefaultStrategyUpdated(
      _asset?: null,
      _strategy?: null
    ): AssetDefaultStrategyUpdatedEventFilter;

    "AssetSupported(address)"(_asset?: null): AssetSupportedEventFilter;
    AssetSupported(_asset?: null): AssetSupportedEventFilter;

    "CapitalPaused()"(): CapitalPausedEventFilter;
    CapitalPaused(): CapitalPausedEventFilter;

    "CapitalUnpaused()"(): CapitalUnpausedEventFilter;
    CapitalUnpaused(): CapitalUnpausedEventFilter;

    "GovernorshipTransferred(address,address)"(
      previousGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernorshipTransferredEventFilter;
    GovernorshipTransferred(
      previousGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernorshipTransferredEventFilter;

    "MaxSupplyDiffChanged(uint256)"(
      maxSupplyDiff?: null
    ): MaxSupplyDiffChangedEventFilter;
    MaxSupplyDiffChanged(maxSupplyDiff?: null): MaxSupplyDiffChangedEventFilter;

    "Mint(address,uint256)"(_addr?: null, _value?: null): MintEventFilter;
    Mint(_addr?: null, _value?: null): MintEventFilter;

    "NetOusdMintForStrategyThresholdChanged(uint256)"(
      _threshold?: null
    ): NetOusdMintForStrategyThresholdChangedEventFilter;
    NetOusdMintForStrategyThresholdChanged(
      _threshold?: null
    ): NetOusdMintForStrategyThresholdChangedEventFilter;

    "OusdMetaStrategyUpdated(address)"(
      _ousdMetaStrategy?: null
    ): OusdMetaStrategyUpdatedEventFilter;
    OusdMetaStrategyUpdated(
      _ousdMetaStrategy?: null
    ): OusdMetaStrategyUpdatedEventFilter;

    "PendingGovernorshipTransfer(address,address)"(
      previousGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernorshipTransferEventFilter;
    PendingGovernorshipTransfer(
      previousGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernorshipTransferEventFilter;

    "PriceProviderUpdated(address)"(
      _priceProvider?: null
    ): PriceProviderUpdatedEventFilter;
    PriceProviderUpdated(
      _priceProvider?: null
    ): PriceProviderUpdatedEventFilter;

    "RebasePaused()"(): RebasePausedEventFilter;
    RebasePaused(): RebasePausedEventFilter;

    "RebaseThresholdUpdated(uint256)"(
      _threshold?: null
    ): RebaseThresholdUpdatedEventFilter;
    RebaseThresholdUpdated(
      _threshold?: null
    ): RebaseThresholdUpdatedEventFilter;

    "RebaseUnpaused()"(): RebaseUnpausedEventFilter;
    RebaseUnpaused(): RebaseUnpausedEventFilter;

    "Redeem(address,uint256)"(_addr?: null, _value?: null): RedeemEventFilter;
    Redeem(_addr?: null, _value?: null): RedeemEventFilter;

    "RedeemFeeUpdated(uint256)"(
      _redeemFeeBps?: null
    ): RedeemFeeUpdatedEventFilter;
    RedeemFeeUpdated(_redeemFeeBps?: null): RedeemFeeUpdatedEventFilter;

    "StrategistUpdated(address)"(_address?: null): StrategistUpdatedEventFilter;
    StrategistUpdated(_address?: null): StrategistUpdatedEventFilter;

    "StrategyApproved(address)"(_addr?: null): StrategyApprovedEventFilter;
    StrategyApproved(_addr?: null): StrategyApprovedEventFilter;

    "StrategyRemoved(address)"(_addr?: null): StrategyRemovedEventFilter;
    StrategyRemoved(_addr?: null): StrategyRemovedEventFilter;

    "TrusteeAddressChanged(address)"(
      _address?: null
    ): TrusteeAddressChangedEventFilter;
    TrusteeAddressChanged(_address?: null): TrusteeAddressChangedEventFilter;

    "TrusteeFeeBpsChanged(uint256)"(
      _basis?: null
    ): TrusteeFeeBpsChangedEventFilter;
    TrusteeFeeBpsChanged(_basis?: null): TrusteeFeeBpsChangedEventFilter;

    "VaultBufferUpdated(uint256)"(
      _vaultBuffer?: null
    ): VaultBufferUpdatedEventFilter;
    VaultBufferUpdated(_vaultBuffer?: null): VaultBufferUpdatedEventFilter;

    "YieldDistribution(address,uint256,uint256)"(
      _to?: null,
      _yield?: null,
      _fee?: null
    ): YieldDistributionEventFilter;
    YieldDistribution(
      _to?: null,
      _yield?: null,
      _fee?: null
    ): YieldDistributionEventFilter;
  };

  estimateGas: {
    allocate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetDefaultStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    autoAllocateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    burnForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateRedeemOutputs(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    capitalPaused(overrides?: CallOverrides): Promise<BigNumber>;

    checkBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getAllStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyCount(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSupplyDiff(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minimumOusdAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    netOusdMintForStrategyThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    netOusdMintedForStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    ousdMetaStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    priceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebasePaused(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _amount: PromiseOrValue<BigNumberish>,
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemAll(
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    setAdminImpl(
      newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategistAddr(overrides?: CallOverrides): Promise<BigNumber>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    transferGovernance(
      _newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trusteeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    trusteeFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    vaultBuffer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetDefaultStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autoAllocateThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateRedeemOutputs(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    capitalPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllStrategies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupplyDiff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _minimumOusdAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintForStrategy(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    netOusdMintForStrategyThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    netOusdMintedForStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ousdMetaStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebasePaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebaseThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _amount: PromiseOrValue<BigNumberish>,
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemAll(
      _minimumUnitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdminImpl(
      newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategistAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferGovernance(
      _newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trusteeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trusteeFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

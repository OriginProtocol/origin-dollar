//
// Script to deploy the Single Asset Staking contract.
//
const { isMainnet } = require("../test/helpers.js");
const { utils } = require("ethers");
const {
  log,
  withConfirmation,
} = require("../utils/deploy");

const parseCsv = require("../utils/parseCsv");
const { compensationData } = require("../scripts/staking/contstants");
const { extractOGNAmount, computeRootHash } = require("../utils/stake");

const deployName = "011_single_asset_staking_update";

const singleAssetStaking = async ({ getNamedAccounts }) => {
  console.log(`Running ${deployName} deployment...`);

  const { governorAddr } = await getNamedAccounts();

  const sGovernor = ethers.provider.getSigner(governorAddr);

  // Initialize the proxy.
  const cOGNStakingProxy = await ethers.getContract("OGNStakingProxy");

  // Initialize the SingleAssetStaking contract.
  const cOGNStaking = await ethers.getContractAt(
    "SingleAssetStaking",
    cOGNStakingProxy.address
  );

  //
  // Initialize the OGN compensation data.
  //

  // The Merkle root hash is generated by the scripts/staking/airDrop.js
  // We set the hash for testing. For Mainnet it will get set later via
  // a governance call once the compensation numbers are finalized
  // and the compensation program is ready to get started.
  let dropRootHash, dropProofDepth;
  if (!isMainnet) {
    if (process.env.DROP_ROOT_HASH && process.env.DROP_PROOF_DEPTH) {
      // If a root hash and depth were specified as env vars, use that.
      dropRootHash = process.env.DROP_ROOT_HASH;
      dropProofDepth = process.env.DROP_PROOF_DEPTH;
    } else {
      // use testing generated scripts
      const payouts = await parseCsv("./scripts/staking/reimbursements.csv");
      const solRate = utils.parseUnits((compensationData.rate / 100.0).toString(), 18);
      const payoutList = {
        type: compensationData.type,
        rate: solRate.toString(),
        duration: compensationData.duration,
        payouts,
      };
      const root = computeRootHash(cOGNStaking.address, extractOGNAmount(payoutList));

      dropRootHash = root.hash;
      dropProofDepth = root.depth;
    }

    await withConfirmation(
      cOGNStaking
        .connect(sGovernor)
        .setAirDropRoot(compensationData.type, dropRootHash, dropProofDepth)
    );

    log(`Merkle root hash set to ${dropRootHash}`);
    log(`Merkle proof depth set to ${dropProofDepth}`);
  } else {
    log("Mainnet: Merkle tree not initialized.");
  }

  console.log(`${deployName} deploy done.`);
  return true;
};

singleAssetStaking.id = deployName;
singleAssetStaking.dependencies = ["core"];

module.exports = singleAssetStaking;

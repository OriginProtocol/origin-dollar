{
  "address": "0x50b5B40E7bec9703697184A6705CDbd32C1F15F8",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidProofLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balancesContainerProof",
          "type": "bytes"
        }
      ],
      "name": "verifyBalancesContainer",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "firstPendingDepositSlotProof",
          "type": "bytes"
        }
      ],
      "name": "verifyFirstPendingDepositSlot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEmptyDepositQueue",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "validatorBalanceLeaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balanceProof",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        }
      ],
      "name": "verifyValidatorBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validatorBalanceGwei",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "validatorPubKeyProof",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        }
      ],
      "name": "verifyValidatorPubkey",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd419ef398de38ea5e25b50cf3af9a427aa14e60517b188b01e801f3ad9ba8163",
  "receipt": {
    "to": null,
    "from": "0xf7749B41db006860cEc0650D18b8013d69C44Eeb",
    "contractAddress": "0x50b5B40E7bec9703697184A6705CDbd32C1F15F8",
    "transactionIndex": 16,
    "gasUsed": "661944",
    "logsBloom": "0x
    "blockHash": "0x2b1386eef75fae6cd90a8c2abfa1d30249d7d6a47bf5584bce3701c81d16df52",
    "transactionHash": "0xd419ef398de38ea5e25b50cf3af9a427aa14e60517b188b01e801f3ad9ba8163",
    "logs": [],
    "blockNumber": 963401,
    "cumulativeGasUsed": "9363777",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "de6d2f00431b04abbd2234fb96d2b847",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidProofLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balancesContainerProof\",\"type\":\"bytes\"}],\"name\":\"verifyBalancesContainer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"firstPendingDepositSlotProof\",\"type\":\"bytes\"}],\"name\":\"verifyFirstPendingDepositSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEmptyDepositQueue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"validatorBalanceLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balanceProof\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"}],\"name\":\"verifyValidatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorBalanceGwei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"validatorPubKeyProof\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"verifyValidatorPubkey\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"params\":{\"balancesContainerProof\":\"The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the the balances container\",\"beaconBlockRoot\":\"The root of the beacon block\"}},\"verifyFirstPendingDepositSlot(bytes32,uint64,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"firstPendingDepositSlotProof\":\"The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.\",\"slot\":\"The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice.\"},\"returns\":{\"isEmptyDepositQueue\":\"True if the deposit queue is empty, false otherwise\"}},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint64)\":{\"params\":{\"balanceProof\":\"The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the Balances container.\",\"validatorBalanceLeaf\":\"The leaf node containing the validator balance with three other balances.\",\"validatorIndex\":\"The validator index to verify the balance for\"},\"returns\":{\"validatorBalanceGwei\":\"The balance in Gwei of the validator at the given index\"}},\"verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"pubKeyHash\":\"Hash of validator's public key using the Beacon Chain's format\",\"validatorIndex\":\"The validator index\",\"validatorPubKeyProof\":\"The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"withdrawalAddress\":\"The withdrawal address used in the validator's withdrawal credentials\"}}},\"title\":\"Verifies merkle proofs of beacon chain data.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"notice\":\"Verifies the balances container to the beacon block root BeaconBlock.state.balances\"},\"verifyFirstPendingDepositSlot(bytes32,uint64,bytes)\":{\"notice\":\"If the deposit queue is not empty, verify the slot of the first pending deposit to the beacon block root BeaconBlock.state.PendingDeposits[0].slot If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]\"},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint64)\":{\"notice\":\"Verifies the validator balance to the root of the Balances container.\"},\"verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)\":{\"notice\":\"Verifies the validator public key to the beacon block root BeaconBlock.state.validators[validatorIndex].pubkey\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/beacon/BeaconProofs.sol\":\"BeaconProofs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/beacon/BeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { BeaconProofsLib } from \\\"./BeaconProofsLib.sol\\\";\\n\\n/**\\n * @title Verifies merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\ncontract BeaconProofs {\\n    /// @notice Verifies the validator public key to the beacon block root\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param validatorPubKeyProof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidatorPubkey(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) external view {\\n        BeaconProofsLib.verifyValidatorPubkey(\\n            beaconBlockRoot,\\n            pubKeyHash,\\n            validatorPubKeyProof,\\n            validatorIndex,\\n            withdrawalAddress\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param balancesContainerRoot The merkle root of the the balances container\\n    /// @param balancesContainerProof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata balancesContainerProof\\n    ) external view {\\n        BeaconProofsLib.verifyBalancesContainer(\\n            beaconBlockRoot,\\n            balancesContainerRoot,\\n            balancesContainerProof\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param balanceProof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint64 validatorIndex\\n    ) external view returns (uint256 validatorBalanceGwei) {\\n        validatorBalanceGwei = BeaconProofsLib.verifyValidatorBalance(\\n            balancesContainerRoot,\\n            validatorBalanceLeaf,\\n            balanceProof,\\n            validatorIndex\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the slot of the first pending deposit to the beacon block root\\n    /// BeaconBlock.state.PendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param firstPendingDepositSlotProof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise\\n    function verifyFirstPendingDepositSlot(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) external view returns (bool isEmptyDepositQueue) {\\n        isEmptyDepositQueue = BeaconProofsLib.verifyFirstPendingDepositSlot(\\n            beaconBlockRoot,\\n            slot,\\n            firstPendingDepositSlotProof\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9e215b4791a10121334247547f1696657cfe9f3d6ab327ff0964646f8f60cfe8\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/BeaconProofsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Merkle } from \\\"./Merkle.sol\\\";\\nimport { Endian } from \\\"./Endian.sol\\\";\\n\\n/**\\n * @title Library to verify merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\nlibrary BeaconProofsLib {\\n    // Known generalized indices in the beacon block\\n    /// @dev BeaconBlock.slot\\n    uint256 internal constant SLOT_GENERALIZED_INDEX = 8;\\n    /// @dev BeaconBlock.state.PendingDeposits[0]\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX =\\n        198105366528;\\n    /// @dev BeaconBlock.state.PendingDeposits[0].slot\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX =\\n        1584842932228;\\n    /// @dev BeaconBlock.body.executionPayload.blockNumber\\n    uint256 internal constant BLOCK_NUMBER_GENERALIZED_INDEX = 6438;\\n    /// @dev BeaconBlock.state.validators\\n    uint256 internal constant VALIDATORS_CONTAINER_GENERALIZED_INDEX = 715;\\n    /// @dev BeaconBlock.state.balances\\n    uint256 internal constant BALANCES_CONTAINER_GENERALIZED_INDEX = 716;\\n\\n    /// @dev Number of bytes in the proof to the first pending deposit.\\n    /// 37 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PROOF_LENGTH = 37 * 32;\\n    /// @dev Number of bytes in the proof to the slot of the first pending deposit.\\n    /// 40 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0].slot\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_SLOT_PROOF_LENGTH = 40 * 32;\\n\\n    /// @dev Merkle height of the Balances container\\n    /// BeaconBlock.state.balances\\n    uint256 internal constant BALANCES_HEIGHT = 39;\\n    /// @dev Merkle height of the Validators container\\n    /// BeaconBlock.state.validators\\n    uint256 internal constant VALIDATORS_HEIGHT = 41;\\n    /// @dev Merkle height of the Validator container\\n    /// BeaconBlock.state.validators[validatorIndex]\\n    uint256 internal constant VALIDATOR_HEIGHT = 3;\\n\\n    /// @dev Position of the pubkey field in the Validator container.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n\\n    /// @notice Verifies the validator public key to the beacon block root\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param validatorPubKeyProof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidatorPubkey(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n        require(\\n            // 53 * 32 bytes = 1696 bytes\\n            validatorPubKeyProof.length == 1696,\\n            \\\"Invalid proof length\\\"\\n        );\\n\\n        // BeaconBlock.state.validators[validatorIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_HEIGHT,\\n            validatorIndex\\n        );\\n        // BeaconBlock.state.validators[validatorIndex].pubkey\\n        generalizedIndex = concatGenIndices(\\n            generalizedIndex,\\n            VALIDATOR_HEIGHT,\\n            VALIDATOR_PUBKEY_INDEX\\n        );\\n\\n        // Get the withdrawal address from the first witness in the pubkey merkle proof.\\n        address withdrawalAddressFromProof;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // The first 32 bytes of the proof is the withdrawal credential so load it into memory.\\n            calldatacopy(0, validatorPubKeyProof.offset, 32)\\n            // Cast the 32 bytes in memory to an address which is the last 20 bytes.\\n            withdrawalAddressFromProof := mload(0)\\n        }\\n        require(\\n            withdrawalAddressFromProof == withdrawalAddress,\\n            \\\"Invalid withdrawal address\\\"\\n        );\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorPubKeyProof,\\n                root: beaconBlockRoot,\\n                leaf: pubKeyHash,\\n                index: generalizedIndex\\n            }),\\n            \\\"Invalid validator pubkey proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root.\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param balancesContainerRoot The merkle root of the the balances container.\\n    /// @param balancesContainerProof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata balancesContainerProof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n        require(\\n            // 9 * 32 bytes = 288 bytes\\n            balancesContainerProof.length == 288,\\n            \\\"Invalid proof length\\\"\\n        );\\n\\n        // BeaconBlock.state.balances\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: balancesContainerProof,\\n                root: beaconBlockRoot,\\n                leaf: balancesContainerRoot,\\n                index: BALANCES_CONTAINER_GENERALIZED_INDEX\\n            }),\\n            \\\"Invalid balance container proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param balanceProof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for.\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index.\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint64 validatorIndex\\n    ) internal view returns (uint256 validatorBalanceGwei) {\\n        require(balancesContainerRoot != bytes32(0), \\\"Invalid container root\\\");\\n        require(\\n            // 39 * 32 bytes = 1248 bytes\\n            balanceProof.length == 1248,\\n            \\\"Invalid proof length\\\"\\n        );\\n\\n        // Four balances are stored in each leaf so the validator index is divided by 4\\n        uint64 balanceIndex = validatorIndex / 4;\\n\\n        // Get the index within the balances container, not the Beacon Block\\n        // BeaconBlock.state.balances[balanceIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            1,\\n            BALANCES_HEIGHT,\\n            balanceIndex\\n        );\\n\\n        validatorBalanceGwei = balanceAtIndex(\\n            validatorBalanceLeaf,\\n            validatorIndex\\n        );\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: balanceProof,\\n                root: balancesContainerRoot,\\n                leaf: validatorBalanceLeaf,\\n                index: generalizedIndex\\n            }),\\n            \\\"Invalid balance proof\\\"\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the slot of the first pending deposit to the beacon block root\\n    /// BeaconBlock.state.PendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param firstPendingDepositSlotProof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDepositSlot(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) internal view returns (bool isEmptyDepositQueue) {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n        require(\\n            // 40 * 32 bytes = 1280 bytes\\n            firstPendingDepositSlotProof.length == 1280 ||\\n                // 37 * 32 bytes = 1184 bytes\\n                firstPendingDepositSlotProof.length == 1184,\\n            \\\"Invalid proof length\\\"\\n        );\\n\\n        // slither-disable-next-line uninitialized-local\\n        uint256 generalizedIndex;\\n        // slither-disable-next-line uninitialized-local\\n        bytes32 leaf;\\n        // If the deposit queue is empty\\n        if (\\n            firstPendingDepositSlotProof.length ==\\n            FIRST_PENDING_DEPOSIT_PROOF_LENGTH\\n        ) {\\n            isEmptyDepositQueue = true;\\n            // use an empty leaf node as the root of the first pending deposit\\n            // when the deposit queue is empty\\n            leaf = bytes32(0);\\n            // BeaconBlock.state.PendingDeposits[0]\\n            generalizedIndex = FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX;\\n        } else if (\\n            firstPendingDepositSlotProof.length ==\\n            FIRST_PENDING_DEPOSIT_SLOT_PROOF_LENGTH\\n        ) {\\n            // Convert uint64 slot number to a little endian bytes32\\n            leaf = Endian.toLittleEndianUint64(slot);\\n            // BeaconBlock.state.PendingDeposits[0].slot\\n            generalizedIndex = FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX;\\n        } else {\\n            revert(\\\"Invalid proof length\\\");\\n        }\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: firstPendingDepositSlotProof,\\n                root: beaconBlockRoot,\\n                leaf: leaf,\\n                index: generalizedIndex\\n            }),\\n            \\\"Invalid pending deposit proof\\\"\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///       Internal Helper Functions\\n    ////////////////////////////////////////////////////\\n\\n    function balanceAtIndex(bytes32 validatorBalanceLeaf, uint64 validatorIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return\\n            Endian.fromLittleEndianUint64(\\n                bytes32((uint256(validatorBalanceLeaf) << bitShiftAmount))\\n            );\\n    }\\n\\n    /// @notice Concatenates two beacon chain generalized indices into one.\\n    /// @param genIndex The first generalized index or 1 if calculating for a single container.\\n    /// @param height The merkle tree height of the second container. eg 39 for balances, 41 for validators.\\n    /// @param index The index within the second container. eg the validator index.\\n    /// @return genIndex The concatenated generalized index.\\n    function concatGenIndices(\\n        uint256 genIndex,\\n        uint256 height,\\n        uint256 index\\n    ) internal pure returns (uint256) {\\n        return (genIndex << height) | index;\\n    }\\n}\\n\",\"keccak256\":\"0x46f24bf024a072f94b3d61dd391b755f8a8dbd2a17234c80e35af720fdc004a1\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Library to handle conversion between little-endian and big-endian formats.\\n * @author Origin Protocol Inc\\n */\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits),\\n     * but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum)\\n        internal\\n        pure\\n        returns (uint64 n)\\n    {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        // forgefmt: disable-next-item\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n\\n    function toLittleEndianUint64(uint64 benum)\\n        internal\\n        pure\\n        returns (bytes32 n)\\n    {\\n        // Convert to little-endian by reversing byte order\\n        uint64 reversed = (benum >> 56) |\\n            ((0x00FF000000000000 & benum) >> 40) |\\n            ((0x0000FF0000000000 & benum) >> 24) |\\n            ((0x000000FF00000000 & benum) >> 8) |\\n            ((0x00000000FF000000 & benum) << 8) |\\n            ((0x0000000000FF0000 & benum) << 24) |\\n            ((0x000000000000FF00 & benum) << 40) |\\n            ((0x00000000000000FF & benum) << 56);\\n\\n        // Store the little-endian uint64 in the least significant 64 bits of bytes32\\n        n = bytes32(uint256(reversed));\\n        // Shift to most significant bits\\n        n = n << 192;\\n    }\\n}\\n\",\"keccak256\":\"0x823cc85083bc08271f32602afc45eb62548c51b334da0e19080764e5aa503506\",\"license\":\"MIT\"},\"contracts/beacon/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    error InvalidProofLength();\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            InvalidProofLength()\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash[0];\\n    }\\n}\\n\",\"keccak256\":\"0x01e60fb19fe4439b27c4b7fa6e7fc68892b2affa3c4ef8769fa24ad3d20e2273\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50610b068061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806342bd31da14610051578063431c729b1461007757806391ad640d1461009a578063e915f067146100af575b600080fd5b61006461005f36600461081e565b6100c2565b6040519081526020015b60405180910390f35b61008a610085366004610885565b6100db565b604051901515815260200161006e565b6100ad6100a83660046108de565b6100f2565b005b6100ad6100bd366004610918565b610104565b60006100d1868686868661011a565b9695505050505050565b60006100e985858585610247565b95945050505050565b6100fe848484846103fa565b50505050565b6101128686868686866104ca565b505050505050565b6000856101675760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590818dbdb9d185a5b995c881c9bdbdd60521b60448201526064015b60405180910390fd5b6104e083146101885760405162461bcd60e51b815260040161015e9061099e565b60006101956004846109f8565b90506001600160401b038116648000000000176101b28785610625565b92506101f886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91508590506106c5565b61023c5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103130b630b731b290383937b7b360591b604482015260640161015e565b505095945050505050565b6000846102665760405162461bcd60e51b815260040161015e90610a26565b61050082148061027757506104a082145b6102935760405162461bcd60e51b815260040161015e9061099e565b60008061049f1984016102b4575060019150642e2000000090506000610360565b6104ff1984016103485761033886603881811c60ff16602883811c61ff001691909117601884811c62ff00001691909117600885811c63ff000000169190911764ff000000009186901b919091161765ff00000000009185901b919091161766ff0000000000009184901b919091161760ff60381b9290911b919091161760c01b90565b9050650171000000049150610360565b60405162461bcd60e51b815260040161015e9061099e565b6103a485858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508591508690506106c5565b6103f05760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642070656e64696e67206465706f7369742070726f6f66000000604482015260640161015e565b5050949350505050565b836104175760405162461bcd60e51b815260040161015e90610a26565b61012081146104385760405162461bcd60e51b815260040161015e9061099e565b61047e82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102cc90506106c5565b6100fe5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c616e636520636f6e7461696e65722070726f6f6600604482015260640161015e565b856104e75760405162461bcd60e51b815260040161015e90610a26565b6106a083146105085760405162461bcd60e51b815260040161015e9061099e565b6001600160401b03821666059600000000001760031b600060208682376000519050826001600160a01b0316816001600160a01b03161461058b5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207769746864726177616c2061646472657373000000000000604482015260640161015e565b6105cf86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91508690506106c5565b61061b5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642076616c696461746f72207075626b65792070726f6f660000604482015260640161015e565b5050505050505050565b600080610633600484610a52565b61063e906040610a80565b6001600160401b031690506106b284821b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161760ff60381b60889290921c919091161790565b6001600160401b03169150505b92915050565b6000836106d38685856106dd565b1495945050505050565b600083516000141580156106fc5750602084516106fa9190610aa9565b155b610719576040516313717da960e21b815260040160405180910390fd5b604080516020808201909252848152905b855181116107b05761073d600285610aa9565b600003610773578151600052808601516020526020826040600060026107d05a03fa61076857600080fd5b60028404935061079e565b8086015160005281516020526020826040600060026107d05a03fa61079757600080fd5b6002840493505b6107a9602082610abd565b905061072a565b5051949350505050565b60008083601f8401126107cc57600080fd5b5081356001600160401b038111156107e357600080fd5b6020830191508360208285010111156107fb57600080fd5b9250929050565b80356001600160401b038116811461081957600080fd5b919050565b60008060008060006080868803121561083657600080fd5b853594506020860135935060408601356001600160401b0381111561085a57600080fd5b610866888289016107ba565b9094509250610879905060608701610802565b90509295509295909350565b6000806000806060858703121561089b57600080fd5b843593506108ab60208601610802565b925060408501356001600160401b038111156108c657600080fd5b6108d2878288016107ba565b95989497509550505050565b600080600080606085870312156108f457600080fd5b843593506020850135925060408501356001600160401b038111156108c657600080fd5b60008060008060008060a0878903121561093157600080fd5b863595506020870135945060408701356001600160401b0381111561095557600080fd5b61096189828a016107ba565b9095509350610974905060608801610802565b915060808701356001600160a01b038116811461099057600080fd5b809150509295509295509295565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03831680610a1157610a116109cc565b806001600160401b0384160491505092915050565b602080825260129082015271125b9d985b1a5908189b1bd8dac81c9bdbdd60721b604082015260600190565b60006001600160401b03831680610a6b57610a6b6109cc565b806001600160401b0384160691505092915050565b6001600160401b038181168382160290811690818114610aa257610aa26109e2565b5092915050565b600082610ab857610ab86109cc565b500690565b808201808211156106bf576106bf6109e256fea264697066735822122063c89d938f8411026ef362a17818ac96316a5ccba7e978f2cd18954f4c10a44364736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806342bd31da14610051578063431c729b1461007757806391ad640d1461009a578063e915f067146100af575b600080fd5b61006461005f36600461081e565b6100c2565b6040519081526020015b60405180910390f35b61008a610085366004610885565b6100db565b604051901515815260200161006e565b6100ad6100a83660046108de565b6100f2565b005b6100ad6100bd366004610918565b610104565b60006100d1868686868661011a565b9695505050505050565b60006100e985858585610247565b95945050505050565b6100fe848484846103fa565b50505050565b6101128686868686866104ca565b505050505050565b6000856101675760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590818dbdb9d185a5b995c881c9bdbdd60521b60448201526064015b60405180910390fd5b6104e083146101885760405162461bcd60e51b815260040161015e9061099e565b60006101956004846109f8565b90506001600160401b038116648000000000176101b28785610625565b92506101f886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91508590506106c5565b61023c5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103130b630b731b290383937b7b360591b604482015260640161015e565b505095945050505050565b6000846102665760405162461bcd60e51b815260040161015e90610a26565b61050082148061027757506104a082145b6102935760405162461bcd60e51b815260040161015e9061099e565b60008061049f1984016102b4575060019150642e2000000090506000610360565b6104ff1984016103485761033886603881811c60ff16602883811c61ff001691909117601884811c62ff00001691909117600885811c63ff000000169190911764ff000000009186901b919091161765ff00000000009185901b919091161766ff0000000000009184901b919091161760ff60381b9290911b919091161760c01b90565b9050650171000000049150610360565b60405162461bcd60e51b815260040161015e9061099e565b6103a485858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508591508690506106c5565b6103f05760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642070656e64696e67206465706f7369742070726f6f66000000604482015260640161015e565b5050949350505050565b836104175760405162461bcd60e51b815260040161015e90610a26565b61012081146104385760405162461bcd60e51b815260040161015e9061099e565b61047e82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102cc90506106c5565b6100fe5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c616e636520636f6e7461696e65722070726f6f6600604482015260640161015e565b856104e75760405162461bcd60e51b815260040161015e90610a26565b6106a083146105085760405162461bcd60e51b815260040161015e9061099e565b6001600160401b03821666059600000000001760031b600060208682376000519050826001600160a01b0316816001600160a01b03161461058b5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207769746864726177616c2061646472657373000000000000604482015260640161015e565b6105cf86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91508690506106c5565b61061b5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642076616c696461746f72207075626b65792070726f6f660000604482015260640161015e565b5050505050505050565b600080610633600484610a52565b61063e906040610a80565b6001600160401b031690506106b284821b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161760ff60381b60889290921c919091161790565b6001600160401b03169150505b92915050565b6000836106d38685856106dd565b1495945050505050565b600083516000141580156106fc5750602084516106fa9190610aa9565b155b610719576040516313717da960e21b815260040160405180910390fd5b604080516020808201909252848152905b855181116107b05761073d600285610aa9565b600003610773578151600052808601516020526020826040600060026107d05a03fa61076857600080fd5b60028404935061079e565b8086015160005281516020526020826040600060026107d05a03fa61079757600080fd5b6002840493505b6107a9602082610abd565b905061072a565b5051949350505050565b60008083601f8401126107cc57600080fd5b5081356001600160401b038111156107e357600080fd5b6020830191508360208285010111156107fb57600080fd5b9250929050565b80356001600160401b038116811461081957600080fd5b919050565b60008060008060006080868803121561083657600080fd5b853594506020860135935060408601356001600160401b0381111561085a57600080fd5b610866888289016107ba565b9094509250610879905060608701610802565b90509295509295909350565b6000806000806060858703121561089b57600080fd5b843593506108ab60208601610802565b925060408501356001600160401b038111156108c657600080fd5b6108d2878288016107ba565b95989497509550505050565b600080600080606085870312156108f457600080fd5b843593506020850135925060408501356001600160401b038111156108c657600080fd5b60008060008060008060a0878903121561093157600080fd5b863595506020870135945060408701356001600160401b0381111561095557600080fd5b61096189828a016107ba565b9095509350610974905060608801610802565b915060808701356001600160a01b038116811461099057600080fd5b809150509295509295509295565b602080825260149082015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03831680610a1157610a116109cc565b806001600160401b0384160491505092915050565b602080825260129082015271125b9d985b1a5908189b1bd8dac81c9bdbdd60721b604082015260600190565b60006001600160401b03831680610a6b57610a6b6109cc565b806001600160401b0384160691505092915050565b6001600160401b038181168382160290811690818114610aa257610aa26109e2565b5092915050565b600082610ab857610ab86109cc565b500690565b808201808211156106bf576106bf6109e256fea264697066735822122063c89d938f8411026ef362a17818ac96316a5ccba7e978f2cd18954f4c10a44364736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "params": {
          "balancesContainerProof": "The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the the balances container",
          "beaconBlockRoot": "The root of the beacon block"
        }
      },
      "verifyFirstPendingDepositSlot(bytes32,uint64,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "firstPendingDepositSlotProof": "The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.",
          "slot": "The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice."
        },
        "returns": {
          "isEmptyDepositQueue": "True if the deposit queue is empty, false otherwise"
        }
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint64)": {
        "params": {
          "balanceProof": "The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the Balances container.",
          "validatorBalanceLeaf": "The leaf node containing the validator balance with three other balances.",
          "validatorIndex": "The validator index to verify the balance for"
        },
        "returns": {
          "validatorBalanceGwei": "The balance in Gwei of the validator at the given index"
        }
      },
      "verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "pubKeyHash": "Hash of validator's public key using the Beacon Chain's format",
          "validatorIndex": "The validator index",
          "validatorPubKeyProof": "The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "withdrawalAddress": "The withdrawal address used in the validator's withdrawal credentials"
        }
      }
    },
    "title": "Verifies merkle proofs of beacon chain data.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "notice": "Verifies the balances container to the beacon block root BeaconBlock.state.balances"
      },
      "verifyFirstPendingDepositSlot(bytes32,uint64,bytes)": {
        "notice": "If the deposit queue is not empty, verify the slot of the first pending deposit to the beacon block root BeaconBlock.state.PendingDeposits[0].slot If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]"
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint64)": {
        "notice": "Verifies the validator balance to the root of the Balances container."
      },
      "verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)": {
        "notice": "Verifies the validator public key to the beacon block root BeaconBlock.state.validators[validatorIndex].pubkey"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
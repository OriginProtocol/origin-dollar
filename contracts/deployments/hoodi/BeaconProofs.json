{
  "address": "0xaFd0Ef7c8b54FbEAe05312fd8ffeF05ad69855B4",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidProofLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "withdrawalCredentials",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "amountGwei",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        }
      ],
      "name": "merkleizePendingDeposit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "merkleizeSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balancesContainerProof",
          "type": "bytes"
        }
      ],
      "name": "verifyBalancesContainer",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "firstPendingDepositSlotProof",
          "type": "bytes"
        }
      ],
      "name": "verifyFirstPendingDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEmptyDepositQueue",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pendingDepositsContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pendingDepositRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "pendingDepositIndex",
          "type": "uint32"
        }
      ],
      "name": "verifyPendingDeposit",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pendingDepositsContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "verifyPendingDepositsContainer",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        },
        {
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        }
      ],
      "name": "verifyValidator",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "validatorBalanceLeaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balanceProof",
          "type": "bytes"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        }
      ],
      "name": "verifyValidatorBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validatorBalanceGwei",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        },
        {
          "internalType": "uint64",
          "name": "withdrawableEpoch",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "withdrawableEpochProof",
          "type": "bytes"
        }
      ],
      "name": "verifyValidatorWithdrawable",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb14b247042e444182a0d5e70a452f9367d09d01021f3bf5016cb83ded317234",
  "receipt": {
    "to": null,
    "from": "0xf7749B41db006860cEc0650D18b8013d69C44Eeb",
    "contractAddress": "0xaFd0Ef7c8b54FbEAe05312fd8ffeF05ad69855B4",
    "transactionIndex": 5,
    "gasUsed": "1383721",
    "logsBloom": "0x
    "blockHash": "0x7c5ec9dd31c606b831e8eacf245953fb3ff0a9be222341e166fdd7f68364fc75",
    "transactionHash": "0xdb14b247042e444182a0d5e70a452f9367d09d01021f3bf5016cb83ded317234",
    "logs": [],
    "blockNumber": 1234454,
    "cumulativeGasUsed": "6773004",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "feede9596003ed68e08471a2a7c65887",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidProofLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"amountGwei\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"name\":\"merkleizePendingDeposit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"merkleizeSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balancesContainerProof\",\"type\":\"bytes\"}],\"name\":\"verifyBalancesContainer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"firstPendingDepositSlotProof\",\"type\":\"bytes\"}],\"name\":\"verifyFirstPendingDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEmptyDepositQueue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pendingDepositsContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingDepositRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"pendingDepositIndex\",\"type\":\"uint32\"}],\"name\":\"verifyPendingDeposit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingDepositsContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"verifyPendingDepositsContainer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"verifyValidator\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"validatorBalanceLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balanceProof\",\"type\":\"bytes\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"}],\"name\":\"verifyValidatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorBalanceGwei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"}],\"name\":\"verifyValidatorWithdrawable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"merkleizePendingDeposit(bytes32,bytes,uint64,bytes,uint64)\":{\"params\":{\"amountGwei\":\"The amount of the deposit in Gwei.\",\"pubKeyHash\":\"Hash of validator's public key using the Beacon Chain's format\",\"signature\":\"The 96 byte BLS signature.\",\"slot\":\"The beacon chain slot the deposit was made in.\",\"withdrawalCredentials\":\"The 32 byte withdrawal credentials.\"},\"returns\":{\"_0\":\"root The merkle root of the pending deposit.\"}},\"merkleizeSignature(bytes)\":{\"params\":{\"signature\":\"The 96 byte BLS signature.\"},\"returns\":{\"root\":\"The merkle root of the signature.\"}},\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"params\":{\"balancesContainerProof\":\"The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the the balances container\",\"beaconBlockRoot\":\"The root of the beacon block\"}},\"verifyFirstPendingDeposit(bytes32,uint64,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block.\",\"firstPendingDepositSlotProof\":\"The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.\",\"slot\":\"The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty.\"},\"returns\":{\"isEmptyDepositQueue\":\"True if the deposit queue is empty, false otherwise.\"}},\"verifyPendingDeposit(bytes32,bytes32,bytes,uint32)\":{\"params\":{\"pendingDepositIndex\":\"The pending deposit index in the Pending Deposits container\",\"pendingDepositRoot\":\"The leaf node containing the validator balance with three other balances.\",\"pendingDepositsContainerRoot\":\"The merkle root of the Pending Deposits container.\",\"proof\":\"The merkle proof for the pending deposit root to the Pending Deposits container root. This is 28 witness hashes of 32 bytes each concatenated together starting from the leaf node.\"}},\"verifyPendingDepositsContainer(bytes32,bytes32,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block.\",\"pendingDepositsContainerRoot\":\"The merkle root of the the pending deposits container.\",\"proof\":\"The merkle proof for the pending deposits container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\"}},\"verifyValidator(bytes32,bytes32,bytes,uint40,address)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"proof\":\"The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"pubKeyHash\":\"Hash of validator's public key using the Beacon Chain's format\",\"validatorIndex\":\"The validator index\",\"withdrawalAddress\":\"The withdrawal address used in the validator's withdrawal credentials\"}},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint40)\":{\"params\":{\"balanceProof\":\"The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the Balances container.\",\"validatorBalanceLeaf\":\"The leaf node containing the validator balance with three other balances.\",\"validatorIndex\":\"The validator index to verify the balance for\"},\"returns\":{\"validatorBalanceGwei\":\"The balance in Gwei of the validator at the given index\"}}},\"title\":\"Verifies merkle proofs of beacon chain data.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"merkleizePendingDeposit(bytes32,bytes,uint64,bytes,uint64)\":{\"notice\":\"Merkleizes a beacon chain pending deposit.\"},\"merkleizeSignature(bytes)\":{\"notice\":\"Merkleizes a BLS signature used for validator deposits.\"},\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"notice\":\"Verifies the balances container to the beacon block root BeaconBlock.state.balances\"},\"verifyFirstPendingDeposit(bytes32,uint64,bytes)\":{\"notice\":\"If the deposit queue is not empty, verify the slot of the first pending deposit to the beacon block root. BeaconBlock.state.pendingDeposits[0].slot If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]\"},\"verifyPendingDeposit(bytes32,bytes32,bytes,uint32)\":{\"notice\":\"Verified a pending deposit to the root of the Pending Deposits container.\"},\"verifyPendingDepositsContainer(bytes32,bytes32,bytes)\":{\"notice\":\"Verifies the pending deposits container to the beacon block root. BeaconBlock.state.pendingDeposits\"},\"verifyValidator(bytes32,bytes32,bytes,uint40,address)\":{\"notice\":\"Verifies the validator index is for the given validator public key. Also verify the validator's withdrawal credential points to the withdrawal address. BeaconBlock.state.validators[validatorIndex].pubkey\"},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint40)\":{\"notice\":\"Verifies the validator balance to the root of the Balances container.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/beacon/BeaconProofs.sol\":\"BeaconProofs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/beacon/BeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { BeaconProofsLib } from \\\"./BeaconProofsLib.sol\\\";\\nimport { IBeaconProofs } from \\\"../interfaces/IBeaconProofs.sol\\\";\\n\\n/**\\n * @title Verifies merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\ncontract BeaconProofs is IBeaconProofs {\\n    /// @notice Verifies the validator index is for the given validator public key.\\n    /// Also verify the validator's withdrawal credential points to the withdrawal address.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof,\\n        uint40 validatorIndex,\\n        address withdrawalAddress\\n    ) external view {\\n        BeaconProofsLib.verifyValidator(\\n            beaconBlockRoot,\\n            pubKeyHash,\\n            proof,\\n            validatorIndex,\\n            withdrawalAddress\\n        );\\n    }\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof\\n    ) external view {\\n        BeaconProofsLib.verifyValidatorWithdrawableEpoch(\\n            beaconBlockRoot,\\n            validatorIndex,\\n            withdrawableEpoch,\\n            withdrawableEpochProof\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param balancesContainerRoot The merkle root of the the balances container\\n    /// @param balancesContainerProof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata balancesContainerProof\\n    ) external view {\\n        BeaconProofsLib.verifyBalancesContainer(\\n            beaconBlockRoot,\\n            balancesContainerRoot,\\n            balancesContainerProof\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param balanceProof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint40 validatorIndex\\n    ) external view returns (uint256 validatorBalanceGwei) {\\n        validatorBalanceGwei = BeaconProofsLib.verifyValidatorBalance(\\n            balancesContainerRoot,\\n            validatorBalanceLeaf,\\n            balanceProof,\\n            validatorIndex\\n        );\\n    }\\n\\n    /// @notice Verifies the pending deposits container to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param pendingDepositsContainerRoot The merkle root of the the pending deposits container.\\n    /// @param proof The merkle proof for the pending deposits container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyPendingDepositsContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pendingDepositsContainerRoot,\\n        bytes calldata proof\\n    ) external view {\\n        BeaconProofsLib.verifyPendingDepositsContainer(\\n            beaconBlockRoot,\\n            pendingDepositsContainerRoot,\\n            proof\\n        );\\n    }\\n\\n    /// @notice Verified a pending deposit to the root of the Pending Deposits container.\\n    /// @param pendingDepositsContainerRoot The merkle root of the Pending Deposits container.\\n    /// @param pendingDepositRoot The leaf node containing the validator balance with three other balances.\\n    /// @param proof The merkle proof for the pending deposit root to the Pending Deposits container root.\\n    /// This is 28 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param pendingDepositIndex The pending deposit index in the Pending Deposits container\\n    function verifyPendingDeposit(\\n        bytes32 pendingDepositsContainerRoot,\\n        bytes32 pendingDepositRoot,\\n        bytes calldata proof,\\n        uint32 pendingDepositIndex\\n    ) external view {\\n        BeaconProofsLib.verifyPendingDeposit(\\n            pendingDepositsContainerRoot,\\n            pendingDepositRoot,\\n            proof,\\n            pendingDepositIndex\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty.\\n    /// @param firstPendingDepositSlotProof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) external view returns (bool isEmptyDepositQueue) {\\n        isEmptyDepositQueue = BeaconProofsLib.verifyFirstPendingDeposit(\\n            beaconBlockRoot,\\n            slot,\\n            firstPendingDepositSlotProof\\n        );\\n    }\\n\\n    /// @notice Merkleizes a beacon chain pending deposit.\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param withdrawalCredentials The 32 byte withdrawal credentials.\\n    /// @param amountGwei The amount of the deposit in Gwei.\\n    /// @param signature The 96 byte BLS signature.\\n    /// @param slot The beacon chain slot the deposit was made in.\\n    /// @return root The merkle root of the pending deposit.\\n    function merkleizePendingDeposit(\\n        bytes32 pubKeyHash,\\n        bytes calldata withdrawalCredentials,\\n        uint64 amountGwei,\\n        bytes calldata signature,\\n        uint64 slot\\n    ) external pure returns (bytes32) {\\n        return\\n            BeaconProofsLib.merkleizePendingDeposit(\\n                pubKeyHash,\\n                withdrawalCredentials,\\n                amountGwei,\\n                signature,\\n                slot\\n            );\\n    }\\n\\n    /// @notice Merkleizes a BLS signature used for validator deposits.\\n    /// @param signature The 96 byte BLS signature.\\n    /// @return root The merkle root of the signature.\\n    function merkleizeSignature(bytes calldata signature)\\n        external\\n        pure\\n        returns (bytes32 root)\\n    {\\n        return BeaconProofsLib.merkleizeSignature(signature);\\n    }\\n}\\n\",\"keccak256\":\"0xe541a7dca13bc80259e5c4aa74d474eb16d7ee98a24573eba80e5198592bbdb4\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/BeaconProofsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Merkle } from \\\"./Merkle.sol\\\";\\nimport { Endian } from \\\"./Endian.sol\\\";\\n\\n/**\\n * @title Library to verify merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\nlibrary BeaconProofsLib {\\n    // Known generalized indices in the beacon block\\n    /// @dev BeaconBlock.state.PendingDeposits[0]\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, pending deposits at index 34\\n    /// Pending deposits container: height 28, first deposit at index 0\\n    /// ((2 ^ 3 + 3) * 2 ^ 6 + 34) * 2 ^ 28 + 0 = 198105366528\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX =\\n        198105366528;\\n    /// @dev BeaconBlock.state.PendingDeposits[0].pubkey\\n    /// Pending Deposit container: height 3, pubkey at index 4\\n    /// (((2 ^ 3 + 3) * 2 ^ 6 + 34) * 2 ^ 28 + 0) * 2 ^ 3 + 4  = 1584842932228\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX =\\n        1584842932228;\\n    /// @dev BeaconBlock.state.validators\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, validators at index 11\\n    /// (2 ^ 3 + 3) * 2 ^ 6 + 11 = 715\\n    uint256 internal constant VALIDATORS_CONTAINER_GENERALIZED_INDEX = 715;\\n    /// @dev BeaconBlock.state.balances\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, balances at index 12\\n    /// (2 ^ 3 + 3) * 2 ^ 6 + 12 = 716\\n    uint256 internal constant BALANCES_CONTAINER_GENERALIZED_INDEX = 716;\\n\\n    /// @dev BeaconBlock.state.pendingDeposits\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, balances at index 34\\n    /// (2 ^ 3 + 3) * 2 ^ 6 + 34 = 738\\n    uint256 internal constant PENDING_DEPOSITS_CONTAINER_GENERALIZED_INDEX =\\n        738;\\n\\n    /// @dev Number of bytes in the proof to the first pending deposit.\\n    /// 37 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// 37 * 32 bytes = 1184 bytes\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PROOF_LENGTH = 1184;\\n    /// @dev Number of bytes in the proof from the slot of the first pending deposit to the beacon block root.\\n    /// 40 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0].slot\\n    /// 40 * 32 bytes = 1280 bytes\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_SLOT_PROOF_LENGTH = 1280;\\n\\n    /// @dev Merkle height of the Balances container\\n    /// BeaconBlock.state.balances\\n    uint256 internal constant BALANCES_HEIGHT = 39;\\n    /// @dev Merkle height of the Validators container list\\n    /// BeaconBlock.state.validators\\n    uint256 internal constant VALIDATORS_LIST_HEIGHT = 41;\\n    /// @dev Merkle height of the Pending Deposits container list\\n    /// BeaconBlock.state.pendingDeposits\\n    uint256 internal constant PENDING_DEPOSITS_LIST_HEIGHT = 28;\\n    /// @dev Merkle height of the Validator container\\n    /// BeaconBlock.state.validators[validatorIndex]\\n    uint256 internal constant VALIDATOR_CONTAINER_HEIGHT = 3;\\n\\n    /// @dev Position of the pubkey field in the Validator container.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    /// @dev Position of the withdrawable epoch field in the Validator container.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n\\n    /// @notice Verifies the validator index is for the given validator public key.\\n    /// Also verify the validator's withdrawal credential points to the withdrawal address.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof,\\n        uint40 validatorIndex,\\n        address withdrawalAddress\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.validators[validatorIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_LIST_HEIGHT,\\n            validatorIndex\\n        );\\n        // BeaconBlock.state.validators[validatorIndex].pubkey\\n        generalizedIndex = concatGenIndices(\\n            generalizedIndex,\\n            VALIDATOR_CONTAINER_HEIGHT,\\n            VALIDATOR_PUBKEY_INDEX\\n        );\\n\\n        // Get the withdrawal credentials from the first witness in the pubkey merkle proof.\\n        bytes32 withdrawalCredentialsFromProof = bytes32(proof[:32]);\\n        bytes32 withdrawalCredentials = bytes32(\\n            abi.encodePacked(\\n                bytes1(0x02),\\n                bytes11(0),\\n                address(withdrawalAddress)\\n            )\\n        );\\n\\n        require(\\n            withdrawalCredentialsFromProof == withdrawalCredentials,\\n            \\\"Invalid withdrawal cred\\\"\\n        );\\n\\n        require(\\n            // 53 * 32 bytes = 1696 bytes\\n            proof.length == 1696 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: pubKeyHash,\\n                    index: generalizedIndex\\n                }),\\n            \\\"Invalid validator proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies a validator's withdrawable epoch to the beacon block root\\n    /// for a given validator index.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param validatorIndex The validator index to verify the withdrawable epoch for.\\n    /// @param withdrawableEpoch The withdrawable epoch to verify in big endian uint64 format\\n    /// @param proof The merkle proof for the validator's withdrawable epoch to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyValidatorWithdrawableEpoch(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata proof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.validators[validatorIndex]\\n        uint256 exitEpochGenIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_LIST_HEIGHT,\\n            validatorIndex\\n        );\\n        // BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n        exitEpochGenIndex = concatGenIndices(\\n            exitEpochGenIndex,\\n            VALIDATOR_CONTAINER_HEIGHT,\\n            VALIDATOR_WITHDRAWABLE_EPOCH_INDEX\\n        );\\n\\n        require(\\n            // 53 * 32 bytes = 1696 bytes\\n            proof.length == 1696 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: Endian.toLittleEndianUint64(withdrawableEpoch),\\n                    index: exitEpochGenIndex\\n                }),\\n            \\\"Invalid withdrawable proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root.\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param balancesContainerRoot The merkle root of the the balances container.\\n    /// @param proof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata proof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.balances\\n        require(\\n            // 9 * 32 bytes = 288 bytes\\n            proof.length == 288 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: balancesContainerRoot,\\n                    index: BALANCES_CONTAINER_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid balance container proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param proof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for.\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index.\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata proof,\\n        uint40 validatorIndex\\n    ) internal view returns (uint256 validatorBalanceGwei) {\\n        require(balancesContainerRoot != bytes32(0), \\\"Invalid container root\\\");\\n\\n        // Four balances are stored in each leaf so the validator index is divided by 4\\n        uint64 balanceIndex = validatorIndex / 4;\\n\\n        // Get the index within the balances container, not the Beacon Block\\n        // BeaconBlock.state.balances[balanceIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            1,\\n            BALANCES_HEIGHT,\\n            balanceIndex\\n        );\\n\\n        validatorBalanceGwei = balanceAtIndex(\\n            validatorBalanceLeaf,\\n            validatorIndex\\n        );\\n\\n        require(\\n            // 39 * 32 bytes = 1248 bytes\\n            proof.length == 1248 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: balancesContainerRoot,\\n                    leaf: validatorBalanceLeaf,\\n                    index: generalizedIndex\\n                }),\\n            \\\"Invalid balance proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the pending deposits container to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param pendingDepositsContainerRoot The merkle root of the the pending deposits container.\\n    /// @param proof The merkle proof for the pending deposits container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyPendingDepositsContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pendingDepositsContainerRoot,\\n        bytes calldata proof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.pendingDeposits\\n        require(\\n            // 9 * 32 bytes = 288 bytes\\n            proof.length == 288 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: pendingDepositsContainerRoot,\\n                    index: PENDING_DEPOSITS_CONTAINER_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid deposit container proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies a pending deposit in the pending deposits container.\\n    /// BeaconBlock.state.pendingDeposits[depositIndex]\\n    /// @param pendingDepositsContainerRoot The merkle root of the pending deposits list container\\n    /// @param pendingDepositRoot The merkle root of the pending deposit to verify\\n    /// @param proof The merkle proof for the pending deposit root to the pending deposits list container root.\\n    /// This is 28 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param pendingDepositIndex The index in the pending deposits list container for the deposit to verify.\\n    function verifyPendingDeposit(\\n        bytes32 pendingDepositsContainerRoot,\\n        bytes32 pendingDepositRoot,\\n        bytes calldata proof,\\n        uint32 pendingDepositIndex\\n    ) internal view {\\n        require(pendingDepositsContainerRoot != bytes32(0), \\\"Invalid root\\\");\\n        // ssz-merkleizing a list which has a variable length, an additional\\n        // sha256(pending_deposits_root, pending_deposits_length) operation is done to get the actual pending deposits root\\n        // so the max pending deposit index is 2^(28 - 1)\\n        require(\\n            pendingDepositIndex < 2**(PENDING_DEPOSITS_LIST_HEIGHT - 1),\\n            \\\"Invalid deposit index\\\"\\n        );\\n\\n        // BeaconBlock.state.pendingDeposits[depositIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            1,\\n            PENDING_DEPOSITS_LIST_HEIGHT,\\n            pendingDepositIndex\\n        );\\n\\n        require(\\n            // 28 * 32 bytes = 896 bytes\\n            proof.length == 896 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: pendingDepositsContainerRoot,\\n                    leaf: pendingDepositRoot,\\n                    index: generalizedIndex\\n                }),\\n            \\\"Invalid deposit proof\\\"\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty.\\n    /// @param proof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata proof\\n    ) internal view returns (bool isEmptyDepositQueue) {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // If the deposit queue is empty\\n        if (proof.length == FIRST_PENDING_DEPOSIT_PROOF_LENGTH) {\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: bytes32(0),\\n                    index: FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX\\n                }),\\n                \\\"Invalid empty deposits proof\\\"\\n            );\\n            return true;\\n        }\\n\\n        // Verify the public key of the first pending deposit\\n        // BeaconBlock.state.PendingDeposits[0].slot\\n        require(\\n            proof.length == FIRST_PENDING_DEPOSIT_SLOT_PROOF_LENGTH &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: Endian.toLittleEndianUint64(slot),\\n                    index: FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid deposit slot proof\\\"\\n        );\\n    }\\n\\n    /// @notice Merkleizes a beacon chain pending deposit.\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param withdrawalCredentials The 32 byte withdrawal credentials.\\n    /// @param amountGwei The amount of the deposit in Gwei.\\n    /// @param signature The 96 byte BLS signature.\\n    /// @param slot The beacon chain slot the deposit was made in.\\n    /// @return root The merkle root of the pending deposit.\\n    function merkleizePendingDeposit(\\n        bytes32 pubKeyHash,\\n        bytes calldata withdrawalCredentials,\\n        uint64 amountGwei,\\n        bytes calldata signature,\\n        uint64 slot\\n    ) internal pure returns (bytes32 root) {\\n        bytes32[] memory leaves = new bytes32[](8);\\n        leaves[0] = pubKeyHash;\\n        leaves[1] = bytes32(withdrawalCredentials[:32]);\\n        leaves[2] = Endian.toLittleEndianUint64(amountGwei);\\n        leaves[3] = merkleizeSignature(signature);\\n        leaves[4] = Endian.toLittleEndianUint64(slot);\\n        leaves[5] = bytes32(0);\\n        leaves[6] = bytes32(0);\\n        leaves[7] = bytes32(0);\\n\\n        root = Merkle.merkleizeSha256(leaves);\\n    }\\n\\n    /// @notice Merkleizes a BLS signature used for validator deposits.\\n    /// @param signature The 96 byte BLS signature.\\n    /// @return root The merkle root of the signature.\\n    function merkleizeSignature(bytes calldata signature)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(signature.length == 96, \\\"Invalid signature\\\");\\n\\n        bytes32[] memory leaves = new bytes32[](4);\\n        leaves[0] = bytes32(signature[:32]);\\n        leaves[1] = bytes32(signature[32:64]);\\n        leaves[2] = bytes32(signature[64:96]);\\n        leaves[3] = bytes32(0);\\n\\n        return Merkle.merkleizeSha256(leaves);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///       Internal Helper Functions\\n    ////////////////////////////////////////////////////\\n\\n    function balanceAtIndex(bytes32 validatorBalanceLeaf, uint40 validatorIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return\\n            Endian.fromLittleEndianUint64(\\n                bytes32((uint256(validatorBalanceLeaf) << bitShiftAmount))\\n            );\\n    }\\n\\n    /// @notice Concatenates two beacon chain generalized indices into one.\\n    /// @param genIndex The first generalized index or 1 if calculating for a single container.\\n    /// @param height The merkle tree height of the second container. eg 39 for balances, 41 for validators.\\n    /// @param index The index within the second container. eg the validator index.\\n    /// @return genIndex The concatenated generalized index.\\n    function concatGenIndices(\\n        uint256 genIndex,\\n        uint256 height,\\n        uint256 index\\n    ) internal pure returns (uint256) {\\n        return (genIndex << height) | index;\\n    }\\n}\\n\",\"keccak256\":\"0x767db5d87b9fdf2864268e353ede8c52be74201cd18cffce20f129c14ab3b214\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Library to handle conversion between little-endian and big-endian formats.\\n * @author Origin Protocol Inc\\n */\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits),\\n     * but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum)\\n        internal\\n        pure\\n        returns (uint64 n)\\n    {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        // forgefmt: disable-next-item\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n\\n    function toLittleEndianUint64(uint64 benum)\\n        internal\\n        pure\\n        returns (bytes32 n)\\n    {\\n        // Convert to little-endian by reversing byte order\\n        uint64 reversed = (benum >> 56) |\\n            ((0x00FF000000000000 & benum) >> 40) |\\n            ((0x0000FF0000000000 & benum) >> 24) |\\n            ((0x000000FF00000000 & benum) >> 8) |\\n            ((0x00000000FF000000 & benum) << 8) |\\n            ((0x0000000000FF0000 & benum) << 24) |\\n            ((0x000000000000FF00 & benum) << 40) |\\n            ((0x00000000000000FF & benum) << 56);\\n\\n        // Store the little-endian uint64 in the least significant 64 bits of bytes32\\n        n = bytes32(uint256(reversed));\\n        // Shift to most significant bits\\n        n = n << 192;\\n    }\\n}\\n\",\"keccak256\":\"0x823cc85083bc08271f32602afc45eb62548c51b334da0e19080764e5aa503506\",\"license\":\"MIT\"},\"contracts/beacon/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    error InvalidProofLength();\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            InvalidProofLength()\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                }\\n            }\\n            index = index / 2;\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     * @notice Returns the merkle root of a tree created from a set of leaves using sha256 as its hash function.\\n     *  @param leaves the leaves of the merkle tree\\n     *  @return The computed Merkle root of the tree.\\n     *  @dev A pre-condition to this function is that leaves.length is a power of two.\\n     *  If not, the function will merkleize the inputs incorrectly.\\n     */\\n    function merkleizeSha256(bytes32[] memory leaves)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint256 i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(\\n                abi.encodePacked(leaves[2 * i], leaves[2 * i + 1])\\n            );\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint256 i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(\\n                    abi.encodePacked(layer[2 * i], layer[2 * i + 1])\\n                );\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\\n\",\"keccak256\":\"0xbc4f4d5e06379b03ee535140a6f06addba42fef3578d234c8940a72889c2d898\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IBeaconProofs {\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint40 validatorIndex,\\n        address withdrawalAddress\\n    ) external view;\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof\\n    ) external view;\\n\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerLeaf,\\n        bytes calldata balancesContainerProof\\n    ) external view;\\n\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint40 validatorIndex\\n    ) external view returns (uint256 validatorBalance);\\n\\n    function verifyPendingDepositsContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pendingDepositsContainerRoot,\\n        bytes calldata proof\\n    ) external view;\\n\\n    function verifyPendingDeposit(\\n        bytes32 pendingDepositsContainerRoot,\\n        bytes32 pendingDepositRoot,\\n        bytes calldata proof,\\n        uint32 pendingDepositIndex\\n    ) external view;\\n\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) external view returns (bool isEmptyDepositQueue);\\n\\n    function merkleizePendingDeposit(\\n        bytes32 pubKeyHash,\\n        bytes calldata withdrawalCredentials,\\n        uint64 amountGwei,\\n        bytes calldata signature,\\n        uint64 slot\\n    ) external pure returns (bytes32 root);\\n\\n    function merkleizeSignature(bytes calldata signature)\\n        external\\n        pure\\n        returns (bytes32 root);\\n}\\n\",\"keccak256\":\"0x2b41eae44926d95d71301ddd634efb68ca7ea37d6cd93c17dd252331d62bd41f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806391ad640d1161006657806391ad640d146100f9578063afd62ef01461010c578063afe768871461011f578063d98a556414610132578063f34ad34c1461015557600080fd5b8063258b83d8146100985780632b00e796146100be578063334a88fb146100d35780638a050dd4146100e6575b600080fd5b6100ab6100a636600461115f565b610168565b6040519081526020015b60405180910390f35b6100d16100cc3660046111a0565b61017d565b005b6100d16100e1366004611223565b61018f565b6100d16100f4366004611291565b6101a3565b6100d16101073660046111a0565b6101b0565b6100d161011a366004611304565b6101bc565b6100ab61012d36600461138a565b6101d2565b610145610140366004611429565b6101ef565b60405190151581526020016100b5565b6100ab61016336600461146a565b610206565b6000610174838361021f565b90505b92915050565b61018984848484610365565b50505050565b61019c8585858585610420565b5050505050565b61019c85858585856104f8565b61018984848484610638565b6101ca8686868686866106f3565b505050505050565b60006101e388888888888888610880565b98975050505050505050565b60006101fd858585856109f8565b95945050505050565b60006102158686868686610b66565b9695505050505050565b60006060821461026a5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064015b60405180910390fd5b60408051600480825260a082019092526000916020820160808036833701905050905061029b6020600085876114e7565b6102a491611511565b816000815181106102b7576102b761152f565b6020908102919091018101919091526102d49060409085876114e7565b6102dd91611511565b816001815181106102f0576102f061152f565b60209081029190910101526103096060604085876114e7565b61031291611511565b816002815181106103255761032561152f565b6020026020010181815250506000801b816003815181106103485761034861152f565b60200260200101818152505061035d81610c77565b949350505050565b836103825760405162461bcd60e51b815260040161026190611545565b610120811480156103d457506103d482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102e29050610f10565b6101895760405162461bcd60e51b815260206004820152601f60248201527f496e76616c6964206465706f73697420636f6e7461696e65722070726f6f66006044820152606401610261565b8461043d5760405162461bcd60e51b815260040161026190611545565b600764ffffffffff851666059600000000001760031b176106a0821480156104ac57506104ac83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506104a69150889050610f28565b84610f10565b6101ca5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420776974686472617761626c652070726f6f660000000000006044820152606401610261565b846105345760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081c9bdbdd60a21b6044820152606401610261565b6105406001601c611587565b61054b906002611681565b8163ffffffff16106105975760405162461bcd60e51b8152602060048201526015602482015274092dcecc2d8d2c840c8cae0dee6d2e840d2dcc8caf605b1b6044820152606401610261565b63ffffffff8116631000000017610380831480156105f457506105f484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150859050610f10565b6101ca5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103232b837b9b4ba10383937b7b360591b6044820152606401610261565b836106555760405162461bcd60e51b815260040161026190611545565b610120811480156106a757506106a782828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102cc9050610f10565b6101895760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c616e636520636f6e7461696e65722070726f6f66006044820152606401610261565b856107105760405162461bcd60e51b815260040161026190611545565b64ffffffffff821666059600000000001760031b600061073360208287896114e7565b61073c91611511565b60408051600160f91b60208201526000602182018190526bffffffffffffffffffffffff19606088901b16602c830152929350016040516020818303038152906040526107889061168d565b90508082146107d95760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207769746864726177616c20637265640000000000000000006044820152606401610261565b6106a086148015610829575061082987878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c9150879050610f10565b6108755760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642076616c696461746f722070726f6f660000000000000000006044820152606401610261565b505050505050505050565b6040805160088082526101208201909252600091829190602082016101008036833701905050905088816000815181106108bc576108bc61152f565b6020908102919091018101919091526108d8906000898b6114e7565b6108e191611511565b816001815181106108f4576108f461152f565b60200260200101818152505061090986610f28565b8160028151811061091c5761091c61152f565b602002602001018181525050610932858561021f565b816003815181106109455761094561152f565b60200260200101818152505061095a83610f28565b8160048151811061096d5761096d61152f565b6020026020010181815250506000801b816005815181106109905761099061152f565b6020026020010181815250506000801b816006815181106109b3576109b361152f565b6020026020010181815250506000801b816007815181106109d6576109d661152f565b6020026020010181815250506109eb81610c77565b9998505050505050505050565b600084610a175760405162461bcd60e51b815260040161026190611545565b61049f198201610abc57610a6883838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508a93509150642e200000009050610f10565b610ab45760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420656d707479206465706f736974732070726f6f66000000006044820152606401610261565b50600161035d565b61050082148015610b1a5750610b1a83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250610b0e9150889050610f28565b65017100000004610f10565b61035d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964206465706f73697420736c6f742070726f6f660000000000006044820152606401610261565b600085610bae5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590818dbdb9d185a5b995c881c9bdbdd60521b6044820152606401610261565b6000610bbb6004846116ca565b64ffffffffff1690506480000000008117610bd68785610f9e565b92506104e085148015610c285750610c2886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b9150859050610f10565b610c6c5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103130b630b731b290383937b7b360591b6044820152606401610261565b505095945050505050565b60008060028351610c8891906116f4565b90506000816001600160401b03811115610ca457610ca46114d1565b604051908082528060200260200182016040528015610ccd578160200160208202803683370190505b50905060005b82811015610dca57600285610ce88383611708565b81518110610cf857610cf861152f565b602002602001015186836002610d0e9190611708565b610d1990600161171f565b81518110610d2957610d2961152f565b6020026020010151604051602001610d4b929190918252602082015260400190565b60408051601f1981840301815290829052610d6591611732565b602060405180830381855afa158015610d82573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610da59190611761565b828281518110610db757610db761152f565b6020908102919091010152600101610cd3565b50610dd66002836116f4565b91505b8115610eec5760005b82811015610ed957600282610df78383611708565b81518110610e0757610e0761152f565b602002602001015183836002610e1d9190611708565b610e2890600161171f565b81518110610e3857610e3861152f565b6020026020010151604051602001610e5a929190918252602082015260400190565b60408051601f1981840301815290829052610e7491611732565b602060405180830381855afa158015610e91573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610eb49190611761565b828281518110610ec657610ec661152f565b6020908102919091010152600101610de2565b50610ee56002836116f4565b9150610dd9565b80600081518110610eff57610eff61152f565b602002602001015192505050919050565b600083610f1e86858561103a565b1495945050505050565b603881811c60ff16602883811c61ff001691909117601884811c62ff00001691909117600885811c63ff000000169190911764ff000000009186901b919091161765ff00000000009185901b919091161766ff0000000000009184901b919091161760ff60381b9290911b919091161760c01b90565b600080610fac60048461177a565b610fb79060406117a4565b64ffffffffff16905061102984821b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161760ff60381b60889290921c919091161790565b6001600160401b0316949350505050565b6000835160001415801561105957506020845161105791906117cb565b155b611076576040516313717da960e21b815260040160405180910390fd5b604080516020808201909252848152905b8551811161110d5761109a6002856117cb565b6000036110ca578151600052808601516020526020826040600060026107d05a03fa6110c557600080fd5b6110ee565b8086015160005281516020526020826040600060026107d05a03fa6110ee57600080fd5b6110f96002856116f4565b935061110660208261171f565b9050611087565b5051949350505050565b60008083601f84011261112957600080fd5b5081356001600160401b0381111561114057600080fd5b60208301915083602082850101111561115857600080fd5b9250929050565b6000806020838503121561117257600080fd5b82356001600160401b0381111561118857600080fd5b61119485828601611117565b90969095509350505050565b600080600080606085870312156111b657600080fd5b843593506020850135925060408501356001600160401b038111156111da57600080fd5b6111e687828801611117565b95989497509550505050565b803564ffffffffff8116811461120757600080fd5b919050565b80356001600160401b038116811461120757600080fd5b60008060008060006080868803121561123b57600080fd5b8535945061124b602087016111f2565b93506112596040870161120c565b925060608601356001600160401b0381111561127457600080fd5b61128088828901611117565b969995985093965092949392505050565b6000806000806000608086880312156112a957600080fd5b853594506020860135935060408601356001600160401b038111156112cd57600080fd5b6112d988828901611117565b909450925050606086013563ffffffff811681146112f657600080fd5b809150509295509295909350565b60008060008060008060a0878903121561131d57600080fd5b863595506020870135945060408701356001600160401b0381111561134157600080fd5b61134d89828a01611117565b90955093506113609050606088016111f2565b915060808701356001600160a01b038116811461137c57600080fd5b809150509295509295509295565b600080600080600080600060a0888a0312156113a557600080fd5b8735965060208801356001600160401b038111156113c257600080fd5b6113ce8a828b01611117565b90975095506113e190506040890161120c565b935060608801356001600160401b038111156113fc57600080fd5b6114088a828b01611117565b909450925061141b90506080890161120c565b905092959891949750929550565b6000806000806060858703121561143f57600080fd5b8435935061144f6020860161120c565b925060408501356001600160401b038111156111da57600080fd5b60008060008060006080868803121561148257600080fd5b853594506020860135935060408601356001600160401b038111156114a657600080fd5b6114b288828901611117565b90945092506114c59050606087016111f2565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b600080858511156114f757600080fd5b8386111561150457600080fd5b5050820193919092039150565b8035602083101561017757600019602084900360031b1b1692915050565b634e487b7160e01b600052603260045260246000fd5b602080825260129082015271125b9d985b1a5908189b1bd8dac81c9bdbdd60721b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561017757610177611571565b6001815b60018411156115d5578085048111156115b9576115b9611571565b60018416156115c757908102905b60019390931c92800261159e565b935093915050565b6000826115ec57506001610177565b816115f957506000610177565b816001811461160f576002811461161957611635565b6001915050610177565b60ff84111561162a5761162a611571565b50506001821b610177565b5060208310610133831016604e8410600b8410161715611658575081810a610177565b611665600019848461159a565b806000190482111561167957611679611571565b029392505050565b600061017483836115dd565b805160208083015191908110156116ae576000198160200360031b1b821691505b50919050565b634e487b7160e01b600052601260045260246000fd5b600064ffffffffff8316806116e1576116e16116b4565b8064ffffffffff84160491505092915050565b600082611703576117036116b4565b500490565b808202811582820484141761017757610177611571565b8082018082111561017757610177611571565b6000825160005b818110156117535760208186018101518583015201611739565b506000920191825250919050565b60006020828403121561177357600080fd5b5051919050565b600064ffffffffff831680611791576117916116b4565b8064ffffffffff84160691505092915050565b64ffffffffff81811683821602908116908181146117c4576117c4611571565b5092915050565b6000826117da576117da6116b4565b50069056fea26469706673582212206a80dbe5177bd715baf4b46a1cde549013d49ed94a888bd0447fa1af462c6a6f64736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "merkleizePendingDeposit(bytes32,bytes,uint64,bytes,uint64)": {
        "params": {
          "amountGwei": "The amount of the deposit in Gwei.",
          "pubKeyHash": "Hash of validator's public key using the Beacon Chain's format",
          "signature": "The 96 byte BLS signature.",
          "slot": "The beacon chain slot the deposit was made in.",
          "withdrawalCredentials": "The 32 byte withdrawal credentials."
        },
        "returns": {
          "_0": "root The merkle root of the pending deposit."
        }
      },
      "merkleizeSignature(bytes)": {
        "params": {
          "signature": "The 96 byte BLS signature."
        },
        "returns": {
          "root": "The merkle root of the signature."
        }
      },
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "params": {
          "balancesContainerProof": "The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the the balances container",
          "beaconBlockRoot": "The root of the beacon block"
        }
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block.",
          "firstPendingDepositSlotProof": "The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.",
          "slot": "The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty."
        },
        "returns": {
          "isEmptyDepositQueue": "True if the deposit queue is empty, false otherwise."
        }
      },
      "verifyPendingDeposit(bytes32,bytes32,bytes,uint32)": {
        "params": {
          "pendingDepositIndex": "The pending deposit index in the Pending Deposits container",
          "pendingDepositRoot": "The leaf node containing the validator balance with three other balances.",
          "pendingDepositsContainerRoot": "The merkle root of the Pending Deposits container.",
          "proof": "The merkle proof for the pending deposit root to the Pending Deposits container root. This is 28 witness hashes of 32 bytes each concatenated together starting from the leaf node."
        }
      },
      "verifyPendingDepositsContainer(bytes32,bytes32,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block.",
          "pendingDepositsContainerRoot": "The merkle root of the the pending deposits container.",
          "proof": "The merkle proof for the pending deposits container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node."
        }
      },
      "verifyValidator(bytes32,bytes32,bytes,uint40,address)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "proof": "The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "pubKeyHash": "Hash of validator's public key using the Beacon Chain's format",
          "validatorIndex": "The validator index",
          "withdrawalAddress": "The withdrawal address used in the validator's withdrawal credentials"
        }
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint40)": {
        "params": {
          "balanceProof": "The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the Balances container.",
          "validatorBalanceLeaf": "The leaf node containing the validator balance with three other balances.",
          "validatorIndex": "The validator index to verify the balance for"
        },
        "returns": {
          "validatorBalanceGwei": "The balance in Gwei of the validator at the given index"
        }
      }
    },
    "title": "Verifies merkle proofs of beacon chain data.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "merkleizePendingDeposit(bytes32,bytes,uint64,bytes,uint64)": {
        "notice": "Merkleizes a beacon chain pending deposit."
      },
      "merkleizeSignature(bytes)": {
        "notice": "Merkleizes a BLS signature used for validator deposits."
      },
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "notice": "Verifies the balances container to the beacon block root BeaconBlock.state.balances"
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes)": {
        "notice": "If the deposit queue is not empty, verify the slot of the first pending deposit to the beacon block root. BeaconBlock.state.pendingDeposits[0].slot If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]"
      },
      "verifyPendingDeposit(bytes32,bytes32,bytes,uint32)": {
        "notice": "Verified a pending deposit to the root of the Pending Deposits container."
      },
      "verifyPendingDepositsContainer(bytes32,bytes32,bytes)": {
        "notice": "Verifies the pending deposits container to the beacon block root. BeaconBlock.state.pendingDeposits"
      },
      "verifyValidator(bytes32,bytes32,bytes,uint40,address)": {
        "notice": "Verifies the validator index is for the given validator public key. Also verify the validator's withdrawal credential points to the withdrawal address. BeaconBlock.state.validators[validatorIndex].pubkey"
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint40)": {
        "notice": "Verifies the validator balance to the root of the Balances container."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
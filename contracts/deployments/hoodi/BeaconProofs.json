{
  "address": "0x0b24D24d583e83F3405De16c27e5aE36E2214ab3",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidProofLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balancesContainerProof",
          "type": "bytes"
        }
      ],
      "name": "verifyBalancesContainer",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "firstPendingDepositPubKeyProof",
          "type": "bytes"
        }
      ],
      "name": "verifyFirstPendingDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEmptyDepositQueue",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "firstPendingDepositSlotProof",
          "type": "bytes"
        }
      ],
      "name": "verifyFirstPendingDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEmptyDepositQueue",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        },
        {
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        }
      ],
      "name": "verifyValidator",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "validatorBalanceLeaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balanceProof",
          "type": "bytes"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        }
      ],
      "name": "verifyValidatorBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validatorBalanceGwei",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        },
        {
          "internalType": "uint64",
          "name": "withdrawableEpoch",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "withdrawableEpochProof",
          "type": "bytes"
        }
      ],
      "name": "verifyValidatorWithdrawable",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "withdrawableEpoch",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "withdrawableEpochProof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "validatorPubKeyProof",
          "type": "bytes"
        }
      ],
      "name": "verifyValidatorWithdrawable",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xab96e6cfe3aec1cd35c4881fc36347789cb738652b7f6627951ca616022a186c",
  "receipt": {
    "to": null,
    "from": "0xf7749B41db006860cEc0650D18b8013d69C44Eeb",
    "contractAddress": "0x0b24D24d583e83F3405De16c27e5aE36E2214ab3",
    "transactionIndex": 18,
    "gasUsed": "1025287",
    "logsBloom": "0x
    "blockHash": "0x4905aabcb1aa6194afa6a92a9ecdb5f786478fe7aa78a3d1516c39ed010b3b0c",
    "transactionHash": "0xab96e6cfe3aec1cd35c4881fc36347789cb738652b7f6627951ca616022a186c",
    "logs": [],
    "blockNumber": 1108795,
    "cumulativeGasUsed": "11948626",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "a4cf2397e59aecfd08078ec66ccb9b2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidProofLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balancesContainerProof\",\"type\":\"bytes\"}],\"name\":\"verifyBalancesContainer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"firstPendingDepositPubKeyProof\",\"type\":\"bytes\"}],\"name\":\"verifyFirstPendingDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEmptyDepositQueue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"firstPendingDepositSlotProof\",\"type\":\"bytes\"}],\"name\":\"verifyFirstPendingDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEmptyDepositQueue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"verifyValidator\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"validatorBalanceLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balanceProof\",\"type\":\"bytes\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"}],\"name\":\"verifyValidatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorBalanceGwei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"},{\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"}],\"name\":\"verifyValidatorWithdrawable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"validatorPubKeyProof\",\"type\":\"bytes\"}],\"name\":\"verifyValidatorWithdrawable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"params\":{\"balancesContainerProof\":\"The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the the balances container\",\"beaconBlockRoot\":\"The root of the beacon block\"}},\"verifyFirstPendingDeposit(bytes32,uint64,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block.\",\"firstPendingDepositSlotProof\":\"The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.\",\"slot\":\"The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice.\"},\"returns\":{\"isEmptyDepositQueue\":\"True if the deposit queue is empty, false otherwise.\"}},\"verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block.\",\"firstPendingDepositPubKeyProof\":\"The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.\",\"pubKeyHash\":\"The hash of the validator public key for the first pending deposit. Use zero bytes if the deposit queue is empty.\",\"slot\":\"The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice.\"},\"returns\":{\"isEmptyDepositQueue\":\"True if the deposit queue is empty, false otherwise.\"}},\"verifyValidator(bytes32,bytes32,bytes,uint40,address)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"proof\":\"The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"pubKeyHash\":\"Hash of validator's public key using the Beacon Chain's format\",\"validatorIndex\":\"The validator index\",\"withdrawalAddress\":\"The withdrawal address used in the validator's withdrawal credentials\"}},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint40)\":{\"params\":{\"balanceProof\":\"The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the Balances container.\",\"validatorBalanceLeaf\":\"The leaf node containing the validator balance with three other balances.\",\"validatorIndex\":\"The validator index to verify the balance for\"},\"returns\":{\"validatorBalanceGwei\":\"The balance in Gwei of the validator at the given index\"}},\"verifyValidatorWithdrawable(bytes32,uint40,bytes32,uint64,bytes,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"validatorIndex\":\"The validator index to verify the withdrawable epoch for.\",\"validatorPubKeyProof\":\"The merkle proof for the validator public key in a sub tree of height two. This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"withdrawableEpoch\":\"The withdrawable epoch to verify in big endian uint64 format\",\"withdrawableEpochProof\":\"The merkle proof for the validator's withdrawable epoch to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\"}}},\"title\":\"Verifies merkle proofs of beacon chain data.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"notice\":\"Verifies the balances container to the beacon block root BeaconBlock.state.balances\"},\"verifyFirstPendingDeposit(bytes32,uint64,bytes)\":{\"notice\":\"If the deposit queue is not empty, verify the slot of the first pending deposit to the beacon block root. BeaconBlock.state.pendingDeposits[0].slot If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]\"},\"verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)\":{\"notice\":\"If the deposit queue is not empty, verify the pubKey and slot of the first pending deposit to the beacon block root. BeaconBlock.state.PendingDeposits[0].pubKey If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]\"},\"verifyValidator(bytes32,bytes32,bytes,uint40,address)\":{\"notice\":\"Verifies the validator index is for the given validator public key. Also verify the validator's withdrawal credential points to the withdrawal address. BeaconBlock.state.validators[validatorIndex].pubkey\"},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint40)\":{\"notice\":\"Verifies the validator balance to the root of the Balances container.\"},\"verifyValidatorWithdrawable(bytes32,uint40,bytes32,uint64,bytes,bytes)\":{\"notice\":\"Verifies a validator's withdrawable epoch to the beacon block root for a given validator index. Also verifies the validator's public key for the given validator index. BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/beacon/BeaconProofs.sol\":\"BeaconProofs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/beacon/BeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { BeaconProofsLib } from \\\"./BeaconProofsLib.sol\\\";\\nimport { IBeaconProofs } from \\\"../interfaces/IBeaconProofs.sol\\\";\\n\\n/**\\n * @title Verifies merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\ncontract BeaconProofs is IBeaconProofs {\\n    /// @notice Verifies the validator index is for the given validator public key.\\n    /// Also verify the validator's withdrawal credential points to the withdrawal address.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof,\\n        uint40 validatorIndex,\\n        address withdrawalAddress\\n    ) external view {\\n        BeaconProofsLib.verifyValidator(\\n            beaconBlockRoot,\\n            pubKeyHash,\\n            proof,\\n            validatorIndex,\\n            withdrawalAddress\\n        );\\n    }\\n\\n    /// @notice Verifies a validator's withdrawable epoch to the beacon block root\\n    /// for a given validator index.\\n    /// Also verifies the validator's public key for the given validator index.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param validatorIndex The validator index to verify the withdrawable epoch for.\\n    /// @param withdrawableEpoch The withdrawable epoch to verify in big endian uint64 format\\n    /// @param withdrawableEpochProof The merkle proof for the validator's withdrawable epoch to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorPubKeyProof The merkle proof for the validator public key in a sub tree of height two.\\n    /// This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        bytes32 pubKeyHash,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof,\\n        bytes calldata validatorPubKeyProof\\n    ) external view {\\n        BeaconProofsLib.verifyValidatorWithdrawableEpoch(\\n            beaconBlockRoot,\\n            validatorIndex,\\n            withdrawableEpoch,\\n            withdrawableEpochProof\\n        );\\n\\n        // Get the third 32 byte witness from the withdrawable epoch proof\\n        // 2 * 32 bytes = 64 bytes offset\\n        bytes32 subTreeRoot = bytes32(withdrawableEpochProof[64:96]);\\n\\n        BeaconProofsLib.verifyValidatorPubKeySubTree(\\n            subTreeRoot,\\n            pubKeyHash,\\n            validatorPubKeyProof\\n        );\\n    }\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof\\n    ) external view {\\n        BeaconProofsLib.verifyValidatorWithdrawableEpoch(\\n            beaconBlockRoot,\\n            validatorIndex,\\n            withdrawableEpoch,\\n            withdrawableEpochProof\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param balancesContainerRoot The merkle root of the the balances container\\n    /// @param balancesContainerProof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata balancesContainerProof\\n    ) external view {\\n        BeaconProofsLib.verifyBalancesContainer(\\n            beaconBlockRoot,\\n            balancesContainerRoot,\\n            balancesContainerProof\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param balanceProof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint40 validatorIndex\\n    ) external view returns (uint256 validatorBalanceGwei) {\\n        validatorBalanceGwei = BeaconProofsLib.verifyValidatorBalance(\\n            balancesContainerRoot,\\n            validatorBalanceLeaf,\\n            balanceProof,\\n            validatorIndex\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the pubKey and slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.PendingDeposits[0].pubKey\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param pubKeyHash The hash of the validator public key for the first pending deposit.\\n    /// Use zero bytes if the deposit queue is empty.\\n    /// @param firstPendingDepositPubKeyProof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes32 pubKeyHash,\\n        bytes calldata firstPendingDepositPubKeyProof\\n    ) external view returns (bool isEmptyDepositQueue) {\\n        isEmptyDepositQueue = BeaconProofsLib.verifyFirstPendingDeposit(\\n            beaconBlockRoot,\\n            slot,\\n            pubKeyHash,\\n            firstPendingDepositPubKeyProof\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param firstPendingDepositSlotProof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) external view returns (bool isEmptyDepositQueue) {\\n        isEmptyDepositQueue = BeaconProofsLib.verifyFirstPendingDeposit(\\n            beaconBlockRoot,\\n            slot,\\n            firstPendingDepositSlotProof\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa95f4206e0df38bc2a44769bd2989c21c27b2ff7427f9dbc10406304050a72cc\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/BeaconProofsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Merkle } from \\\"./Merkle.sol\\\";\\nimport { Endian } from \\\"./Endian.sol\\\";\\n\\n/**\\n * @title Library to verify merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\nlibrary BeaconProofsLib {\\n    // Known generalized indices in the beacon block\\n    /// @dev BeaconBlock.state.PendingDeposits[0]\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, pending deposits at index 34\\n    /// Pending deposits container: height 28, first deposit at index 0\\n    /// ((2 ^ 3 + 3) * 2 ^ 6 + 34) * 2 ^ 28 + 0 = 198105366528\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX =\\n        198105366528;\\n    /// @dev BeaconBlock.state.PendingDeposits[0].pubkey\\n    /// Pending Deposit container: height 3, pubkey at index 0\\n    /// (((2 ^ 3 + 3) * 2 ^ 6 + 34) * 2 ^ 28 + 0) * 2 ^ 3 + 0  = 1584842932224\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PUBKEY_GENERALIZED_INDEX =\\n        1584842932224;\\n    /// @dev BeaconBlock.state.PendingDeposits[0].pubkey\\n    /// Pending Deposit container: height 3, pubkey at index 4\\n    /// (((2 ^ 3 + 3) * 2 ^ 6 + 34) * 2 ^ 28 + 0) * 2 ^ 3 + 4  = 1584842932228\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX =\\n        1584842932228;\\n    /// @dev BeaconBlock.state.validators\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, validators at index 11\\n    /// (2 ^ 3 + 3) * 2 ^ 6 + 11 = 715\\n    uint256 internal constant VALIDATORS_CONTAINER_GENERALIZED_INDEX = 715;\\n    /// @dev BeaconBlock.state.balances\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, balances at index 13\\n    /// (2 ^ 3 + 3) * 2 ^ 6 + 13 = 716\\n    uint256 internal constant BALANCES_CONTAINER_GENERALIZED_INDEX = 716;\\n\\n    /// @dev Number of bytes in the proof to the first pending deposit.\\n    /// 37 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// 37 * 32 bytes = 1184 bytes\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PROOF_LENGTH = 1184;\\n    /// @dev Number of bytes in the proof from the pubKey of the first pending deposit to the beacon block root.\\n    /// 40 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0].pubKey\\n    /// 40 * 32 bytes = 1280 bytes\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PUBKEY_PROOF_LENGTH = 1280;\\n    /// @dev Number of bytes in the proof from the slot of the first pending deposit to the beacon block root.\\n    /// 40 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0].slot\\n    /// 40 * 32 bytes = 1280 bytes\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_SLOT_PROOF_LENGTH = 1280;\\n    /// The slot is at index 4 in the Pending Deposits container.\\n    /// The sub tree from the right node from the root is a tree of height 2.\\n    /// The first 32 bytes witness is an empty bytes32 as there are\\n    /// no items after the slot in the Pending Deposits container.\\n    /// The second 32 bytes witness is a hash or two empty bytes32.\\n    bytes internal constant PENDING_DEPOSIT_SLOT_PROOF =\\n        // solhint-disable-next-line max-line-length\\n        hex\\\"0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b\\\";\\n\\n    /// @dev Merkle height of the Balances container\\n    /// BeaconBlock.state.balances\\n    uint256 internal constant BALANCES_HEIGHT = 39;\\n    /// @dev Merkle height of the Validators container list\\n    /// BeaconBlock.state.validators\\n    uint256 internal constant VALIDATORS_LIST_HEIGHT = 41;\\n    /// @dev Merkle height of the Validator container\\n    /// BeaconBlock.state.validators[validatorIndex]\\n    uint256 internal constant VALIDATOR_CONTAINER_HEIGHT = 3;\\n\\n    /// @dev Position of the pubkey field in the Validator container.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    /// @dev Position of the withdrawable epoch field in the Validator container.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n\\n    /// @notice Verifies the validator index is for the given validator public key.\\n    /// Also verify the validator's withdrawal credential points to the withdrawal address.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof,\\n        uint40 validatorIndex,\\n        address withdrawalAddress\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.validators[validatorIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_LIST_HEIGHT,\\n            validatorIndex\\n        );\\n        // BeaconBlock.state.validators[validatorIndex].pubkey\\n        generalizedIndex = concatGenIndices(\\n            generalizedIndex,\\n            VALIDATOR_CONTAINER_HEIGHT,\\n            VALIDATOR_PUBKEY_INDEX\\n        );\\n\\n        // Get the withdrawal address from the first witness in the pubkey merkle proof.\\n        address withdrawalAddressFromProof;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // The first 32 bytes of the proof is the withdrawal credential so load it into memory.\\n            calldatacopy(0, proof.offset, 32)\\n            // Cast the 32 bytes in memory to an address which is the last 20 bytes.\\n            withdrawalAddressFromProof := mload(0)\\n        }\\n        require(\\n            withdrawalAddressFromProof == withdrawalAddress,\\n            \\\"Invalid withdrawal address\\\"\\n        );\\n        require(proof[0] == 0x02, \\\"Invalid validator type\\\");\\n\\n        require(\\n            // 53 * 32 bytes = 1696 bytes\\n            proof.length == 1696 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: pubKeyHash,\\n                    index: generalizedIndex\\n                }),\\n            \\\"Invalid validator proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies a validator's withdrawable epoch to the beacon block root\\n    /// for a given validator index.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param validatorIndex The validator index to verify the withdrawable epoch for.\\n    /// @param withdrawableEpoch The withdrawable epoch to verify in big endian uint64 format\\n    /// @param proof The merkle proof for the validator's withdrawable epoch to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyValidatorWithdrawableEpoch(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata proof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.validators[validatorIndex]\\n        uint256 exitEpochGenIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_LIST_HEIGHT,\\n            validatorIndex\\n        );\\n        // BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n        exitEpochGenIndex = concatGenIndices(\\n            exitEpochGenIndex,\\n            VALIDATOR_CONTAINER_HEIGHT,\\n            VALIDATOR_WITHDRAWABLE_EPOCH_INDEX\\n        );\\n\\n        require(\\n            // 53 * 32 bytes = 1696 bytes\\n            proof.length == 1696 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: Endian.toLittleEndianUint64(withdrawableEpoch),\\n                    index: exitEpochGenIndex\\n                }),\\n            \\\"Invalid withdrawable proof\\\"\\n        );\\n    }\\n\\n    /// @param subTreeRoot The third 32 byte witness from the withdrawable epoch proof\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key in a sub tree of height two.\\n    /// This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyValidatorPubKeySubTree(\\n        bytes32 subTreeRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof\\n    ) internal view {\\n        // Tree height 2 and pub key is at index 0\\n        // index = 2 ^ 2 + 0 = 4\\n        require(\\n            // 2 * 32 bytes = 64 bytes\\n            proof.length == 64 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: subTreeRoot,\\n                    leaf: pubKeyHash,\\n                    index: 4\\n                }),\\n            \\\"Invalid pub key proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root.\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param balancesContainerRoot The merkle root of the the balances container.\\n    /// @param proof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata proof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.balances\\n        require(\\n            // 9 * 32 bytes = 288 bytes\\n            proof.length == 288 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: balancesContainerRoot,\\n                    index: BALANCES_CONTAINER_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid balance container proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param proof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for.\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index.\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata proof,\\n        uint40 validatorIndex\\n    ) internal view returns (uint256 validatorBalanceGwei) {\\n        require(balancesContainerRoot != bytes32(0), \\\"Invalid container root\\\");\\n\\n        // Four balances are stored in each leaf so the validator index is divided by 4\\n        uint64 balanceIndex = validatorIndex / 4;\\n\\n        // Get the index within the balances container, not the Beacon Block\\n        // BeaconBlock.state.balances[balanceIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            1,\\n            BALANCES_HEIGHT,\\n            balanceIndex\\n        );\\n\\n        validatorBalanceGwei = balanceAtIndex(\\n            validatorBalanceLeaf,\\n            validatorIndex\\n        );\\n\\n        require(\\n            // 39 * 32 bytes = 1248 bytes\\n            proof.length == 1248 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: balancesContainerRoot,\\n                    leaf: validatorBalanceLeaf,\\n                    index: generalizedIndex\\n                }),\\n            \\\"Invalid balance proof\\\"\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the pubKey and slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits[0].pubKey\\n    /// BeaconBlock.state.pendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param pubKeyHash The hash of the validator public key for the first pending deposit.\\n    /// Use zero bytes if the deposit queue is empty.\\n    /// @param proof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof\\n    ) internal view returns (bool isEmptyDepositQueue) {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // If the deposit queue is empty\\n        if (proof.length == FIRST_PENDING_DEPOSIT_PROOF_LENGTH) {\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: bytes32(0),\\n                    index: FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX\\n                }),\\n                \\\"Invalid empty deposits proof\\\"\\n            );\\n            return true;\\n        }\\n\\n        // Verify the public key of the first pending deposit\\n        // BeaconBlock.state.PendingDeposits[0].pubKey\\n        require(\\n            proof.length == FIRST_PENDING_DEPOSIT_PUBKEY_PROOF_LENGTH &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: pubKeyHash,\\n                    index: FIRST_PENDING_DEPOSIT_PUBKEY_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid deposit pub key proof\\\"\\n        );\\n\\n        // Now verify the slot of the first pending deposit\\n\\n        // Get the third 32 bytes witness from the first pending deposit pubKey proof\\n        // 2 * 32 bytes = 64 bytes offset\\n        bytes32 slotRoot = bytes32(proof[64:96]);\\n\\n        // Sub tree height 2 and slot is at index 0 in the sub tree\\n        // index = 2 ^ 2 + 0 = 4\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: PENDING_DEPOSIT_SLOT_PROOF,\\n                root: slotRoot,\\n                leaf: Endian.toLittleEndianUint64(slot),\\n                index: 4\\n            }),\\n            \\\"Invalid deposit slot\\\"\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param proof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata proof\\n    ) internal view returns (bool isEmptyDepositQueue) {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // If the deposit queue is empty\\n        if (proof.length == FIRST_PENDING_DEPOSIT_PROOF_LENGTH) {\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: bytes32(0),\\n                    index: FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX\\n                }),\\n                \\\"Invalid empty deposits proof\\\"\\n            );\\n            return true;\\n        }\\n\\n        // Verify the public key of the first pending deposit\\n        // BeaconBlock.state.PendingDeposits[0].slot\\n        require(\\n            proof.length == FIRST_PENDING_DEPOSIT_SLOT_PROOF_LENGTH &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: Endian.toLittleEndianUint64(slot),\\n                    index: FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid deposit slot proof\\\"\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///       Internal Helper Functions\\n    ////////////////////////////////////////////////////\\n\\n    function balanceAtIndex(bytes32 validatorBalanceLeaf, uint40 validatorIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return\\n            Endian.fromLittleEndianUint64(\\n                bytes32((uint256(validatorBalanceLeaf) << bitShiftAmount))\\n            );\\n    }\\n\\n    /// @notice Concatenates two beacon chain generalized indices into one.\\n    /// @param genIndex The first generalized index or 1 if calculating for a single container.\\n    /// @param height The merkle tree height of the second container. eg 39 for balances, 41 for validators.\\n    /// @param index The index within the second container. eg the validator index.\\n    /// @return genIndex The concatenated generalized index.\\n    function concatGenIndices(\\n        uint256 genIndex,\\n        uint256 height,\\n        uint256 index\\n    ) internal pure returns (uint256) {\\n        return (genIndex << height) | index;\\n    }\\n}\\n\",\"keccak256\":\"0x4eadcc8ed7c8076fd4ace84398a6f509b402c08c9c7cef073f3b1faa1dc287f6\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Library to handle conversion between little-endian and big-endian formats.\\n * @author Origin Protocol Inc\\n */\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits),\\n     * but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum)\\n        internal\\n        pure\\n        returns (uint64 n)\\n    {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        // forgefmt: disable-next-item\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n\\n    function toLittleEndianUint64(uint64 benum)\\n        internal\\n        pure\\n        returns (bytes32 n)\\n    {\\n        // Convert to little-endian by reversing byte order\\n        uint64 reversed = (benum >> 56) |\\n            ((0x00FF000000000000 & benum) >> 40) |\\n            ((0x0000FF0000000000 & benum) >> 24) |\\n            ((0x000000FF00000000 & benum) >> 8) |\\n            ((0x00000000FF000000 & benum) << 8) |\\n            ((0x0000000000FF0000 & benum) << 24) |\\n            ((0x000000000000FF00 & benum) << 40) |\\n            ((0x00000000000000FF & benum) << 56);\\n\\n        // Store the little-endian uint64 in the least significant 64 bits of bytes32\\n        n = bytes32(uint256(reversed));\\n        // Shift to most significant bits\\n        n = n << 192;\\n    }\\n}\\n\",\"keccak256\":\"0x823cc85083bc08271f32602afc45eb62548c51b334da0e19080764e5aa503506\",\"license\":\"MIT\"},\"contracts/beacon/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    error InvalidProofLength();\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            InvalidProofLength()\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                }\\n            }\\n            index = index / 2;\\n        }\\n        return computedHash[0];\\n    }\\n}\\n\",\"keccak256\":\"0xe2294de73986df81a1bc3642e945a5fa3b077fee75999c436860bd608e838cfc\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IBeaconProofs {\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint40 validatorIndex,\\n        address withdrawalAddress\\n    ) external view;\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        bytes32 pubKeyHash,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof,\\n        bytes calldata validatorPubKeyProof\\n    ) external view;\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint40 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof\\n    ) external view;\\n\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerLeaf,\\n        bytes calldata balancesContainerProof\\n    ) external view;\\n\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint40 validatorIndex\\n    ) external view returns (uint256 validatorBalance);\\n\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes32 pubKeyHash,\\n        bytes calldata firstPendingDepositPubKeyProof\\n    ) external view returns (bool isEmptyDepositQueue);\\n\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) external view returns (bool isEmptyDepositQueue);\\n}\\n\",\"keccak256\":\"0x78359f9f351d1b685d41a63862f8f2f99e7ae3f1665fc0f49492d8193fc4b6fa\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "params": {
          "balancesContainerProof": "The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the the balances container",
          "beaconBlockRoot": "The root of the beacon block"
        }
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block.",
          "firstPendingDepositSlotProof": "The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].slot when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.",
          "slot": "The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice."
        },
        "returns": {
          "isEmptyDepositQueue": "True if the deposit queue is empty, false otherwise."
        }
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block.",
          "firstPendingDepositPubKeyProof": "The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.",
          "pubKeyHash": "The hash of the validator public key for the first pending deposit. Use zero bytes if the deposit queue is empty.",
          "slot": "The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice."
        },
        "returns": {
          "isEmptyDepositQueue": "True if the deposit queue is empty, false otherwise."
        }
      },
      "verifyValidator(bytes32,bytes32,bytes,uint40,address)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "proof": "The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "pubKeyHash": "Hash of validator's public key using the Beacon Chain's format",
          "validatorIndex": "The validator index",
          "withdrawalAddress": "The withdrawal address used in the validator's withdrawal credentials"
        }
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint40)": {
        "params": {
          "balanceProof": "The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the Balances container.",
          "validatorBalanceLeaf": "The leaf node containing the validator balance with three other balances.",
          "validatorIndex": "The validator index to verify the balance for"
        },
        "returns": {
          "validatorBalanceGwei": "The balance in Gwei of the validator at the given index"
        }
      },
      "verifyValidatorWithdrawable(bytes32,uint40,bytes32,uint64,bytes,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "validatorIndex": "The validator index to verify the withdrawable epoch for.",
          "validatorPubKeyProof": "The merkle proof for the validator public key in a sub tree of height two. This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "withdrawableEpoch": "The withdrawable epoch to verify in big endian uint64 format",
          "withdrawableEpochProof": "The merkle proof for the validator's withdrawable epoch to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node."
        }
      }
    },
    "title": "Verifies merkle proofs of beacon chain data.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "notice": "Verifies the balances container to the beacon block root BeaconBlock.state.balances"
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes)": {
        "notice": "If the deposit queue is not empty, verify the slot of the first pending deposit to the beacon block root. BeaconBlock.state.pendingDeposits[0].slot If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]"
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)": {
        "notice": "If the deposit queue is not empty, verify the pubKey and slot of the first pending deposit to the beacon block root. BeaconBlock.state.PendingDeposits[0].pubKey If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]"
      },
      "verifyValidator(bytes32,bytes32,bytes,uint40,address)": {
        "notice": "Verifies the validator index is for the given validator public key. Also verify the validator's withdrawal credential points to the withdrawal address. BeaconBlock.state.validators[validatorIndex].pubkey"
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint40)": {
        "notice": "Verifies the validator balance to the root of the Balances container."
      },
      "verifyValidatorWithdrawable(bytes32,uint40,bytes32,uint64,bytes,bytes)": {
        "notice": "Verifies a validator's withdrawable epoch to the beacon block root for a given validator index. Also verifies the validator's public key for the given validator index. BeaconBlock.state.validators[validatorIndex].withdrawableEpoch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
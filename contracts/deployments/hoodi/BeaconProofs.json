{
  "address": "0x7F3f8fD57c794e5AE83DADa5c1D9cE185c7bB33D",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidProofLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balancesContainerProof",
          "type": "bytes"
        }
      ],
      "name": "verifyBalancesContainer",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "firstPendingDepositProof",
          "type": "bytes"
        }
      ],
      "name": "verifyFirstPendingDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEmptyDepositQueue",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        }
      ],
      "name": "verifyValidator",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "validatorBalanceLeaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balanceProof",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        }
      ],
      "name": "verifyValidatorBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validatorBalanceGwei",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "withdrawableEpoch",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "withdrawableEpochProof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "validatorPubKeyProof",
          "type": "bytes"
        }
      ],
      "name": "verifyValidatorWithdrawable",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "withdrawableEpoch",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "withdrawableEpochProof",
          "type": "bytes"
        }
      ],
      "name": "verifyValidatorWithdrawable",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64be3fac31d4818a3d5603052c61093a2db629124f9be5f82fc10d49c251770a",
  "receipt": {
    "to": null,
    "from": "0xf7749B41db006860cEc0650D18b8013d69C44Eeb",
    "contractAddress": "0x7F3f8fD57c794e5AE83DADa5c1D9cE185c7bB33D",
    "transactionIndex": 15,
    "gasUsed": "883541",
    "logsBloom": "0x
    "blockHash": "0x64754df4f1b09f22f4725abad1ae013aaab08c056836d4cbc1b80735eb278fb9",
    "transactionHash": "0x64be3fac31d4818a3d5603052c61093a2db629124f9be5f82fc10d49c251770a",
    "logs": [],
    "blockNumber": 1062002,
    "cumulativeGasUsed": "6090123",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "591dbf810f743105fcf16d59a6f0c2f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidProofLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balancesContainerProof\",\"type\":\"bytes\"}],\"name\":\"verifyBalancesContainer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"firstPendingDepositProof\",\"type\":\"bytes\"}],\"name\":\"verifyFirstPendingDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEmptyDepositQueue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"verifyValidator\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"validatorBalanceLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balanceProof\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"}],\"name\":\"verifyValidatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorBalanceGwei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"validatorPubKeyProof\",\"type\":\"bytes\"}],\"name\":\"verifyValidatorWithdrawable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"}],\"name\":\"verifyValidatorWithdrawable\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"params\":{\"balancesContainerProof\":\"The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the the balances container\",\"beaconBlockRoot\":\"The root of the beacon block\"}},\"verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"firstPendingDepositProof\":\"The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.\",\"pubKeyHash\":\"The hash of the validator public key for the first pending deposit. Use zero bytes if the deposit queue is empty.\",\"slot\":\"The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice.\"},\"returns\":{\"isEmptyDepositQueue\":\"True if the deposit queue is empty, false otherwise\"}},\"verifyValidator(bytes32,bytes32,bytes,uint64,address)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"proof\":\"The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"pubKeyHash\":\"Hash of validator's public key using the Beacon Chain's format\",\"validatorIndex\":\"The validator index\",\"withdrawalAddress\":\"The withdrawal address used in the validator's withdrawal credentials\"}},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint64)\":{\"params\":{\"balanceProof\":\"The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the Balances container.\",\"validatorBalanceLeaf\":\"The leaf node containing the validator balance with three other balances.\",\"validatorIndex\":\"The validator index to verify the balance for\"},\"returns\":{\"validatorBalanceGwei\":\"The balance in Gwei of the validator at the given index\"}},\"verifyValidatorWithdrawable(bytes32,uint64,bytes32,uint64,bytes,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"validatorIndex\":\"The validator index to verify the withdrawable epoch for.\",\"validatorPubKeyProof\":\"The merkle proof for the validator public key in a sub tree of height two. This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"withdrawableEpoch\":\"The withdrawable epoch to verify in big endian uint64 format\",\"withdrawableEpochProof\":\"The merkle proof for the validator's withdrawable epoch to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\"}}},\"title\":\"Verifies merkle proofs of beacon chain data.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"notice\":\"Verifies the balances container to the beacon block root BeaconBlock.state.balances\"},\"verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)\":{\"notice\":\"If the deposit queue is not empty, verify the pubKey and slot of the first pending deposit to the beacon block root. BeaconBlock.state.PendingDeposits[0].pubKey If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]\"},\"verifyValidator(bytes32,bytes32,bytes,uint64,address)\":{\"notice\":\"Verifies the validator index is for the given validator public key. Also verify the validator's withdrawal credential points to the withdrawal address. BeaconBlock.state.validators[validatorIndex].pubkey\"},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint64)\":{\"notice\":\"Verifies the validator balance to the root of the Balances container.\"},\"verifyValidatorWithdrawable(bytes32,uint64,bytes32,uint64,bytes,bytes)\":{\"notice\":\"Verifies a validator's withdrawable epoch to the beacon block root for a given validator index. Also verifies the validator's public key for the given validator index. BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/beacon/BeaconProofs.sol\":\"BeaconProofs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/beacon/BeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { BeaconProofsLib } from \\\"./BeaconProofsLib.sol\\\";\\nimport { IBeaconProofs } from \\\"../interfaces/IBeaconProofs.sol\\\";\\n\\n/**\\n * @title Verifies merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\ncontract BeaconProofs is IBeaconProofs {\\n    /// @notice Verifies the validator index is for the given validator public key.\\n    /// Also verify the validator's withdrawal credential points to the withdrawal address.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) external view {\\n        BeaconProofsLib.verifyValidator(\\n            beaconBlockRoot,\\n            pubKeyHash,\\n            proof,\\n            validatorIndex,\\n            withdrawalAddress\\n        );\\n    }\\n\\n    /// @notice Verifies a validator's withdrawable epoch to the beacon block root\\n    /// for a given validator index.\\n    /// Also verifies the validator's public key for the given validator index.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param validatorIndex The validator index to verify the withdrawable epoch for.\\n    /// @param withdrawableEpoch The withdrawable epoch to verify in big endian uint64 format\\n    /// @param withdrawableEpochProof The merkle proof for the validator's withdrawable epoch to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorPubKeyProof The merkle proof for the validator public key in a sub tree of height two.\\n    /// This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint64 validatorIndex,\\n        bytes32 pubKeyHash,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof,\\n        bytes calldata validatorPubKeyProof\\n    ) external view {\\n        BeaconProofsLib.verifyValidatorWithdrawableEpoch(\\n            beaconBlockRoot,\\n            validatorIndex,\\n            withdrawableEpoch,\\n            withdrawableEpochProof\\n        );\\n\\n        // Get the third 32 byte witness from the withdrawable epoch proof\\n        // 2 * 32 bytes = 64 bytes offset\\n        bytes32 subTreeRoot = bytes32(withdrawableEpochProof[64:96]);\\n\\n        BeaconProofsLib.verifyValidatorPubKeySubTree(\\n            subTreeRoot,\\n            pubKeyHash,\\n            validatorPubKeyProof\\n        );\\n    }\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint64 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof\\n    ) external view {\\n        BeaconProofsLib.verifyValidatorWithdrawableEpoch(\\n            beaconBlockRoot,\\n            validatorIndex,\\n            withdrawableEpoch,\\n            withdrawableEpochProof\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param balancesContainerRoot The merkle root of the the balances container\\n    /// @param balancesContainerProof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata balancesContainerProof\\n    ) external view {\\n        BeaconProofsLib.verifyBalancesContainer(\\n            beaconBlockRoot,\\n            balancesContainerRoot,\\n            balancesContainerProof\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param balanceProof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint64 validatorIndex\\n    ) external view returns (uint256 validatorBalanceGwei) {\\n        validatorBalanceGwei = BeaconProofsLib.verifyValidatorBalance(\\n            balancesContainerRoot,\\n            validatorBalanceLeaf,\\n            balanceProof,\\n            validatorIndex\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the pubKey and slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.PendingDeposits[0].pubKey\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param pubKeyHash The hash of the validator public key for the first pending deposit.\\n    /// Use zero bytes if the deposit queue is empty.\\n    /// @param firstPendingDepositProof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes32 pubKeyHash,\\n        bytes calldata firstPendingDepositProof\\n    ) external view returns (bool isEmptyDepositQueue) {\\n        isEmptyDepositQueue = BeaconProofsLib.verifyFirstPendingDeposit(\\n            beaconBlockRoot,\\n            slot,\\n            pubKeyHash,\\n            firstPendingDepositProof\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x79aeebbe023702613c443ab870b033c810069651ebfac002ddc9b8eed80960d3\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/BeaconProofsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Merkle } from \\\"./Merkle.sol\\\";\\nimport { Endian } from \\\"./Endian.sol\\\";\\n\\n/**\\n * @title Library to verify merkle proofs of beacon chain data.\\n * @author Origin Protocol Inc\\n */\\nlibrary BeaconProofsLib {\\n    // Known generalized indices in the beacon block\\n    /// @dev BeaconBlock.state.PendingDeposits[0]\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, pending deposits at index 34\\n    /// Pending deposits container: height 28, first deposit at index 0\\n    /// ((2 ^ 3 + 3) * 2 ^ 6 + 34) * 2 ^ 28 + 0 = 198105366528\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX =\\n        198105366528;\\n    /// @dev BeaconBlock.state.PendingDeposits[0].pubkey\\n    /// Pending Deposit container: height 3, pubkey at index 0\\n    /// (((2 ^ 3 + 3) * 2 ^ 6 + 34) * 2 ^ 28 + 0) * 2 ^ 3 + 0  = 1584842932224\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PUBKEY_GENERALIZED_INDEX =\\n        1584842932224;\\n    /// @dev BeaconBlock.state.validators\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, validators at index 11\\n    /// (2 ^ 3 + 3) * 2 ^ 6 + 11 = 715\\n    uint256 internal constant VALIDATORS_CONTAINER_GENERALIZED_INDEX = 715;\\n    /// @dev BeaconBlock.state.balances\\n    /// Beacon block container: height 3, state at at index 3\\n    /// Beacon state container: height 6, balances at index 13\\n    /// (2 ^ 3 + 3) * 2 ^ 6 + 13 = 716\\n    uint256 internal constant BALANCES_CONTAINER_GENERALIZED_INDEX = 716;\\n\\n    /// @dev Number of bytes in the proof to the first pending deposit.\\n    /// 37 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// 37 * 32 bytes = 1184 bytes\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PROOF_LENGTH = 1184;\\n    /// @dev Number of bytes in the proof from the pubKey of the first pending deposit to the beacon block root.\\n    /// 40 witness hashes of 32 bytes each concatenated together.\\n    /// BeaconBlock.state.PendingDeposits[0].pubKey\\n    /// 40 * 32 bytes = 1280 bytes\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_PUBKEY_PROOF_LENGTH = 1280;\\n    /// The slot is at index 4 in the Pending Deposits container.\\n    /// The sub tree from the right node from the root is a tree of height 2.\\n    /// The first 32 bytes witness is an empty bytes32 as there are\\n    /// no items after the slot in the Pending Deposits container.\\n    /// The second 32 bytes witness is a hash or two empty bytes32.\\n    bytes internal constant PENDING_DEPOSIT_SLOT_PROOF =\\n        // solhint-disable-next-line max-line-length\\n        hex\\\"0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b\\\";\\n\\n    /// @dev Merkle height of the Balances container\\n    /// BeaconBlock.state.balances\\n    uint256 internal constant BALANCES_HEIGHT = 39;\\n    /// @dev Merkle height of the Validators container list\\n    /// BeaconBlock.state.validators\\n    uint256 internal constant VALIDATORS_LIST_HEIGHT = 41;\\n    /// @dev Merkle height of the Validator container\\n    /// BeaconBlock.state.validators[validatorIndex]\\n    uint256 internal constant VALIDATOR_CONTAINER_HEIGHT = 3;\\n\\n    /// @dev Position of the pubkey field in the Validator container.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    /// @dev Position of the withdrawable epoch field in the Validator container.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n\\n    /// @notice Verifies the validator index is for the given validator public key.\\n    /// Also verify the validator's withdrawal credential points to the withdrawal address.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.validators[validatorIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_LIST_HEIGHT,\\n            validatorIndex\\n        );\\n        // BeaconBlock.state.validators[validatorIndex].pubkey\\n        generalizedIndex = concatGenIndices(\\n            generalizedIndex,\\n            VALIDATOR_CONTAINER_HEIGHT,\\n            VALIDATOR_PUBKEY_INDEX\\n        );\\n\\n        // Get the withdrawal address from the first witness in the pubkey merkle proof.\\n        address withdrawalAddressFromProof;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // The first 32 bytes of the proof is the withdrawal credential so load it into memory.\\n            calldatacopy(0, proof.offset, 32)\\n            // Cast the 32 bytes in memory to an address which is the last 20 bytes.\\n            withdrawalAddressFromProof := mload(0)\\n        }\\n        require(\\n            withdrawalAddressFromProof == withdrawalAddress,\\n            \\\"Invalid withdrawal address\\\"\\n        );\\n\\n        require(\\n            // 53 * 32 bytes = 1696 bytes\\n            proof.length == 1696 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: pubKeyHash,\\n                    index: generalizedIndex\\n                }),\\n            \\\"Invalid validator proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies a validator's withdrawable epoch to the beacon block root\\n    /// for a given validator index.\\n    /// BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param validatorIndex The validator index to verify the withdrawable epoch for.\\n    /// @param withdrawableEpoch The withdrawable epoch to verify in big endian uint64 format\\n    /// @param proof The merkle proof for the validator's withdrawable epoch to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyValidatorWithdrawableEpoch(\\n        bytes32 beaconBlockRoot,\\n        uint64 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata proof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.validators[validatorIndex]\\n        uint256 exitEpochGenIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_LIST_HEIGHT,\\n            validatorIndex\\n        );\\n        // BeaconBlock.state.validators[validatorIndex].withdrawableEpoch\\n        exitEpochGenIndex = concatGenIndices(\\n            exitEpochGenIndex,\\n            VALIDATOR_CONTAINER_HEIGHT,\\n            VALIDATOR_WITHDRAWABLE_EPOCH_INDEX\\n        );\\n\\n        require(\\n            // 53 * 32 bytes = 1696 bytes\\n            proof.length == 1696 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: Endian.toLittleEndianUint64(withdrawableEpoch),\\n                    index: exitEpochGenIndex\\n                }),\\n            \\\"Invalid withdrawable proof\\\"\\n        );\\n    }\\n\\n    /// @param subTreeRoot The third 32 byte witness from the withdrawable epoch proof\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param proof The merkle proof for the validator public key in a sub tree of height two.\\n    /// This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyValidatorPubKeySubTree(\\n        bytes32 subTreeRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof\\n    ) internal view {\\n        // Tree height 2 and pub key is at index 0\\n        // index = 2 ^ 2 + 0 = 4\\n        require(\\n            // 2 * 32 bytes = 64 bytes\\n            proof.length == 64 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: subTreeRoot,\\n                    leaf: pubKeyHash,\\n                    index: 4\\n                }),\\n            \\\"Invalid pub key proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container to the beacon block root.\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param balancesContainerRoot The merkle root of the the balances container.\\n    /// @param proof The merkle proof for the balances container to the beacon block root.\\n    /// This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata proof\\n    ) internal view {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // BeaconBlock.state.balances\\n        require(\\n            // 9 * 32 bytes = 288 bytes\\n            proof.length == 288 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: balancesContainerRoot,\\n                    index: BALANCES_CONTAINER_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid balance container proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance to the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param proof The merkle proof for the validator balance to the Balances container root.\\n    /// This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for.\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index.\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata proof,\\n        uint64 validatorIndex\\n    ) internal view returns (uint256 validatorBalanceGwei) {\\n        require(balancesContainerRoot != bytes32(0), \\\"Invalid container root\\\");\\n\\n        // Four balances are stored in each leaf so the validator index is divided by 4\\n        uint64 balanceIndex = validatorIndex / 4;\\n\\n        // Get the index within the balances container, not the Beacon Block\\n        // BeaconBlock.state.balances[balanceIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            1,\\n            BALANCES_HEIGHT,\\n            balanceIndex\\n        );\\n\\n        validatorBalanceGwei = balanceAtIndex(\\n            validatorBalanceLeaf,\\n            validatorIndex\\n        );\\n\\n        require(\\n            // 39 * 32 bytes = 1248 bytes\\n            proof.length == 1248 &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: balancesContainerRoot,\\n                    leaf: validatorBalanceLeaf,\\n                    index: generalizedIndex\\n                }),\\n            \\\"Invalid balance proof\\\"\\n        );\\n    }\\n\\n    /// @notice If the deposit queue is not empty,\\n    /// verify the pubKey and slot of the first pending deposit to the beacon block root.\\n    /// BeaconBlock.state.pendingDeposits[0].pubKey\\n    /// BeaconBlock.state.pendingDeposits[0].slot\\n    /// If the deposit queue is empty, verify the root of the first pending deposit is empty\\n    /// BeaconBlock.state.PendingDeposits[0]\\n    /// @param beaconBlockRoot The root of the beacon block.\\n    /// @param slot The beacon chain slot of the first deposit in the beacon chain's deposit queue.\\n    /// Can be anything if the deposit queue is empty, but zero would be a good choice.\\n    /// @param pubKeyHash The hash of the validator public key for the first pending deposit.\\n    /// Use zero bytes if the deposit queue is empty.\\n    /// @param proof The merkle proof to the beacon block root. Can be either:\\n    /// - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty.\\n    /// - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty.\\n    /// The 32 byte witness hashes are concatenated together starting from the leaf node.\\n    /// @return isEmptyDepositQueue True if the deposit queue is empty, false otherwise.\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes32 pubKeyHash,\\n        bytes calldata proof\\n    ) internal view returns (bool isEmptyDepositQueue) {\\n        require(beaconBlockRoot != bytes32(0), \\\"Invalid block root\\\");\\n\\n        // If the deposit queue is empty\\n        if (proof.length == FIRST_PENDING_DEPOSIT_PROOF_LENGTH) {\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: bytes32(0),\\n                    index: FIRST_PENDING_DEPOSIT_GENERALIZED_INDEX\\n                }),\\n                \\\"Invalid empty deposits proof\\\"\\n            );\\n            return true;\\n        }\\n\\n        // Verify the public key of the first pending deposit\\n        // BeaconBlock.state.PendingDeposits[0].pubKey\\n        require(\\n            proof.length == FIRST_PENDING_DEPOSIT_PUBKEY_PROOF_LENGTH &&\\n                Merkle.verifyInclusionSha256({\\n                    proof: proof,\\n                    root: beaconBlockRoot,\\n                    leaf: pubKeyHash,\\n                    index: FIRST_PENDING_DEPOSIT_PUBKEY_GENERALIZED_INDEX\\n                }),\\n            \\\"Invalid deposit pub key proof\\\"\\n        );\\n\\n        // Now verify the slot of the first pending deposit\\n\\n        // Get the third 32 bytes witness from the first pending deposit pubKey proof\\n        // 2 * 32 bytes = 64 bytes offset\\n        bytes32 slotRoot = bytes32(proof[64:96]);\\n\\n        // Sub tree height 2 and slot is at index 0 in the sub tree\\n        // index = 2 ^ 2 + 0 = 4\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: PENDING_DEPOSIT_SLOT_PROOF,\\n                root: slotRoot,\\n                leaf: Endian.toLittleEndianUint64(slot),\\n                index: 4\\n            }),\\n            \\\"Invalid deposit slot\\\"\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///       Internal Helper Functions\\n    ////////////////////////////////////////////////////\\n\\n    function balanceAtIndex(bytes32 validatorBalanceLeaf, uint64 validatorIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return\\n            Endian.fromLittleEndianUint64(\\n                bytes32((uint256(validatorBalanceLeaf) << bitShiftAmount))\\n            );\\n    }\\n\\n    /// @notice Concatenates two beacon chain generalized indices into one.\\n    /// @param genIndex The first generalized index or 1 if calculating for a single container.\\n    /// @param height The merkle tree height of the second container. eg 39 for balances, 41 for validators.\\n    /// @param index The index within the second container. eg the validator index.\\n    /// @return genIndex The concatenated generalized index.\\n    function concatGenIndices(\\n        uint256 genIndex,\\n        uint256 height,\\n        uint256 index\\n    ) internal pure returns (uint256) {\\n        return (genIndex << height) | index;\\n    }\\n}\\n\",\"keccak256\":\"0x16596533bbd0f9f9d18d21451413b742b0352863f9bacfdc4942885b209ae81e\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Library to handle conversion between little-endian and big-endian formats.\\n * @author Origin Protocol Inc\\n */\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits),\\n     * but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum)\\n        internal\\n        pure\\n        returns (uint64 n)\\n    {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        // forgefmt: disable-next-item\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n\\n    function toLittleEndianUint64(uint64 benum)\\n        internal\\n        pure\\n        returns (bytes32 n)\\n    {\\n        // Convert to little-endian by reversing byte order\\n        uint64 reversed = (benum >> 56) |\\n            ((0x00FF000000000000 & benum) >> 40) |\\n            ((0x0000FF0000000000 & benum) >> 24) |\\n            ((0x000000FF00000000 & benum) >> 8) |\\n            ((0x00000000FF000000 & benum) << 8) |\\n            ((0x0000000000FF0000 & benum) << 24) |\\n            ((0x000000000000FF00 & benum) << 40) |\\n            ((0x00000000000000FF & benum) << 56);\\n\\n        // Store the little-endian uint64 in the least significant 64 bits of bytes32\\n        n = bytes32(uint256(reversed));\\n        // Shift to most significant bits\\n        n = n << 192;\\n    }\\n}\\n\",\"keccak256\":\"0x823cc85083bc08271f32602afc45eb62548c51b334da0e19080764e5aa503506\",\"license\":\"MIT\"},\"contracts/beacon/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    error InvalidProofLength();\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            InvalidProofLength()\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                }\\n            }\\n            index = index / 2;\\n        }\\n        return computedHash[0];\\n    }\\n}\\n\",\"keccak256\":\"0xe2294de73986df81a1bc3642e945a5fa3b077fee75999c436860bd608e838cfc\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IBeaconProofs {\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) external view;\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint64 validatorIndex,\\n        bytes32 pubKeyHash,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof,\\n        bytes calldata validatorPubKeyProof\\n    ) external view;\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint64 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof\\n    ) external view;\\n\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerLeaf,\\n        bytes calldata balancesContainerProof\\n    ) external view;\\n\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint64 validatorIndex\\n    ) external view returns (uint256 validatorBalance);\\n\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes32 pubKeyHash,\\n        bytes calldata firstPendingDepositProof\\n    ) external view returns (bool isEmptyDepositQueue);\\n}\\n\",\"keccak256\":\"0x0dfb664d21c67f8ad5b7e52262c52e1dd9556f3683d48503e7e0f902c036f5c3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50610f0b8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630330aa1a146100675780633ba61c471461007c57806342bd31da1461008f5780637383a9fc146100b557806391ad640d146100d8578063aaf8eb0d146100eb575b600080fd5b61007a610075366004610a97565b6100fe565b005b61007a61008a366004610b3e565b61013d565b6100a261009d366004610bc4565b610153565b6040519081526020015b60405180910390f35b6100c86100c3366004610c2b565b61016c565b60405190151581526020016100ac565b61007a6100e6366004610c92565b61017b565b61007a6100f9366004610ce4565b61018d565b61010b88888787876101a1565b600061011b606060408688610d35565b61012491610d5f565b905061013281888585610284565b505050505050505050565b61014b868686868686610318565b505050505050565b6000610162868686868661045e565b9695505050505050565b60006101628686868686610571565b6101878484848461076d565b50505050565b61019a85858585856101a1565b5050505050565b846101c75760405162461bcd60e51b81526004016101be90610d7d565b60405180910390fd5b60076001600160401b03851666059600000000001760031b176106a082148015610238575061023883838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506102329150889050610828565b8461089e565b61014b5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420776974686472617761626c652070726f6f6600000000000060448201526064016101be565b6040811480156102d457506102d482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506004905061089e565b6101875760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b210383ab11035b2bc90383937b7b360591b60448201526064016101be565b856103355760405162461bcd60e51b81526004016101be90610d7d565b6001600160401b03821666059600000000001760031b600060208682376000519050826001600160a01b0316816001600160a01b0316146103b85760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207769746864726177616c206164647265737300000000000060448201526064016101be565b6106a085148015610408575061040886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915086905061089e565b6104545760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642076616c696461746f722070726f6f6600000000000000000060448201526064016101be565b5050505050505050565b6000856104a65760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590818dbdb9d185a5b995c881c9bdbdd60521b60448201526064016101be565b60006104b3600484610dd5565b90506001600160401b038116648000000000176104d087856108b6565b92506104e085148015610522575061052286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915085905061089e565b6105665760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103130b630b731b290383937b7b360591b60448201526064016101be565b505095945050505050565b6000856105905760405162461bcd60e51b81526004016101be90610d7d565b61049f198201610635576105e183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508b93509150642e20000000905061089e565b61062d5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420656d707479206465706f736974732070726f6f660000000060448201526064016101be565b506001610764565b6105008214801561068b575061068b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925088915065017100000000905061089e565b6106d75760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206465706f73697420707562206b65792070726f6f6600000060448201526064016101be565b60006106e7606060408587610d35565b6106f091610d5f565b905061071f604051806060016040528060408152602001610e96604091398261071889610828565b600461089e565b6107625760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590819195c1bdcda5d081cdb1bdd60621b60448201526064016101be565b505b95945050505050565b8361078a5760405162461bcd60e51b81526004016101be90610d7d565b610120811480156107dc57506107dc82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102cc905061089e565b6101875760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c616e636520636f6e7461696e65722070726f6f660060448201526064016101be565b603881811c60ff16602883811c61ff001691909117601884811c62ff00001691909117600885811c63ff000000169190911764ff000000009186901b919091161765ff00000000009185901b919091161766ff0000000000009184901b919091161760ff60381b9290911b919091161760c01b90565b6000836108ac868585610956565b1495945050505050565b6000806108c4600484610e03565b6108cf906040610e31565b6001600160401b0316905061094384821b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161760ff60381b60889290921c919091161790565b6001600160401b03169150505b92915050565b600083516000141580156109755750602084516109739190610e5a565b155b610992576040516313717da960e21b815260040160405180910390fd5b604080516020808201909252848152905b85518111610a29576109b6600285610e5a565b6000036109e6578151600052808601516020526020826040600060026107d05a03fa6109e157600080fd5b610a0a565b8086015160005281516020526020826040600060026107d05a03fa610a0a57600080fd5b610a15600285610e6e565b9350610a22602082610e82565b90506109a3565b5051949350505050565b80356001600160401b0381168114610a4a57600080fd5b919050565b60008083601f840112610a6157600080fd5b5081356001600160401b03811115610a7857600080fd5b602083019150836020828501011115610a9057600080fd5b9250929050565b60008060008060008060008060c0898b031215610ab357600080fd5b88359750610ac360208a01610a33565b965060408901359550610ad860608a01610a33565b945060808901356001600160401b03811115610af357600080fd5b610aff8b828c01610a4f565b90955093505060a08901356001600160401b03811115610b1e57600080fd5b610b2a8b828c01610a4f565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610b5757600080fd5b863595506020870135945060408701356001600160401b03811115610b7b57600080fd5b610b8789828a01610a4f565b9095509350610b9a905060608801610a33565b915060808701356001600160a01b0381168114610bb657600080fd5b809150509295509295509295565b600080600080600060808688031215610bdc57600080fd5b853594506020860135935060408601356001600160401b03811115610c0057600080fd5b610c0c88828901610a4f565b9094509250610c1f905060608701610a33565b90509295509295909350565b600080600080600060808688031215610c4357600080fd5b85359450610c5360208701610a33565b93506040860135925060608601356001600160401b03811115610c7557600080fd5b610c8188828901610a4f565b969995985093965092949392505050565b60008060008060608587031215610ca857600080fd5b843593506020850135925060408501356001600160401b03811115610ccc57600080fd5b610cd887828801610a4f565b95989497509550505050565b600080600080600060808688031215610cfc57600080fd5b85359450610d0c60208701610a33565b9350610d1a60408701610a33565b925060608601356001600160401b03811115610c7557600080fd5b60008085851115610d4557600080fd5b83861115610d5257600080fd5b5050820193919092039150565b8035602083101561095057600019602084900360031b1b1692915050565b602080825260129082015271125b9d985b1a5908189b1bd8dac81c9bdbdd60721b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03831680610dee57610dee610da9565b806001600160401b0384160491505092915050565b60006001600160401b03831680610e1c57610e1c610da9565b806001600160401b0384160691505092915050565b6001600160401b038181168382160290811690818114610e5357610e53610dbf565b5092915050565b600082610e6957610e69610da9565b500690565b600082610e7d57610e7d610da9565b500490565b8082018082111561095057610950610dbf56fe0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4ba2646970667358221220888399eef435545ae9cf5db417c65c2f463dcb6426ebd5da9e4ae3f2f48d194d64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630330aa1a146100675780633ba61c471461007c57806342bd31da1461008f5780637383a9fc146100b557806391ad640d146100d8578063aaf8eb0d146100eb575b600080fd5b61007a610075366004610a97565b6100fe565b005b61007a61008a366004610b3e565b61013d565b6100a261009d366004610bc4565b610153565b6040519081526020015b60405180910390f35b6100c86100c3366004610c2b565b61016c565b60405190151581526020016100ac565b61007a6100e6366004610c92565b61017b565b61007a6100f9366004610ce4565b61018d565b61010b88888787876101a1565b600061011b606060408688610d35565b61012491610d5f565b905061013281888585610284565b505050505050505050565b61014b868686868686610318565b505050505050565b6000610162868686868661045e565b9695505050505050565b60006101628686868686610571565b6101878484848461076d565b50505050565b61019a85858585856101a1565b5050505050565b846101c75760405162461bcd60e51b81526004016101be90610d7d565b60405180910390fd5b60076001600160401b03851666059600000000001760031b176106a082148015610238575061023883838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a92506102329150889050610828565b8461089e565b61014b5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420776974686472617761626c652070726f6f6600000000000060448201526064016101be565b6040811480156102d457506102d482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506004905061089e565b6101875760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b210383ab11035b2bc90383937b7b360591b60448201526064016101be565b856103355760405162461bcd60e51b81526004016101be90610d7d565b6001600160401b03821666059600000000001760031b600060208682376000519050826001600160a01b0316816001600160a01b0316146103b85760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207769746864726177616c206164647265737300000000000060448201526064016101be565b6106a085148015610408575061040886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915086905061089e565b6104545760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642076616c696461746f722070726f6f6600000000000000000060448201526064016101be565b5050505050505050565b6000856104a65760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a590818dbdb9d185a5b995c881c9bdbdd60521b60448201526064016101be565b60006104b3600484610dd5565b90506001600160401b038116648000000000176104d087856108b6565b92506104e085148015610522575061052286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915085905061089e565b6105665760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103130b630b731b290383937b7b360591b60448201526064016101be565b505095945050505050565b6000856105905760405162461bcd60e51b81526004016101be90610d7d565b61049f198201610635576105e183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508b93509150642e20000000905061089e565b61062d5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420656d707479206465706f736974732070726f6f660000000060448201526064016101be565b506001610764565b6105008214801561068b575061068b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925088915065017100000000905061089e565b6106d75760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206465706f73697420707562206b65792070726f6f6600000060448201526064016101be565b60006106e7606060408587610d35565b6106f091610d5f565b905061071f604051806060016040528060408152602001610e96604091398261071889610828565b600461089e565b6107625760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590819195c1bdcda5d081cdb1bdd60621b60448201526064016101be565b505b95945050505050565b8361078a5760405162461bcd60e51b81526004016101be90610d7d565b610120811480156107dc57506107dc82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102cc905061089e565b6101875760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c616e636520636f6e7461696e65722070726f6f660060448201526064016101be565b603881811c60ff16602883811c61ff001691909117601884811c62ff00001691909117600885811c63ff000000169190911764ff000000009186901b919091161765ff00000000009185901b919091161766ff0000000000009184901b919091161760ff60381b9290911b919091161760c01b90565b6000836108ac868585610956565b1495945050505050565b6000806108c4600484610e03565b6108cf906040610e31565b6001600160401b0316905061094384821b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161760ff60381b60889290921c919091161790565b6001600160401b03169150505b92915050565b600083516000141580156109755750602084516109739190610e5a565b155b610992576040516313717da960e21b815260040160405180910390fd5b604080516020808201909252848152905b85518111610a29576109b6600285610e5a565b6000036109e6578151600052808601516020526020826040600060026107d05a03fa6109e157600080fd5b610a0a565b8086015160005281516020526020826040600060026107d05a03fa610a0a57600080fd5b610a15600285610e6e565b9350610a22602082610e82565b90506109a3565b5051949350505050565b80356001600160401b0381168114610a4a57600080fd5b919050565b60008083601f840112610a6157600080fd5b5081356001600160401b03811115610a7857600080fd5b602083019150836020828501011115610a9057600080fd5b9250929050565b60008060008060008060008060c0898b031215610ab357600080fd5b88359750610ac360208a01610a33565b965060408901359550610ad860608a01610a33565b945060808901356001600160401b03811115610af357600080fd5b610aff8b828c01610a4f565b90955093505060a08901356001600160401b03811115610b1e57600080fd5b610b2a8b828c01610a4f565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610b5757600080fd5b863595506020870135945060408701356001600160401b03811115610b7b57600080fd5b610b8789828a01610a4f565b9095509350610b9a905060608801610a33565b915060808701356001600160a01b0381168114610bb657600080fd5b809150509295509295509295565b600080600080600060808688031215610bdc57600080fd5b853594506020860135935060408601356001600160401b03811115610c0057600080fd5b610c0c88828901610a4f565b9094509250610c1f905060608701610a33565b90509295509295909350565b600080600080600060808688031215610c4357600080fd5b85359450610c5360208701610a33565b93506040860135925060608601356001600160401b03811115610c7557600080fd5b610c8188828901610a4f565b969995985093965092949392505050565b60008060008060608587031215610ca857600080fd5b843593506020850135925060408501356001600160401b03811115610ccc57600080fd5b610cd887828801610a4f565b95989497509550505050565b600080600080600060808688031215610cfc57600080fd5b85359450610d0c60208701610a33565b9350610d1a60408701610a33565b925060608601356001600160401b03811115610c7557600080fd5b60008085851115610d4557600080fd5b83861115610d5257600080fd5b5050820193919092039150565b8035602083101561095057600019602084900360031b1b1692915050565b602080825260129082015271125b9d985b1a5908189b1bd8dac81c9bdbdd60721b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03831680610dee57610dee610da9565b806001600160401b0384160491505092915050565b60006001600160401b03831680610e1c57610e1c610da9565b806001600160401b0384160691505092915050565b6001600160401b038181168382160290811690818114610e5357610e53610dbf565b5092915050565b600082610e6957610e69610da9565b500690565b600082610e7d57610e7d610da9565b500490565b8082018082111561095057610950610dbf56fe0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4ba2646970667358221220888399eef435545ae9cf5db417c65c2f463dcb6426ebd5da9e4ae3f2f48d194d64736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "params": {
          "balancesContainerProof": "The merkle proof for the balances container to the beacon block root. This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the the balances container",
          "beaconBlockRoot": "The root of the beacon block"
        }
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "firstPendingDepositProof": "The merkle proof to the beacon block root. Can be either: - 40 witness hashes for BeaconBlock.state.PendingDeposits[0].pubKey when the deposit queue is not empty. - 37 witness hashes for BeaconBlock.state.PendingDeposits[0] when the deposit queue is empty. The 32 byte witness hashes are concatenated together starting from the leaf node.",
          "pubKeyHash": "The hash of the validator public key for the first pending deposit. Use zero bytes if the deposit queue is empty.",
          "slot": "The beacon chain slot of the first deposit in the beacon chain's deposit queue. Can be anything if the deposit queue is empty, but zero would be a good choice."
        },
        "returns": {
          "isEmptyDepositQueue": "True if the deposit queue is empty, false otherwise"
        }
      },
      "verifyValidator(bytes32,bytes32,bytes,uint64,address)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "proof": "The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "pubKeyHash": "Hash of validator's public key using the Beacon Chain's format",
          "validatorIndex": "The validator index",
          "withdrawalAddress": "The withdrawal address used in the validator's withdrawal credentials"
        }
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint64)": {
        "params": {
          "balanceProof": "The merkle proof for the validator balance to the Balances container root. This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the Balances container.",
          "validatorBalanceLeaf": "The leaf node containing the validator balance with three other balances.",
          "validatorIndex": "The validator index to verify the balance for"
        },
        "returns": {
          "validatorBalanceGwei": "The balance in Gwei of the validator at the given index"
        }
      },
      "verifyValidatorWithdrawable(bytes32,uint64,bytes32,uint64,bytes,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "validatorIndex": "The validator index to verify the withdrawable epoch for.",
          "validatorPubKeyProof": "The merkle proof for the validator public key in a sub tree of height two. This is 2 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "withdrawableEpoch": "The withdrawable epoch to verify in big endian uint64 format",
          "withdrawableEpochProof": "The merkle proof for the validator's withdrawable epoch to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node."
        }
      }
    },
    "title": "Verifies merkle proofs of beacon chain data.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "notice": "Verifies the balances container to the beacon block root BeaconBlock.state.balances"
      },
      "verifyFirstPendingDeposit(bytes32,uint64,bytes32,bytes)": {
        "notice": "If the deposit queue is not empty, verify the pubKey and slot of the first pending deposit to the beacon block root. BeaconBlock.state.PendingDeposits[0].pubKey If the deposit queue is empty, verify the root of the first pending deposit is empty BeaconBlock.state.PendingDeposits[0]"
      },
      "verifyValidator(bytes32,bytes32,bytes,uint64,address)": {
        "notice": "Verifies the validator index is for the given validator public key. Also verify the validator's withdrawal credential points to the withdrawal address. BeaconBlock.state.validators[validatorIndex].pubkey"
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint64)": {
        "notice": "Verifies the validator balance to the root of the Balances container."
      },
      "verifyValidatorWithdrawable(bytes32,uint64,bytes32,uint64,bytes,bytes)": {
        "notice": "Verifies a validator's withdrawable epoch to the beacon block root for a given validator index. Also verifies the validator's public key for the given validator index. BeaconBlock.state.validators[validatorIndex].withdrawableEpoch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x1df1B71c5204DB0e5f3f7035A57285D53454C710",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidProofLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "balancesContainerLeaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balancesContainerProof",
          "type": "bytes"
        }
      ],
      "name": "verifyBalancesContainer",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "firstPendingDepositSlotProof",
          "type": "bytes"
        }
      ],
      "name": "verifyFirstPendingDepositSlot",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "balancesContainerRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "validatorBalanceLeaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "balanceProof",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        }
      ],
      "name": "verifyValidatorBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validatorBalanceGwei",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beaconBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "validatorPubKeyProof",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        }
      ],
      "name": "verifyValidatorPubkey",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3cf2788a91f68898f69bd1239a996536629b59d0231771d0831f02ba9a5d79a",
  "receipt": {
    "to": null,
    "from": "0xf7749B41db006860cEc0650D18b8013d69C44Eeb",
    "contractAddress": "0x1df1B71c5204DB0e5f3f7035A57285D53454C710",
    "transactionIndex": 32,
    "gasUsed": "554303",
    "logsBloom": "0x
    "blockHash": "0x6f76c4023a8940c6d351e31803b9cd0555207e5fbe1f2de27948a52a7bdb9c8a",
    "transactionHash": "0xc3cf2788a91f68898f69bd1239a996536629b59d0231771d0831f02ba9a5d79a",
    "logs": [],
    "blockNumber": 942339,
    "cumulativeGasUsed": "20990209",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "0aba374c50dae0e419bbff62c059ae0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidProofLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"balancesContainerLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balancesContainerProof\",\"type\":\"bytes\"}],\"name\":\"verifyBalancesContainer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"firstPendingDepositSlotProof\",\"type\":\"bytes\"}],\"name\":\"verifyFirstPendingDepositSlot\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"validatorBalanceLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balanceProof\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"}],\"name\":\"verifyValidatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorBalanceGwei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"validatorPubKeyProof\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"verifyValidatorPubkey\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"params\":{\"balancesContainerLeaf\":\"The leaf node containing the balances container\",\"balancesContainerProof\":\"The merkle proof for the balances container to the beacon block root. This is the witness hashes concatenated together starting from the leaf node.\",\"beaconBlockRoot\":\"The root of the beacon block\"}},\"verifyFirstPendingDepositSlot(bytes32,uint64,bytes)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"firstPendingDepositSlotProof\":\"The merkle proof for the first pending deposit's slot against the beacon block root. This is the witness hashes concatenated together starting from the leaf node.\",\"slot\":\"The beacon chain slot to verify\"}},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint64)\":{\"params\":{\"balanceProof\":\"The merkle proof for the validator balance against the root. This is the witness hashes concatenated together starting from the leaf node.\",\"balancesContainerRoot\":\"The merkle root of the Balances container.\",\"validatorBalanceLeaf\":\"The leaf node containing the validator balance with three other balances\",\"validatorIndex\":\"The validator index to verify the balance for\"},\"returns\":{\"validatorBalanceGwei\":\"The balance in Gwei of the validator at the given index\"}},\"verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)\":{\"params\":{\"beaconBlockRoot\":\"The root of the beacon block\",\"pubKeyHash\":\"The beacon chain hash of the validator public key\",\"validatorIndex\":\"The validator index\",\"validatorPubKeyProof\":\"The merkle proof for the validator public key to the beacon block root. This is the witness hashes concatenated together starting from the leaf node.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyBalancesContainer(bytes32,bytes32,bytes)\":{\"notice\":\"Verifies the balances container against the beacon block root BeaconBlock.state.balances\"},\"verifyFirstPendingDepositSlot(bytes32,uint64,bytes)\":{\"notice\":\"Verifies the slot of the first pending deposit against the beacon block root BeaconBlock.state.PendingDeposits[0].slot\"},\"verifyValidatorBalance(bytes32,bytes32,bytes,uint64)\":{\"notice\":\"Verifies the validator balance against the root of the Balances container.\"},\"verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)\":{\"notice\":\"Verifies the validator public key against the beacon block root BeaconBlock.state.validators[validatorIndex].pubkey\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/beacon/BeaconProofs.sol\":\"BeaconProofs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/beacon/BeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { BeaconProofsLib } from \\\"./BeaconProofsLib.sol\\\";\\n\\ncontract BeaconProofs {\\n    /// @notice Verifies the validator public key against the beacon block root\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash The beacon chain hash of the validator public key\\n    /// @param validatorPubKeyProof The merkle proof for the validator public key to the beacon block root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    function verifyValidatorPubkey(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) external view {\\n        BeaconProofsLib.verifyValidatorPubkey(\\n            beaconBlockRoot,\\n            pubKeyHash,\\n            validatorPubKeyProof,\\n            validatorIndex,\\n            withdrawalAddress\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container against the beacon block root\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param balancesContainerLeaf The leaf node containing the balances container\\n    /// @param balancesContainerProof The merkle proof for the balances container to the beacon block root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerLeaf,\\n        bytes calldata balancesContainerProof\\n    ) external view {\\n        BeaconProofsLib.verifyBalancesContainer(\\n            beaconBlockRoot,\\n            balancesContainerLeaf,\\n            balancesContainerProof\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance against the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances\\n    /// @param balanceProof The merkle proof for the validator balance against the root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint64 validatorIndex\\n    ) external view returns (uint256 validatorBalanceGwei) {\\n        validatorBalanceGwei = BeaconProofsLib.verifyValidatorBalance(\\n            balancesContainerRoot,\\n            validatorBalanceLeaf,\\n            balanceProof,\\n            validatorIndex\\n        );\\n    }\\n\\n    /// @notice Verifies the slot of the first pending deposit against the beacon block root\\n    /// BeaconBlock.state.PendingDeposits[0].slot\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param slot The beacon chain slot to verify\\n    /// @param firstPendingDepositSlotProof The merkle proof for the first pending deposit's slot\\n    /// against the beacon block root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    function verifyFirstPendingDepositSlot(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) external view {\\n        BeaconProofsLib.verifyFirstPendingDepositSlot(\\n            beaconBlockRoot,\\n            slot,\\n            firstPendingDepositSlotProof\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc4ae01ae89113edcf42865dfee86015c9b4e04b6606ad74aa003fb4423bf0b97\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/BeaconProofsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Merkle } from \\\"./Merkle.sol\\\";\\nimport { Endian } from \\\"./Endian.sol\\\";\\n\\nlibrary BeaconProofsLib {\\n    // Known generalized indices in the beacon block\\n    // BeaconBlock.slot\\n    uint256 internal constant SLOT_GENERALIZED_INDEX = 8;\\n    // BeaconBlock.state.PendingDeposits[0].slot\\n    uint256 internal constant FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX =\\n        1584842932228;\\n    // BeaconBlock.body.executionPayload.blockNumber\\n    uint256 internal constant BLOCK_NUMBER_GENERALIZED_INDEX = 6438;\\n    // BeaconBlock.state.validators\\n    uint256 internal constant VALIDATORS_CONTAINER_GENERALIZED_INDEX = 715;\\n    // BeaconBlock.state.balances\\n    uint256 internal constant BALANCES_CONTAINER_GENERALIZED_INDEX = 716;\\n\\n    // Beacon Container Tree Heights\\n    uint256 internal constant BALANCES_HEIGHT = 39;\\n    uint256 internal constant VALIDATORS_HEIGHT = 41;\\n    uint256 internal constant VALIDATOR_HEIGHT = 3;\\n\\n    /// @notice Fields in the Validator container for phase 0\\n    /// See https://ethereum.github.io/consensus-specs/specs/phase0/beacon-chain/#validator\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n\\n    /// @notice Verifies the validator public key against the beacon block root\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param pubKeyHash The beacon chain hash of the validator public key\\n    /// @param validatorPubKeyProof The merkle proof for the validator public key to the beacon block root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index\\n    /// @param withdrawalAddress The withdrawal address used in the validator's withdrawal credentials\\n    function verifyValidatorPubkey(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) internal view {\\n        // BeaconBlock.state.validators[validatorIndex].pubkey\\n        uint256 generalizedIndex = concatGenIndices(\\n            VALIDATORS_CONTAINER_GENERALIZED_INDEX,\\n            VALIDATORS_HEIGHT,\\n            validatorIndex\\n        );\\n        generalizedIndex = concatGenIndices(\\n            generalizedIndex,\\n            VALIDATOR_HEIGHT,\\n            VALIDATOR_PUBKEY_INDEX\\n        );\\n\\n        // Get the withdrawal address from the first witness in the pubkey merkle proof.\\n        address withdrawalAddressFromProof;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // The first 32 bytes of the proof is the withdrawal credential so load it into memory.\\n            calldatacopy(0, validatorPubKeyProof.offset, 32)\\n            // Cast the 32 bytes in memory to an address which is the last 20 bytes.\\n            withdrawalAddressFromProof := mload(0)\\n        }\\n        require(\\n            withdrawalAddressFromProof == withdrawalAddress,\\n            \\\"Invalid withdrawal address\\\"\\n        );\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorPubKeyProof,\\n                root: beaconBlockRoot,\\n                leaf: pubKeyHash,\\n                index: generalizedIndex\\n            }),\\n            \\\"Invalid validator pubkey proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the balances container against the beacon block root\\n    /// BeaconBlock.state.balances\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param balancesContainerRoot The merkle root of the the balances container\\n    /// @param balancesContainerProof The merkle proof for the balances container to the beacon block root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerRoot,\\n        bytes calldata balancesContainerProof\\n    ) internal view {\\n        // BeaconBlock.state.balances\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: balancesContainerProof,\\n                root: beaconBlockRoot,\\n                leaf: balancesContainerRoot,\\n                index: BALANCES_CONTAINER_GENERALIZED_INDEX\\n            }),\\n            \\\"Invalid balance container proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the validator balance against the root of the Balances container.\\n    /// @param balancesContainerRoot The merkle root of the Balances container.\\n    /// @param validatorBalanceLeaf The leaf node containing the validator balance with three other balances.\\n    /// @param balanceProof The merkle proof for the validator balance against the root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    /// @param validatorIndex The validator index to verify the balance for\\n    /// @return validatorBalanceGwei The balance in Gwei of the validator at the given index\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint64 validatorIndex\\n    ) internal view returns (uint256 validatorBalanceGwei) {\\n        // Four balances are stored in each leaf so the validator index is divided by 4\\n        uint64 balanceIndex = validatorIndex / 4;\\n\\n        // Get the index within the balances container, not the Beacon Block\\n        // BeaconBlock.state.balances[balanceIndex]\\n        uint256 generalizedIndex = concatGenIndices(\\n            1,\\n            BALANCES_HEIGHT,\\n            balanceIndex\\n        );\\n\\n        validatorBalanceGwei = balanceAtIndex(\\n            validatorBalanceLeaf,\\n            validatorIndex\\n        );\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: balanceProof,\\n                root: balancesContainerRoot,\\n                leaf: validatorBalanceLeaf,\\n                index: generalizedIndex\\n            }),\\n            \\\"Invalid balance proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verifies the slot of the first pending deposit against the beacon block root\\n    /// BeaconBlock.state.PendingDeposits[0].slot\\n    /// @param beaconBlockRoot The root of the beacon block\\n    /// @param slot The beacon chain slot to verify\\n    /// @param firstPendingDepositSlotProof The merkle proof for the first pending deposit's slot\\n    /// against the beacon block root.\\n    /// This is the witness hashes concatenated together starting from the leaf node.\\n    function verifyFirstPendingDepositSlot(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes calldata firstPendingDepositSlotProof\\n    ) internal view {\\n        // Convert uint64 slot number to a little endian bytes32\\n        bytes32 slotLeaf = Endian.toLittleEndianUint64(slot);\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: firstPendingDepositSlotProof,\\n                root: beaconBlockRoot,\\n                leaf: slotLeaf,\\n                index: FIRST_PENDING_DEPOSIT_SLOT_GENERALIZED_INDEX\\n            }),\\n            \\\"Invalid pending deposit proof\\\"\\n        );\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///       Internal Helper Functions\\n    ////////////////////////////////////////////////////\\n\\n    function balanceAtIndex(\\n        bytes32 validatorBalanceLeaf,\\n        uint64 validatorIndex\\n    ) internal pure returns (uint256) {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return\\n            Endian.fromLittleEndianUint64(\\n                bytes32((uint256(validatorBalanceLeaf) << bitShiftAmount))\\n            );\\n    }\\n\\n    /// @notice Concatenates two beacon chain generalized indices into one.\\n    /// @param genIndex The first generalized index or 1 if calculating for a single container.\\n    /// @param height The merkle tree height of the second container. eg 39 for balances, 41 for validators.\\n    /// @param index The index within the second container. eg the validator index.\\n    /// @return genIndex The concatenated generalized index.\\n    function concatGenIndices(\\n        uint256 genIndex,\\n        uint256 height,\\n        uint256 index\\n    ) internal pure returns (uint256) {\\n        return (genIndex << height) | index;\\n    }\\n}\\n\",\"keccak256\":\"0x4032536b507082d5b0ce5ae739134fff55071e0f08fdd5c1f6c5de184885d133\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits),\\n     * but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum)\\n        internal\\n        pure\\n        returns (uint64 n)\\n    {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        // forgefmt: disable-next-item\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n\\n    function toLittleEndianUint64(uint64 benum)\\n        internal\\n        pure\\n        returns (bytes32 n)\\n    {\\n        // Convert to little-endian by reversing byte order\\n        uint64 reversed = (benum >> 56) |\\n            ((0x00FF000000000000 & benum) >> 40) |\\n            ((0x0000FF0000000000 & benum) >> 24) |\\n            ((0x000000FF00000000 & benum) >> 8) |\\n            ((0x00000000FF000000 & benum) << 8) |\\n            ((0x0000000000FF0000 & benum) << 24) |\\n            ((0x000000000000FF00 & benum) << 40) |\\n            ((0x00000000000000FF & benum) << 56);\\n\\n        // Store the little-endian uint64 in the least significant 64 bits of bytes32\\n        n = bytes32(uint256(reversed));\\n        // Shift to most significant bits\\n        n = n << 192;\\n    }\\n}\\n\",\"keccak256\":\"0xd1184c7f56025b694bc4dfe20b610ed208b973eb9040d4084708c39511a42c68\",\"license\":\"MIT\"},\"contracts/beacon/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    error InvalidProofLength();\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            InvalidProofLength()\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash[0];\\n    }\\n}\\n\",\"keccak256\":\"0x01e60fb19fe4439b27c4b7fa6e7fc68892b2affa3c4ef8769fa24ad3d20e2273\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506109148061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806342bd31da14610051578063431c729b1461007657806391ad640d1461008b578063e915f0671461009e575b600080fd5b61006461005f366004610686565b6100b1565b60405190815260200160405180910390f35b6100896100843660046106ed565b6100ca565b005b610089610099366004610746565b6100dc565b6100896100ac366004610780565b6100e8565b60006100c086868686866100fe565b9695505050505050565b6100d6848484846101c3565b50505050565b6100d6848484846102de565b6100f6868686868686610370565b505050505050565b60008061010c600484610832565b90506001600160401b03811664800000000017610129878561048d565b925061016f86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915085905061052d565b6101b85760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103130b630b731b290383937b7b360591b60448201526064015b60405180910390fd5b505095945050505050565b600061023f84603881811c60ff16602883811c61ff001691909117601884811c62ff00001691909117600885811c63ff000000169190911764ff000000009186901b919091161765ff00000000009185901b919091161766ff0000000000009184901b919091161760ff60381b9290911b919091161760c01b90565b905061028b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925085915065017100000004905061052d565b6102d75760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642070656e64696e67206465706f7369742070726f6f6600000060448201526064016101af565b5050505050565b61032482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102cc905061052d565b6100d65760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c616e636520636f6e7461696e65722070726f6f660060448201526064016101af565b6001600160401b03821666059600000000001760031b600060208682376000519050826001600160a01b0316816001600160a01b0316146103f35760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207769746864726177616c206164647265737300000000000060448201526064016101af565b61043786868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915086905061052d565b6104835760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642076616c696461746f72207075626b65792070726f6f66000060448201526064016101af565b5050505050505050565b60008061049b600484610860565b6104a690604061088e565b6001600160401b0316905061051a84821b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161760ff60381b60889290921c919091161790565b6001600160401b03169150505b92915050565b60008361053b868585610545565b1495945050505050565b6000835160001415801561056457506020845161056291906108b7565b155b610581576040516313717da960e21b815260040160405180910390fd5b604080516020808201909252848152905b85518111610618576105a56002856108b7565b6000036105db578151600052808601516020526020826040600060026107d05a03fa6105d057600080fd5b600284049350610606565b8086015160005281516020526020826040600060026107d05a03fa6105ff57600080fd5b6002840493505b6106116020826108cb565b9050610592565b5051949350505050565b60008083601f84011261063457600080fd5b5081356001600160401b0381111561064b57600080fd5b60208301915083602082850101111561066357600080fd5b9250929050565b80356001600160401b038116811461068157600080fd5b919050565b60008060008060006080868803121561069e57600080fd5b853594506020860135935060408601356001600160401b038111156106c257600080fd5b6106ce88828901610622565b90945092506106e190506060870161066a565b90509295509295909350565b6000806000806060858703121561070357600080fd5b843593506107136020860161066a565b925060408501356001600160401b0381111561072e57600080fd5b61073a87828801610622565b95989497509550505050565b6000806000806060858703121561075c57600080fd5b843593506020850135925060408501356001600160401b0381111561072e57600080fd5b60008060008060008060a0878903121561079957600080fd5b863595506020870135945060408701356001600160401b038111156107bd57600080fd5b6107c989828a01610622565b90955093506107dc90506060880161066a565b915060808701356001600160a01b03811681146107f857600080fd5b809150509295509295509295565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0383168061084b5761084b610806565b806001600160401b0384160491505092915050565b60006001600160401b0383168061087957610879610806565b806001600160401b0384160691505092915050565b6001600160401b0381811683821602908116908181146108b0576108b061081c565b5092915050565b6000826108c6576108c6610806565b500690565b808201808211156105275761052761081c56fea26469706673582212200fe8c600e4fa4116a54d2daf904dc43585c3dd81ea14cb71a614b1e419db91e264736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806342bd31da14610051578063431c729b1461007657806391ad640d1461008b578063e915f0671461009e575b600080fd5b61006461005f366004610686565b6100b1565b60405190815260200160405180910390f35b6100896100843660046106ed565b6100ca565b005b610089610099366004610746565b6100dc565b6100896100ac366004610780565b6100e8565b60006100c086868686866100fe565b9695505050505050565b6100d6848484846101c3565b50505050565b6100d6848484846102de565b6100f6868686868686610370565b505050505050565b60008061010c600484610832565b90506001600160401b03811664800000000017610129878561048d565b925061016f86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915085905061052d565b6101b85760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103130b630b731b290383937b7b360591b60448201526064015b60405180910390fd5b505095945050505050565b600061023f84603881811c60ff16602883811c61ff001691909117601884811c62ff00001691909117600885811c63ff000000169190911764ff000000009186901b919091161765ff00000000009185901b919091161766ff0000000000009184901b919091161760ff60381b9290911b919091161760c01b90565b905061028b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925085915065017100000004905061052d565b6102d75760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642070656e64696e67206465706f7369742070726f6f6600000060448201526064016101af565b5050505050565b61032482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791506102cc905061052d565b6100d65760405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642062616c616e636520636f6e7461696e65722070726f6f660060448201526064016101af565b6001600160401b03821666059600000000001760031b600060208682376000519050826001600160a01b0316816001600160a01b0316146103f35760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964207769746864726177616c206164647265737300000000000060448201526064016101af565b61043786868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b915086905061052d565b6104835760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642076616c696461746f72207075626b65792070726f6f66000060448201526064016101af565b5050505050505050565b60008061049b600484610860565b6104a690604061088e565b6001600160401b0316905061051a84821b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161760ff60381b60889290921c919091161790565b6001600160401b03169150505b92915050565b60008361053b868585610545565b1495945050505050565b6000835160001415801561056457506020845161056291906108b7565b155b610581576040516313717da960e21b815260040160405180910390fd5b604080516020808201909252848152905b85518111610618576105a56002856108b7565b6000036105db578151600052808601516020526020826040600060026107d05a03fa6105d057600080fd5b600284049350610606565b8086015160005281516020526020826040600060026107d05a03fa6105ff57600080fd5b6002840493505b6106116020826108cb565b9050610592565b5051949350505050565b60008083601f84011261063457600080fd5b5081356001600160401b0381111561064b57600080fd5b60208301915083602082850101111561066357600080fd5b9250929050565b80356001600160401b038116811461068157600080fd5b919050565b60008060008060006080868803121561069e57600080fd5b853594506020860135935060408601356001600160401b038111156106c257600080fd5b6106ce88828901610622565b90945092506106e190506060870161066a565b90509295509295909350565b6000806000806060858703121561070357600080fd5b843593506107136020860161066a565b925060408501356001600160401b0381111561072e57600080fd5b61073a87828801610622565b95989497509550505050565b6000806000806060858703121561075c57600080fd5b843593506020850135925060408501356001600160401b0381111561072e57600080fd5b60008060008060008060a0878903121561079957600080fd5b863595506020870135945060408701356001600160401b038111156107bd57600080fd5b6107c989828a01610622565b90955093506107dc90506060880161066a565b915060808701356001600160a01b03811681146107f857600080fd5b809150509295509295509295565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0383168061084b5761084b610806565b806001600160401b0384160491505092915050565b60006001600160401b0383168061087957610879610806565b806001600160401b0384160691505092915050565b6001600160401b0381811683821602908116908181146108b0576108b061081c565b5092915050565b6000826108c6576108c6610806565b500690565b808201808211156105275761052761081c56fea26469706673582212200fe8c600e4fa4116a54d2daf904dc43585c3dd81ea14cb71a614b1e419db91e264736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "params": {
          "balancesContainerLeaf": "The leaf node containing the balances container",
          "balancesContainerProof": "The merkle proof for the balances container to the beacon block root. This is the witness hashes concatenated together starting from the leaf node.",
          "beaconBlockRoot": "The root of the beacon block"
        }
      },
      "verifyFirstPendingDepositSlot(bytes32,uint64,bytes)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "firstPendingDepositSlotProof": "The merkle proof for the first pending deposit's slot against the beacon block root. This is the witness hashes concatenated together starting from the leaf node.",
          "slot": "The beacon chain slot to verify"
        }
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint64)": {
        "params": {
          "balanceProof": "The merkle proof for the validator balance against the root. This is the witness hashes concatenated together starting from the leaf node.",
          "balancesContainerRoot": "The merkle root of the Balances container.",
          "validatorBalanceLeaf": "The leaf node containing the validator balance with three other balances",
          "validatorIndex": "The validator index to verify the balance for"
        },
        "returns": {
          "validatorBalanceGwei": "The balance in Gwei of the validator at the given index"
        }
      },
      "verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)": {
        "params": {
          "beaconBlockRoot": "The root of the beacon block",
          "pubKeyHash": "The beacon chain hash of the validator public key",
          "validatorIndex": "The validator index",
          "validatorPubKeyProof": "The merkle proof for the validator public key to the beacon block root. This is the witness hashes concatenated together starting from the leaf node."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verifyBalancesContainer(bytes32,bytes32,bytes)": {
        "notice": "Verifies the balances container against the beacon block root BeaconBlock.state.balances"
      },
      "verifyFirstPendingDepositSlot(bytes32,uint64,bytes)": {
        "notice": "Verifies the slot of the first pending deposit against the beacon block root BeaconBlock.state.PendingDeposits[0].slot"
      },
      "verifyValidatorBalance(bytes32,bytes32,bytes,uint64)": {
        "notice": "Verifies the validator balance against the root of the Balances container."
      },
      "verifyValidatorPubkey(bytes32,bytes32,bytes,uint64,address)": {
        "notice": "Verifies the validator public key against the beacon block root BeaconBlock.state.validators[validatorIndex].pubkey"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
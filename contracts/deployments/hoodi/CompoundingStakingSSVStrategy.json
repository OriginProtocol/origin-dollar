{
  "address": "0xd7a87C581334b28415d1D0B925a68aC0883a73cC",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "platformAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            }
          ],
          "internalType": "struct InitializableAbstractStrategy.BaseStrategyConfig",
          "name": "_baseConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ssvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ssvNetwork",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beaconChainDepositContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beaconProofs",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_beaconGenesisTimestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "blockRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethBalance",
          "type": "uint256"
        }
      ],
      "name": "BalancesSnapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDepositsWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValidatorBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethBalance",
          "type": "uint256"
        }
      ],
      "name": "BalancesVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "withdrawableEpoch",
          "type": "uint64"
        }
      ],
      "name": "DepositToValidatorExiting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWei",
          "type": "uint256"
        }
      ],
      "name": "DepositValidatorExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWei",
          "type": "uint256"
        }
      ],
      "name": "DepositVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWei",
          "type": "uint256"
        }
      ],
      "name": "ETHStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "FirstDepositReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "RegistratorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        }
      ],
      "name": "SSVValidatorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        }
      ],
      "name": "SSVValidatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "StakingMonitorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "ValidatorInvalid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        }
      ],
      "name": "ValidatorVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWei",
          "type": "uint256"
        }
      ],
      "name": "ValidatorWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BEACON_CHAIN_DEPOSIT_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BEACON_GENESIS_TIMESTAMP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BEACON_PROOFS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSV_NETWORK",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSV_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositedWethAccountedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "amountGwei",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "slot",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "depositIndex",
          "type": "uint32"
        },
        {
          "internalType": "enum CompoundingValidatorManager.DepositStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "withdrawableEpoch",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSnapTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastVerifiedEthBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextDepositID",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes",
          "name": "sharesData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "ssvAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "registerSsvValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "removeSsvValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetFirstDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setRegistrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snapBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "snappedBalances",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "ethBalance",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "pubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "depositDataRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CompoundingValidatorManager.ValidatorStakeData",
          "name": "validatorStakeData",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "depositAmountGwei",
          "type": "uint64"
        }
      ],
      "name": "stakeEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "validator",
      "outputs": [
        {
          "internalType": "enum CompoundingValidatorManager.ValidatorState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "index",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorRegistrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "amountGwei",
          "type": "uint64"
        }
      ],
      "name": "validatorWithdrawal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verifiedValidators",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifiedValidatorsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "snapBlockRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "validatorVerificationBlockTimestamp",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "validatorIndex",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "pubKeyHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "pendingDepositPubKeyProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "withdrawableEpochProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "validatorPubKeyProof",
              "type": "bytes"
            }
          ],
          "internalType": "struct CompoundingValidatorManager.FirstPendingDepositProofData",
          "name": "firstPendingDeposit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "balancesContainerRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "balancesContainerProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes32[]",
              "name": "validatorBalanceLeaves",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "validatorBalanceProofs",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct CompoundingValidatorManager.BalanceProofs",
          "name": "balanceProofs",
          "type": "tuple"
        }
      ],
      "name": "verifyBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "depositProcessedSlot",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "firstDepositValidatorCreatedSlot",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slot",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "validatorIndex",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "pubKeyHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "pendingDepositPubKeyProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "withdrawableEpochProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "validatorPubKeyProof",
              "type": "bytes"
            }
          ],
          "internalType": "struct CompoundingValidatorManager.FirstPendingDepositProofData",
          "name": "firstPendingDeposit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "withdrawableEpoch",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "withdrawableEpochProof",
              "type": "bytes"
            }
          ],
          "internalType": "struct CompoundingValidatorManager.DepositValidatorProofData",
          "name": "strategyValidatorData",
          "type": "tuple"
        }
      ],
      "name": "verifyDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "nextBlockTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "validatorIndex",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "pubKeyHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "withdrawalAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "validatorPubKeyProof",
          "type": "bytes"
        }
      ],
      "name": "verifyValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "uint256",
          "name": "ssvAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "withdrawSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbb76b36025b8b56b8d7c8af4b16c186df4eb0cb995d1b939aef57a6f0f974486",
  "receipt": {
    "to": null,
    "from": "0xf7749B41db006860cEc0650D18b8013d69C44Eeb",
    "contractAddress": "0xd7a87C581334b28415d1D0B925a68aC0883a73cC",
    "transactionIndex": 19,
    "gasUsed": "5354797",
    "logsBloom": "0x
    "blockHash": "0xe442c75c6cf9fcd455ff9e7034eff19e30529a362e0ef198289ce980b6cbde39",
    "transactionHash": "0xbb76b36025b8b56b8d7c8af4b16c186df4eb0cb995d1b939aef57a6f0f974486",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 1069553,
        "transactionHash": "0xbb76b36025b8b56b8d7c8af4b16c186df4eb0cb995d1b939aef57a6f0f974486",
        "address": "0xd7a87C581334b28415d1D0B925a68aC0883a73cC",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xe442c75c6cf9fcd455ff9e7034eff19e30529a362e0ef198289ce980b6cbde39"
      }
    ],
    "blockNumber": 1069553,
    "cumulativeGasUsed": "10650028",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0xD0cC28bc8F4666286F3211e465ecF1fe5c72AC8B"
    ],
    "0x2387fD72C1DA19f6486B843F5da562679FbB4057",
    "0x9F5d4Ec84fC4785788aB44F9de973cF34F7A038e",
    "0x58410Bef803ECd7E63B23664C586A6DB72DAf59c",
    "0x00000000219ab540356cBB839Cbe05303d7705Fa",
    "0x7F3f8fD57c794e5AE83DADa5c1D9cE185c7bB33D",
    1742213400
  ],
  "numDeployments": 18,
  "solcInputHash": "3061977d794410fdfe54a096f7dcc314",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct InitializableAbstractStrategy.BaseStrategyConfig\",\"name\":\"_baseConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ssvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ssvNetwork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beaconChainDepositContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beaconProofs\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_beaconGenesisTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"blockRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"BalancesSnapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDepositsWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValidatorBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"BalancesVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"}],\"name\":\"DepositToValidatorExiting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"DepositValidatorExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"DepositVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"ETHStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FirstDepositReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RegistratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"SSVValidatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"SSVValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"StakingMonitorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"}],\"name\":\"ValidatorInvalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"}],\"name\":\"ValidatorVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"ValidatorWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BEACON_CHAIN_DEPOSIT_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEACON_GENESIS_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEACON_PROOFS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSV_NETWORK\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSV_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedWethAccountedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"amountGwei\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"depositIndex\",\"type\":\"uint32\"},{\"internalType\":\"enum CompoundingValidatorManager.DepositStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSnapTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVerifiedEthBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDepositID\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes\",\"name\":\"sharesData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"ssvAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"registerSsvValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"removeSsvValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetFirstDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRegistrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"snappedBalances\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"ethBalance\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct CompoundingValidatorManager.ValidatorStakeData\",\"name\":\"validatorStakeData\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"depositAmountGwei\",\"type\":\"uint64\"}],\"name\":\"stakeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"enum CompoundingValidatorManager.ValidatorState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorRegistrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"amountGwei\",\"type\":\"uint64\"}],\"name\":\"validatorWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiedValidators\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedValidatorsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"snapBlockRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"validatorVerificationBlockTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"pendingDepositPubKeyProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"validatorPubKeyProof\",\"type\":\"bytes\"}],\"internalType\":\"struct CompoundingValidatorManager.FirstPendingDepositProofData\",\"name\":\"firstPendingDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"balancesContainerRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"balancesContainerProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"validatorBalanceLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"validatorBalanceProofs\",\"type\":\"bytes[]\"}],\"internalType\":\"struct CompoundingValidatorManager.BalanceProofs\",\"name\":\"balanceProofs\",\"type\":\"tuple\"}],\"name\":\"verifyBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"depositProcessedSlot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstDepositValidatorCreatedSlot\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"pendingDepositPubKeyProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"validatorPubKeyProof\",\"type\":\"bytes\"}],\"internalType\":\"struct CompoundingValidatorManager.FirstPendingDepositProofData\",\"name\":\"firstPendingDeposit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"withdrawableEpoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"withdrawableEpochProof\",\"type\":\"bytes\"}],\"internalType\":\"struct CompoundingValidatorManager.DepositValidatorProofData\",\"name\":\"strategyValidatorData\",\"type\":\"tuple\"}],\"name\":\"verifyDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"nextBlockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validatorIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"validatorPubKeyProof\",\"type\":\"bytes\"}],\"name\":\"verifyValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"ssvAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"withdrawSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of WETH asset.\"},\"returns\":{\"balance\":\"   Total value in ETH\"}},\"constructor\":{\"params\":{\"_baseConfig\":\"Base strategy config with   `platformAddress` not used so empty address   `vaultAddress` the address of the OETH Vault contract\",\"_beaconChainDepositContract\":\"Address of the beacon chain deposit contract\",\"_beaconGenesisTimestamp\":\"The timestamp of the Beacon chain's genesis.\",\"_beaconProofs\":\"Address of the Beacon Proofs contract that verifies beacon chain data\",\"_ssvNetwork\":\"Address of the SSV Network contract\",\"_ssvToken\":\"Address of the SSV Token contract\",\"_wethAddress\":\"Address of the WETH Token contract\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"Amount of WETH that was transferred to the strategy by the vault.\",\"_asset\":\"Address of the WETH token.\"}},\"getRewardTokenAddresses()\":{\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"initialize(address[],address[],address[])\":{\"params\":{\"_assets\":\"Not used so empty array\",\"_pTokens\":\"Not used so empty array\",\"_rewardTokenAddresses\":\"Not used so empty array\"}},\"registerSsvValidator(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,bool,uint256))\":{\"params\":{\"cluster\":\"The SSV cluster details including the validator count and SSV balance\",\"operatorIds\":\"The operator IDs of the SSV Cluster\",\"publicKey\":\"The public key of the validator\",\"sharesData\":\"The shares data for the validator\",\"ssvAmount\":\"The amount of SSV tokens to be deposited to the SSV cluster\"}},\"removeSsvValidator(bytes,uint64[],(uint32,uint64,uint64,bool,uint256))\":{\"params\":{\"cluster\":\"The SSV cluster details including the validator count and SSV balance\",\"operatorIds\":\"The operator IDs of the SSV Cluster\",\"publicKey\":\"The public key of the validator\"}},\"setHarvesterAddress(address)\":{\"params\":{\"_harvesterAddress\":\"Address of the harvester contract.\"}},\"setRewardTokenAddresses(address[])\":{\"params\":{\"_rewardTokenAddresses\":\"Array of reward token addresses\"}},\"stakeEth((bytes,bytes,bytes32),uint64)\":{\"params\":{\"depositAmountGwei\":\"The amount of WETH to stake to the validator in Gwei.\",\"validatorStakeData\":\"validator data needed to stake. The `ValidatorStakeData` struct contains the pubkey, signature and depositDataRoot. Only the registrator can call this function.\"}},\"supportsAsset(address)\":{\"params\":{\"_asset\":\"The address of the WETH token.\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"validatorWithdrawal(bytes,uint64)\":{\"params\":{\"amountGwei\":\"The amount of ETH to be withdrawn from the validator in Gwei. A zero amount will trigger a full withdrawal.\",\"publicKey\":\"The public key of the validator\"}},\"verifyBalances(bytes32,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(bytes32,bytes,bytes32[],bytes[]))\":{\"params\":{\"balanceProofs\":\"a `BalanceProofs` struct containing the following: balancesContainerRoot - the merkle root of the balances container balancesContainerProof - The merkle proof for the balances container to the beacon block root.   This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node. validatorBalanceLeaves - Array of leaf nodes containing the validator balance with three other balances. validatorBalanceProofs -  Array of merkle proofs for the validator balance to the Balances container root.   This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\",\"snapBlockRoot\":\"The beacon block root emitted from `snapBalance` in `BalancesSnapped`.\"}},\"verifyDeposit(uint256,uint64,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(uint64,bytes))\":{\"params\":{\"depositID\":\"The deposit ID emitted in `ETHStaked` from the `stakeEth` function.\",\"depositProcessedSlot\":\"Any slot on or after the strategy's deposit was processed on the beacon chain. Can not be a slot with pending deposits with the same slot as the deposit being verified. Can not be a slot before a missed slot as the Beacon Root contract will have the parent block root set for the next block timestamp in 12 seconds time.\",\"firstDepositValidatorCreatedSlot\":\"The slot on or after when the validator of the first pending deposit was created on the beacon chain. This is used to verify the validator has not exited.\"}},\"verifyValidator(uint64,uint64,bytes32,address,bytes)\":{\"params\":{\"nextBlockTimestamp\":\"The timestamp of the execution layer block after the beacon chain slot we are verifying. The next one is needed as the Beacon Oracle returns the parent beacon block root for a block timestamp, which is the beacon block root of the previous block.\",\"pubKeyHash\":\"The hash of the validator's public key using the Beacon Chain's format\",\"validatorIndex\":\"The index of the validator on the beacon chain.\",\"validatorPubKeyProof\":\"The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node. BeaconBlock.state.validators[validatorIndex].pubkey\",\"withdrawalAddress\":\"The withdrawal address of the validator which should be this strategy's address. If the withdrawal address is not this strategy's address, the initial deposit was front-run and the validator is marked as invalid.\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of WETH to withdraw.\",\"_asset\":\"Address of the WETH token.\",\"_recipient\":\"Address to receive withdrawn assets.\"}},\"withdrawSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))\":{\"details\":\"A SSV cluster is defined by the SSVOwnerAddress and the set of operatorIds.\",\"params\":{\"cluster\":\"The SSV cluster details including the validator count and SSV balance\",\"operatorIds\":\"The operator IDs of the SSV Cluster\",\"ssvAmount\":\"The amount of SSV tokens to be withdrawn from the SSV cluster\"}}},\"title\":\"Compounding Staking SSV Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BEACON_CHAIN_DEPOSIT_CONTRACT()\":{\"notice\":\"The address of the beacon chain deposit contract\"},\"BEACON_GENESIS_TIMESTAMP()\":{\"notice\":\"The timestamp of the Beacon chain genesis.\"},\"BEACON_PROOFS()\":{\"notice\":\"Address of the Beacon Proofs contract that verifies beacon chain data\"},\"SSV_NETWORK()\":{\"notice\":\"The address of the SSV Network contract used to interface with\"},\"SSV_TOKEN()\":{\"notice\":\"SSV ERC20 token that serves as a payment for operating SSV validators\"},\"VAULT_ADDRESS()\":{\"notice\":\"Address of the OETH Vault proxy contract\"},\"WETH()\":{\"notice\":\"The address of the Wrapped ETH (WETH) token contract\"},\"assetToPToken(address)\":{\"notice\":\"asset => pToken (Platform Specific Token Address)\"},\"checkBalance(address)\":{\"notice\":\"Accounts for all the assets managed by this strategy which includes: 1. The current WETH in this strategy contract 2. The last verified ETH balance, total deposits and total validator balances\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"notice\":\"Collect accumulated reward token and send to Vault.\"},\"deposit(address,uint256)\":{\"notice\":\"Unlike other strategies, this does not deposit assets into the underlying platform. It just checks the asset is WETH and emits the Deposit event. To deposit WETH into validators, `registerSsvValidator` and `stakeEth` must be used.\"},\"depositAll()\":{\"notice\":\"Unlike other strategies, this does not deposit assets into the underlying platform. It just emits the Deposit event. To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used.\"},\"depositList(uint256)\":{\"notice\":\"List of strategy deposit IDs to a validator. The list can be for deposits waiting to be verified as processed on the beacon chain, or deposits that have been verified to an exiting validator and is now waiting for the validator's balance to be swept. The list may not be ordered by time of deposit. Removed deposits will move the last deposit to the removed index.\"},\"depositListLength()\":{\"notice\":\"Returns the number of deposits waiting to be verified as processed on the beacon chain, or deposits that have been verified to an exiting validator and is now waiting for the validator's balance to be swept.\"},\"deposits(uint256)\":{\"notice\":\"Mapping of the deposit ID to the deposit data\"},\"firstDeposit()\":{\"notice\":\"Restricts to only one deposit to an unverified validator at a time. This is to limit front-running attacks of deposits to the beacon chain contract.\"},\"getRewardTokenAddresses()\":{\"notice\":\"Get the reward token addresses.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"harvesterAddress()\":{\"notice\":\"Address of the Harvester contract allowed to collect reward tokens\"},\"initialize(address[],address[],address[])\":{\"notice\":\"Set up initial internal state including 1. approving the SSVNetwork to transfer SSV tokens from this strategy contract\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"lastSnapTimestamp()\":{\"notice\":\"The timestamp of the last snapshot taken\"},\"lastVerifiedEthBalance()\":{\"notice\":\"The last verified ETH balance of the strategy\"},\"nextDepositID()\":{\"notice\":\"Unique identifier of the next validator deposit.\"},\"platformAddress()\":{\"notice\":\"Address of the underlying platform\"},\"registerSsvValidator(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,bool,uint256))\":{\"notice\":\"Registers a single validator in a SSV Cluster. Only the Registrator can call this function.\"},\"removePToken(uint256)\":{\"notice\":\"is not supported for this strategy as there is no platform token.\"},\"removeSsvValidator(bytes,uint64[],(uint32,uint64,uint64,bool,uint256))\":{\"notice\":\"Remove the validator from the SSV Cluster after: - the validator has been exited from `validatorWithdrawal` or slashed - the validator has incorrectly registered and can not be staked to - the initial deposit was front-run and the withdrawal address is not this strategy's address. Make sure `validatorWithdrawal` is called with a zero amount and the validator has exited the Beacon chain. If removed before the validator has exited the beacon chain will result in the validator being slashed. Only the registrator can call this function.\"},\"resetFirstDeposit()\":{\"notice\":\"Reset the `firstDeposit` flag to false so deposits to unverified validators can be made again.\"},\"rewardTokenAddresses(uint256)\":{\"notice\":\"Address of the reward tokens. eg CRV, BAL, CVX, AURA\"},\"safeApproveAllTokens()\":{\"notice\":\"Approves the SSV Network contract to transfer SSV tokens for validator registration.\"},\"setHarvesterAddress(address)\":{\"notice\":\"Set the Harvester contract that can collect rewards.\"},\"setPTokenAddress(address,address)\":{\"notice\":\"is not supported for this strategy as there is no platform token.\"},\"setRegistrator(address)\":{\"notice\":\"Set the address of the registrator which can register, exit and remove validators\"},\"setRewardTokenAddresses(address[])\":{\"notice\":\"Set the reward token addresses. Any old addresses will be overwritten.\"},\"snapBalances()\":{\"notice\":\"Stores the current ETH balance at the current block and beacon block root         of the slot that is associated with the previous block. When snapping / verifying balance it is of a high importance that there is no miss-match in respect to ETH that is held by the contract and balances that are verified on the validators. First some context on the beacon-chain block building behaviour. Relevant parts of constructing a block on the beacon chain consist of:  - process_withdrawals: ETH is deducted from the validator's balance  - process_execution_payload: immediately after the previous step executing all the    transactions  - apply the withdrawals: adding ETH to the recipient which is the withdrawal address    contained in the withdrawal credentials of the exited validators That means that balance increases which are part of the post-block execution state are done within the block, but the transaction that are contained within that block can not see / interact with the balance from the exited validators. Only transactions in the next block can do that. When snap balances is performed the state of the chain is snapped across 2 separate chain states:  - ETH balance of the contract is recorded on block X -> and corresponding slot Y  - beacon chain block root is recorded of block X - 1 -> and corresponding slot Y - 1    given there were no missed slots. It could also be Y - 2, Y - 3 depending on how    many slots have not managed to propose a block. For the sake of simplicity this slot    will be referred to as Y - 1 as it makes no difference in the argument Given these 2 separate chain states it is paramount that verify balances can not experience miss-counting ETH or much more dangerous double counting of the ETH. When verifyBalances is called it is performed on the current block Z where Z > X. Verify balances adds up all the ETH (omitting WETH) controlled by this contract:  - ETH balance in the contract on block X  - ETH balance in Deposits on block Z that haven't been yet processed in slot Y - 1  - ETH balance in validators that are active in slot Y - 1  - skips the ETH balance in validators that have withdrawn in slot Y - 1 (or sooner)    and have their balance visible to transactions in slot Y and corresponding block X    (or sooner) Lets verify the correctness of ETH accounting given the above described behaviour. *ETH balance in the contract on block X* This is an ETH balance of the contract on a non current X block. Any ETH leaving the contract as a result of a withdrawal subtracts from the ETH accounted for on block X if `verifyBalances` has already been called. It also invalidates a `snapBalances` in case `verifyBalances` has not been called yet. Not performing this would result in not accounting for the withdrawn ETH that has happened anywhere in the block interval [X + 1, Z]. Similarly to withdrawals any `stakeEth` deposits to the deposit contract adds to the ETH accounted for since the last `verifyBalances` has been called. And it invalidates the `snapBalances` in case `verifyBalances` hasn't been yet called. Not performing this would result in double counting the `stakedEth` since it would be present once in the snapped contract balance and the second time in deposit storage variables. This behaviour is correct. *ETH balance in Deposits on block Z that haven't been yet processed in slot Y - 1* The contract sums up all the ETH that has been deposited to the Beacon chain deposit contract at block Z. The execution layer doesn't have direct access to the state of deposits on the beacon chain. And if it is to sum up all the ETH that is marked to be deposited it needs to be sure to not double count ETH that is in deposits (storage vars) and could also be part of the validator balances. It does that by verifying that at slot Y - 1 none of the deposits visible on block Z have been processed. Meaning since the last snap till now all are still in queue. Which ensures they can not be part of the validator balances in later steps. This behaviour is correct. *ETH balance in validators that are active in slot Y - 1* The contract is verifying none of the deposits on Y - 1 slot have been processed and for that reason it checks the validator balances in the same slot. Ensuring accounting correctness. This behaviour is correct. *The withdrawn validators* The withdrawn validators could have their balances deducted in any slot before slot Y - 1 and the execution layer sees the balance increase in the subsequent slot. Lets look at the \\\"worst case scenario\\\" where the validator withdrawal is processed in the slot Y - 1 (snapped slot) and see their balance increase (in execution layer) in slot Y -> block X. The ETH balance on the contract is snapped at block X meaning that even if the validator exits at the latest possible time it is paramount that the ETH balance on the execution layer is recorded in the next block. Correctly accounting for the withdrawn ETH. Worth mentioning if the validator exit is processed by the slot Y and balance increase seen on the execution layer on block X + 1 the withdrawal is ignored by both the validator balance verification as well as execution layer contract balance snap. This behaviour is correct. The validator balances on the beacon chain can then be proved with `verifyBalances`.\"},\"snappedBalances(bytes32)\":{\"notice\":\"Mapping of the block root to the balances at that slot\"},\"stakeEth((bytes,bytes,bytes32),uint64)\":{\"notice\":\"Stakes WETH in this strategy to a compounding validator. Does not convert any ETH sitting in this strategy to WETH.\"},\"supportsAsset(address)\":{\"notice\":\"Returns bool indicating whether asset is supported by the strategy.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\"},\"validator(bytes32)\":{\"notice\":\"Mapping of the hash of the validator's public key to the validator state and index. Uses the Beacon chain hashing for BLSPubkey which is sha256(abi.encodePacked(validator.pubkey, bytes16(0)))\"},\"validatorRegistrator()\":{\"notice\":\"Address of the registrator - allowed to register, withdraw, exit and remove validators\"},\"validatorWithdrawal(bytes,uint64)\":{\"notice\":\"Request a full or partial withdrawal from a validator. A zero amount will trigger a full withdrawal. If the remaining balance is < 32 ETH then only the amount in excess of 32 ETH will be withdrawn. Only the Registrator can call this function. 1 wei of value should be sent with the tx to pay for the withdrawal request fee. If no value sent, 1 wei will be taken from the strategy's ETH balance if it has any. If no ETH balance, the tx will revert.\"},\"vaultAddress()\":{\"notice\":\"Address of the OToken vault\"},\"verifiedValidators(uint256)\":{\"notice\":\"List of validator public key hashes that have been verified to exist on the beacon chain. These have had a deposit processed and the validator's balance increased. Validators will be removed from this list when its verified they have a zero balance.\"},\"verifiedValidatorsLength()\":{\"notice\":\"Returns the number of verified validators.\"},\"verifyBalances(bytes32,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(bytes32,bytes,bytes32[],bytes[]))\":{\"notice\":\"Verifies the balances of all active validators on the beacon chain and checks no pending deposits have been processed by the beacon chain.\"},\"verifyDeposit(uint256,uint64,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(uint64,bytes))\":{\"notice\":\"Verifies a deposit on the execution layer has been processed by the beacon chain. This means the accounting of the strategy's ETH moves from a pending deposit to a validator balance. Important: this function has a limitation where the `verificationSlot` that is passed by the off-chain verifier requires a slot immediately after it to propose a block otherwise the `BeaconRoots.parentBlockRoot` will fail. This shouldn't be a problem, since by the current behaviour of beacon chain only 1%-3% slots don't propose a block.\"},\"verifyValidator(uint64,uint64,bytes32,address,bytes)\":{\"notice\":\"Verifies a validator's index to its public key. Adds to the list of verified validators if the validator's withdrawal address is this strategy's address. Marks the validator as invalid and removes the deposit if the withdrawal address is not this strategy's address.\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraw ETH and WETH from this strategy contract.\"},\"withdrawAll()\":{\"notice\":\"Transfer all WETH deposits, ETH from validator withdrawals and ETH from execution rewards in this strategy to the vault. This does not withdraw from the validators. That has to be done separately with the `validatorWithdrawal` operation.\"},\"withdrawSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))\":{\"notice\":\"Withdraws excess SSV Tokens from the SSV Network contract which was used to pay the SSV Operators.\"}},\"notice\":\"Strategy to deploy funds into DVT validators powered by the SSV Network\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol\":\"CompoundingStakingSSVStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/beacon/BeaconRoots.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Library to retrieve beacon block roots.\\n * @author Origin Protocol Inc\\n */\\nlibrary BeaconRoots {\\n    /// @notice The address of beacon block roots oracle\\n    /// See https://eips.ethereum.org/EIPS/eip-4788\\n    address internal constant BEACON_ROOTS_ADDRESS =\\n        0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02;\\n\\n    /// @notice Returns the beacon block root for the previous block.\\n    /// This comes from the Beacon Roots contract defined in EIP-4788.\\n    /// This will revert if the block is more than 8,191 blocks old as\\n    /// that is the size of the beacon root's ring buffer.\\n    /// @param timestamp The timestamp of the block for which to get the parent root.\\n    /// @return parentRoot The parent block root for the given timestamp.\\n    function parentBlockRoot(uint64 timestamp)\\n        internal\\n        view\\n        returns (bytes32 parentRoot)\\n    {\\n        // Call the Beacon Roots contract to get the parent block root.\\n        // This does not have a function signature, so we use a staticcall.\\n        (bool success, bytes memory result) = BEACON_ROOTS_ADDRESS.staticcall(\\n            abi.encode(timestamp)\\n        );\\n\\n        require(success && result.length > 0, \\\"Invalid beacon timestamp\\\");\\n        parentRoot = abi.decode(result, (bytes32));\\n    }\\n}\\n\",\"keccak256\":\"0x4005989f852a68bbcdc1cdc3472ebd3911395e75b4e6366ffcaae4d1c128691e\",\"license\":\"BUSL-1.1\"},\"contracts/beacon/PartialWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Library to request full or partial withdrawals from validators on the beacon chain.\\n * @author Origin Protocol Inc\\n */\\nlibrary PartialWithdrawal {\\n    /// @notice The address where the withdrawal request is sent to\\n    /// See https://eips.ethereum.org/EIPS/eip-7002\\n    address internal constant WITHDRAWAL_REQUEST_ADDRESS =\\n        0x00000961Ef480Eb55e80D19ad83579A64c007002;\\n\\n    /// @notice Requests a partial withdrawal for a given validator public key and amount.\\n    /// @param validatorPubKey The public key of the validator to withdraw from\\n    /// @param amount The amount of ETH to withdraw\\n    function request(bytes calldata validatorPubKey, uint64 amount)\\n        internal\\n        returns (uint256 fee_)\\n    {\\n        require(validatorPubKey.length == 48, \\\"Invalid validator byte length\\\");\\n        fee_ = fee();\\n\\n        // Call the Withdrawal Request contract with the validator public key\\n        // and amount to be withdrawn packed together\\n\\n        // This is a general purpose EL to CL request:\\n        // https://eips.ethereum.org/EIPS/eip-7685\\n        (bool success, ) = WITHDRAWAL_REQUEST_ADDRESS.call{ value: fee_ }(\\n            abi.encodePacked(validatorPubKey, amount)\\n        );\\n\\n        require(success, \\\"Withdrawal request failed\\\");\\n    }\\n\\n    /// @notice Gets fee for withdrawal requests contract on Beacon chain\\n    function fee() internal view returns (uint256) {\\n        // Get fee from the withdrawal request contract\\n        (bool success, bytes memory result) = WITHDRAWAL_REQUEST_ADDRESS\\n            .staticcall(\\\"\\\");\\n\\n        require(success && result.length > 0, \\\"Failed to get fee\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x80d29153ff7eb5c6841692aca98eb0cc14ac43ad2d8e402890b6c6b6e4a9719d\",\"license\":\"BUSL-1.1\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        emit GovernorshipTransferred(_governor(), newGovernor);\\n\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xf32f873c8bfbacf2e5f01d0cf37bc7f54fbd5aa656e95c8a599114229946f107\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IBeaconProofs {\\n    function verifyValidator(\\n        bytes32 beaconBlockRoot,\\n        bytes32 pubKeyHash,\\n        bytes calldata validatorPubKeyProof,\\n        uint64 validatorIndex,\\n        address withdrawalAddress\\n    ) external view;\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint64 validatorIndex,\\n        bytes32 pubKeyHash,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof,\\n        bytes calldata validatorPubKeyProof\\n    ) external view;\\n\\n    function verifyValidatorWithdrawable(\\n        bytes32 beaconBlockRoot,\\n        uint64 validatorIndex,\\n        uint64 withdrawableEpoch,\\n        bytes calldata withdrawableEpochProof\\n    ) external view;\\n\\n    function verifyBalancesContainer(\\n        bytes32 beaconBlockRoot,\\n        bytes32 balancesContainerLeaf,\\n        bytes calldata balancesContainerProof\\n    ) external view;\\n\\n    function verifyValidatorBalance(\\n        bytes32 balancesContainerRoot,\\n        bytes32 validatorBalanceLeaf,\\n        bytes calldata balanceProof,\\n        uint64 validatorIndex\\n    ) external view returns (uint256 validatorBalance);\\n\\n    function verifyFirstPendingDeposit(\\n        bytes32 beaconBlockRoot,\\n        uint64 slot,\\n        bytes32 pubKeyHash,\\n        bytes calldata firstPendingDepositProof\\n    ) external view returns (bool isEmptyDepositQueue);\\n}\\n\",\"keccak256\":\"0x0dfb664d21c67f8ad5b7e52262c52e1dd9556f3683d48503e7e0f902c036f5c3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x598f90bdbc854250bbd5991426bfb43367207e64e33109c41aa8b54323fd8d8e\",\"license\":\"MIT\"},\"contracts/interfaces/ISSVNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Cluster {\\n    uint32 validatorCount;\\n    uint64 networkFeeIndex;\\n    uint64 index;\\n    bool active;\\n    uint256 balance;\\n}\\n\\ninterface ISSVNetwork {\\n    /**********/\\n    /* Errors */\\n    /**********/\\n\\n    error CallerNotOwner(); // 0x5cd83192\\n    error CallerNotWhitelisted(); // 0x8c6e5d71\\n    error FeeTooLow(); // 0x732f9413\\n    error FeeExceedsIncreaseLimit(); // 0x958065d9\\n    error NoFeeDeclared(); // 0x1d226c30\\n    error ApprovalNotWithinTimeframe(); // 0x97e4b518\\n    error OperatorDoesNotExist(); // 0x961e3e8c\\n    error InsufficientBalance(); // 0xf4d678b8\\n    error ValidatorDoesNotExist(); // 0xe51315d2\\n    error ClusterNotLiquidatable(); // 0x60300a8d\\n    error InvalidPublicKeyLength(); // 0x637297a4\\n    error InvalidOperatorIdsLength(); // 0x38186224\\n    error ClusterAlreadyEnabled(); // 0x3babafd2\\n    error ClusterIsLiquidated(); // 0x95a0cf33\\n    error ClusterDoesNotExists(); // 0x185e2b16\\n    error IncorrectClusterState(); // 0x12e04c87\\n    error UnsortedOperatorsList(); // 0xdd020e25\\n    error NewBlockPeriodIsBelowMinimum(); // 0x6e6c9cac\\n    error ExceedValidatorLimit(); // 0x6df5ab76\\n    error TokenTransferFailed(); // 0x045c4b02\\n    error SameFeeChangeNotAllowed(); // 0xc81272f8\\n    error FeeIncreaseNotAllowed(); // 0x410a2b6c\\n    error NotAuthorized(); // 0xea8e4eb5\\n    error OperatorsListNotUnique(); // 0xa5a1ff5d\\n    error OperatorAlreadyExists(); // 0x289c9494\\n    error TargetModuleDoesNotExist(); // 0x8f9195fb\\n    error MaxValueExceeded(); // 0x91aa3017\\n    error FeeTooHigh(); // 0xcd4e6167\\n    error PublicKeysSharesLengthMismatch(); // 0x9ad467b8\\n    error IncorrectValidatorStateWithData(bytes publicKey); // 0x89307938\\n    error ValidatorAlreadyExistsWithData(bytes publicKey); // 0x388e7999\\n    error EmptyPublicKeysList(); // df83e679\\n\\n    // legacy errors\\n    error ValidatorAlreadyExists(); // 0x8d09a73e\\n    error IncorrectValidatorState(); // 0x2feda3c1\\n\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n    event BeaconUpgraded(address indexed beacon);\\n    event ClusterDeposited(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        uint256 value,\\n        Cluster cluster\\n    );\\n    event ClusterLiquidated(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        Cluster cluster\\n    );\\n    event ClusterReactivated(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        Cluster cluster\\n    );\\n    event ClusterWithdrawn(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        uint256 value,\\n        Cluster cluster\\n    );\\n    event DeclareOperatorFeePeriodUpdated(uint64 value);\\n    event ExecuteOperatorFeePeriodUpdated(uint64 value);\\n    event FeeRecipientAddressUpdated(\\n        address indexed owner,\\n        address recipientAddress\\n    );\\n    event Initialized(uint8 version);\\n    event LiquidationThresholdPeriodUpdated(uint64 value);\\n    event MinimumLiquidationCollateralUpdated(uint256 value);\\n    event NetworkEarningsWithdrawn(uint256 value, address recipient);\\n    event NetworkFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event OperatorAdded(\\n        uint64 indexed operatorId,\\n        address indexed owner,\\n        bytes publicKey,\\n        uint256 fee\\n    );\\n    event OperatorFeeDeclarationCancelled(\\n        address indexed owner,\\n        uint64 indexed operatorId\\n    );\\n    event OperatorFeeDeclared(\\n        address indexed owner,\\n        uint64 indexed operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n    event OperatorFeeExecuted(\\n        address indexed owner,\\n        uint64 indexed operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n    event OperatorFeeIncreaseLimitUpdated(uint64 value);\\n    event OperatorMaximumFeeUpdated(uint64 maxFee);\\n    event OperatorRemoved(uint64 indexed operatorId);\\n    event OperatorWhitelistUpdated(\\n        uint64 indexed operatorId,\\n        address whitelisted\\n    );\\n    event OperatorWithdrawn(\\n        address indexed owner,\\n        uint64 indexed operatorId,\\n        uint256 value\\n    );\\n    event OwnershipTransferStarted(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event Upgraded(address indexed implementation);\\n    event ValidatorAdded(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        bytes publicKey,\\n        bytes shares,\\n        Cluster cluster\\n    );\\n    event ValidatorExited(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        bytes publicKey\\n    );\\n    event ValidatorRemoved(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        bytes publicKey,\\n        Cluster cluster\\n    );\\n\\n    fallback() external;\\n\\n    function acceptOwnership() external;\\n\\n    function cancelDeclaredOperatorFee(uint64 operatorId) external;\\n\\n    function declareOperatorFee(uint64 operatorId, uint256 fee) external;\\n\\n    function deposit(\\n        address clusterOwner,\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function executeOperatorFee(uint64 operatorId) external;\\n\\n    function exitValidator(bytes memory publicKey, uint64[] memory operatorIds)\\n        external;\\n\\n    function bulkExitValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] calldata operatorIds\\n    ) external;\\n\\n    function getVersion() external pure returns (string memory version);\\n\\n    function initialize(\\n        address token_,\\n        address ssvOperators_,\\n        address ssvClusters_,\\n        address ssvDAO_,\\n        address ssvViews_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint256 minimumLiquidationCollateral_,\\n        uint32 validatorsPerOperatorLimit_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_,\\n        uint64 operatorMaxFeeIncrease_\\n    ) external;\\n\\n    function liquidate(\\n        address clusterOwner,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function proxiableUUID() external view returns (bytes32);\\n\\n    function reactivate(\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function reduceOperatorFee(uint64 operatorId, uint256 fee) external;\\n\\n    function registerOperator(bytes memory publicKey, uint256 fee)\\n        external\\n        returns (uint64 id);\\n\\n    function registerValidator(\\n        bytes memory publicKey,\\n        uint64[] memory operatorIds,\\n        bytes memory sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function bulkRegisterValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] calldata operatorIds,\\n        bytes[] calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function removeOperator(uint64 operatorId) external;\\n\\n    function removeValidator(\\n        bytes memory publicKey,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function bulkRemoveValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] calldata operatorIds,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function renounceOwnership() external;\\n\\n    function setFeeRecipientAddress(address recipientAddress) external;\\n\\n    function setOperatorWhitelist(uint64 operatorId, address whitelisted)\\n        external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function updateDeclareOperatorFeePeriod(uint64 timeInSeconds) external;\\n\\n    function updateExecuteOperatorFeePeriod(uint64 timeInSeconds) external;\\n\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external;\\n\\n    function updateMaximumOperatorFee(uint64 maxFee) external;\\n\\n    function updateMinimumLiquidationCollateral(uint256 amount) external;\\n\\n    function updateModule(uint8 moduleId, address moduleAddress) external;\\n\\n    function updateNetworkFee(uint256 fee) external;\\n\\n    function updateOperatorFeeIncreaseLimit(uint64 percentage) external;\\n\\n    function upgradeTo(address newImplementation) external;\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data)\\n        external\\n        payable;\\n\\n    function withdraw(\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function withdrawAllOperatorEarnings(uint64 operatorId) external;\\n\\n    function withdrawNetworkEarnings(uint256 amount) external;\\n\\n    function withdrawOperatorEarnings(uint64 operatorId, uint256 amount)\\n        external;\\n}\\n\",\"keccak256\":\"0xbd86cb74702aebc5b53c8fc738a2e3ad1b410583460617be84b22ce922af12a7\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n\\n    function harvesterAddress() external view returns (address);\\n\\n    function transferToken(address token, uint256 amount) external;\\n\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external;\\n}\\n\",\"keccak256\":\"0x79ca47defb3b5a56bba13f14c440838152fd1c1aa640476154516a16da4da8ba\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    // slither-disable-start constable-states\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    function ADMIN_IMPLEMENTATION() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _unitConversion) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n\\n    function setDripper(address _dripper) external;\\n\\n    function dripper() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function cacheWETHAssetIndex() external;\\n\\n    function wethAssetIndex() external view returns (uint256);\\n\\n    function initialize(address, address) external;\\n\\n    function setAdminImpl(address) external;\\n\\n    function removeAsset(address _asset) external;\\n\\n    // These are OETH specific functions\\n    function addWithdrawalQueueLiquidity() external;\\n\\n    function requestWithdrawal(uint256 _amount)\\n        external\\n        returns (uint256 requestId, uint256 queued);\\n\\n    function claimWithdrawal(uint256 requestId)\\n        external\\n        returns (uint256 amount);\\n\\n    function claimWithdrawals(uint256[] memory requestIds)\\n        external\\n        returns (uint256[] memory amounts, uint256 totalAmount);\\n\\n    function withdrawalQueueMetadata()\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalQueueMetadata memory);\\n\\n    function withdrawalRequests(uint256 requestId)\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalRequest memory);\\n\\n    // OETHb specific functions\\n    function addStrategyToMintWhitelist(address strategyAddr) external;\\n\\n    function removeStrategyFromMintWhitelist(address strategyAddr) external;\\n\\n    function isMintWhitelistedStrategy(address strategyAddr)\\n        external\\n        view\\n        returns (bool);\\n\\n    function withdrawalClaimDelay() external view returns (uint256);\\n\\n    function setWithdrawalClaimDelay(uint256 newDelay) external;\\n\\n    function lastRebase() external view returns (uint64);\\n\\n    function dripDuration() external view returns (uint64);\\n\\n    function setDripDuration(uint256 _dripDuration) external;\\n\\n    function rebasePerSecondMax() external view returns (uint64);\\n\\n    function setRebaseRateMax(uint256 yearlyApr) external;\\n\\n    function rebasePerSecondTarget() external view returns (uint64);\\n\\n    function previewYield() external view returns (uint256 yield);\\n\\n    // slither-disable-end constable-states\\n}\\n\",\"keccak256\":\"0x8d0a60f594d97578b0513b4da3d8fcafaa601950c6c4c016bf60b1344733269c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x05b7dce6c24d3cd4e48b5c6346d86e5e40ecc3291bcdf3f3ef091c98fc826519\",\"license\":\"MIT\"},\"contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { InitializableAbstractStrategy } from \\\"../../utils/InitializableAbstractStrategy.sol\\\";\\nimport { IWETH9 } from \\\"../../interfaces/IWETH9.sol\\\";\\nimport { CompoundingValidatorManager } from \\\"./CompoundingValidatorManager.sol\\\";\\n\\n/// @title Compounding Staking SSV Strategy\\n/// @notice Strategy to deploy funds into DVT validators powered by the SSV Network\\n/// @author Origin Protocol Inc\\ncontract CompoundingStakingSSVStrategy is\\n    CompoundingValidatorManager,\\n    InitializableAbstractStrategy\\n{\\n    /// @notice SSV ERC20 token that serves as a payment for operating SSV validators\\n    address public immutable SSV_TOKEN;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /// @param _baseConfig Base strategy config with\\n    ///   `platformAddress` not used so empty address\\n    ///   `vaultAddress` the address of the OETH Vault contract\\n    /// @param _wethAddress Address of the WETH Token contract\\n    /// @param _ssvToken Address of the SSV Token contract\\n    /// @param _ssvNetwork Address of the SSV Network contract\\n    /// @param _beaconChainDepositContract Address of the beacon chain deposit contract\\n    /// @param _beaconProofs Address of the Beacon Proofs contract that verifies beacon chain data\\n    /// @param _beaconGenesisTimestamp The timestamp of the Beacon chain's genesis.\\n    constructor(\\n        BaseStrategyConfig memory _baseConfig,\\n        address _wethAddress,\\n        address _ssvToken,\\n        address _ssvNetwork,\\n        address _beaconChainDepositContract,\\n        address _beaconProofs,\\n        uint64 _beaconGenesisTimestamp\\n    )\\n        InitializableAbstractStrategy(_baseConfig)\\n        CompoundingValidatorManager(\\n            _wethAddress,\\n            _baseConfig.vaultAddress,\\n            _beaconChainDepositContract,\\n            _ssvNetwork,\\n            _beaconProofs,\\n            _beaconGenesisTimestamp\\n        )\\n    {\\n        SSV_TOKEN = _ssvToken;\\n\\n        // Make sure nobody owns the implementation contract\\n        _setGovernor(address(0));\\n    }\\n\\n    /// @notice Set up initial internal state including\\n    /// 1. approving the SSVNetwork to transfer SSV tokens from this strategy contract\\n    /// @param _rewardTokenAddresses Not used so empty array\\n    /// @param _assets Not used so empty array\\n    /// @param _pTokens Not used so empty array\\n    function initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n\\n        safeApproveAllTokens();\\n    }\\n\\n    /// @notice Unlike other strategies, this does not deposit assets into the underlying platform.\\n    /// It just checks the asset is WETH and emits the Deposit event.\\n    /// To deposit WETH into validators, `registerSsvValidator` and `stakeEth` must be used.\\n    /// @param _asset Address of the WETH token.\\n    /// @param _amount Amount of WETH that was transferred to the strategy by the vault.\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_asset == WETH, \\\"Unsupported asset\\\");\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n\\n        // Account for the new WETH\\n        depositedWethAccountedFor += _amount;\\n\\n        emit Deposit(_asset, address(0), _amount);\\n    }\\n\\n    /// @notice Unlike other strategies, this does not deposit assets into the underlying platform.\\n    /// It just emits the Deposit event.\\n    /// To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used.\\n    function depositAll() external override onlyVault nonReentrant {\\n        uint256 wethBalance = IERC20(WETH).balanceOf(address(this));\\n        uint256 newWeth = wethBalance - depositedWethAccountedFor;\\n\\n        if (newWeth > 0) {\\n            // Account for the new WETH\\n            depositedWethAccountedFor = wethBalance;\\n\\n            emit Deposit(WETH, address(0), newWeth);\\n        }\\n    }\\n\\n    /// @notice Withdraw ETH and WETH from this strategy contract.\\n    /// @param _recipient Address to receive withdrawn assets.\\n    /// @param _asset Address of the WETH token.\\n    /// @param _amount Amount of WETH to withdraw.\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_asset == WETH, \\\"Unsupported asset\\\");\\n\\n        _withdraw(_recipient, _amount, address(this).balance);\\n    }\\n\\n    function _withdraw(\\n        address _recipient,\\n        uint256 _withdrawAmount,\\n        uint256 _ethBalance\\n    ) internal {\\n        require(_withdrawAmount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\n\\n        // Convert any ETH from validator partial withdrawals, exits\\n        // or execution rewards to WETH and do the necessary accounting.\\n        if (_ethBalance > 0) _convertEthToWeth(_ethBalance);\\n\\n        // Transfer WETH to the recipient and do the necessary accounting.\\n        _transferWeth(_withdrawAmount, _recipient);\\n\\n        emit Withdrawal(WETH, address(0), _withdrawAmount);\\n    }\\n\\n    /// @notice Transfer all WETH deposits, ETH from validator withdrawals and ETH from\\n    /// execution rewards in this strategy to the vault.\\n    /// This does not withdraw from the validators. That has to be done separately with the\\n    /// `validatorWithdrawal` operation.\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        uint256 ethBalance = address(this).balance;\\n        uint256 withdrawAmount = IERC20(WETH).balanceOf(address(this)) +\\n            ethBalance;\\n\\n        if (withdrawAmount > 0) {\\n            _withdraw(vaultAddress, withdrawAmount, ethBalance);\\n        }\\n    }\\n\\n    /// @notice Accounts for all the assets managed by this strategy which includes:\\n    /// 1. The current WETH in this strategy contract\\n    /// 2. The last verified ETH balance, total deposits and total validator balances\\n    /// @param _asset      Address of WETH asset.\\n    /// @return balance    Total value in ETH\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        require(_asset == WETH, \\\"Unsupported asset\\\");\\n\\n        // Load the last verified balance from the storage\\n        // and add to the latest WETH balance of this strategy.\\n        balance =\\n            lastVerifiedEthBalance +\\n            IWETH9(WETH).balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns bool indicating whether asset is supported by the strategy.\\n    /// @param _asset The address of the WETH token.\\n    function supportsAsset(address _asset) public view override returns (bool) {\\n        return _asset == WETH;\\n    }\\n\\n    /// @notice Approves the SSV Network contract to transfer SSV tokens for validator registration.\\n    function safeApproveAllTokens() public override {\\n        // Approves the SSV Network contract to transfer SSV tokens when validators are registered\\n        IERC20(SSV_TOKEN).approve(SSV_NETWORK, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice We can accept ETH directly to this contract from anyone as it does not impact our accounting\\n     * like it did in the legacy NativeStakingStrategy.\\n     * The new ETH will be accounted for in `checkBalance` after the next snapBalances and verifyBalances txs.\\n     */\\n    receive() external payable {}\\n\\n    /***************************************\\n                Internal functions\\n    ****************************************/\\n\\n    /// @notice is not supported for this strategy as there is no platform token.\\n    function setPTokenAddress(address, address) external pure override {\\n        revert(\\\"Unsupported function\\\");\\n    }\\n\\n    /// @notice is not supported for this strategy as there is no platform token.\\n    function removePToken(uint256) external pure override {\\n        revert(\\\"Unsupported function\\\");\\n    }\\n\\n    /// @dev This strategy does not use a platform token like the old Aave and Compound strategies.\\n    function _abstractSetPToken(address _asset, address) internal override {}\\n\\n    /// @dev Consensus rewards are compounded to the validator's balance instead of being\\n    /// swept to this strategy contract.\\n    /// Execution rewards from MEV and tx priority accumulate as ETH in this strategy contract.\\n    /// Withdrawals from validators also accumulate as ETH in this strategy contract.\\n    /// It's too complex to separate the rewards from withdrawals so this function is not implemented.\\n    /// Besides, ETH rewards are not sent to the Dripper any more. The Vault can now regulate\\n    /// the increase in assets.\\n    function _collectRewardTokens() internal pure override {\\n        revert(\\\"Unsupported function\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1c54018f3c60ed6c0a3a9c5c2c6e6ca4c29ffd4434e96fab0cb7f3d06e3bd649\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/NativeStaking/CompoundingValidatorManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Governable } from \\\"../../governance/Governable.sol\\\";\\nimport { IDepositContract } from \\\"../../interfaces/IDepositContract.sol\\\";\\nimport { IWETH9 } from \\\"../../interfaces/IWETH9.sol\\\";\\nimport { ISSVNetwork, Cluster } from \\\"../../interfaces/ISSVNetwork.sol\\\";\\nimport { BeaconRoots } from \\\"../../beacon/BeaconRoots.sol\\\";\\nimport { PartialWithdrawal } from \\\"../../beacon/PartialWithdrawal.sol\\\";\\nimport { IBeaconProofs } from \\\"../../interfaces/IBeaconProofs.sol\\\";\\n\\n/**\\n * @title Validator lifecycle management contract\\n * @notice This contract implements all the required functionality to\\n * register, deposit, withdraw, exit and remove validators.\\n * @author Origin Protocol Inc\\n */\\nabstract contract CompoundingValidatorManager is Governable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The amount of ETH in wei that is required for a deposit to a new validator.\\n    /// Initially this is 32 ETH, but will be reduced to 1 ETH after P2P's APIs have been updated\\n    /// to support deposits of 1 ETH.\\n    uint256 internal constant DEPOSIT_AMOUNT_WEI = 32 ether;\\n    /// @dev The maximum number of deposits that are waiting to be verified as processed on the beacon chain.\\n    uint256 internal constant MAX_DEPOSITS = 12;\\n    /// @dev The maximum number of validators that can be verified.\\n    uint256 internal constant MAX_VERIFIED_VALIDATORS = 48;\\n    /// @dev The default withdrawable epoch value on the Beacon chain.\\n    /// A value in the far future means the validator is not exiting.\\n    uint64 internal constant FAR_FUTURE_EPOCH = type(uint64).max;\\n    /// @dev The number of seconds between each beacon chain slot.\\n    uint64 internal constant SLOT_DURATION = 12;\\n    /// @dev The number of slots in each beacon chain epoch.\\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\\n    /// @dev Minimum time in seconds to allow snapped balances to be verified.\\n    /// Set to 1 epoch as the pending deposits only changes every epoch.\\n    /// That's also enough time to generate the proofs and call `verifyBalances`.\\n    uint64 internal constant SNAP_BALANCES_DELAY =\\n        SLOTS_PER_EPOCH * SLOT_DURATION;\\n\\n    /// @notice The address of the Wrapped ETH (WETH) token contract\\n    address public immutable WETH;\\n    /// @notice The address of the beacon chain deposit contract\\n    address public immutable BEACON_CHAIN_DEPOSIT_CONTRACT;\\n    /// @notice The address of the SSV Network contract used to interface with\\n    address public immutable SSV_NETWORK;\\n    /// @notice Address of the OETH Vault proxy contract\\n    address public immutable VAULT_ADDRESS;\\n    /// @notice Address of the Beacon Proofs contract that verifies beacon chain data\\n    address public immutable BEACON_PROOFS;\\n    /// @notice The timestamp of the Beacon chain genesis.\\n    /// @dev this is different on Testnets like Hoodi so is set at deployment time.\\n    uint64 public immutable BEACON_GENESIS_TIMESTAMP;\\n\\n    /// @notice Address of the registrator - allowed to register, withdraw, exit and remove validators\\n    address public validatorRegistrator;\\n\\n    /// Deposit data for new compounding validators.\\n    enum DepositStatus {\\n        UNKNOWN, // default value\\n        PENDING, // deposit is pending and waiting to be  verified\\n        VERIFIED // deposit has been verified and is ready to be staked\\n    }\\n\\n    /// @param pubKeyHash Hash of validator's public key using the Beacon Chain's format\\n    /// @param amountWei Amount of ETH in wei that has been deposited to the beacon chain deposit contract\\n    /// @param blockNumber Block number when the deposit was made\\n    /// @param depositIndex The index of the deposit in the list of active deposits\\n    /// @param status The status of the deposit, either PENDING or VERIFIED\\n    struct DepositData {\\n        bytes32 pubKeyHash;\\n        uint64 amountGwei;\\n        uint64 slot;\\n        uint32 depositIndex;\\n        DepositStatus status;\\n        uint64 withdrawableEpoch;\\n    }\\n    /// @notice Restricts to only one deposit to an unverified validator at a time.\\n    /// This is to limit front-running attacks of deposits to the beacon chain contract.\\n    bool public firstDeposit;\\n    /// @notice Unique identifier of the next validator deposit.\\n    uint128 public nextDepositID;\\n    /// @notice Mapping of the deposit ID to the deposit data\\n    mapping(uint256 => DepositData) public deposits;\\n    /// @notice List of strategy deposit IDs to a validator.\\n    /// The list can be for deposits waiting to be verified as processed on the beacon chain,\\n    /// or deposits that have been verified to an exiting validator and is now waiting for the\\n    /// validator's balance to be swept.\\n    /// The list may not be ordered by time of deposit.\\n    /// Removed deposits will move the last deposit to the removed index.\\n    uint256[] public depositList;\\n\\n    // Validator data\\n    enum ValidatorState {\\n        NON_REGISTERED, // validator is not registered on the SSV network\\n        REGISTERED, // validator is registered on the SSV network\\n        STAKED, // validator has funds staked\\n        VERIFIED, // validator has been verified to exist on the beacon chain\\n        EXITING, // The validator has been requested to exit or has been verified as forced exit\\n        EXITED, // The validator has been verified to have a zero balance\\n        REMOVED, // validator has funds withdrawn to the EigenPod and is removed from the SSV\\n        INVALID // The validator has been front-run and the withdrawal address is not this strategy\\n    }\\n\\n    struct ValidatorData {\\n        ValidatorState state;\\n        uint64 index; // The index of the validator on the beacon chain\\n    }\\n    /// @notice List of validator public key hashes that have been verified to exist on the beacon chain.\\n    /// These have had a deposit processed and the validator's balance increased.\\n    /// Validators will be removed from this list when its verified they have a zero balance.\\n    bytes32[] public verifiedValidators;\\n    /// @notice Mapping of the hash of the validator's public key to the validator state and index.\\n    /// Uses the Beacon chain hashing for BLSPubkey which is sha256(abi.encodePacked(validator.pubkey, bytes16(0)))\\n    mapping(bytes32 => ValidatorData) public validator;\\n\\n    /// @param timestamp Timestamp of the snapshot\\n    /// @param ethBalance The balance of ETH in the strategy contract at the snapshot\\n    struct Balances {\\n        uint64 timestamp;\\n        uint128 ethBalance;\\n    }\\n    /// @notice Mapping of the block root to the balances at that slot\\n    mapping(bytes32 => Balances) public snappedBalances;\\n    /// @notice The timestamp of the last snapshot taken\\n    uint64 public lastSnapTimestamp;\\n    /// @notice The last verified ETH balance of the strategy\\n    uint128 public lastVerifiedEthBalance;\\n\\n    /// @dev This contract receives WETH as the deposit asset, but unlike other strategies doesn't immediately\\n    /// deposit it to an underlying platform. Rather a special privilege account stakes it to the validators.\\n    /// For that reason calling WETH.balanceOf(this) in a deposit function can contain WETH that has just been\\n    /// deposited and also WETH that has previously been deposited. To keep a correct count we need to keep track\\n    /// of WETH that has already been accounted for.\\n    /// This value represents the amount of WETH balance of this contract that has already been accounted for by the\\n    /// deposit events.\\n    /// It is important to note that this variable is not concerned with WETH that is a result of full/partial\\n    /// withdrawal of the validators. It is strictly concerned with WETH that has been deposited and is waiting to\\n    /// be staked.\\n    uint256 public depositedWethAccountedFor;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    event RegistratorChanged(address indexed newAddress);\\n    event StakingMonitorChanged(address indexed newAddress);\\n    event FirstDepositReset();\\n    event SSVValidatorRegistered(\\n        bytes32 indexed pubKeyHash,\\n        uint64[] operatorIds\\n    );\\n    event SSVValidatorRemoved(bytes32 indexed pubKeyHash, uint64[] operatorIds);\\n    event ETHStaked(\\n        bytes32 indexed pubKeyHash,\\n        uint256 indexed depositID,\\n        bytes pubKey,\\n        uint256 amountWei\\n    );\\n    event ValidatorVerified(\\n        bytes32 indexed pubKeyHash,\\n        uint64 indexed validatorIndex\\n    );\\n    event ValidatorInvalid(bytes32 indexed pubKeyHash);\\n    event DepositVerified(uint256 indexed depositID, uint256 amountWei);\\n    event DepositToValidatorExiting(\\n        uint256 indexed depositID,\\n        uint256 amountWei,\\n        uint64 withdrawableEpoch\\n    );\\n    event DepositValidatorExited(uint256 indexed depositID, uint256 amountWei);\\n    event ValidatorWithdraw(bytes32 indexed pubKeyHash, uint256 amountWei);\\n    event BalancesSnapped(bytes32 indexed blockRoot, uint256 ethBalance);\\n    event BalancesVerified(\\n        uint64 indexed timestamp,\\n        uint256 totalDepositsWei,\\n        uint256 totalValidatorBalance,\\n        uint256 ethBalance\\n    );\\n\\n    /// @dev Throws if called by any account other than the Registrator\\n    modifier onlyRegistrator() {\\n        require(msg.sender == validatorRegistrator, \\\"Not Registrator\\\");\\n        _;\\n    }\\n\\n    /// @param _wethAddress Address of the Erc20 WETH Token contract\\n    /// @param _vaultAddress Address of the Vault\\n    /// @param _beaconChainDepositContract Address of the beacon chain deposit contract\\n    /// @param _ssvNetwork Address of the SSV Network contract\\n    /// @param _beaconProofs Address of the Beacon Proofs contract that verifies beacon chain data\\n    /// @param _beaconGenesisTimestamp The timestamp of the Beacon chain's genesis.\\n    constructor(\\n        address _wethAddress,\\n        address _vaultAddress,\\n        address _beaconChainDepositContract,\\n        address _ssvNetwork,\\n        address _beaconProofs,\\n        uint64 _beaconGenesisTimestamp\\n    ) {\\n        WETH = _wethAddress;\\n        BEACON_CHAIN_DEPOSIT_CONTRACT = _beaconChainDepositContract;\\n        SSV_NETWORK = _ssvNetwork;\\n        VAULT_ADDRESS = _vaultAddress;\\n        BEACON_PROOFS = _beaconProofs;\\n        BEACON_GENESIS_TIMESTAMP = _beaconGenesisTimestamp;\\n\\n        require(\\n            block.timestamp > _beaconGenesisTimestamp,\\n            \\\"Invalid genesis timestamp\\\"\\n        );\\n    }\\n\\n    /**\\n     *\\n     *             Admin Functions\\n     *\\n     */\\n\\n    /// @notice Set the address of the registrator which can register, exit and remove validators\\n    function setRegistrator(address _address) external onlyGovernor {\\n        validatorRegistrator = _address;\\n        emit RegistratorChanged(_address);\\n    }\\n\\n    /// @notice Reset the `firstDeposit` flag to false so deposits to unverified validators can be made again.\\n    function resetFirstDeposit() external onlyGovernor {\\n        require(firstDeposit, \\\"No first deposit\\\");\\n\\n        firstDeposit = false;\\n\\n        emit FirstDepositReset();\\n    }\\n\\n    /**\\n     *\\n     *             Validator Management\\n     *\\n     */\\n\\n    /// @notice Registers a single validator in a SSV Cluster.\\n    /// Only the Registrator can call this function.\\n    /// @param publicKey The public key of the validator\\n    /// @param operatorIds The operator IDs of the SSV Cluster\\n    /// @param sharesData The shares data for the validator\\n    /// @param ssvAmount The amount of SSV tokens to be deposited to the SSV cluster\\n    /// @param cluster The SSV cluster details including the validator count and SSV balance\\n    // slither-disable-start reentrancy-no-eth\\n    function registerSsvValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds,\\n        bytes calldata sharesData,\\n        uint256 ssvAmount,\\n        Cluster calldata cluster\\n    ) external onlyRegistrator {\\n        // Hash the public key using the Beacon Chain's format\\n        bytes32 pubKeyHash = _hashPubKey(publicKey);\\n        // Check each public key has not already been used\\n        require(\\n            validator[pubKeyHash].state == ValidatorState.NON_REGISTERED,\\n            \\\"Validator already registered\\\"\\n        );\\n\\n        // Store the validator state as registered\\n        validator[pubKeyHash].state = ValidatorState.REGISTERED;\\n\\n        ISSVNetwork(SSV_NETWORK).registerValidator(\\n            publicKey,\\n            operatorIds,\\n            sharesData,\\n            ssvAmount,\\n            cluster\\n        );\\n\\n        emit SSVValidatorRegistered(pubKeyHash, operatorIds);\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    struct ValidatorStakeData {\\n        bytes pubkey;\\n        bytes signature;\\n        bytes32 depositDataRoot;\\n    }\\n\\n    /// @notice Stakes WETH in this strategy to a compounding validator.\\n    /// Does not convert any ETH sitting in this strategy to WETH.\\n    /// @param validatorStakeData validator data needed to stake.\\n    /// The `ValidatorStakeData` struct contains the pubkey, signature and depositDataRoot.\\n    /// Only the registrator can call this function.\\n    /// @param depositAmountGwei The amount of WETH to stake to the validator in Gwei.\\n    // slither-disable-start reentrancy-eth\\n    function stakeEth(\\n        ValidatorStakeData calldata validatorStakeData,\\n        uint64 depositAmountGwei\\n    ) external onlyRegistrator {\\n        uint256 depositAmountWei = uint256(depositAmountGwei) * 1 gwei;\\n        // Check there is enough WETH from the deposits sitting in this strategy contract\\n        // There could be ETH from withdrawals but we'll ignore that. If it's really needed\\n        // the ETH can be withdrawn and then deposited back to the strategy.\\n        require(\\n            depositAmountWei <= IWETH9(WETH).balanceOf(address(this)),\\n            \\\"Insufficient WETH\\\"\\n        );\\n        require(depositList.length < MAX_DEPOSITS, \\\"Max deposits\\\");\\n\\n        // Convert required ETH from WETH and do the necessary accounting\\n        _convertWethToEth(depositAmountWei);\\n\\n        // Hash the public key using the Beacon Chain's hashing for BLSPubkey\\n        bytes32 pubKeyHash = _hashPubKey(validatorStakeData.pubkey);\\n        ValidatorState currentState = validator[pubKeyHash].state;\\n        // Can only stake to a validator has have been registered or verified.\\n        // Can not stake to a validator that has been staked but not yet verified.\\n        require(\\n            (currentState == ValidatorState.REGISTERED ||\\n                currentState == ValidatorState.VERIFIED),\\n            \\\"Not registered or verified\\\"\\n        );\\n        require(depositAmountWei >= 1 ether, \\\"Deposit too small\\\");\\n        if (currentState == ValidatorState.REGISTERED) {\\n            // Can only have one pending deposit to an unverified validator at a time.\\n            // This is to limit front-running deposit attacks to a single deposit.\\n            // The exiting deposit needs to be verified before another deposit can be made.\\n            // If there was a front-running attack, the validator needs to be verified as invalid\\n            // and the Governor calls `resetFirstDeposit` to set `firstDeposit` to false.\\n            require(!firstDeposit, \\\"Existing first deposit\\\");\\n            // Limits the amount of ETH that can be at risk from a front-running deposit attack.\\n            require(\\n                depositAmountWei == DEPOSIT_AMOUNT_WEI,\\n                \\\"Invalid first deposit amount\\\"\\n            );\\n            // Limits the number of validator balance proofs to verifyBalances\\n            require(\\n                verifiedValidators.length + 1 < MAX_VERIFIED_VALIDATORS,\\n                \\\"Max validators\\\"\\n            );\\n\\n            // Flag a deposit to an unverified validator so only no other deposits can be made\\n            // to an unverified validator.\\n            firstDeposit = true;\\n        }\\n\\n        /* 0x02 to indicate that withdrawal credentials are for a compounding validator\\n         * that was introduced with the Pectra upgrade.\\n         * bytes11(0) to fill up the required zeros\\n         * remaining bytes20 are for the address\\n         */\\n        bytes memory withdrawalCredentials = abi.encodePacked(\\n            bytes1(0x02),\\n            bytes11(0),\\n            address(this)\\n        );\\n\\n        // Deposit to the Beacon Chain deposit contract.\\n        // This will create a deposit in the beacon chain's pending deposit queue.\\n        IDepositContract(BEACON_CHAIN_DEPOSIT_CONTRACT).deposit{\\n            value: depositAmountWei\\n        }(\\n            validatorStakeData.pubkey,\\n            withdrawalCredentials,\\n            validatorStakeData.signature,\\n            validatorStakeData.depositDataRoot\\n        );\\n\\n        //// Update contract storage\\n        // Store the validator state if needed\\n        if (currentState == ValidatorState.REGISTERED) {\\n            validator[pubKeyHash].state = ValidatorState.STAKED;\\n        }\\n\\n        /// After the Pectra upgrade the validators have a new restriction when proposing\\n        /// blocks. The timestamps are at strict intervals of 12 seconds from the genesis block\\n        /// forward. Each slot is created at strict 12 second intervals and those slots can\\n        /// either have blocks attached to them or not. This way using the block.timestamp\\n        /// the slot number can easily be calculated.\\n        uint64 depositSlot = (SafeCast.toUint64(block.timestamp) -\\n            BEACON_GENESIS_TIMESTAMP) / SLOT_DURATION;\\n\\n        // Store the deposit data for verifyDeposit and verifyBalances\\n        uint256 depositID = nextDepositID++;\\n        deposits[depositID] = DepositData({\\n            pubKeyHash: pubKeyHash,\\n            amountGwei: depositAmountGwei,\\n            slot: depositSlot,\\n            depositIndex: SafeCast.toUint32(depositList.length),\\n            status: DepositStatus.PENDING,\\n            withdrawableEpoch: FAR_FUTURE_EPOCH\\n        });\\n        depositList.push(depositID);\\n\\n        emit ETHStaked(\\n            pubKeyHash,\\n            depositID,\\n            validatorStakeData.pubkey,\\n            depositAmountWei\\n        );\\n    }\\n\\n    // slither-disable-end reentrancy-eth\\n\\n    /// @notice Request a full or partial withdrawal from a validator.\\n    /// A zero amount will trigger a full withdrawal.\\n    /// If the remaining balance is < 32 ETH then only the amount in excess of 32 ETH will be withdrawn.\\n    /// Only the Registrator can call this function.\\n    /// 1 wei of value should be sent with the tx to pay for the withdrawal request fee.\\n    /// If no value sent, 1 wei will be taken from the strategy's ETH balance if it has any.\\n    /// If no ETH balance, the tx will revert.\\n    /// @param publicKey The public key of the validator\\n    /// @param amountGwei The amount of ETH to be withdrawn from the validator in Gwei.\\n    /// A zero amount will trigger a full withdrawal.\\n    // slither-disable-start reentrancy-no-eth\\n    function validatorWithdrawal(bytes calldata publicKey, uint64 amountGwei)\\n        external\\n        payable\\n        onlyRegistrator\\n    {\\n        // Hash the public key using the Beacon Chain's format\\n        bytes32 pubKeyHash = _hashPubKey(publicKey);\\n        ValidatorState currentState = validator[pubKeyHash].state;\\n        require(\\n            currentState == ValidatorState.VERIFIED,\\n            \\\"Validator not verified\\\"\\n        );\\n\\n        PartialWithdrawal.request(publicKey, amountGwei);\\n\\n        // If a full withdrawal (validator exit)\\n        if (amountGwei == 0) {\\n            // Store the validator state as exiting so no more deposits can be made to it.\\n            validator[pubKeyHash].state = ValidatorState.EXITING;\\n        }\\n\\n        // Do not remove from the list of verified validators.\\n        // This is done in the verifyBalances function once the validator's balance has been verified to be zero.\\n        // The validator state will be set to EXITED in the verifyBalances function.\\n\\n        emit ValidatorWithdraw(pubKeyHash, uint256(amountGwei) * 1 gwei);\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    /// @notice Remove the validator from the SSV Cluster after:\\n    /// - the validator has been exited from `validatorWithdrawal` or slashed\\n    /// - the validator has incorrectly registered and can not be staked to\\n    /// - the initial deposit was front-run and the withdrawal address is not this strategy's address.\\n    /// Make sure `validatorWithdrawal` is called with a zero amount and the validator has exited the Beacon chain.\\n    /// If removed before the validator has exited the beacon chain will result in the validator being slashed.\\n    /// Only the registrator can call this function.\\n    /// @param publicKey The public key of the validator\\n    /// @param operatorIds The operator IDs of the SSV Cluster\\n    /// @param cluster The SSV cluster details including the validator count and SSV balance\\n    // slither-disable-start reentrancy-no-eth\\n    function removeSsvValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds,\\n        Cluster calldata cluster\\n    ) external onlyRegistrator {\\n        // Hash the public key using the Beacon Chain's format\\n        bytes32 pubKeyHash = _hashPubKey(publicKey);\\n        ValidatorState currentState = validator[pubKeyHash].state;\\n        // Can remove SSV validators that were incorrectly registered and can not be deposited to.\\n        require(\\n            currentState == ValidatorState.REGISTERED ||\\n                currentState == ValidatorState.EXITED ||\\n                currentState == ValidatorState.INVALID,\\n            \\\"Validator not regd or exited\\\"\\n        );\\n\\n        ISSVNetwork(SSV_NETWORK).removeValidator(\\n            publicKey,\\n            operatorIds,\\n            cluster\\n        );\\n\\n        validator[pubKeyHash].state = ValidatorState.REMOVED;\\n\\n        emit SSVValidatorRemoved(pubKeyHash, operatorIds);\\n    }\\n\\n    /**\\n     *\\n     *             SSV Management\\n     *\\n     */\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    /// `depositSSV` has been removed as `deposit` on the SSVNetwork contract can be called directly\\n    /// by the Strategist which is already holding SSV tokens.\\n\\n    /// @notice Withdraws excess SSV Tokens from the SSV Network contract which was used to pay the SSV Operators.\\n    /// @dev A SSV cluster is defined by the SSVOwnerAddress and the set of operatorIds.\\n    /// @param operatorIds The operator IDs of the SSV Cluster\\n    /// @param ssvAmount The amount of SSV tokens to be withdrawn from the SSV cluster\\n    /// @param cluster The SSV cluster details including the validator count and SSV balance\\n    function withdrawSSV(\\n        uint64[] memory operatorIds,\\n        uint256 ssvAmount,\\n        Cluster memory cluster\\n    ) external onlyGovernor {\\n        ISSVNetwork(SSV_NETWORK).withdraw(operatorIds, ssvAmount, cluster);\\n    }\\n\\n    /**\\n     *\\n     *             Beacon Chain Proofs\\n     *\\n     */\\n\\n    /// @notice Verifies a validator's index to its public key.\\n    /// Adds to the list of verified validators if the validator's withdrawal address is this strategy's address.\\n    /// Marks the validator as invalid and removes the deposit if the withdrawal address is not this strategy's address.\\n    /// @param nextBlockTimestamp The timestamp of the execution layer block after the beacon chain slot\\n    /// we are verifying.\\n    /// The next one is needed as the Beacon Oracle returns the parent beacon block root for a block timestamp,\\n    /// which is the beacon block root of the previous block.\\n    /// @param validatorIndex The index of the validator on the beacon chain.\\n    /// @param pubKeyHash The hash of the validator's public key using the Beacon Chain's format\\n    /// @param withdrawalAddress The withdrawal address of the validator which should be this strategy's address.\\n    /// If the withdrawal address is not this strategy's address, the initial deposit was front-run\\n    /// and the validator is marked as invalid.\\n    /// @param validatorPubKeyProof The merkle proof for the validator public key to the beacon block root.\\n    /// This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// BeaconBlock.state.validators[validatorIndex].pubkey\\n    function verifyValidator(\\n        uint64 nextBlockTimestamp,\\n        uint64 validatorIndex,\\n        bytes32 pubKeyHash,\\n        address withdrawalAddress,\\n        bytes calldata validatorPubKeyProof\\n    ) external {\\n        require(\\n            validator[pubKeyHash].state == ValidatorState.STAKED,\\n            \\\"Validator not staked\\\"\\n        );\\n\\n        // Get the beacon block root of the slot we are verifying the validator in.\\n        // The parent beacon block root of the next block is the beacon block root of the slot we are verifying.\\n        bytes32 blockRoot = BeaconRoots.parentBlockRoot(nextBlockTimestamp);\\n\\n        // Verify the validator index is for the validator with the given public key.\\n        // Also verify the validator's withdrawal credential points to the `withdrawalAddress`.\\n        IBeaconProofs(BEACON_PROOFS).verifyValidator(\\n            blockRoot,\\n            pubKeyHash,\\n            validatorPubKeyProof,\\n            validatorIndex,\\n            withdrawalAddress\\n        );\\n\\n        // If the initial deposit was front-run and the withdrawal address is not this strategy\\n        if (withdrawalAddress != address(this)) {\\n            validator[pubKeyHash] = ValidatorData({\\n                state: ValidatorState.INVALID,\\n                index: validatorIndex\\n            });\\n\\n            // Find and remove the deposit as the funds can not be recovered\\n            uint256 depositCount = depositList.length;\\n            for (uint256 i = 0; i < depositCount; i++) {\\n                DepositData memory deposit = deposits[depositList[i]];\\n                if (deposit.pubKeyHash == pubKeyHash) {\\n                    _removeDeposit(depositList[i], deposit);\\n                    break;\\n                }\\n            }\\n\\n            // Leave the `firstDeposit` flag as true so no more deposits to unverified validators can be made.\\n            // The Governor has to reset the `firstDeposit` to false before another deposit to\\n            // an unverified validator can be made.\\n            // The Governor can set a new `validatorRegistrator` if they suspect it has been compromised.\\n\\n            emit ValidatorInvalid(pubKeyHash);\\n            return;\\n        }\\n\\n        // Store the validator state as verified\\n        validator[pubKeyHash] = ValidatorData({\\n            state: ValidatorState.VERIFIED,\\n            index: validatorIndex\\n        });\\n\\n        // Add the new validator to the list of verified validators\\n        verifiedValidators.push(pubKeyHash);\\n\\n        // Reset the firstDeposit flag as the first deposit to an unverified validator has been verified.\\n        firstDeposit = false;\\n\\n        emit ValidatorVerified(pubKeyHash, validatorIndex);\\n    }\\n\\n    struct FirstPendingDepositProofData {\\n        uint64 slot;\\n        uint64 validatorIndex;\\n        bytes32 pubKeyHash;\\n        bytes pendingDepositPubKeyProof;\\n        bytes withdrawableEpochProof;\\n        bytes validatorPubKeyProof;\\n    }\\n\\n    struct DepositValidatorProofData {\\n        uint64 withdrawableEpoch;\\n        bytes withdrawableEpochProof;\\n    }\\n\\n    /// @notice Verifies a deposit on the execution layer has been processed by the beacon chain.\\n    /// This means the accounting of the strategy's ETH moves from a pending deposit to a validator balance.\\n    ///\\n    /// Important: this function has a limitation where the `verificationSlot` that is passed by the off-chain\\n    /// verifier requires a slot immediately after it to propose a block otherwise the `BeaconRoots.parentBlockRoot`\\n    /// will fail. This shouldn't be a problem, since by the current behaviour of beacon chain only 1%-3% slots\\n    /// don't propose a block.\\n    /// @param depositID The deposit ID emitted in `ETHStaked` from the `stakeEth` function.\\n    /// @param depositProcessedSlot Any slot on or after the strategy's deposit was processed on the beacon chain.\\n    /// Can not be a slot with pending deposits with the same slot as the deposit being verified.\\n    /// Can not be a slot before a missed slot as the Beacon Root contract will have the parent block root\\n    /// set for the next block timestamp in 12 seconds time.\\n    /// @param firstDepositValidatorCreatedSlot The slot on or after when the validator of the first pending deposit\\n    /// was created on the beacon chain. This is used to verify the validator has not exited.\\n    // slither-disable-start reentrancy-no-eth\\n    function verifyDeposit(\\n        uint256 depositID,\\n        uint64 depositProcessedSlot,\\n        uint64 firstDepositValidatorCreatedSlot,\\n        FirstPendingDepositProofData calldata firstPendingDeposit,\\n        DepositValidatorProofData calldata strategyValidatorData\\n    ) external {\\n        // Load into memory the previously saved deposit data\\n        DepositData memory deposit = deposits[depositID];\\n        ValidatorData memory strategyValidator = validator[deposit.pubKeyHash];\\n        require(deposit.status == DepositStatus.PENDING, \\\"Deposit not pending\\\");\\n        require(\\n            strategyValidator.state == ValidatorState.VERIFIED,\\n            \\\"Validator not verified\\\"\\n        );\\n        // The verification slot must be after the deposit's slot.\\n        // This is needed for when the deposit queue is empty.\\n        require(deposit.slot < depositProcessedSlot, \\\"Slot not after deposit\\\");\\n        require(\\n            depositProcessedSlot <= firstDepositValidatorCreatedSlot,\\n            \\\"Invalid verification slots\\\"\\n        );\\n\\n        // Get the parent beacon block root of the next block which is the block root of the deposit verification slot.\\n        // This will revert if the slot after the verification slot was missed.\\n        bytes32 depositBlockRoot = BeaconRoots.parentBlockRoot(\\n            _calcNextBlockTimestamp(depositProcessedSlot)\\n        );\\n\\n        // Verify the slot of the first pending deposit matches the beacon chain\\n        bool isDepositQueueEmpty = IBeaconProofs(BEACON_PROOFS)\\n            .verifyFirstPendingDeposit(\\n                depositBlockRoot,\\n                firstPendingDeposit.slot,\\n                firstPendingDeposit.pubKeyHash,\\n                firstPendingDeposit.pendingDepositPubKeyProof\\n            );\\n\\n        // If the deposit queue is not empty\\n        if (!isDepositQueueEmpty) {\\n            // Get the parent beacon block root of the next block which is\\n            // the block root of the validator verification slot.\\n            // This will revert if the slot after the verification slot was missed.\\n            bytes32 validatorBlockRoot = BeaconRoots.parentBlockRoot(\\n                _calcNextBlockTimestamp(firstDepositValidatorCreatedSlot)\\n            );\\n\\n            // Verify the validator of the first pending deposit is not exiting.\\n            // If it is exiting we can't be sure this deposit has not been postponed in the deposit queue.\\n            // Hence we can not verify if the strategy's deposit has been processed or not.\\n            IBeaconProofs(BEACON_PROOFS).verifyValidatorWithdrawable(\\n                validatorBlockRoot,\\n                firstPendingDeposit.validatorIndex,\\n                firstPendingDeposit.pubKeyHash,\\n                FAR_FUTURE_EPOCH,\\n                firstPendingDeposit.withdrawableEpochProof,\\n                firstPendingDeposit.validatorPubKeyProof\\n            );\\n        }\\n\\n        // Verify the withdrawableEpoch on the validator of the strategy's deposit\\n        IBeaconProofs(BEACON_PROOFS).verifyValidatorWithdrawable(\\n            depositBlockRoot,\\n            strategyValidator.index,\\n            strategyValidatorData.withdrawableEpoch,\\n            strategyValidatorData.withdrawableEpochProof\\n        );\\n\\n        // If the validator is exiting because it has been slashed\\n        if (strategyValidatorData.withdrawableEpoch != FAR_FUTURE_EPOCH) {\\n            // Store the exit epoch in the deposit data\\n            deposit.withdrawableEpoch = strategyValidatorData.withdrawableEpoch;\\n\\n            emit DepositToValidatorExiting(\\n                depositID,\\n                uint256(deposit.amountGwei) * 1 gwei,\\n                strategyValidatorData.withdrawableEpoch\\n            );\\n\\n            validator[deposit.pubKeyHash].state = ValidatorState.EXITING;\\n\\n            // Leave the deposit status as PENDING\\n            return;\\n        }\\n\\n        // solhint-disable max-line-length\\n        // Check the deposit slot is before the first pending deposit's slot on the beacon chain.\\n        // If this is not true then we can't guarantee the deposit has been processed by the beacon chain.\\n        // The deposit's slot can not be the same slot as the first pending deposit as there could be\\n        // many deposits in the same block, hence have the same pending deposit slot.\\n        // If the deposit queue is empty then our deposit must have been processed on the beacon chain.\\n        // The deposit slot can be zero for validators consolidating to a compounding validator or 0x01 validator\\n        // being promoted to a compounding one. Reference:\\n        // - [switch_to_compounding_validator](https://ethereum.github.io/consensus-specs/specs/electra/beacon-chain/#new-switch_to_compounding_validator\\n        // - [queue_excess_active_balance](https://ethereum.github.io/consensus-specs/specs/electra/beacon-chain/#new-queue_excess_active_balance)\\n        // - [process_consolidation_request](https://ethereum.github.io/consensus-specs/specs/electra/beacon-chain/#new-process_consolidation_request)\\n        // We can not guarantee that the deposit has been processed in that case.\\n        // solhint-enable max-line-length\\n        require(\\n            deposit.slot < firstPendingDeposit.slot || isDepositQueueEmpty,\\n            \\\"Deposit likely not processed\\\"\\n        );\\n\\n        // Remove the deposit now it has been verified as processed on the beacon chain.\\n        _removeDeposit(depositID, deposit);\\n\\n        emit DepositVerified(depositID, uint256(deposit.amountGwei) * 1 gwei);\\n    }\\n\\n    function _removeDeposit(uint256 depositID, DepositData memory deposit)\\n        internal\\n    {\\n        // After verifying the proof, update the contract storage\\n        deposits[depositID].status = DepositStatus.VERIFIED;\\n        // Move the last deposit to the index of the verified deposit\\n        uint256 lastDeposit = depositList[depositList.length - 1];\\n        depositList[deposit.depositIndex] = lastDeposit;\\n        deposits[lastDeposit].depositIndex = deposit.depositIndex;\\n        // Delete the last deposit from the list\\n        depositList.pop();\\n    }\\n\\n    /// @dev Calculates the timestamp of the next execution block from the given slot.\\n    /// @param slot The beacon chain slot number used for merkle proof verification.\\n    function _calcNextBlockTimestamp(uint64 slot)\\n        internal\\n        view\\n        returns (uint64)\\n    {\\n        // Calculate the next block timestamp from the slot.\\n        return SLOT_DURATION * slot + BEACON_GENESIS_TIMESTAMP + SLOT_DURATION;\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    /// @notice Stores the current ETH balance at the current block and beacon block root\\n    ///         of the slot that is associated with the previous block.\\n    ///\\n    /// When snapping / verifying balance it is of a high importance that there is no\\n    /// miss-match in respect to ETH that is held by the contract and balances that are\\n    /// verified on the validators.\\n    ///\\n    /// First some context on the beacon-chain block building behaviour. Relevant parts of\\n    /// constructing a block on the beacon chain consist of:\\n    ///  - process_withdrawals: ETH is deducted from the validator's balance\\n    ///  - process_execution_payload: immediately after the previous step executing all the\\n    ///    transactions\\n    ///  - apply the withdrawals: adding ETH to the recipient which is the withdrawal address\\n    ///    contained in the withdrawal credentials of the exited validators\\n    ///\\n    /// That means that balance increases which are part of the post-block execution state are\\n    /// done within the block, but the transaction that are contained within that block can not\\n    /// see / interact with the balance from the exited validators. Only transactions in the\\n    /// next block can do that.\\n    ///\\n    /// When snap balances is performed the state of the chain is snapped across 2 separate\\n    /// chain states:\\n    ///  - ETH balance of the contract is recorded on block X -> and corresponding slot Y\\n    ///  - beacon chain block root is recorded of block X - 1 -> and corresponding slot Y - 1\\n    ///    given there were no missed slots. It could also be Y - 2, Y - 3 depending on how\\n    ///    many slots have not managed to propose a block. For the sake of simplicity this slot\\n    ///    will be referred to as Y - 1 as it makes no difference in the argument\\n    ///\\n    /// Given these 2 separate chain states it is paramount that verify balances can not experience\\n    /// miss-counting ETH or much more dangerous double counting of the ETH.\\n    ///\\n    /// When verifyBalances is called it is performed on the current block Z where Z > X. Verify\\n    /// balances adds up all the ETH (omitting WETH) controlled by this contract:\\n    ///  - ETH balance in the contract on block X\\n    ///  - ETH balance in Deposits on block Z that haven't been yet processed in slot Y - 1\\n    ///  - ETH balance in validators that are active in slot Y - 1\\n    ///  - skips the ETH balance in validators that have withdrawn in slot Y - 1 (or sooner)\\n    ///    and have their balance visible to transactions in slot Y and corresponding block X\\n    ///    (or sooner)\\n    ///\\n    /// Lets verify the correctness of ETH accounting given the above described behaviour.\\n    ///\\n    /// *ETH balance in the contract on block X*\\n    ///\\n    /// This is an ETH balance of the contract on a non current X block. Any ETH leaving the\\n    /// contract as a result of a withdrawal subtracts from the ETH accounted for on block X\\n    /// if `verifyBalances` has already been called. It also invalidates a `snapBalances` in\\n    /// case `verifyBalances` has not been called yet. Not performing this would result in not\\n    /// accounting for the withdrawn ETH that has happened anywhere in the block interval [X + 1, Z].\\n    ///\\n    /// Similarly to withdrawals any `stakeEth` deposits to the deposit contract adds to the ETH\\n    /// accounted for since the last `verifyBalances` has been called. And it invalidates the\\n    /// `snapBalances` in case `verifyBalances` hasn't been yet called. Not performing this\\n    /// would result in double counting the `stakedEth` since it would be present once in the\\n    /// snapped contract balance and the second time in deposit storage variables.\\n    ///\\n    /// This behaviour is correct.\\n    ///\\n    /// *ETH balance in Deposits on block Z that haven't been yet processed in slot Y - 1*\\n    ///\\n    /// The contract sums up all the ETH that has been deposited to the Beacon chain deposit\\n    /// contract at block Z. The execution layer doesn't have direct access to the state of\\n    /// deposits on the beacon chain. And if it is to sum up all the ETH that is marked to be\\n    /// deposited it needs to be sure to not double count ETH that is in deposits (storage vars)\\n    /// and could also be part of the validator balances. It does that by verifying that at\\n    /// slot Y - 1 none of the deposits visible on block Z have been processed. Meaning since\\n    /// the last snap till now all are still in queue. Which ensures they can not be part of\\n    /// the validator balances in later steps.\\n    ///\\n    /// This behaviour is correct.\\n    ///\\n    /// *ETH balance in validators that are active in slot Y - 1*\\n    ///\\n    /// The contract is verifying none of the deposits on Y - 1 slot have been processed and\\n    /// for that reason it checks the validator balances in the same slot. Ensuring accounting\\n    /// correctness.\\n    ///\\n    /// This behaviour is correct.\\n    ///\\n    /// *The withdrawn validators*\\n    ///\\n    /// The withdrawn validators could have their balances deducted in any slot before slot\\n    /// Y - 1 and the execution layer sees the balance increase in the subsequent slot. Lets\\n    /// look at the \\\"worst case scenario\\\" where the validator withdrawal is processed in the\\n    /// slot Y - 1 (snapped slot) and see their balance increase (in execution layer) in slot\\n    /// Y -> block X. The ETH balance on the contract is snapped at block X meaning that\\n    /// even if the validator exits at the latest possible time it is paramount that the ETH\\n    /// balance on the execution layer is recorded in the next block. Correctly accounting\\n    /// for the withdrawn ETH.\\n    ///\\n    /// Worth mentioning if the validator exit is processed by the slot Y and balance increase\\n    /// seen on the execution layer on block X + 1 the withdrawal is ignored by both the\\n    /// validator balance verification as well as execution layer contract balance snap.\\n    ///\\n    /// This behaviour is correct.\\n    ///\\n    /// The validator balances on the beacon chain can then be proved with `verifyBalances`.\\n    function snapBalances() external {\\n        uint64 currentTimestamp = SafeCast.toUint64(block.timestamp);\\n        require(\\n            lastSnapTimestamp + SNAP_BALANCES_DELAY < currentTimestamp,\\n            \\\"Snap too soon\\\"\\n        );\\n\\n        bytes32 blockRoot = BeaconRoots.parentBlockRoot(currentTimestamp);\\n        // Get the current ETH balance\\n        uint256 ethBalance = address(this).balance;\\n\\n        // Store the balances in the mapping\\n        snappedBalances[blockRoot] = Balances({\\n            timestamp: currentTimestamp,\\n            ethBalance: SafeCast.toUint128(ethBalance)\\n        });\\n\\n        // Store the snapped timestamp\\n        lastSnapTimestamp = currentTimestamp;\\n\\n        emit BalancesSnapped(blockRoot, ethBalance);\\n    }\\n\\n    // A struct is used to avoid stack too deep errors\\n    struct BalanceProofs {\\n        // BeaconBlock.state.balances\\n        bytes32 balancesContainerRoot;\\n        bytes balancesContainerProof;\\n        // BeaconBlock.state.balances[validatorIndex]\\n        bytes32[] validatorBalanceLeaves;\\n        bytes[] validatorBalanceProofs;\\n    }\\n\\n    /// @notice Verifies the balances of all active validators on the beacon chain\\n    /// and checks no pending deposits have been processed by the beacon chain.\\n    /// @param snapBlockRoot The beacon block root emitted from `snapBalance` in `BalancesSnapped`.\\n    /// @param balanceProofs a `BalanceProofs` struct containing the following:\\n    /// balancesContainerRoot - the merkle root of the balances container\\n    /// balancesContainerProof - The merkle proof for the balances container to the beacon block root.\\n    ///   This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    /// validatorBalanceLeaves - Array of leaf nodes containing the validator balance with three other balances.\\n    /// validatorBalanceProofs -  Array of merkle proofs for the validator balance to the Balances container root.\\n    ///   This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.\\n    // slither-disable-start reentrancy-no-eth\\n    function verifyBalances(\\n        bytes32 snapBlockRoot,\\n        uint64 validatorVerificationBlockTimestamp,\\n        FirstPendingDepositProofData calldata firstPendingDeposit,\\n        BalanceProofs calldata balanceProofs\\n    ) external {\\n        // Load previously snapped balances for the given block root\\n        Balances memory balancesMem = snappedBalances[snapBlockRoot];\\n        // Check the balances are the latest\\n        require(lastSnapTimestamp > 0, \\\"No snapped balances\\\");\\n        require(balancesMem.timestamp == lastSnapTimestamp, \\\"Stale snap\\\");\\n\\n        uint256 verifiedValidatorsCount = verifiedValidators.length;\\n        uint256 totalValidatorBalance = 0;\\n\\n        // If there are no verified validators then we can skip the balance verification\\n        if (verifiedValidatorsCount > 0) {\\n            require(\\n                balanceProofs.validatorBalanceProofs.length ==\\n                    verifiedValidatorsCount,\\n                \\\"Invalid balance proofs\\\"\\n            );\\n            require(\\n                balanceProofs.validatorBalanceLeaves.length ==\\n                    verifiedValidatorsCount,\\n                \\\"Invalid balance leaves\\\"\\n            );\\n            // verify beaconBlock.state.balances root to beacon block root\\n            IBeaconProofs(BEACON_PROOFS).verifyBalancesContainer(\\n                snapBlockRoot,\\n                balanceProofs.balancesContainerRoot,\\n                balanceProofs.balancesContainerProof\\n            );\\n\\n            // for each validator in reserve order so we can pop off exited validators at the end\\n            for (uint256 i = verifiedValidatorsCount; i > 0; ) {\\n                --i;\\n                // verify validator's balance in beaconBlock.state.balances to the\\n                // beaconBlock.state.balances container root\\n                uint256 validatorBalanceGwei = IBeaconProofs(BEACON_PROOFS)\\n                    .verifyValidatorBalance(\\n                        balanceProofs.balancesContainerRoot,\\n                        balanceProofs.validatorBalanceLeaves[i],\\n                        balanceProofs.validatorBalanceProofs[i],\\n                        validator[verifiedValidators[i]].index\\n                    );\\n\\n                // If the validator balance is zero\\n                if (validatorBalanceGwei == 0) {\\n                    // Store the validator state as exited\\n                    // This could have been in VERIFIED or EXITING state\\n                    validator[verifiedValidators[i]].state = ValidatorState\\n                        .EXITED;\\n\\n                    // Remove the validator with a zero balance from the list of verified validators\\n\\n                    // Reduce the count of verified validators which is the last index before the pop removes it.\\n                    verifiedValidatorsCount -= 1;\\n\\n                    // Move the last validator that has already been verified to the current index.\\n                    // There's an extra SSTORE if i is the last active validator but that's fine,\\n                    // It's not a common case and the code is simpler this way.\\n                    verifiedValidators[i] = verifiedValidators[\\n                        verifiedValidatorsCount\\n                    ];\\n                    // Delete the last validator from the list\\n                    verifiedValidators.pop();\\n\\n                    // The validator balance is zero so not need to add to totalValidatorBalance\\n                    continue;\\n                }\\n\\n                // convert Gwei balance to Wei and add to the total validator balance\\n                totalValidatorBalance += validatorBalanceGwei * 1 gwei;\\n            }\\n        }\\n\\n        uint256 depositsCount = depositList.length;\\n        uint256 totalDepositsWei = 0;\\n\\n        // If there are no deposits then we can skip the deposit verification.\\n        // This section is after the validator balance verifications so an exited validator will be marked\\n        // as EXITED before the deposits are verified. If there was a deposit to an exited validator\\n        // then the deposit can only be removed once the validator is fully exited.\\n        if (depositsCount > 0) {\\n            // Verify the slot of the first pending deposit matches the beacon chain\\n            bool isDepositQueueEmpty = IBeaconProofs(BEACON_PROOFS)\\n                .verifyFirstPendingDeposit(\\n                    snapBlockRoot,\\n                    firstPendingDeposit.slot,\\n                    firstPendingDeposit.pubKeyHash,\\n                    firstPendingDeposit.pendingDepositPubKeyProof\\n                );\\n\\n            // If there are no deposits in the beacon chain queue then our deposits must have been processed.\\n            // If the deposits have been processed, each deposit will need to be verified with `verifyDeposit`\\n            require(!isDepositQueueEmpty, \\\"Deposits have been processed\\\");\\n\\n            // The verification of the validator the first pending deposit is for must be on or after when\\n            // `snapBalances` was called.\\n            require(\\n                balancesMem.timestamp <= validatorVerificationBlockTimestamp,\\n                \\\"Invalid validator timestamp\\\"\\n            );\\n\\n            // Verify the validator of the first pending deposit is not exiting by checking\\n            // the withdrawable epoch is far into the future.\\n            // If it is exiting we can't be sure this deposit has not been postponed in the deposit queue.\\n            // Hence we can not verify if the strategy's deposit has been processed or not.\\n            IBeaconProofs(BEACON_PROOFS).verifyValidatorWithdrawable(\\n                // Get the parent beacon block root of the next block which is\\n                // the block root of the validator verification slot.\\n                // This will revert if the slot after the verification slot was missed.\\n                BeaconRoots.parentBlockRoot(\\n                    validatorVerificationBlockTimestamp\\n                ),\\n                firstPendingDeposit.validatorIndex,\\n                firstPendingDeposit.pubKeyHash,\\n                // Validator is not exiting\\n                FAR_FUTURE_EPOCH,\\n                firstPendingDeposit.withdrawableEpochProof,\\n                firstPendingDeposit.validatorPubKeyProof\\n            );\\n\\n            // solhint-disable max-line-length\\n            // If a validator is converted from a sweeping validator to a compounding validator, any balance in excess\\n            // of the min 32 ETH is put in the pending deposit queue. Reference:\\n            // - [switch_to_compounding_validator](https://ethereum.github.io/consensus-specs/specs/electra/beacon-chain/#new-switch_to_compounding_validator\\n            // - [queue_excess_active_balance](https://ethereum.github.io/consensus-specs/specs/electra/beacon-chain/#new-queue_excess_active_balance)\\n            // - [process_consolidation_request](https://ethereum.github.io/consensus-specs/specs/electra/beacon-chain/#new-process_consolidation_request)\\n            // This will have a slot value of zero unfortunately.\\n            // We can not prove the strategy's deposits are still pending with a zero slot value so revert the tx.\\n            // Another snapBalances will need to be taken that does not have consolidation deposits at the front of the\\n            // beacon chain deposit queue.\\n            // solhint-enable max-line-length\\n            require(\\n                firstPendingDeposit.slot > 0,\\n                \\\"Invalid first pending deposit\\\"\\n            );\\n\\n            // Calculate the epoch at the time of the snapBalances\\n            uint64 verificationEpoch = (SafeCast.toUint64(\\n                balancesMem.timestamp\\n            ) - BEACON_GENESIS_TIMESTAMP) / (SLOT_DURATION * SLOTS_PER_EPOCH);\\n\\n            // For each staking strategy's deposits\\n            for (uint256 i = 0; i < depositsCount; ++i) {\\n                uint256 depositID = depositList[i];\\n                DepositData memory depositData = deposits[depositID];\\n\\n                // Check the stored deposit is still waiting to be processed on the beacon chain.\\n                // That is, the first pending deposit slot is before the slot of the staking strategy's deposit.\\n                // If the deposit has been processed, it will need to be verified with `verifyDeposit`.\\n                // OR the deposit is to an exiting validator so check it is still not withdrawable.\\n                // If the validator is not withdrawable, then the deposit can not have been processed yet.\\n                // If the validator is now withdrawable, then the deposit may have been processed. The strategy\\n                // now has to wait until the validator's balance is verified to be zero.\\n                // OR the validator has exited and the deposit is now verified as processed.\\n                require(\\n                    firstPendingDeposit.slot < depositData.slot ||\\n                        (verificationEpoch < depositData.withdrawableEpoch &&\\n                            depositData.withdrawableEpoch !=\\n                            FAR_FUTURE_EPOCH) ||\\n                        validator[depositData.pubKeyHash].state ==\\n                        ValidatorState.EXITED,\\n                    \\\"Deposit likely processed\\\"\\n                );\\n\\n                // Remove the deposit if the validator has exited.\\n                if (\\n                    validator[depositData.pubKeyHash].state ==\\n                    ValidatorState.EXITED\\n                ) {\\n                    _removeDeposit(depositID, depositData);\\n\\n                    emit DepositValidatorExited(\\n                        depositID,\\n                        uint256(depositData.amountGwei) * 1 gwei\\n                    );\\n\\n                    // Skip to the next deposit as the deposit amount is now in the strategy's ETH balance\\n                    continue;\\n                }\\n\\n                // Convert the deposit amount from Gwei to Wei and add to the total\\n                totalDepositsWei += uint256(depositData.amountGwei) * 1 gwei;\\n            }\\n        }\\n\\n        // Store the verified balance in storage\\n        lastVerifiedEthBalance = SafeCast.toUint128(\\n            totalDepositsWei + totalValidatorBalance + balancesMem.ethBalance\\n        );\\n        // Reset the last snap timestamp so a new snapBalances has to be made\\n        lastSnapTimestamp = 0;\\n\\n        emit BalancesVerified(\\n            balancesMem.timestamp,\\n            totalDepositsWei,\\n            totalValidatorBalance,\\n            balancesMem.ethBalance\\n        );\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    /// @notice Hash a validator public key using the Beacon Chain's format\\n    function _hashPubKey(bytes memory pubKey) internal pure returns (bytes32) {\\n        require(pubKey.length == 48, \\\"Invalid public key length\\\");\\n        return sha256(abi.encodePacked(pubKey, bytes16(0)));\\n    }\\n\\n    /**\\n     *\\n     *         WETH and ETH Accounting\\n     *\\n     */\\n\\n    /// @dev Called when WETH is transferred out of the strategy so\\n    /// the strategy knows how much WETH it has on deposit.\\n    /// This is so it can emit the correct amount in the Deposit event in depositAll().\\n    function _transferWeth(uint256 _amount, address _recipient) internal {\\n        IERC20(WETH).safeTransfer(_recipient, _amount);\\n\\n        // The min is required as more WETH can be withdrawn than deposited\\n        // as the strategy earns consensus and execution rewards.\\n        uint256 deductAmount = Math.min(_amount, depositedWethAccountedFor);\\n        depositedWethAccountedFor -= deductAmount;\\n\\n        // No change in ETH balance so no need to snapshot the balances\\n    }\\n\\n    /// @dev Converts ETH to WETH and updates the accounting.\\n    /// @param _ethAmount The amount of ETH in wei.\\n    function _convertEthToWeth(uint256 _ethAmount) internal {\\n        // slither-disable-next-line arbitrary-send-eth\\n        IWETH9(WETH).deposit{ value: _ethAmount }();\\n\\n        depositedWethAccountedFor += _ethAmount;\\n\\n        // Store the reduced ETH balance.\\n        // The ETH balance in this strategy contract can be more than the last verified ETH balance\\n        // due to partial withdrawals or full exits being processed by the beacon chain since the last snapBalances.\\n        // It can also happen from execution rewards (MEV) or ETH donations.\\n        lastVerifiedEthBalance -= SafeCast.toUint128(\\n            Math.min(uint256(lastVerifiedEthBalance), _ethAmount)\\n        );\\n\\n        // The ETH balance was decreased to WETH so we need to invalidate the last balances snap.\\n        lastSnapTimestamp = 0;\\n    }\\n\\n    /// @dev Converts WETH to ETH and updates the accounting.\\n    /// @param _wethAmount The amount of WETH in wei.\\n    function _convertWethToEth(uint256 _wethAmount) internal {\\n        IWETH9(WETH).withdraw(_wethAmount);\\n\\n        uint256 deductAmount = Math.min(_wethAmount, depositedWethAccountedFor);\\n        depositedWethAccountedFor -= deductAmount;\\n\\n        // Store the increased ETH balance\\n        lastVerifiedEthBalance += SafeCast.toUint128(_wethAmount);\\n\\n        // The ETH balance was increased from WETH so we need to invalidate the last balances snap.\\n        lastSnapTimestamp = 0;\\n    }\\n\\n    /**\\n     *\\n     *             View Functions\\n     *\\n     */\\n\\n    /// @notice Returns the number of deposits waiting to be verified as processed on the beacon chain,\\n    /// or deposits that have been verified to an exiting validator and is now waiting for the\\n    /// validator's balance to be swept.\\n    function depositListLength() external view returns (uint256) {\\n        return depositList.length;\\n    }\\n\\n    /// @notice Returns the number of verified validators.\\n    function verifiedValidatorsLength() external view returns (uint256) {\\n        return verifiedValidators.length;\\n    }\\n}\\n\",\"keccak256\":\"0xe9bd0ef89a92365755189780b39518fe75cb29d57e1b8270df001b55be1a2917\",\"license\":\"BUSL-1.1\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract OUSD is Governable {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Event triggered when the supply changes\\n    /// @param totalSupply Updated token total supply\\n    /// @param rebasingCredits Updated token rebasing credits\\n    /// @param rebasingCreditsPerToken Updated token rebasing credits per token\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    /// @dev Event triggered when an account opts in for rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingEnabled(address account);\\n    /// @dev Event triggered when an account opts out of rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingDisabled(address account);\\n    /// @dev Emitted when `value` tokens are moved from one account `from` to\\n    ///      another `to`.\\n    /// @param from Address of the account tokens are moved from\\n    /// @param to Address of the account tokens are moved to\\n    /// @param value Amount of tokens transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    ///      a call to {approve}. `value` is the new allowance.\\n    /// @param owner Address of the owner approving allowance\\n    /// @param spender Address of the spender allowance is granted to\\n    /// @param value Amount of tokens spender can transfer\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    /// @dev Yield resulting from {changeSupply} that a `source` account would\\n    ///      receive is directed to `target` account.\\n    /// @param source Address of the source forwarding the yield\\n    /// @param target Address of the target receiving the yield\\n    event YieldDelegated(address source, address target);\\n    /// @dev Yield delegation from `source` account to the `target` account is\\n    ///      suspended.\\n    /// @param source Address of the source suspending yield forwarding\\n    /// @param target Address of the target no longer receiving yield from `source`\\n    ///        account\\n    event YieldUndelegated(address source, address target);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        StdNonRebasing,\\n        StdRebasing,\\n        YieldDelegationSource,\\n        YieldDelegationTarget\\n    }\\n\\n    uint256[154] private _gap; // Slots to align with deployed contract\\n    uint256 private constant MAX_SUPPLY = type(uint128).max;\\n    /// @dev The amount of tokens in existence\\n    uint256 public totalSupply;\\n    mapping(address => mapping(address => uint256)) private allowances;\\n    /// @dev The vault with privileges to execute {mint}, {burn}\\n    ///     and {changeSupply}\\n    address public vaultAddress;\\n    mapping(address => uint256) internal creditBalances;\\n    // the 2 storage variables below need trailing underscores to not name collide with public functions\\n    uint256 private rebasingCredits_; // Sum of all rebasing credits (creditBalances for rebasing accounts)\\n    uint256 private rebasingCreditsPerToken_;\\n    /// @dev The amount of tokens that are not rebasing - receiving yield\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) internal alternativeCreditsPerToken;\\n    /// @dev A map of all addresses and their respective RebaseOptions\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) private __deprecated_isUpgraded;\\n    /// @dev A map of addresses that have yields forwarded to. This is an\\n    ///      inverse mapping of {yieldFrom}\\n    /// Key Account forwarding yield\\n    /// Value Account receiving yield\\n    mapping(address => address) public yieldTo;\\n    /// @dev A map of addresses that are receiving the yield. This is an\\n    ///      inverse mapping of {yieldTo}\\n    /// Key Account receiving yield\\n    /// Value Account forwarding yield\\n    mapping(address => address) public yieldFrom;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n    uint256[34] private __gap; // including below gap totals up to 200\\n\\n    /// @dev Verifies that the caller is the Governor or Strategist.\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            isGovernor() || msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Initializes the contract and sets necessary variables.\\n    /// @param _vaultAddress Address of the vault contract\\n    /// @param _initialCreditsPerToken The starting rebasing credits per token.\\n    function initialize(address _vaultAddress, uint256 _initialCreditsPerToken)\\n        external\\n        onlyGovernor\\n    {\\n        require(_vaultAddress != address(0), \\\"Zero vault address\\\");\\n        require(vaultAddress == address(0), \\\"Already initialized\\\");\\n\\n        rebasingCreditsPerToken_ = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /// @dev Returns the symbol of the token, a shorter version\\n    ///      of the name.\\n    function symbol() external pure virtual returns (string memory) {\\n        return \\\"OUSD\\\";\\n    }\\n\\n    /// @dev Returns the name of the token.\\n    function name() external pure virtual returns (string memory) {\\n        return \\\"Origin Dollar\\\";\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    function decimals() external pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256) {\\n        return rebasingCreditsPerToken_;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() external view returns (uint256) {\\n        return rebasingCreditsPerToken_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() external view returns (uint256) {\\n        return rebasingCredits_;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() external view returns (uint256) {\\n        return rebasingCredits_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        RebaseOptions state = rebaseState[_account];\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            // Saves a slot read when transferring to or from a yield delegating source\\n            // since we know creditBalances equals the balance.\\n            return creditBalances[_account];\\n        }\\n        uint256 baseBalance = (creditBalances[_account] * 1e18) /\\n            _creditsPerToken(_account);\\n        if (state == RebaseOptions.YieldDelegationTarget) {\\n            // creditBalances of yieldFrom accounts equals token balances\\n            return baseBalance - creditBalances[yieldFrom[_account]];\\n        }\\n        return baseBalance;\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            creditBalances[_account],\\n            _creditsPerToken(_account),\\n            true // all accounts have their resolution \\\"upgraded\\\"\\n        );\\n    }\\n\\n    // Backwards compatible view\\n    function nonRebasingCreditsPerToken(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return alternativeCreditsPerToken[_account];\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     * @return true on success.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        uint256 userAllowance = allowances[_from][msg.sender];\\n        require(_value <= userAllowance, \\\"Allowance exceeded\\\");\\n\\n        unchecked {\\n            allowances[_from][msg.sender] = userAllowance - _value;\\n        }\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        (\\n            int256 fromRebasingCreditsDiff,\\n            int256 fromNonRebasingSupplyDiff\\n        ) = _adjustAccount(_from, -_value.toInt256());\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_to, _value.toInt256());\\n\\n        _adjustGlobals(\\n            fromRebasingCreditsDiff + toRebasingCreditsDiff,\\n            fromNonRebasingSupplyDiff + toNonRebasingSupplyDiff\\n        );\\n    }\\n\\n    function _adjustAccount(address _account, int256 _balanceChange)\\n        internal\\n        returns (int256 rebasingCreditsDiff, int256 nonRebasingSupplyDiff)\\n    {\\n        RebaseOptions state = rebaseState[_account];\\n        int256 currentBalance = balanceOf(_account).toInt256();\\n        if (currentBalance + _balanceChange < 0) {\\n            revert(\\\"Transfer amount exceeds balance\\\");\\n        }\\n        uint256 newBalance = (currentBalance + _balanceChange).toUint256();\\n\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            address target = yieldTo[_account];\\n            uint256 targetOldBalance = balanceOf(target);\\n            uint256 targetNewCredits = _balanceToRebasingCredits(\\n                targetOldBalance + newBalance\\n            );\\n            rebasingCreditsDiff =\\n                targetNewCredits.toInt256() -\\n                creditBalances[target].toInt256();\\n\\n            creditBalances[_account] = newBalance;\\n            creditBalances[target] = targetNewCredits;\\n        } else if (state == RebaseOptions.YieldDelegationTarget) {\\n            uint256 newCredits = _balanceToRebasingCredits(\\n                newBalance + creditBalances[yieldFrom[_account]]\\n            );\\n            rebasingCreditsDiff =\\n                newCredits.toInt256() -\\n                creditBalances[_account].toInt256();\\n            creditBalances[_account] = newCredits;\\n        } else {\\n            _autoMigrate(_account);\\n            uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n                _account\\n            ];\\n            if (alternativeCreditsPerTokenMem > 0) {\\n                nonRebasingSupplyDiff = _balanceChange;\\n                if (alternativeCreditsPerTokenMem != 1e18) {\\n                    alternativeCreditsPerToken[_account] = 1e18;\\n                }\\n                creditBalances[_account] = newBalance;\\n            } else {\\n                uint256 newCredits = _balanceToRebasingCredits(newBalance);\\n                rebasingCreditsDiff =\\n                    newCredits.toInt256() -\\n                    creditBalances[_account].toInt256();\\n                creditBalances[_account] = newCredits;\\n            }\\n        }\\n    }\\n\\n    function _adjustGlobals(\\n        int256 _rebasingCreditsDiff,\\n        int256 _nonRebasingSupplyDiff\\n    ) internal {\\n        if (_rebasingCreditsDiff != 0) {\\n            rebasingCredits_ = (rebasingCredits_.toInt256() +\\n                _rebasingCreditsDiff).toUint256();\\n        }\\n        if (_nonRebasingSupplyDiff != 0) {\\n            nonRebasingSupply = (nonRebasingSupply.toInt256() +\\n                _nonRebasingSupplyDiff).toUint256();\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to check the amount of tokens that _owner has allowed\\n     *      to `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @notice Approve the passed address to spend the specified amount of\\n     *      tokens on behalf of msg.sender.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     * @return true on success.\\n     */\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates `_amount` tokens and assigns them to `_account`,\\n     *     increasing the total supply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, _amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply + _amount;\\n\\n        require(totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @notice Destroys `_amount` tokens from `_account`,\\n     *     reducing the total supply.\\n     */\\n    function burn(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, -_amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply - _amount;\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n            _account\\n        ];\\n        if (alternativeCreditsPerTokenMem != 0) {\\n            return alternativeCreditsPerTokenMem;\\n        } else {\\n            return rebasingCreditsPerToken_;\\n        }\\n    }\\n\\n    /**\\n     * @dev Auto migrate contracts to be non rebasing,\\n     *     unless they have opted into yield.\\n     * @param _account Address of the account.\\n     */\\n    function _autoMigrate(address _account) internal {\\n        uint256 codeLen = _account.code.length;\\n        bool isEOA = (codeLen == 0) ||\\n            (codeLen == 23 && bytes3(_account.code) == 0xef0100);\\n        // In previous code versions, contracts would not have had their\\n        // rebaseState[_account] set to RebaseOptions.NonRebasing when migrated\\n        // therefore we check the actual accounting used on the account as well.\\n        if (\\n            (!isEOA) &&\\n            rebaseState[_account] == RebaseOptions.NotSet &&\\n            alternativeCreditsPerToken[_account] == 0\\n        ) {\\n            _rebaseOptOut(_account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates credits from contract's global rebasingCreditsPerToken_, and\\n     *      also balance that corresponds to those credits. The latter is important\\n     *      when adjusting the contract's global nonRebasingSupply to circumvent any\\n     *      possible rounding errors.\\n     *\\n     * @param _balance Balance of the account.\\n     */\\n    function _balanceToRebasingCredits(uint256 _balance)\\n        internal\\n        view\\n        returns (uint256 rebasingCredits)\\n    {\\n        // Rounds up, because we need to ensure that accounts always have\\n        // at least the balance that they should have.\\n        // Note this should always be used on an absolute account value,\\n        // not on a possibly negative diff, because then the rounding would be wrong.\\n        return ((_balance) * rebasingCreditsPerToken_ + 1e18 - 1) / 1e18;\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account) external onlyGovernor {\\n        require(_account != address(0), \\\"Zero address not allowed\\\");\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     */\\n    function rebaseOptIn() external {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        uint256 balance = balanceOf(_account);\\n\\n        // prettier-ignore\\n        require(\\n            alternativeCreditsPerToken[_account] > 0 ||\\n                // Accounts may explicitly `rebaseOptIn` regardless of\\n                // accounting if they have a 0 balance.\\n                creditBalances[_account] == 0\\n            ,\\n            \\\"Account must be non-rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        // prettier-ignore\\n        require(\\n            state == RebaseOptions.StdNonRebasing ||\\n                state == RebaseOptions.NotSet,\\n            \\\"Only standard non-rebasing accounts can opt in\\\"\\n        );\\n\\n        uint256 newCredits = _balanceToRebasingCredits(balance);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdRebasing;\\n        alternativeCreditsPerToken[_account] = 0;\\n        creditBalances[_account] = newCredits;\\n        // Globals\\n        _adjustGlobals(newCredits.toInt256(), -balance.toInt256());\\n\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will no longer receive yield\\n     */\\n    function rebaseOptOut() external {\\n        _rebaseOptOut(msg.sender);\\n    }\\n\\n    function _rebaseOptOut(address _account) internal {\\n        require(\\n            alternativeCreditsPerToken[_account] == 0,\\n            \\\"Account must be rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        require(\\n            state == RebaseOptions.StdRebasing || state == RebaseOptions.NotSet,\\n            \\\"Only standard rebasing accounts can opt out\\\"\\n        );\\n\\n        uint256 oldCredits = creditBalances[_account];\\n        uint256 balance = balanceOf(_account);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdNonRebasing;\\n        alternativeCreditsPerToken[_account] = 1e18;\\n        creditBalances[_account] = balance;\\n        // Globals\\n        _adjustGlobals(-oldCredits.toInt256(), balance.toInt256());\\n\\n        emit AccountRebasingDisabled(_account);\\n    }\\n\\n    /**\\n     * @notice Distribute yield to users. This changes the exchange rate\\n     *  between \\\"credits\\\" and OUSD tokens to change rebasing user's balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply) external onlyVault {\\n        require(totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                totalSupply,\\n                rebasingCredits_,\\n                rebasingCreditsPerToken_\\n            );\\n            return;\\n        }\\n\\n        totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        uint256 rebasingSupply = totalSupply - nonRebasingSupply;\\n        // round up in the favour of the protocol\\n        rebasingCreditsPerToken_ =\\n            (rebasingCredits_ * 1e18 + rebasingSupply - 1) /\\n            rebasingSupply;\\n\\n        require(rebasingCreditsPerToken_ > 0, \\\"Invalid change in supply\\\");\\n\\n        emit TotalSupplyUpdatedHighres(\\n            totalSupply,\\n            rebasingCredits_,\\n            rebasingCreditsPerToken_\\n        );\\n    }\\n\\n    /*\\n     * @notice Send the yield from one account to another account.\\n     *         Each account keeps its own balances.\\n     */\\n    function delegateYield(address _from, address _to)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        require(_from != address(0), \\\"Zero from address not allowed\\\");\\n        require(_to != address(0), \\\"Zero to address not allowed\\\");\\n\\n        require(_from != _to, \\\"Cannot delegate to self\\\");\\n        require(\\n            yieldFrom[_to] == address(0) &&\\n                yieldTo[_to] == address(0) &&\\n                yieldFrom[_from] == address(0) &&\\n                yieldTo[_from] == address(0),\\n            \\\"Blocked by existing yield delegation\\\"\\n        );\\n        RebaseOptions stateFrom = rebaseState[_from];\\n        RebaseOptions stateTo = rebaseState[_to];\\n\\n        require(\\n            stateFrom == RebaseOptions.NotSet ||\\n                stateFrom == RebaseOptions.StdNonRebasing ||\\n                stateFrom == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState from\\\"\\n        );\\n\\n        require(\\n            stateTo == RebaseOptions.NotSet ||\\n                stateTo == RebaseOptions.StdNonRebasing ||\\n                stateTo == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState to\\\"\\n        );\\n\\n        if (alternativeCreditsPerToken[_from] == 0) {\\n            _rebaseOptOut(_from);\\n        }\\n        if (alternativeCreditsPerToken[_to] > 0) {\\n            _rebaseOptIn(_to);\\n        }\\n\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(_to);\\n        uint256 oldToCredits = creditBalances[_to];\\n        uint256 newToCredits = _balanceToRebasingCredits(\\n            fromBalance + toBalance\\n        );\\n\\n        // Set up the bidirectional links\\n        yieldTo[_from] = _to;\\n        yieldFrom[_to] = _from;\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.YieldDelegationSource;\\n        alternativeCreditsPerToken[_from] = 1e18;\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[_to] = RebaseOptions.YieldDelegationTarget;\\n        creditBalances[_to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, -(fromBalance).toInt256());\\n        emit YieldDelegated(_from, _to);\\n    }\\n\\n    /*\\n     * @notice Stop sending the yield from one account to another account.\\n     */\\n    function undelegateYield(address _from) external onlyGovernorOrStrategist {\\n        // Require a delegation, which will also ensure a valid delegation\\n        require(yieldTo[_from] != address(0), \\\"Zero address not allowed\\\");\\n\\n        address to = yieldTo[_from];\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(to);\\n        uint256 oldToCredits = creditBalances[to];\\n        uint256 newToCredits = _balanceToRebasingCredits(toBalance);\\n\\n        // Remove the bidirectional links\\n        yieldFrom[to] = address(0);\\n        yieldTo[_from] = address(0);\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.StdNonRebasing;\\n        // alternativeCreditsPerToken[from] already 1e18 from `delegateYield()`\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[to] = RebaseOptions.StdRebasing;\\n        // alternativeCreditsPerToken[to] already 0 from `delegateYield()`\\n        creditBalances[to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, fromBalance.toInt256());\\n        emit YieldUndelegated(_from, to);\\n    }\\n}\\n\",\"keccak256\":\"0x73439bef6569f5adf6f5ce2cb54a5f0d3109d4819457532236e172a7091980a9\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x4366f8d90b34c1eef8bbaaf369b1e5cd59f04027bb3c111f208eaee65bbc0346\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x50d39ebf38a3d3111f2b77a6c75ece1d4ae731552fec4697ab16fcf6c0d4d5e8\",\"license\":\"BUSL-1.1\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Governor or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            isGovernor() || msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Harvester\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        virtual\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x0160d435384d75e8764f4a916764ba47c87fda46872ca5900d46e5e80e956ff9\",\"license\":\"BUSL-1.1\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetRemoved(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event RebasePerSecondMaxChanged(uint256 rebaseRatePerSecond);\\n    event DripDurationChanged(uint256 dripDuration);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n    event WithdrawalClaimDelayUpdated(uint256 _newDelay);\\n\\n    // Since we are proxy, all state should be uninitalized.\\n    // Since this storage contract does not have logic directly on it\\n    // we should not be checking for to see if these variables can be constant.\\n    // slither-disable-start uninitialized-state\\n    // slither-disable-start constable-states\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configuration\\n    mapping(address => Strategy) public strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    OUSD public oUSD;\\n\\n    /// @dev Storage slot for the address of the VaultAdmin contract that is delegated to\\n    // keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 public constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    /// @dev Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    /// @dev Deprecated: Address of Uniswap\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n\\n    address public ousdMetaStrategy;\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // List of strategies that can mint oTokens directly\\n    // Used in OETHBaseVaultCore\\n    mapping(address => bool) public isMintWhitelistedStrategy;\\n\\n    /// @notice Address of the Dripper contract that streams harvested rewards to the Vault\\n    /// @dev The vault is proxied so needs to be set with setDripper against the proxy contract.\\n    address private _deprecated_dripper;\\n\\n    /// Withdrawal Queue Storage /////\\n\\n    struct WithdrawalQueueMetadata {\\n        // cumulative total of all withdrawal requests included the ones that have already been claimed\\n        uint128 queued;\\n        // cumulative total of all the requests that can be claimed including the ones that have already been claimed\\n        uint128 claimable;\\n        // total of all the requests that have been claimed\\n        uint128 claimed;\\n        // index of the next withdrawal request starting at 0\\n        uint128 nextWithdrawalIndex;\\n    }\\n\\n    /// @notice Global metadata for the withdrawal queue including:\\n    /// queued - cumulative total of all withdrawal requests included the ones that have already been claimed\\n    /// claimable - cumulative total of all the requests that can be claimed including the ones already claimed\\n    /// claimed - total of all the requests that have been claimed\\n    /// nextWithdrawalIndex - index of the next withdrawal request starting at 0\\n    WithdrawalQueueMetadata public withdrawalQueueMetadata;\\n\\n    struct WithdrawalRequest {\\n        address withdrawer;\\n        bool claimed;\\n        uint40 timestamp; // timestamp of the withdrawal request\\n        // Amount of oTokens to redeem. eg OETH\\n        uint128 amount;\\n        // cumulative total of all withdrawal requests including this one.\\n        // this request can be claimed when this queued amount is less than or equal to the queue's claimable amount.\\n        uint128 queued;\\n    }\\n\\n    /// @notice Mapping of withdrawal request indices to the user withdrawal request data\\n    mapping(uint256 => WithdrawalRequest) public withdrawalRequests;\\n\\n    /// @notice Sets a minimum delay that is required to elapse between\\n    ///     requesting async withdrawals and claiming the request.\\n    ///     When set to 0 async withdrawals are disabled.\\n    uint256 public withdrawalClaimDelay;\\n\\n    /// @notice Time in seconds that the vault last rebased yield.\\n    uint64 public lastRebase;\\n\\n    /// @notice Automatic rebase yield calculations. In seconds. Set to 0 or 1 to disable.\\n    uint64 public dripDuration;\\n\\n    /// @notice max rebase percentage per second\\n    ///   Can be used to set maximum yield of the protocol,\\n    ///   spreading out yield over time\\n    uint64 public rebasePerSecondMax;\\n\\n    /// @notice target rebase rate limit, based on past rates and funds available.\\n    uint64 public rebasePerSecondTarget;\\n\\n    uint256 internal constant MAX_REBASE = 0.02 ether;\\n    uint256 internal constant MAX_REBASE_PER_SECOND =\\n        uint256(0.05 ether) / 1 days;\\n\\n    // For future use\\n    uint256[43] private __gap;\\n\\n    // slither-disable-end constable-states\\n    // slither-disable-end uninitialized-state\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8c1056879e4d67e0085a30a525a4cb23b954ade0f22fce502278f35b9c69d3b\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103545760003560e01c8063853828b6116101c6578063b02c43d0116100f7578063d059f6ef11610095578063d9caed121161006f578063d9caed1214610b69578063dbe55e5614610b89578063de5f626814610bbd578063f6ca71b014610bd257600080fd5b8063d059f6ef14610b1e578063d38bfff414610b34578063d79e403214610b5457600080fd5b8063bb1b918d116100d1578063bb1b918d14610a95578063c2e1e3f414610ab5578063c7af335214610ad5578063cceab75014610aea57600080fd5b8063b02c43d0146109d7578063b6e2b52014610a55578063b8ec667814610a7557600080fd5b806396d538bb11610164578063a5f5be541161013e578063a5f5be5414610910578063aa388af614610941578063ad1728cb1461098e578063ad5c4648146109a357600080fd5b806396d538bb1461088257806398245f1b146108a2578063a0a990aa146108f057600080fd5b80639092c31c116101a05780639092c31c146107cb5780639136616a146107ff578063916497511461081a578063969987321461084e57600080fd5b8063853828b61461077657806387bae8671461078b5780638bd87652146107ab57600080fd5b806347e7ef24116102a05780635f5152261161023e5780636e811d38116102185780636e811d38146106e257806371a735f3146107025780637b2d9b2c146107225780637da9982a1461074257600080fd5b80635f5152261461068d57806367c7066c146106ad5780636874469d146106cd57600080fd5b8063522e42451161027a578063522e42451461061157806359ff4158146106245780635a063f63146106635780635d36b1901461067857600080fd5b806347e7ef24146105c75780634896b31a146105e75780634c84e6f8146105fc57600080fd5b80631072cbea1161030d57806321e1bef9116102e757806321e1bef9146104e4578063430bf08a14610553578063435356d1146105875780634583ef10146105a757600080fd5b80631072cbea1461046c57806312b92fa81461048c578063149cf47f146104c457600080fd5b8063046dbb7a146103605780630c340a24146103825780630df1ecfd146103b45780630ed57b3a146103e85780630ef99855146104085780630fc3b4c41461043657600080fd5b3661035b57005b600080fd5b34801561036c57600080fd5b5061038061037b366004614d75565b610bf4565b005b34801561038e57600080fd5b50610397611265565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103c057600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f457600080fd5b50610380610403366004614e25565b611282565b34801561041457600080fd5b50610428610423366004614e58565b6112c1565b6040519081526020016103ab565b34801561044257600080fd5b50610397610451366004614e71565b6070602052600090815260409020546001600160a01b031681565b34801561047857600080fd5b50610380610487366004614e8c565b6112e2565b34801561049857600080fd5b50603a546104ac906001600160401b031681565b6040516001600160401b0390911681526020016103ab565b3480156104d057600080fd5b506103806104df366004614efe565b6113a1565b3480156104f057600080fd5b5061052c6104ff366004614e58565b6039602052600090815260409020546001600160401b03811690600160401b90046001600160801b031682565b604080516001600160401b0390931683526001600160801b039091166020830152016103ab565b34801561055f57600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b34801561059357600080fd5b506103806105a2366004615059565b611769565b3480156105b357600080fd5b506103806105c23660046150ea565b611856565b3480156105d357600080fd5b506103806105e2366004614e8c565b611f56565b3480156105f357600080fd5b50603654610428565b34801561060857600080fd5b506103806120d3565b61038061061f366004615133565b61217b565b34801561063057600080fd5b50603a5461064b90600160401b90046001600160801b031681565b6040516001600160801b0390911681526020016103ab565b34801561066f57600080fd5b506103806122dd565b34801561068457600080fd5b5061038061237c565b34801561069957600080fd5b506104286106a8366004614e71565b612422565b3480156106b957600080fd5b50607454610397906001600160a01b031681565b3480156106d957600080fd5b50610380612520565b3480156106ee57600080fd5b506103806106fd366004614e71565b612680565b34801561070e57600080fd5b5061038061071d3660046151dc565b6126ee565b34801561072e57600080fd5b5061039761073d366004614e58565b6128eb565b34801561074e57600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b34801561078257600080fd5b50610380612915565b34801561079757600080fd5b50603354610397906001600160a01b031681565b3480156107b757600080fd5b5060345461064b906001600160801b031681565b3480156107d757600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b34801561080b57600080fd5b50610380610403366004614e58565b34801561082657600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b34801561085a57600080fd5b506104ac7f000000000000000000000000000000000000000000000000000000000000000081565b34801561088e57600080fd5b5061038061089d366004615261565b612ac8565b3480156108ae57600080fd5b506108e26108bd366004614e58565b60386020526000908152604090205460ff81169061010090046001600160401b031682565b6040516103ab9291906152b8565b3480156108fc57600080fd5b5061038061090b3660046152e4565b612bdf565b34801561091c57600080fd5b5060335461093190600160a01b900460ff1681565b60405190151581526020016103ab565b34801561094d57600080fd5b5061093161095c366004614e71565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561099a57600080fd5b5061038061363e565b3480156109af57600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b3480156109e357600080fd5b50610a436109f2366004614e58565b603560205260009081526040902080546001909101546001600160401b0380821691600160401b810482169163ffffffff600160801b8304169160ff600160a01b82041691600160a81b9091041686565b6040516103ab9695949392919061536a565b348015610a6157600080fd5b50610380610a70366004615471565b6136f5565b348015610a8157600080fd5b50610428610a90366004614e58565b6137a0565b348015610aa157600080fd5b50610380610ab036600461551f565b6137b0565b348015610ac157600080fd5b50610380610ad0366004614e71565b613965565b348015610ae157600080fd5b506109316139f2565b348015610af657600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b348015610b2a57600080fd5b50610428603b5481565b348015610b4057600080fd5b50610380610b4f366004614e71565b613a23565b348015610b6057600080fd5b50603754610428565b348015610b7557600080fd5b50610380610b843660046155dd565b613ac7565b348015610b9557600080fd5b506103977f000000000000000000000000000000000000000000000000000000000000000081565b348015610bc957600080fd5b50610380613bab565b348015610bde57600080fd5b50610be7613d42565b6040516103ab919061561a565b6000858152603560209081526040808320815160c0810183528154815260018201546001600160401b0380821695830195909552600160401b810490941692810192909252600160801b830463ffffffff16606083015290916080830190600160a01b900460ff166002811115610c6d57610c6d6152a2565b6002811115610c7e57610c7e6152a2565b815260019190910154600160a81b90046001600160401b03166020918201528151600090815260389091526040808220815180830190925280549394509192909190829060ff166007811115610cd657610cd66152a2565b6007811115610ce757610ce76152a2565b8152905461010090046001600160401b03166020909101529050600182608001516002811115610d1957610d196152a2565b14610d615760405162461bcd60e51b81526020600482015260136024820152724465706f736974206e6f742070656e64696e6760681b60448201526064015b60405180910390fd5b600381516007811115610d7657610d766152a2565b14610dbc5760405162461bcd60e51b815260206004820152601660248201527515985b1a59185d1bdc881b9bdd081d995c9a599a595960521b6044820152606401610d58565b856001600160401b031682604001516001600160401b031610610e1a5760405162461bcd60e51b815260206004820152601660248201527514db1bdd081b9bdd0818599d195c8819195c1bdcda5d60521b6044820152606401610d58565b846001600160401b0316866001600160401b03161115610e7c5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420766572696669636174696f6e20736c6f74730000000000006044820152606401610d58565b6000610e8f610e8a88613da4565b613de7565b905060006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016637383a9fc83610ed060208a018a615666565b60408a0135610ee260608c018c615681565b6040518663ffffffff1660e01b8152600401610f029594939291906156f0565b602060405180830381865afa158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f43919061571f565b905080611019576000610f58610e8a89613da4565b90506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630330aa1a82610f9a60408b0160208c01615666565b60408b01356001600160401b03610fb460808e018e615681565b8e8060a00190610fc49190615681565b6040518963ffffffff1660e01b8152600401610fe798979695949392919061573c565b60006040518083038186803b158015610fff57600080fd5b505afa158015611013573d6000803e3d6000fd5b50505050505b6020808401516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163aaf8eb0d91859161105e908a018a615666565b61106b60208b018b615681565b6040518663ffffffff1660e01b815260040161108b95949392919061579c565b60006040518083038186803b1580156110a357600080fd5b505afa1580156110b7573d6000803e3d6000fd5b506001600160401b0392506110d29150506020870187615666565b6001600160401b031614611185576110ed6020860186615666565b6001600160401b0390811660a086015260208501518a917fbc3fdc080055a5d0342452fd2f970db3142457507168345b18a9621e5510dafa916111359116633b9aca006157ea565b6111426020890189615666565b604080519283526001600160401b0390911660208301520160405180910390a2505090516000908152603860205260409020805460ff191660041790555061125e565b6111926020870187615666565b6001600160401b031684604001516001600160401b031610806111b25750805b6111fe5760405162461bcd60e51b815260206004820152601c60248201527f4465706f736974206c696b656c79206e6f742070726f636573736564000000006044820152606401610d58565b6112088985613eec565b887fcc6c22fbaf9f36d51193b29b3114d27c22dee0b6616975e3a1e0cf67022633ae85602001516001600160401b0316633b9aca0061124791906157ea565b6040519081526020015b60405180910390a2505050505b5050505050565b600061127d600080516020615f6a8339815191525490565b905090565b60405162461bcd60e51b81526020600482015260146024820152732ab739bab83837b93a32b210333ab731ba34b7b760611b6044820152606401610d58565b603781815481106112d157600080fd5b600091825260209091200154905081565b6112ea6139f2565b6113065760405162461bcd60e51b8152600401610d5890615801565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116908316036113815760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f72746564206173736574006044820152606401610d58565b61139d61138c611265565b6001600160a01b0384169083613fcd565b5050565b600260008581526038602052604090205460ff1660078111156113c6576113c66152a2565b1461140a5760405162461bcd60e51b815260206004820152601460248201527315985b1a59185d1bdc881b9bdd081cdd185ad95960621b6044820152606401610d58565b600061141587613de7565b604051633ba61c4760e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ba61c479061146e9084908990889088908d908c90600401615838565b60006040518083038186803b15801561148657600080fd5b505afa15801561149a573d6000803e3d6000fd5b505050506001600160a01b038416301461167a576040805180820190915280600781526001600160401b038816602091820152600087815260389091526040902081518154829060ff191660018360078111156114f9576114f96152a2565b02179055506020919091015181546001600160401b039091166101000268ffffffffffffffff001990911617905560365460005b81811015611647576000603560006036848154811061154e5761154e615884565b600091825260208083209091015483528281019390935260409182019020815160c0810183528154815260018201546001600160401b0380821695830195909552600160401b81049094169281019290925263ffffffff600160801b84041660608301529091608083019060ff600160a01b9091041660028111156115d5576115d56152a2565b60028111156115e6576115e66152a2565b815260019190910154600160a81b90046001600160401b0316602090910152805190915088900361163e576116386036838154811061162757611627615884565b906000526020600020015482613eec565b50611647565b5060010161152d565b5060405186907fb8318df57b70f6381fb18aaf762e33efa2cc92627aae83d417f6710e1415d8d890600090a25050611761565b6040805180820190915280600381526001600160401b038816602091820152600087815260389091526040902081518154829060ff191660018360078111156116c5576116c56152a2565b021790555060209190910151815468ffffffffffffffff0019166101006001600160401b0392831602179091556037805460018101825560009182527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae018790556033805460ff60a01b191690556040519188169187917f076b8e8f0bebfc854ee5a55b3d61fe1a3d3e701fb05524880aefc460437bf8ec91a3505b505050505050565b6117716139f2565b61178d5760405162461bcd60e51b8152600401610d5890615801565b600054610100900460ff16806117a6575060005460ff16155b6118095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d58565b600054610100900460ff1615801561182b576000805461ffff19166101011790555b611836848484614024565b61183e61363e565b8015611850576000805461ff00191690555b50505050565b6033546001600160a01b031633146118805760405162461bcd60e51b8152600401610d589061589a565b60006118996001600160401b038316633b9aca006157ea565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192491906158c3565b8111156119675760405162461bcd60e51b8152602060048201526011602482015270092dce6eaccccd2c6d2cadce840ae8aa89607b1b6044820152606401610d58565b603654600c116119a85760405162461bcd60e51b815260206004820152600c60248201526b4d6178206465706f7369747360a01b6044820152606401610d58565b6119b1816140d0565b60006119fa6119c08580615681565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141d592505050565b60008181526038602052604090205490915060ff166001816007811115611a2357611a236152a2565b1480611a4057506003816007811115611a3e57611a3e6152a2565b145b611a8c5760405162461bcd60e51b815260206004820152601a60248201527f4e6f742072656769737465726564206f722076657269666965640000000000006044820152606401610d58565b670de0b6b3a7640000831015611ad85760405162461bcd60e51b815260206004820152601160248201527011195c1bdcda5d081d1bdbc81cdb585b1b607a1b6044820152606401610d58565b6001816007811115611aec57611aec6152a2565b03611bff57603354600160a01b900460ff1615611b445760405162461bcd60e51b8152602060048201526016602482015275115e1a5cdd1a5b99c8199a5c9cdd0819195c1bdcda5d60521b6044820152606401610d58565b6801bc16d674ec8000008314611b9c5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206669727374206465706f73697420616d6f756e74000000006044820152606401610d58565b603754603090611bad9060016158dc565b10611beb5760405162461bcd60e51b815260206004820152600e60248201526d4d61782076616c696461746f727360901b6044820152606401610d58565b6033805460ff60a01b1916600160a01b1790555b60408051600160f91b60208201526000602182018190526bffffffffffffffffffffffff193060601b16602c830152910160408051601f1981840301815291905290506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632289511885611c7c8980615681565b85611c8a60208d018d615681565b8d604001356040518863ffffffff1660e01b8152600401611cb09695949392919061593f565b6000604051808303818588803b158015611cc957600080fd5b505af1158015611cdd573d6000803e3d6000fd5b5060019350611ceb92505050565b826007811115611cfd57611cfd6152a2565b03611d1c576000838152603860205260409020805460ff191660021790555b6000600c7f0000000000000000000000000000000000000000000000000000000000000000611d4a42614299565b611d54919061598e565b611d5e91906159ad565b603480549192506000916001600160801b03169082611d7c836159e9565b91906101000a8154816001600160801b0302191690836001600160801b031602179055506001600160801b031690506040518060c00160405280868152602001886001600160401b03168152602001836001600160401b03168152602001611de8603680549050614305565b63ffffffff168152602001600181526001600160401b036020918201819052600084815260358352604090819020845181559284015160018401805492860151606087015163ffffffff16600160801b0263ffffffff60801b19918616600160401b026001600160801b03199095169390951692909217929092179081168317825560808501519260ff60a01b191664ffffffffff60801b1990911617600160a01b836002811115611e9c57611e9c6152a2565b021790555060a09190910151600191820180546001600160401b03909216600160a81b0267ffffffffffffffff60a81b199092169190911790556036805491820181556000527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80181905580857fe6b13456d345a251702a9dab19a68b9e3550781d95fa9faf104a06ff8bc30495611f348b80615681565b8a604051611f4493929190615a14565b60405180910390a35050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f9e5760405162461bcd60e51b8152600401610d5890615a38565b600080516020615f4a83398151915280546001198101611fd05760405162461bcd60e51b8152600401610d5890615a6f565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146120255760405162461bcd60e51b8152600401610d5890615a97565b6000831161206e5760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610d58565b82603b600082825461208091906158dc565b90915550506040805160008152602081018590526001600160a01b038616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a250600190555050565b6120db6139f2565b6120f75760405162461bcd60e51b8152600401610d5890615801565b603354600160a01b900460ff166121435760405162461bcd60e51b815260206004820152601060248201526f139bc8199a5c9cdd0819195c1bdcda5d60821b6044820152606401610d58565b6033805460ff60a01b191690556040517fce77f85e30b0e6df0d12527ddf038f900fdeda0eeda4284c52be47b05de31a9790600090a1565b6033546001600160a01b031633146121a55760405162461bcd60e51b8152600401610d589061589a565b60006121e684848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141d592505050565b60008181526038602052604090205490915060ff16600381600781111561220f5761220f6152a2565b146122555760405162461bcd60e51b815260206004820152601660248201527515985b1a59185d1bdc881b9bdd081d995c9a599a595960521b6044820152606401610d58565b61226085858561436a565b50826001600160401b031660000361228c576000828152603860205260409020805460ff191660041790555b817f8dd83105dbd4263d41c76e5d414905babdd3f035bd2031f6ce8895715595979c6122c56001600160401b038616633b9aca006157ea565b60405190815260200160405180910390a25050505050565b6074546001600160a01b031633146123375760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610d58565b600080516020615f4a833981519152805460011981016123695760405162461bcd60e51b8152600401610d5890615a6f565b60028255612375611282565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146124175760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610d58565b612420336144af565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316146124755760405162461bcd60e51b8152600401610d5890615a97565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156124d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fd91906158c3565b603a5461251a9190600160401b90046001600160801b03166158dc565b92915050565b600061252b42614299565b90506001600160401b038116612543600c6020615ac2565b603a5461255991906001600160401b0316615aeb565b6001600160401b03161061259f5760405162461bcd60e51b815260206004820152600d60248201526c29b730b8103a37b79039b7b7b760991b6044820152606401610d58565b60006125aa82613de7565b905060004790506040518060400160405280846001600160401b031681526020016125d48361450e565b6001600160801b03908116909152600084815260396020908152604091829020845181549590920151909316600160401b026001600160c01b03199094166001600160401b039182161793909317909155603a805492861667ffffffffffffffff1993909316929092179091555182907fb7523e03ed4a74718427c422a01fee1138835adb5bd592240f30bd8b5e1b929a906126739084815260200190565b60405180910390a2505050565b6126886139f2565b6126a45760405162461bcd60e51b8152600401610d5890615801565b603380546001600160a01b0319166001600160a01b0383169081179091556040517f83f29c79feb71f8fba9d0fbc4ba5f0982a28b6b1e868b3fc50e6400d100bca0f90600090a250565b6033546001600160a01b031633146127185760405162461bcd60e51b8152600401610d589061589a565b600061275986868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141d592505050565b60008181526038602052604090205490915060ff166001816007811115612782576127826152a2565b148061279f5750600581600781111561279d5761279d6152a2565b145b806127bb575060078160078111156127b9576127b96152a2565b145b6128075760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206e6f742072656764206f7220657869746564000000006044820152606401610d58565b6040516312b3fc1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906312b3fc199061285b908a908a908a908a908a90600401615bb7565b600060405180830381600087803b15801561287557600080fd5b505af1158015612889573d6000803e3d6000fd5b50505060008381526038602052604090819020805460ff19166006179055518391507f63d54ea43f163d6e28fc23abec67eb7c3294e7e6f0620955a73cd8d17c7367f4906128da9088908890615bf8565b60405180910390a250505050505050565b607581815481106128fb57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612964575061294f611265565b6001600160a01b0316336001600160a01b0316145b6129bc5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610d58565b600080516020615f4a833981519152805460011981016129ee5760405162461bcd60e51b8152600401610d5890615a6f565b600282556040516370a0823160e01b8152306004820152479060009082907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8191906158c3565b612a8b91906158dc565b90508015612abe57612abe7f00000000000000000000000000000000000000000000000000000000000000008284614577565b5050600182555050565b612ad06139f2565b612aec5760405162461bcd60e51b8152600401610d5890615801565b8060005b81811015612b96576000848483818110612b0c57612b0c615884565b9050602002016020810190612b219190614e71565b6001600160a01b031603612b8e5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610d58565b600101612af0565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc60758484604051612bcb93929190615c0c565b60405180910390a161185060758484614c78565b6000848152603960209081526040918290208251808401909352546001600160401b038082168452600160401b9091046001600160801b031691830191909152603a5416612c655760405162461bcd60e51b81526020600482015260136024820152724e6f20736e61707065642062616c616e63657360681b6044820152606401610d58565b603a5481516001600160401b03908116911614612cb15760405162461bcd60e51b815260206004820152600a60248201526905374616c6520736e61760b41b6044820152606401610d58565b603754600081156130315781612cca6060860186615ca5565b905014612d125760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642062616c616e63652070726f6f667360501b6044820152606401610d58565b81612d206040860186615ca5565b905014612d685760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642062616c616e6365206c656176657360501b6044820152606401610d58565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166391ad640d888635612da76020890189615681565b6040518563ffffffff1660e01b8152600401612dc69493929190615cee565b60006040518083038186803b158015612dde57600080fd5b505afa158015612df2573d6000803e3d6000fd5b5084925050505b801561302f57612e0881615d0e565b905060006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166342bd31da8735612e4a60408a018a615ca5565b86818110612e5a57612e5a615884565b90506020020135898060600190612e719190615ca5565b87818110612e8157612e81615884565b9050602002810190612e939190615681565b6038600060378a81548110612eaa57612eaa615884565b9060005260206000200154815260200190815260200160002060000160019054906101000a90046001600160401b03166040518663ffffffff1660e01b8152600401612efa959493929190615d25565b602060405180830381865afa158015612f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3b91906158c3565b90508060000361300f5760056038600060378581548110612f5e57612f5e615884565b600091825260208083209091015483528201929092526040019020805460ff19166001836007811115612f9357612f936152a2565b0217905550612fa3600185615d60565b935060378481548110612fb857612fb8615884565b906000526020600020015460378381548110612fd657612fd6615884565b6000918252602090912001556037805480612ff357612ff3615d73565b6001900381819060005260206000200160009055905550612df9565b61301d81633b9aca006157ea565b61302790846158dc565b925050612df9565b505b603654600081156135945760006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016637383a9fc8b61307b60208c018c615666565b60408c013561308d60608e018e615681565b6040518663ffffffff1660e01b81526004016130ad9594939291906156f0565b602060405180830381865afa1580156130ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ee919061571f565b9050801561313e5760405162461bcd60e51b815260206004820152601c60248201527f4465706f736974732068617665206265656e2070726f636573736564000000006044820152606401610d58565b85516001600160401b03808b169116111561319b5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642076616c696461746f722074696d657374616d7000000000006044820152606401610d58565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630330aa1a6131d38b613de7565b6131e360408c0160208d01615666565b60408c01356001600160401b036131fd60808f018f615681565b8f8060a0019061320d9190615681565b6040518963ffffffff1660e01b815260040161323098979695949392919061573c565b60006040518083038186803b15801561324857600080fd5b505afa15801561325c573d6000803e3d6000fd5b506000925061327191505060208a018a615666565b6001600160401b0316116132c75760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642066697273742070656e64696e67206465706f7369740000006044820152606401610d58565b60006132d56020600c615ac2565b7f000000000000000000000000000000000000000000000000000000000000000061330c89600001516001600160401b0316614299565b613316919061598e565b61332091906159ad565b905060005b848110156135905760006036828154811061334257613342615884565b6000918252602080832090910154808352603582526040808420815160c0810183528154815260018201546001600160401b0380821696830196909652600160401b81049095169281019290925263ffffffff600160801b850416606083015291945091608083019060ff600160a01b9091041660028111156133c7576133c76152a2565b60028111156133d8576133d86152a2565b8152600191909101546001600160401b03600160a81b909104811660209283015260408301519293509190911690613412908e018e615666565b6001600160401b0316108061345557508060a001516001600160401b0316846001600160401b0316108015613455575060a08101516001600160401b0390811614155b8061348457506005815160009081526038602052604090205460ff166007811115613482576134826152a2565b145b6134d05760405162461bcd60e51b815260206004820152601860248201527f4465706f736974206c696b656c792070726f63657373656400000000000000006044820152606401610d58565b6005815160009081526038602052604090205460ff1660078111156134f7576134f76152a2565b0361355d576135068282613eec565b817fd37dfd28ce3c6abccf25dc583376c1fe84be5abe9cd4b8dc94904b25d62a784582602001516001600160401b0316633b9aca0061354591906157ea565b60405190815260200160405180910390a25050613588565b6020810151613579906001600160401b0316633b9aca006157ea565b61358390876158dc565b955050505b600101613325565b5050505b60208501516135bf906001600160801b03166135b085846158dc565b6135ba91906158dc565b61450e565b603a80546001600160c01b031916600160401b6001600160801b039384160267ffffffffffffffff19161790558551602080880151604080518681529283018890529316928101929092526001600160401b0316907fed2528338eefb63fd1860078b91e35106bc25e3fd528634d180f662582fe5ec190606001611251565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156136ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f2919061571f565b50565b6136fd6139f2565b6137195760405162461bcd60e51b8152600401610d5890615801565b604051631a1b9a0b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063686e682c9061376990869086908690600401615d89565b600060405180830381600087803b15801561378357600080fd5b505af1158015613797573d6000803e3d6000fd5b50505050505050565b603681815481106112d157600080fd5b6033546001600160a01b031633146137da5760405162461bcd60e51b8152600401610d589061589a565b600061381b89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506141d592505050565b90506000808281526038602052604090205460ff166007811115613841576138416152a2565b1461388e5760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f7220616c72656164792072656769737465726564000000006044820152606401610d58565b60008181526038602052604090819020805460ff19166001179055516301ba3ee760e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906306e8fb9c90613901908c908c908c908c908c908c908c908c90600401615e2b565b600060405180830381600087803b15801561391b57600080fd5b505af115801561392f573d6000803e3d6000fd5b50505050807f50837f89f5e75ae0a7bcc858f53ea15fa398dc007fd52cbfe4683ae9a6c2d7228888604051611251929190615bf8565b61396d6139f2565b6139895760405162461bcd60e51b8152600401610d5890615801565b607454604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a1607480546001600160a01b0319166001600160a01b0392909216919091179055565b6000613a0a600080516020615f6a8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b613a2b6139f2565b613a475760405162461bcd60e51b8152600401610d5890615801565b613a6f817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316613a8f600080516020615f6a8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614613b0f5760405162461bcd60e51b8152600401610d5890615a38565b600080516020615f4a83398151915280546001198101613b415760405162461bcd60e51b8152600401610d5890615a6f565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614613b965760405162461bcd60e51b8152600401610d5890615a97565b613ba1858447614577565b5060019055505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614613bf35760405162461bcd60e51b8152600401610d5890615a38565b600080516020615f4a83398151915280546001198101613c255760405162461bcd60e51b8152600401610d5890615a6f565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb491906158c3565b90506000603b5482613cc69190615d60565b90508015612abe57603b8290556040805160008152602081018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a25050600182555050565b60606075805480602002602001604051908101604052809291908181526020018280548015613d9a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d7c575b5050505050905090565b6000600c7f0000000000000000000000000000000000000000000000000000000000000000613dd38483615ac2565b613ddd9190615aeb565b61251a9190615aeb565b604080516001600160401b038316602082015260009182918291720f3df6d732807ef1319fb7b8bb8522d0beac02910160408051601f1981840301815290829052613e3191615e8c565b600060405180830381855afa9150503d8060008114613e6c576040519150601f19603f3d011682016040523d82523d6000602084013e613e71565b606091505b5091509150818015613e84575060008151115b613ed05760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420626561636f6e2074696d657374616d7000000000000000006044820152606401610d58565b80806020019051810190613ee491906158c3565b949350505050565b60008281526035602052604081206001908101805460ff60a01b1916600160a11b179055603680549091613f1f91615d60565b81548110613f2f57613f2f615884565b90600052602060002001549050806036836060015163ffffffff1681548110613f5a57613f5a615884565b60009182526020808320909101929092556060840151838252603590925260409020600101805463ffffffff909216600160801b0263ffffffff60801b199092169190911790556036805480613fb257613fb2615d73565b60019003818190600052602060002001600090559055505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261401f908490614691565b505050565b8251614037906075906020860190614cd7565b508151815181146140815760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610d58565b60005b8181101561125e576140c88482815181106140a1576140a1615884565b60200260200101518483815181106140bb576140bb615884565b6020026020010151614763565b600101614084565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561413257600080fd5b505af1158015614146573d6000803e3d6000fd5b50505050600061415882603b546148c2565b905080603b600082825461416c9190615d60565b9091555061417b90508261450e565b603a805460089061419d908490600160401b90046001600160801b0316615ea8565b82546001600160801b039182166101009390930a92830291909202199091161790555050603a805467ffffffffffffffff1916905550565b600081516030146142285760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207075626c6963206b6579206c656e677468000000000000006044820152606401610d58565b60405160029061423f908490600090602001615ec7565b60408051601f198184030181529082905261425991615e8c565b602060405180830381855afa158015614276573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061251a91906158c3565b60006001600160401b038211156143015760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610d58565b5090565b600063ffffffff8211156143015760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610d58565b6000603083146143bc5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642076616c696461746f722062797465206c656e6774680000006044820152606401610d58565b6143c46148da565b90506000710961ef480eb55e80d19ad83579a64c0070026001600160a01b0316828686866040516020016143fa93929190615ef6565b60408051601f198184030181529082905261441491615e8c565b60006040518083038185875af1925050503d8060008114614451576040519150601f19603f3d011682016040523d82523d6000602084013e614456565b606091505b50509050806144a75760405162461bcd60e51b815260206004820152601960248201527f5769746864726177616c2072657175657374206661696c6564000000000000006044820152606401610d58565b509392505050565b6001600160a01b0381166145055760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610d58565b6136f2816149a1565b60006001600160801b038211156143015760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610d58565b600082116145c75760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e670000000000000000006044820152606401610d58565b6001600160a01b0383166146165760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b6044820152606401610d58565b80156146255761462581614a08565b61462f8284614b0d565b6040805160008152602081018490526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989101612673565b60006146e6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b6d9092919063ffffffff16565b80519091501561401f5780806020019051810190614704919061571f565b61401f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d58565b6001600160a01b0382811660009081526070602052604090205416156147c05760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610d58565b6001600160a01b038216158015906147e057506001600160a01b03811615155b6148205760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610d58565b6001600160a01b03828116600081815260706020908152604080832080549587166001600160a01b031996871681179091556071805460018101825594527fa1fcd19bfe8c32a61095b6bfbb2664842857e148fcbb5188386c8cd40348d5b690930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b60008183106148d157816148d3565b825b9392505050565b60405160009081908190710961ef480eb55e80d19ad83579a64c0070029082818181855afa9150503d806000811461492e576040519150601f19603f3d011682016040523d82523d6000602084013e614933565b606091505b5091509150818015614946575060008151115b6149865760405162461bcd60e51b81526020600482015260116024820152704661696c656420746f206765742066656560781b6044820152606401610d58565b8080602001905181019061499a91906158c3565b9250505090565b806001600160a01b03166149c1600080516020615f6a8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3600080516020615f6a83398151915255565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015614a6357600080fd5b505af1158015614a77573d6000803e3d6000fd5b505050505080603b6000828254614a8e91906158dc565b9091555050603a54614ab4906135ba90600160401b90046001600160801b0316836148c2565b603a8054600890614ad6908490600160401b90046001600160801b0316615f17565b82546001600160801b039182166101009390930a92830291909202199091161790555050603a805467ffffffffffffffff19169055565b614b416001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613fcd565b6000614b4f83603b546148c2565b905080603b6000828254614b639190615d60565b9091555050505050565b6060613ee4848460008585843b614bc65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d58565b600080866001600160a01b03168587604051614be29190615e8c565b60006040518083038185875af1925050503d8060008114614c1f576040519150601f19603f3d011682016040523d82523d6000602084013e614c24565b606091505b5091509150614c34828286614c3f565b979650505050505050565b60608315614c4e5750816148d3565b825115614c5e5782518084602001fd5b8160405162461bcd60e51b8152600401610d589190615f36565b828054828255906000526020600020908101928215614ccb579160200282015b82811115614ccb5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614c98565b50614301929150614d2c565b828054828255906000526020600020908101928215614ccb579160200282015b82811115614ccb57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614cf7565b5b808211156143015760008155600101614d2d565b80356001600160401b0381168114614d5857600080fd5b919050565b600060c08284031215614d6f57600080fd5b50919050565b600080600080600060a08688031215614d8d57600080fd5b85359450614d9d60208701614d41565b9350614dab60408701614d41565b925060608601356001600160401b03811115614dc657600080fd5b614dd288828901614d5d565b92505060808601356001600160401b03811115614dee57600080fd5b860160408189031215614e0057600080fd5b809150509295509295909350565b80356001600160a01b0381168114614d5857600080fd5b60008060408385031215614e3857600080fd5b614e4183614e0e565b9150614e4f60208401614e0e565b90509250929050565b600060208284031215614e6a57600080fd5b5035919050565b600060208284031215614e8357600080fd5b6148d382614e0e565b60008060408385031215614e9f57600080fd5b614ea883614e0e565b946020939093013593505050565b60008083601f840112614ec857600080fd5b5081356001600160401b03811115614edf57600080fd5b602083019150836020828501011115614ef757600080fd5b9250929050565b60008060008060008060a08789031215614f1757600080fd5b614f2087614d41565b9550614f2e60208801614d41565b945060408701359350614f4360608801614e0e565b925060808701356001600160401b03811115614f5e57600080fd5b614f6a89828a01614eb6565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614fba57614fba614f7c565b604052919050565b60006001600160401b03821115614fdb57614fdb614f7c565b5060051b60200190565b600082601f830112614ff657600080fd5b813561500961500482614fc2565b614f92565b8082825260208201915060208360051b86010192508583111561502b57600080fd5b602085015b8381101561504f5761504181614e0e565b835260209283019201615030565b5095945050505050565b60008060006060848603121561506e57600080fd5b83356001600160401b0381111561508457600080fd5b61509086828701614fe5565b93505060208401356001600160401b038111156150ac57600080fd5b6150b886828701614fe5565b92505060408401356001600160401b038111156150d457600080fd5b6150e086828701614fe5565b9150509250925092565b600080604083850312156150fd57600080fd5b82356001600160401b0381111561511357600080fd5b83016060818603121561512557600080fd5b9150614e4f60208401614d41565b60008060006040848603121561514857600080fd5b83356001600160401b0381111561515e57600080fd5b61516a86828701614eb6565b909450925061517d905060208501614d41565b90509250925092565b60008083601f84011261519857600080fd5b5081356001600160401b038111156151af57600080fd5b6020830191508360208260051b8501011115614ef757600080fd5b600060a08284031215614d6f57600080fd5b600080600080600060e086880312156151f457600080fd5b85356001600160401b0381111561520a57600080fd5b61521688828901614eb6565b90965094505060208601356001600160401b0381111561523557600080fd5b61524188828901615186565b9094509250615255905087604088016151ca565b90509295509295909350565b6000806020838503121561527457600080fd5b82356001600160401b0381111561528a57600080fd5b61529685828601615186565b90969095509350505050565b634e487b7160e01b600052602160045260246000fd5b60408101600884106152cc576152cc6152a2565b9281526001600160401b039190911660209091015290565b600080600080608085870312156152fa57600080fd5b8435935061530a60208601614d41565b925060408501356001600160401b0381111561532557600080fd5b61533187828801614d5d565b92505060608501356001600160401b0381111561534d57600080fd5b85016080818803121561535f57600080fd5b939692955090935050565b8681526001600160401b0386811660208301528516604082015263ffffffff8416606082015260c08101600384106153a4576153a46152a2565b8360808301526001600160401b03831660a0830152979650505050505050565b803563ffffffff81168114614d5857600080fd5b80151581146136f257600080fd5b600060a082840312156153f857600080fd5b60405160a081016001600160401b038111828210171561541a5761541a614f7c565b604052905080615429836153c4565b815261543760208401614d41565b602082015261544860408401614d41565b6040820152606083013561545b816153d8565b6060820152608092830135920191909152919050565b600080600060e0848603121561548657600080fd5b83356001600160401b0381111561549c57600080fd5b8401601f810186136154ad57600080fd5b80356154bb61500482614fc2565b8082825260208201915060208360051b8501019250888311156154dd57600080fd5b6020840193505b82841015615506576154f584614d41565b8252602093840193909101906154e4565b95505050506020840135915061517d85604086016153e6565b600080600080600080600080610120898b03121561553c57600080fd5b88356001600160401b0381111561555257600080fd5b61555e8b828c01614eb6565b90995097505060208901356001600160401b0381111561557d57600080fd5b6155898b828c01615186565b90975095505060408901356001600160401b038111156155a857600080fd5b6155b48b828c01614eb6565b909550935050606089013591506155ce8a60808b016151ca565b90509295985092959890939650565b6000806000606084860312156155f257600080fd5b6155fb84614e0e565b925061560960208501614e0e565b929592945050506040919091013590565b602080825282518282018190526000918401906040840190835b8181101561565b5783516001600160a01b0316835260209384019390920191600101615634565b509095945050505050565b60006020828403121561567857600080fd5b6148d382614d41565b6000808335601e1984360301811261569857600080fd5b8301803591506001600160401b038211156156b257600080fd5b602001915036819003821315614ef757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8581526001600160401b0385166020820152836040820152608060608201526000614c346080830184866156c7565b60006020828403121561573157600080fd5b81516148d3816153d8565b8881526001600160401b03881660208201528660408201526001600160401b038616606082015260c06080820152600061577a60c0830186886156c7565b82810360a084015261578d8185876156c7565b9b9a5050505050505050505050565b8581526001600160401b03851660208201526001600160401b0384166040820152608060608201526000614c346080830184866156c7565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761251a5761251a6157d4565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b86815285602082015260a06040820152600061585860a0830186886156c7565b6001600160401b03949094166060830152506001600160a01b0391909116608090910152949350505050565b634e487b7160e01b600052603260045260246000fd5b6020808252600f908201526e2737ba102932b3b4b9ba3930ba37b960891b604082015260600190565b6000602082840312156158d557600080fd5b5051919050565b8082018082111561251a5761251a6157d4565b60005b8381101561590a5781810151838201526020016158f2565b50506000910152565b6000815180845261592b8160208601602086016158ef565b601f01601f19169290920160200192915050565b60808152600061595360808301888a6156c7565b82810360208401526159658188615913565b9050828103604084015261597a8186886156c7565b915050826060830152979650505050505050565b6001600160401b03828116828216039081111561251a5761251a6157d4565b60006001600160401b038316806159d457634e487b7160e01b600052601260045260246000fd5b806001600160401b0384160491505092915050565b60006001600160801b0382166001600160801b038103615a0b57615a0b6157d4565b60010192915050565b604081526000615a286040830185876156c7565b9050826020830152949350505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b602080825260119082015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604082015260600190565b6001600160401b038181168382160290811690818114615ae457615ae46157d4565b5092915050565b6001600160401b03818116838216019081111561251a5761251a6157d4565b81835260208301925060008160005b84811015615b48576001600160401b03615b3283614d41565b1686526020958601959190910190600101615b19565b5093949350505050565b63ffffffff615b60826153c4565b1682526001600160401b03615b7760208301614d41565b1660208301526001600160401b03615b9160408301614d41565b1660408301526060810135615ba5816153d8565b15156060830152608090810135910152565b60e081526000615bcb60e0830187896156c7565b8281036020840152615bde818688615b0a565b915050615bee6040830184615b52565b9695505050505050565b602081526000613ee4602083018486615b0a565b6040808252845490820181905260008581526020812090916060840190835b81811015615c525783546001600160a01b0316835260019384019360209093019201615c2b565b50508381036020808601919091528582520190508460005b85811015615c99576001600160a01b03615c8383614e0e565b1683526020928301929190910190600101615c6a565b50909695505050505050565b6000808335601e19843603018112615cbc57600080fd5b8301803591506001600160401b03821115615cd657600080fd5b6020019150600581901b3603821315614ef757600080fd5b848152836020820152606060408201526000615bee6060830184866156c7565b600081615d1d57615d1d6157d4565b506000190190565b858152846020820152608060408201526000615d456080830185876156c7565b90506001600160401b03831660608301529695505050505050565b8181038181111561251a5761251a6157d4565b634e487b7160e01b600052603160045260246000fd5b60e080825284519082018190526000906020860190610100840190835b81811015615dcd5783516001600160401b0316835260209384019390920191600101615da6565b5050809250505083602083015263ffffffff83511660408301526001600160401b0360208401511660608301526001600160401b0360408401511660808301526060830151151560a0830152608083015160c0830152949350505050565b61012081526000615e4161012083018a8c6156c7565b8281036020840152615e5481898b615b0a565b90508281036040840152615e698187896156c7565b915050836060830152615e7f6080830184615b52565b9998505050505050505050565b60008251615e9e8184602087016158ef565b9190910192915050565b6001600160801b03818116838216019081111561251a5761251a6157d4565b60008351615ed98184602088016158ef565b6001600160801b0319939093169190920190815260100192915050565b8284823760c09190911b6001600160c01b0319169101908152600801919050565b6001600160801b03828116828216039081111561251a5761251a6157d4565b6020815260006148d3602083018461591356fe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122007a3bd0b9140372131623a65eb474e0055a8fbc4cbf463265719a9acd5e50bda64736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of WETH asset."
        },
        "returns": {
          "balance": "   Total value in ETH"
        }
      },
      "constructor": {
        "params": {
          "_baseConfig": "Base strategy config with   `platformAddress` not used so empty address   `vaultAddress` the address of the OETH Vault contract",
          "_beaconChainDepositContract": "Address of the beacon chain deposit contract",
          "_beaconGenesisTimestamp": "The timestamp of the Beacon chain's genesis.",
          "_beaconProofs": "Address of the Beacon Proofs contract that verifies beacon chain data",
          "_ssvNetwork": "Address of the SSV Network contract",
          "_ssvToken": "Address of the SSV Token contract",
          "_wethAddress": "Address of the WETH Token contract"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "Amount of WETH that was transferred to the strategy by the vault.",
          "_asset": "Address of the WETH token."
        }
      },
      "getRewardTokenAddresses()": {
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "initialize(address[],address[],address[])": {
        "params": {
          "_assets": "Not used so empty array",
          "_pTokens": "Not used so empty array",
          "_rewardTokenAddresses": "Not used so empty array"
        }
      },
      "registerSsvValidator(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,bool,uint256))": {
        "params": {
          "cluster": "The SSV cluster details including the validator count and SSV balance",
          "operatorIds": "The operator IDs of the SSV Cluster",
          "publicKey": "The public key of the validator",
          "sharesData": "The shares data for the validator",
          "ssvAmount": "The amount of SSV tokens to be deposited to the SSV cluster"
        }
      },
      "removeSsvValidator(bytes,uint64[],(uint32,uint64,uint64,bool,uint256))": {
        "params": {
          "cluster": "The SSV cluster details including the validator count and SSV balance",
          "operatorIds": "The operator IDs of the SSV Cluster",
          "publicKey": "The public key of the validator"
        }
      },
      "setHarvesterAddress(address)": {
        "params": {
          "_harvesterAddress": "Address of the harvester contract."
        }
      },
      "setRewardTokenAddresses(address[])": {
        "params": {
          "_rewardTokenAddresses": "Array of reward token addresses"
        }
      },
      "stakeEth((bytes,bytes,bytes32),uint64)": {
        "params": {
          "depositAmountGwei": "The amount of WETH to stake to the validator in Gwei.",
          "validatorStakeData": "validator data needed to stake. The `ValidatorStakeData` struct contains the pubkey, signature and depositDataRoot. Only the registrator can call this function."
        }
      },
      "supportsAsset(address)": {
        "params": {
          "_asset": "The address of the WETH token."
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "validatorWithdrawal(bytes,uint64)": {
        "params": {
          "amountGwei": "The amount of ETH to be withdrawn from the validator in Gwei. A zero amount will trigger a full withdrawal.",
          "publicKey": "The public key of the validator"
        }
      },
      "verifyBalances(bytes32,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(bytes32,bytes,bytes32[],bytes[]))": {
        "params": {
          "balanceProofs": "a `BalanceProofs` struct containing the following: balancesContainerRoot - the merkle root of the balances container balancesContainerProof - The merkle proof for the balances container to the beacon block root.   This is 9 witness hashes of 32 bytes each concatenated together starting from the leaf node. validatorBalanceLeaves - Array of leaf nodes containing the validator balance with three other balances. validatorBalanceProofs -  Array of merkle proofs for the validator balance to the Balances container root.   This is 39 witness hashes of 32 bytes each concatenated together starting from the leaf node.",
          "snapBlockRoot": "The beacon block root emitted from `snapBalance` in `BalancesSnapped`."
        }
      },
      "verifyDeposit(uint256,uint64,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(uint64,bytes))": {
        "params": {
          "depositID": "The deposit ID emitted in `ETHStaked` from the `stakeEth` function.",
          "depositProcessedSlot": "Any slot on or after the strategy's deposit was processed on the beacon chain. Can not be a slot with pending deposits with the same slot as the deposit being verified. Can not be a slot before a missed slot as the Beacon Root contract will have the parent block root set for the next block timestamp in 12 seconds time.",
          "firstDepositValidatorCreatedSlot": "The slot on or after when the validator of the first pending deposit was created on the beacon chain. This is used to verify the validator has not exited."
        }
      },
      "verifyValidator(uint64,uint64,bytes32,address,bytes)": {
        "params": {
          "nextBlockTimestamp": "The timestamp of the execution layer block after the beacon chain slot we are verifying. The next one is needed as the Beacon Oracle returns the parent beacon block root for a block timestamp, which is the beacon block root of the previous block.",
          "pubKeyHash": "The hash of the validator's public key using the Beacon Chain's format",
          "validatorIndex": "The index of the validator on the beacon chain.",
          "validatorPubKeyProof": "The merkle proof for the validator public key to the beacon block root. This is 53 witness hashes of 32 bytes each concatenated together starting from the leaf node. BeaconBlock.state.validators[validatorIndex].pubkey",
          "withdrawalAddress": "The withdrawal address of the validator which should be this strategy's address. If the withdrawal address is not this strategy's address, the initial deposit was front-run and the validator is marked as invalid."
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "Amount of WETH to withdraw.",
          "_asset": "Address of the WETH token.",
          "_recipient": "Address to receive withdrawn assets."
        }
      },
      "withdrawSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))": {
        "details": "A SSV cluster is defined by the SSVOwnerAddress and the set of operatorIds.",
        "params": {
          "cluster": "The SSV cluster details including the validator count and SSV balance",
          "operatorIds": "The operator IDs of the SSV Cluster",
          "ssvAmount": "The amount of SSV tokens to be withdrawn from the SSV cluster"
        }
      }
    },
    "title": "Compounding Staking SSV Strategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BEACON_CHAIN_DEPOSIT_CONTRACT()": {
        "notice": "The address of the beacon chain deposit contract"
      },
      "BEACON_GENESIS_TIMESTAMP()": {
        "notice": "The timestamp of the Beacon chain genesis."
      },
      "BEACON_PROOFS()": {
        "notice": "Address of the Beacon Proofs contract that verifies beacon chain data"
      },
      "SSV_NETWORK()": {
        "notice": "The address of the SSV Network contract used to interface with"
      },
      "SSV_TOKEN()": {
        "notice": "SSV ERC20 token that serves as a payment for operating SSV validators"
      },
      "VAULT_ADDRESS()": {
        "notice": "Address of the OETH Vault proxy contract"
      },
      "WETH()": {
        "notice": "The address of the Wrapped ETH (WETH) token contract"
      },
      "assetToPToken(address)": {
        "notice": "asset => pToken (Platform Specific Token Address)"
      },
      "checkBalance(address)": {
        "notice": "Accounts for all the assets managed by this strategy which includes: 1. The current WETH in this strategy contract 2. The last verified ETH balance, total deposits and total validator balances"
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "notice": "Collect accumulated reward token and send to Vault."
      },
      "deposit(address,uint256)": {
        "notice": "Unlike other strategies, this does not deposit assets into the underlying platform. It just checks the asset is WETH and emits the Deposit event. To deposit WETH into validators, `registerSsvValidator` and `stakeEth` must be used."
      },
      "depositAll()": {
        "notice": "Unlike other strategies, this does not deposit assets into the underlying platform. It just emits the Deposit event. To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used."
      },
      "depositList(uint256)": {
        "notice": "List of strategy deposit IDs to a validator. The list can be for deposits waiting to be verified as processed on the beacon chain, or deposits that have been verified to an exiting validator and is now waiting for the validator's balance to be swept. The list may not be ordered by time of deposit. Removed deposits will move the last deposit to the removed index."
      },
      "depositListLength()": {
        "notice": "Returns the number of deposits waiting to be verified as processed on the beacon chain, or deposits that have been verified to an exiting validator and is now waiting for the validator's balance to be swept."
      },
      "deposits(uint256)": {
        "notice": "Mapping of the deposit ID to the deposit data"
      },
      "firstDeposit()": {
        "notice": "Restricts to only one deposit to an unverified validator at a time. This is to limit front-running attacks of deposits to the beacon chain contract."
      },
      "getRewardTokenAddresses()": {
        "notice": "Get the reward token addresses."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "harvesterAddress()": {
        "notice": "Address of the Harvester contract allowed to collect reward tokens"
      },
      "initialize(address[],address[],address[])": {
        "notice": "Set up initial internal state including 1. approving the SSVNetwork to transfer SSV tokens from this strategy contract"
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "lastSnapTimestamp()": {
        "notice": "The timestamp of the last snapshot taken"
      },
      "lastVerifiedEthBalance()": {
        "notice": "The last verified ETH balance of the strategy"
      },
      "nextDepositID()": {
        "notice": "Unique identifier of the next validator deposit."
      },
      "platformAddress()": {
        "notice": "Address of the underlying platform"
      },
      "registerSsvValidator(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,bool,uint256))": {
        "notice": "Registers a single validator in a SSV Cluster. Only the Registrator can call this function."
      },
      "removePToken(uint256)": {
        "notice": "is not supported for this strategy as there is no platform token."
      },
      "removeSsvValidator(bytes,uint64[],(uint32,uint64,uint64,bool,uint256))": {
        "notice": "Remove the validator from the SSV Cluster after: - the validator has been exited from `validatorWithdrawal` or slashed - the validator has incorrectly registered and can not be staked to - the initial deposit was front-run and the withdrawal address is not this strategy's address. Make sure `validatorWithdrawal` is called with a zero amount and the validator has exited the Beacon chain. If removed before the validator has exited the beacon chain will result in the validator being slashed. Only the registrator can call this function."
      },
      "resetFirstDeposit()": {
        "notice": "Reset the `firstDeposit` flag to false so deposits to unverified validators can be made again."
      },
      "rewardTokenAddresses(uint256)": {
        "notice": "Address of the reward tokens. eg CRV, BAL, CVX, AURA"
      },
      "safeApproveAllTokens()": {
        "notice": "Approves the SSV Network contract to transfer SSV tokens for validator registration."
      },
      "setHarvesterAddress(address)": {
        "notice": "Set the Harvester contract that can collect rewards."
      },
      "setPTokenAddress(address,address)": {
        "notice": "is not supported for this strategy as there is no platform token."
      },
      "setRegistrator(address)": {
        "notice": "Set the address of the registrator which can register, exit and remove validators"
      },
      "setRewardTokenAddresses(address[])": {
        "notice": "Set the reward token addresses. Any old addresses will be overwritten."
      },
      "snapBalances()": {
        "notice": "Stores the current ETH balance at the current block and beacon block root         of the slot that is associated with the previous block. When snapping / verifying balance it is of a high importance that there is no miss-match in respect to ETH that is held by the contract and balances that are verified on the validators. First some context on the beacon-chain block building behaviour. Relevant parts of constructing a block on the beacon chain consist of:  - process_withdrawals: ETH is deducted from the validator's balance  - process_execution_payload: immediately after the previous step executing all the    transactions  - apply the withdrawals: adding ETH to the recipient which is the withdrawal address    contained in the withdrawal credentials of the exited validators That means that balance increases which are part of the post-block execution state are done within the block, but the transaction that are contained within that block can not see / interact with the balance from the exited validators. Only transactions in the next block can do that. When snap balances is performed the state of the chain is snapped across 2 separate chain states:  - ETH balance of the contract is recorded on block X -> and corresponding slot Y  - beacon chain block root is recorded of block X - 1 -> and corresponding slot Y - 1    given there were no missed slots. It could also be Y - 2, Y - 3 depending on how    many slots have not managed to propose a block. For the sake of simplicity this slot    will be referred to as Y - 1 as it makes no difference in the argument Given these 2 separate chain states it is paramount that verify balances can not experience miss-counting ETH or much more dangerous double counting of the ETH. When verifyBalances is called it is performed on the current block Z where Z > X. Verify balances adds up all the ETH (omitting WETH) controlled by this contract:  - ETH balance in the contract on block X  - ETH balance in Deposits on block Z that haven't been yet processed in slot Y - 1  - ETH balance in validators that are active in slot Y - 1  - skips the ETH balance in validators that have withdrawn in slot Y - 1 (or sooner)    and have their balance visible to transactions in slot Y and corresponding block X    (or sooner) Lets verify the correctness of ETH accounting given the above described behaviour. *ETH balance in the contract on block X* This is an ETH balance of the contract on a non current X block. Any ETH leaving the contract as a result of a withdrawal subtracts from the ETH accounted for on block X if `verifyBalances` has already been called. It also invalidates a `snapBalances` in case `verifyBalances` has not been called yet. Not performing this would result in not accounting for the withdrawn ETH that has happened anywhere in the block interval [X + 1, Z]. Similarly to withdrawals any `stakeEth` deposits to the deposit contract adds to the ETH accounted for since the last `verifyBalances` has been called. And it invalidates the `snapBalances` in case `verifyBalances` hasn't been yet called. Not performing this would result in double counting the `stakedEth` since it would be present once in the snapped contract balance and the second time in deposit storage variables. This behaviour is correct. *ETH balance in Deposits on block Z that haven't been yet processed in slot Y - 1* The contract sums up all the ETH that has been deposited to the Beacon chain deposit contract at block Z. The execution layer doesn't have direct access to the state of deposits on the beacon chain. And if it is to sum up all the ETH that is marked to be deposited it needs to be sure to not double count ETH that is in deposits (storage vars) and could also be part of the validator balances. It does that by verifying that at slot Y - 1 none of the deposits visible on block Z have been processed. Meaning since the last snap till now all are still in queue. Which ensures they can not be part of the validator balances in later steps. This behaviour is correct. *ETH balance in validators that are active in slot Y - 1* The contract is verifying none of the deposits on Y - 1 slot have been processed and for that reason it checks the validator balances in the same slot. Ensuring accounting correctness. This behaviour is correct. *The withdrawn validators* The withdrawn validators could have their balances deducted in any slot before slot Y - 1 and the execution layer sees the balance increase in the subsequent slot. Lets look at the \"worst case scenario\" where the validator withdrawal is processed in the slot Y - 1 (snapped slot) and see their balance increase (in execution layer) in slot Y -> block X. The ETH balance on the contract is snapped at block X meaning that even if the validator exits at the latest possible time it is paramount that the ETH balance on the execution layer is recorded in the next block. Correctly accounting for the withdrawn ETH. Worth mentioning if the validator exit is processed by the slot Y and balance increase seen on the execution layer on block X + 1 the withdrawal is ignored by both the validator balance verification as well as execution layer contract balance snap. This behaviour is correct. The validator balances on the beacon chain can then be proved with `verifyBalances`."
      },
      "snappedBalances(bytes32)": {
        "notice": "Mapping of the block root to the balances at that slot"
      },
      "stakeEth((bytes,bytes,bytes32),uint64)": {
        "notice": "Stakes WETH in this strategy to a compounding validator. Does not convert any ETH sitting in this strategy to WETH."
      },
      "supportsAsset(address)": {
        "notice": "Returns bool indicating whether asset is supported by the strategy."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends."
      },
      "validator(bytes32)": {
        "notice": "Mapping of the hash of the validator's public key to the validator state and index. Uses the Beacon chain hashing for BLSPubkey which is sha256(abi.encodePacked(validator.pubkey, bytes16(0)))"
      },
      "validatorRegistrator()": {
        "notice": "Address of the registrator - allowed to register, withdraw, exit and remove validators"
      },
      "validatorWithdrawal(bytes,uint64)": {
        "notice": "Request a full or partial withdrawal from a validator. A zero amount will trigger a full withdrawal. If the remaining balance is < 32 ETH then only the amount in excess of 32 ETH will be withdrawn. Only the Registrator can call this function. 1 wei of value should be sent with the tx to pay for the withdrawal request fee. If no value sent, 1 wei will be taken from the strategy's ETH balance if it has any. If no ETH balance, the tx will revert."
      },
      "vaultAddress()": {
        "notice": "Address of the OToken vault"
      },
      "verifiedValidators(uint256)": {
        "notice": "List of validator public key hashes that have been verified to exist on the beacon chain. These have had a deposit processed and the validator's balance increased. Validators will be removed from this list when its verified they have a zero balance."
      },
      "verifiedValidatorsLength()": {
        "notice": "Returns the number of verified validators."
      },
      "verifyBalances(bytes32,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(bytes32,bytes,bytes32[],bytes[]))": {
        "notice": "Verifies the balances of all active validators on the beacon chain and checks no pending deposits have been processed by the beacon chain."
      },
      "verifyDeposit(uint256,uint64,uint64,(uint64,uint64,bytes32,bytes,bytes,bytes),(uint64,bytes))": {
        "notice": "Verifies a deposit on the execution layer has been processed by the beacon chain. This means the accounting of the strategy's ETH moves from a pending deposit to a validator balance. Important: this function has a limitation where the `verificationSlot` that is passed by the off-chain verifier requires a slot immediately after it to propose a block otherwise the `BeaconRoots.parentBlockRoot` will fail. This shouldn't be a problem, since by the current behaviour of beacon chain only 1%-3% slots don't propose a block."
      },
      "verifyValidator(uint64,uint64,bytes32,address,bytes)": {
        "notice": "Verifies a validator's index to its public key. Adds to the list of verified validators if the validator's withdrawal address is this strategy's address. Marks the validator as invalid and removes the deposit if the withdrawal address is not this strategy's address."
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraw ETH and WETH from this strategy contract."
      },
      "withdrawAll()": {
        "notice": "Transfer all WETH deposits, ETH from validator withdrawals and ETH from execution rewards in this strategy to the vault. This does not withdraw from the validators. That has to be done separately with the `validatorWithdrawal` operation."
      },
      "withdrawSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))": {
        "notice": "Withdraws excess SSV Tokens from the SSV Network contract which was used to pay the SSV Operators."
      }
    },
    "notice": "Strategy to deploy funds into DVT validators powered by the SSV Network",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7097,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7100,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7140,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3658,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "validatorRegistrator",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3681,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "firstDeposit",
        "offset": 20,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 3684,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "nextDepositID",
        "offset": 0,
        "slot": "52",
        "type": "t_uint128"
      },
      {
        "astId": 3690,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "deposits",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_uint256,t_struct(DepositData)3678_storage)"
      },
      {
        "astId": 3694,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "depositList",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3713,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "verifiedValidators",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3719,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "validator",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_bytes32,t_struct(ValidatorData)3709_storage)"
      },
      {
        "astId": 3731,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "snappedBalances",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_bytes32,t_struct(Balances)3725_storage)"
      },
      {
        "astId": 3734,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "lastSnapTimestamp",
        "offset": 0,
        "slot": "58",
        "type": "t_uint64"
      },
      {
        "astId": 3737,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "lastVerifiedEthBalance",
        "offset": 8,
        "slot": "58",
        "type": "t_uint128"
      },
      {
        "astId": 3740,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "depositedWethAccountedFor",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 3744,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "60",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7220,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "_deprecated_platformAddress",
        "offset": 0,
        "slot": "110",
        "type": "t_address"
      },
      {
        "astId": 7223,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "_deprecated_vaultAddress",
        "offset": 0,
        "slot": "111",
        "type": "t_address"
      },
      {
        "astId": 7228,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7232,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7234,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "114",
        "type": "t_address"
      },
      {
        "astId": 7236,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 7239,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "116",
        "type": "t_address"
      },
      {
        "astId": 7243,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "117",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7247,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "118",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 2999,
        "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DepositStatus)3663": {
        "encoding": "inplace",
        "label": "enum CompoundingValidatorManager.DepositStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ValidatorState)3703": {
        "encoding": "inplace",
        "label": "enum CompoundingValidatorManager.ValidatorState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Balances)3725_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CompoundingValidatorManager.Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)3725_storage"
      },
      "t_mapping(t_bytes32,t_struct(ValidatorData)3709_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CompoundingValidatorManager.ValidatorData)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorData)3709_storage"
      },
      "t_mapping(t_uint256,t_struct(DepositData)3678_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CompoundingValidatorManager.DepositData)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositData)3678_storage"
      },
      "t_struct(Balances)3725_storage": {
        "encoding": "inplace",
        "label": "struct CompoundingValidatorManager.Balances",
        "members": [
          {
            "astId": 3722,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3724,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "ethBalance",
            "offset": 8,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DepositData)3678_storage": {
        "encoding": "inplace",
        "label": "struct CompoundingValidatorManager.DepositData",
        "members": [
          {
            "astId": 3666,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "pubKeyHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3668,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "amountGwei",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3670,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "slot",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3672,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "depositIndex",
            "offset": 16,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 3675,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "status",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(DepositStatus)3663"
          },
          {
            "astId": 3677,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "withdrawableEpoch",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValidatorData)3709_storage": {
        "encoding": "inplace",
        "label": "struct CompoundingValidatorManager.ValidatorData",
        "members": [
          {
            "astId": 3706,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ValidatorState)3703"
          },
          {
            "astId": 3708,
            "contract": "contracts/strategies/NativeStaking/CompoundingStakingSSVStrategy.sol:CompoundingStakingSSVStrategy",
            "label": "index",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
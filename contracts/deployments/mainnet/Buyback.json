{
  "address": "0x6C5cdfB47150EFc52072cB93Eea1e0F123529748",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategistAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ousd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ogv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth9",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsSource",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "UniswapUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsSource",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStrategistAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setUniswapAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ousdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minExpected",
          "type": "uint256"
        }
      ],
      "name": "swapNow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x29333a3f227e634da472b137959e80307bab9d4f5abb72b48a7609c10ebb999c",
  "receipt": {
    "to": null,
    "from": "0x69e078EBc4631E1947F0c38Ef0357De7ED064644",
    "contractAddress": "0x6C5cdfB47150EFc52072cB93Eea1e0F123529748",
    "transactionIndex": 97,
    "gasUsed": "1050249",
    "logsBloom": "0x
    "blockHash": "0x39911675fda776c12132623cbb83ec6528a6e637cb04361ba439cb71f1ea8687",
    "transactionHash": "0x29333a3f227e634da472b137959e80307bab9d4f5abb72b48a7609c10ebb999c",
    "logs": [
      {
        "transactionIndex": 97,
        "blockNumber": 15504442,
        "transactionHash": "0x29333a3f227e634da472b137959e80307bab9d4f5abb72b48a7609c10ebb999c",
        "address": "0x6C5cdfB47150EFc52072cB93Eea1e0F123529748",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069e078ebc4631e1947f0c38ef0357de7ed064644"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x39911675fda776c12132623cbb83ec6528a6e637cb04361ba439cb71f1ea8687"
      },
      {
        "transactionIndex": 97,
        "blockNumber": 15504442,
        "transactionHash": "0x29333a3f227e634da472b137959e80307bab9d4f5abb72b48a7609c10ebb999c",
        "address": "0x6C5cdfB47150EFc52072cB93Eea1e0F123529748",
        "topics": [
          "0x869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee"
        ],
        "data": "0x000000000000000000000000f14bbdf064e3f67f51cd9bd646ae3716ad938fdc",
        "logIndex": 136,
        "blockHash": "0x39911675fda776c12132623cbb83ec6528a6e637cb04361ba439cb71f1ea8687"
      },
      {
        "transactionIndex": 97,
        "blockNumber": 15504442,
        "transactionHash": "0x29333a3f227e634da472b137959e80307bab9d4f5abb72b48a7609c10ebb999c",
        "address": "0x2A8e1E676Ec238d8A992307B495b45B3fEAa5e86",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006c5cdfb47150efc52072cb93eea1e0f123529748",
          "0x000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 137,
        "blockHash": "0x39911675fda776c12132623cbb83ec6528a6e637cb04361ba439cb71f1ea8687"
      },
      {
        "transactionIndex": 97,
        "blockNumber": 15504442,
        "transactionHash": "0x29333a3f227e634da472b137959e80307bab9d4f5abb72b48a7609c10ebb999c",
        "address": "0x6C5cdfB47150EFc52072cB93Eea1e0F123529748",
        "topics": [
          "0xca20db57f4368388dd6766259da48cd22a485cba21ee6ec8c519007cb66dfd03"
        ],
        "data": "0x000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564",
        "logIndex": 138,
        "blockHash": "0x39911675fda776c12132623cbb83ec6528a6e637cb04361ba439cb71f1ea8687"
      }
    ],
    "blockNumber": 15504442,
    "cumulativeGasUsed": "8833347",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe592427a0aece92de3edee1f18e0157c05861564",
    "0xF14BBdf064E3F67f51cd9BD646aE3716aD938FDC",
    "0x2A8e1E676Ec238d8A992307B495b45B3fEAa5e86",
    "0x9c354503C38481a7A7a51629142963F98eCC12D0",
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x7d82e86cf1496f9485a8ea04012afeb3c7489397"
  ],
  "solcInputHash": "8c3b2648e21cb2cf09da432b88e62d0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategistAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ousd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ogv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsSource\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UniswapUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStrategistAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniswapAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ousdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExpected\",\"type\":\"uint256\"}],\"name\":\"swapNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"constructor\":{\"params\":{\"_ogv\":\"OGV Proxy Contract Address\",\"_ousd\":\"OUSD Proxy Contract Address\",\"_rewardsSource\":\"Address of RewardsSource contract\",\"_strategistAddr\":\"Address of Strategist multi-sig wallet\",\"_uniswapAddr\":\"Address of Uniswap\",\"_usdt\":\"USDT Address\",\"_weth9\":\"WETH Address\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"setStrategistAddr(address)\":{\"details\":\"Set address of Strategist\",\"params\":{\"_address\":\"Address of Strategist\"}},\"setUniswapAddr(address)\":{\"details\":\"Set address of Uniswap for performing liquidation of strategy reward tokens. Setting to 0x0 will pause swaps.\",\"params\":{\"_address\":\"Address of Uniswap\"}},\"swap()\":{\"details\":\"Execute a swap of OGV for OUSD via Uniswap or Uniswap compatible protocol (e.g. Sushiswap)*\"},\"swapNow(uint256,uint256)\":{\"details\":\"Execute a swap of OGV for OUSD via Uniswap or Uniswap compatible protocol (e.g. Sushiswap)\",\"params\":{\"minExpected\":\"mininum amount of OGV to receive*\",\"ousdAmount\":\"OUSD to sell\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"amount\":\"amount of the token to be transferred\",\"token\":\"token to be transferered\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transferToken(address,uint256)\":{\"notice\":\"Owner function to withdraw a specific amount of a token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/buyback/Buyback.sol\":\"Buyback\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/buyback/Buyback.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { Strategizable } from \\\"../governance/Strategizable.sol\\\";\\nimport \\\"../interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { UniswapV3Router } from \\\"../interfaces/UniswapV3Router.sol\\\";\\n\\ncontract Buyback is Strategizable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event UniswapUpdated(address _address);\\n\\n    // Address of Uniswap\\n    address public uniswapAddr;\\n\\n    // Swap from OUSD\\n    IERC20 immutable ousd;\\n\\n    // Swap to OGV\\n    IERC20 immutable ogv;\\n\\n    // USDT for Uniswap path\\n    IERC20 immutable usdt;\\n\\n    // WETH for Uniswap path\\n    IERC20 immutable weth9;\\n\\n    // Address that receives rewards\\n    address public immutable rewardsSource;\\n\\n    /**\\n     * @param _uniswapAddr Address of Uniswap\\n     * @param _strategistAddr Address of Strategist multi-sig wallet\\n     * @param _ousd OUSD Proxy Contract Address\\n     * @param _ogv OGV Proxy Contract Address\\n     * @param _usdt USDT Address\\n     * @param _weth9 WETH Address\\n     * @param _rewardsSource Address of RewardsSource contract\\n     */\\n    constructor(\\n        address _uniswapAddr,\\n        address _strategistAddr,\\n        address _ousd,\\n        address _ogv,\\n        address _usdt,\\n        address _weth9,\\n        address _rewardsSource\\n    ) {\\n        uniswapAddr = _uniswapAddr;\\n        _setStrategistAddr(_strategistAddr);\\n        ousd = IERC20(_ousd);\\n        ogv = IERC20(_ogv);\\n        usdt = IERC20(_usdt);\\n        weth9 = IERC20(_weth9);\\n        rewardsSource = _rewardsSource;\\n\\n        // Give approval to Uniswap router for OUSD, this is handled\\n        // by setUniswapAddr in the production contract\\n        IERC20(_ousd).safeApprove(uniswapAddr, type(uint256).max);\\n        emit UniswapUpdated(_uniswapAddr);\\n    }\\n\\n    /**\\n     * @dev Set address of Uniswap for performing liquidation of strategy reward\\n     * tokens. Setting to 0x0 will pause swaps.\\n     * @param _address Address of Uniswap\\n     */\\n    function setUniswapAddr(address _address) external onlyGovernor {\\n        uniswapAddr = _address;\\n\\n        if (uniswapAddr != address(0)) {\\n            // OUSD doesn't allow changing allowances.\\n            // You have to reset it to zero before you\\n            // can give it a different allowance.\\n            ousd.safeApprove(uniswapAddr, 0);\\n\\n            // Give Uniswap unlimited OUSD allowance\\n            ousd.safeApprove(uniswapAddr, type(uint256).max);\\n        }\\n\\n        emit UniswapUpdated(_address);\\n    }\\n\\n    /**\\n     * @dev Execute a swap of OGV for OUSD via Uniswap or Uniswap compatible\\n     * protocol (e.g. Sushiswap)\\n     **/\\n    function swap() external {\\n        // Disabled for now, will be manually swapped by\\n        // `strategistAddr` using `swapNow()` method\\n        return;\\n    }\\n\\n    /**\\n     * @dev Execute a swap of OGV for OUSD via Uniswap or Uniswap compatible\\n     * protocol (e.g. Sushiswap)\\n     * @param ousdAmount OUSD to sell\\n     * @param minExpected mininum amount of OGV to receive\\n     **/\\n    function swapNow(uint256 ousdAmount, uint256 minExpected)\\n        external\\n        onlyGovernorOrStrategist\\n        nonReentrant\\n    {\\n        require(uniswapAddr != address(0), \\\"Exchange address not set\\\");\\n        require(minExpected > 0, \\\"Invalid minExpected value\\\");\\n\\n        UniswapV3Router.ExactInputParams memory params = UniswapV3Router\\n            .ExactInputParams({\\n                path: abi.encodePacked(\\n                    ousd,\\n                    uint24(500), // Pool fee, ousd -> usdt\\n                    usdt,\\n                    uint24(500), // Pool fee, usdt -> weth9\\n                    weth9,\\n                    uint24(3000), // Pool fee, weth9 -> ogv\\n                    ogv\\n                ),\\n                recipient: rewardsSource,\\n                deadline: block.timestamp,\\n                amountIn: ousdAmount,\\n                amountOutMinimum: minExpected\\n            });\\n\\n        // slither-disable-next-line unused-return\\n        UniswapV3Router(uniswapAddr).exactInput(params);\\n    }\\n\\n    /**\\n     * @notice Owner function to withdraw a specific amount of a token\\n     * @param token token to be transferered\\n     * @param amount amount of the token to be transferred\\n     */\\n    function transferToken(address token, uint256 amount)\\n        external\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        IERC20(token).safeTransfer(_governor(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc0d80da298602e3ca4fc41c8b222c7a9c85cade26435c4b98549a04169ab813c\",\"license\":\"agpl-3.0\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x29d258134253bdaeeea64c17baaf6108ff50aec65ceddb7216ef3a948a88808c\",\"license\":\"agpl-3.0\"},\"contracts/governance/Strategizable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { Governable } from \\\"./Governable.sol\\\";\\n\\ncontract Strategizable is Governable {\\n    event StrategistUpdated(address _address);\\n\\n    // Address of strategist\\n    address public strategistAddr;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Verifies that the caller is either Governor or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == strategistAddr || isGovernor(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function setStrategistAddr(address _address) external onlyGovernor {\\n        _setStrategistAddr(_address);\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function _setStrategistAddr(address _address) internal {\\n        strategistAddr = _address;\\n        emit StrategistUpdated(_address);\\n    }\\n}\\n\",\"keccak256\":\"0xacd7d9fb4885d09e241de16edab6d172d028c21e525b0531b8d967e0d8c59610\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/UniswapV3Router.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n// -- Solididy v0.5.x compatible interface\\ninterface UniswapV3Router {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x2c051ae50c90445962ce8d471ea7848cb76b1c2f5128869b70035a9389a62dfe\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x6194c60f3343140b13e867d59b1b00d042dc4149cb5a18f03b3d7cb3adb7127e\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001719380380620017198339810160408190526200003591620005a1565b6200004d33600080516020620016f983398151915255565b600080516020620016f9833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a3603380546001600160a01b0319166001600160a01b038916179055620000bb8662000163565b606085811b6001600160601b031990811660805285821b811660a05284821b811660c05283821b811660e0529082901b16610100526033546200011a906001600160a01b038088169116600019620001b7602090811b6200088117901c565b6040516001600160a01b03881681527fca20db57f4368388dd6766259da48cd22a485cba21ee6ec8c519007cb66dfd039060200160405180910390a150505050505050620006fa565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200160405180910390a150565b801580620002455750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156200020857600080fd5b505afa1580156200021d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024391906200065a565b155b620002bd5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620003159185916200031a16565b505050565b600062000376826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620003f860201b620009dd179092919060201c565b80519091501562000315578080602001905181019062000397919062000636565b620003155760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620002b4565b606062000409848460008562000413565b90505b9392505050565b606082471015620004765760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620002b4565b843b620004c65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620002b4565b600080866001600160a01b03168587604051620004e4919062000674565b60006040518083038185875af1925050503d806000811462000523576040519150601f19603f3d011682016040523d82523d6000602084013e62000528565b606091505b5090925090506200053b82828662000546565b979650505050505050565b60608315620005575750816200040c565b825115620005685782518084602001fd5b8160405162461bcd60e51b8152600401620002b4919062000692565b80516001600160a01b03811681146200059c57600080fd5b919050565b600080600080600080600060e0888a031215620005bd57600080fd5b620005c88862000584565b9650620005d86020890162000584565b9550620005e86040890162000584565b9450620005f86060890162000584565b9350620006086080890162000584565b92506200061860a0890162000584565b91506200062860c0890162000584565b905092959891949750929550565b6000602082840312156200064957600080fd5b815180151581146200040c57600080fd5b6000602082840312156200066d57600080fd5b5051919050565b6000825162000688818460208701620006c7565b9190910192915050565b6020815260008251806020840152620006b3816040850160208701620006c7565b601f01601f19169190910160400192915050565b60005b83811015620006e4578181015183820152602001620006ca565b83811115620006f4576000848401525b50505050565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c610f96620007636000396000818161018a01526106e60152600061067301526000610644015260006106a90152600081816103c0015281816103fb01526105fc0152610f966000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638119c065116100715780638119c065146100f1578063aea173d514610134578063ba4c016214610147578063c7af33521461015a578063d38bfff414610172578063f7240d2f1461018557600080fd5b80630c340a24146100b95780631072cbea146100de578063128a8b05146100f3578063570d8e1d146101065780635d36b19014610119578063773540b314610121575b600080fd5b6100c16101ac565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec366004610d9f565b6101c9565b005b6033546100c1906001600160a01b031681565b6000546100c1906001600160a01b031681565b6100f1610292565b6100f161012f366004610d84565b610338565b6100f1610142366004610d84565b610368565b6100f1610155366004610e04565b610466565b6101626107ac565b60405190151581526020016100d5565b6100f1610180366004610d84565b6107dd565b6100c17f000000000000000000000000000000000000000000000000000000000000000081565b60006101c4600080516020610f418339815191525490565b905090565b6101d16107ac565b6101f65760405162461bcd60e51b81526004016101ed90610e81565b60405180910390fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45358054600281141561025b5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016101ed565b60028255610289610278600080516020610f418339815191525490565b6001600160a01b03861690856109f6565b50600190555050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b03161461032d5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016101ed565b61033633610a26565b565b6103406107ac565b61035c5760405162461bcd60e51b81526004016101ed90610e81565b61036581610ae7565b50565b6103706107ac565b61038c5760405162461bcd60e51b81526004016101ed90610e81565b603380546001600160a01b0319166001600160a01b03831690811790915515610426576033546103ea906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000610881565b603354610426906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116600019610881565b6040516001600160a01b03821681527fca20db57f4368388dd6766259da48cd22a485cba21ee6ec8c519007cb66dfd03906020015b60405180910390a150565b6000546001600160a01b031633148061048257506104826107ac565b6104df5760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060448201526723b7bb32b93737b960c11b60648201526084016101ed565b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535805460028114156105445760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016101ed565b600282556033546001600160a01b03166105a05760405162461bcd60e51b815260206004820152601860248201527f45786368616e67652061646472657373206e6f7420736574000000000000000060448201526064016101ed565b600083116105f05760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d696e45787065637465642076616c75650000000000000060448201526064016101ed565b6040805160a0810182527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff1990811660c0840152607d60ea1b60d484018190527f0000000000000000000000000000000000000000000000000000000000000000831b821660d785015260eb8401527f0000000000000000000000000000000000000000000000000000000000000000821b811660ee84015261017760eb1b6101028401527f0000000000000000000000000000000000000000000000000000000000000000821b16610105830152825160f98184030181526101198301845282527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166020840152428385015290820187905260808201869052603354925163c04b8d5960e01b81529192169063c04b8d599061074e908490600401610eb8565b602060405180830381600087803b15801561076857600080fd5b505af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190610deb565b50506001825550505050565b60006107c4600080516020610f418339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6107e56107ac565b6108015760405162461bcd60e51b81526004016101ed90610e81565b610829817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610849600080516020610f418339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b80158061090a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190610deb565b155b6109755760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101ed565b6040516001600160a01b0383166024820152604481018290526109d890849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b35565b505050565b60606109ec8484600085610c07565b90505b9392505050565b6040516001600160a01b0383166024820152604481018290526109d890849063a9059cbb60e01b906064016109a1565b6001600160a01b038116610a7c5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016101ed565b806001600160a01b0316610a9c600080516020610f418339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361036581600080516020610f4183398151915255565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200161045b565b6000610b8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109dd9092919063ffffffff16565b8051909150156109d85780806020019051810190610ba89190610dc9565b6109d85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101ed565b606082471015610c685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101ed565b843b610cb65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ed565b600080866001600160a01b03168587604051610cd29190610e52565b60006040518083038185875af1925050503d8060008114610d0f576040519150601f19603f3d011682016040523d82523d6000602084013e610d14565b606091505b5091509150610d24828286610d2f565b979650505050505050565b60608315610d3e5750816109ef565b825115610d4e5782518084602001fd5b8160405162461bcd60e51b81526004016101ed9190610e6e565b80356001600160a01b0381168114610d7f57600080fd5b919050565b600060208284031215610d9657600080fd5b6109ef82610d68565b60008060408385031215610db257600080fd5b610dbb83610d68565b946020939093013593505050565b600060208284031215610ddb57600080fd5b815180151581146109ef57600080fd5b600060208284031215610dfd57600080fd5b5051919050565b60008060408385031215610e1757600080fd5b50508035926020909101359150565b60008151808452610e3e816020860160208601610f10565b601f01601f19169290920160200192915050565b60008251610e64818460208701610f10565b9190910192915050565b6020815260006109ef6020830184610e26565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602081526000825160a06020840152610ed460c0840182610e26565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60005b83811015610f2b578181015183820152602001610f13565b83811115610f3a576000848401525b5050505056fe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122079db22d195509a1167f810faa2b2afab2c0227ec649b44aeed5999d3e6daea1664736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638119c065116100715780638119c065146100f1578063aea173d514610134578063ba4c016214610147578063c7af33521461015a578063d38bfff414610172578063f7240d2f1461018557600080fd5b80630c340a24146100b95780631072cbea146100de578063128a8b05146100f3578063570d8e1d146101065780635d36b19014610119578063773540b314610121575b600080fd5b6100c16101ac565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec366004610d9f565b6101c9565b005b6033546100c1906001600160a01b031681565b6000546100c1906001600160a01b031681565b6100f1610292565b6100f161012f366004610d84565b610338565b6100f1610142366004610d84565b610368565b6100f1610155366004610e04565b610466565b6101626107ac565b60405190151581526020016100d5565b6100f1610180366004610d84565b6107dd565b6100c17f000000000000000000000000000000000000000000000000000000000000000081565b60006101c4600080516020610f418339815191525490565b905090565b6101d16107ac565b6101f65760405162461bcd60e51b81526004016101ed90610e81565b60405180910390fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45358054600281141561025b5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016101ed565b60028255610289610278600080516020610f418339815191525490565b6001600160a01b03861690856109f6565b50600190555050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b03161461032d5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016101ed565b61033633610a26565b565b6103406107ac565b61035c5760405162461bcd60e51b81526004016101ed90610e81565b61036581610ae7565b50565b6103706107ac565b61038c5760405162461bcd60e51b81526004016101ed90610e81565b603380546001600160a01b0319166001600160a01b03831690811790915515610426576033546103ea906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000610881565b603354610426906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116600019610881565b6040516001600160a01b03821681527fca20db57f4368388dd6766259da48cd22a485cba21ee6ec8c519007cb66dfd03906020015b60405180910390a150565b6000546001600160a01b031633148061048257506104826107ac565b6104df5760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060448201526723b7bb32b93737b960c11b60648201526084016101ed565b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535805460028114156105445760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016101ed565b600282556033546001600160a01b03166105a05760405162461bcd60e51b815260206004820152601860248201527f45786368616e67652061646472657373206e6f7420736574000000000000000060448201526064016101ed565b600083116105f05760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206d696e45787065637465642076616c75650000000000000060448201526064016101ed565b6040805160a0810182527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff1990811660c0840152607d60ea1b60d484018190527f0000000000000000000000000000000000000000000000000000000000000000831b821660d785015260eb8401527f0000000000000000000000000000000000000000000000000000000000000000821b811660ee84015261017760eb1b6101028401527f0000000000000000000000000000000000000000000000000000000000000000821b16610105830152825160f98184030181526101198301845282527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166020840152428385015290820187905260808201869052603354925163c04b8d5960e01b81529192169063c04b8d599061074e908490600401610eb8565b602060405180830381600087803b15801561076857600080fd5b505af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190610deb565b50506001825550505050565b60006107c4600080516020610f418339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6107e56107ac565b6108015760405162461bcd60e51b81526004016101ed90610e81565b610829817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610849600080516020610f418339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b80158061090a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190610deb565b155b6109755760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101ed565b6040516001600160a01b0383166024820152604481018290526109d890849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b35565b505050565b60606109ec8484600085610c07565b90505b9392505050565b6040516001600160a01b0383166024820152604481018290526109d890849063a9059cbb60e01b906064016109a1565b6001600160a01b038116610a7c5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016101ed565b806001600160a01b0316610a9c600080516020610f418339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361036581600080516020610f4183398151915255565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200161045b565b6000610b8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109dd9092919063ffffffff16565b8051909150156109d85780806020019051810190610ba89190610dc9565b6109d85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101ed565b606082471015610c685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101ed565b843b610cb65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ed565b600080866001600160a01b03168587604051610cd29190610e52565b60006040518083038185875af1925050503d8060008114610d0f576040519150601f19603f3d011682016040523d82523d6000602084013e610d14565b606091505b5091509150610d24828286610d2f565b979650505050505050565b60608315610d3e5750816109ef565b825115610d4e5782518084602001fd5b8160405162461bcd60e51b81526004016101ed9190610e6e565b80356001600160a01b0381168114610d7f57600080fd5b919050565b600060208284031215610d9657600080fd5b6109ef82610d68565b60008060408385031215610db257600080fd5b610dbb83610d68565b946020939093013593505050565b600060208284031215610ddb57600080fd5b815180151581146109ef57600080fd5b600060208284031215610dfd57600080fd5b5051919050565b60008060408385031215610e1757600080fd5b50508035926020909101359150565b60008151808452610e3e816020860160208601610f10565b601f01601f19169290920160200192915050565b60008251610e64818460208701610f10565b9190910192915050565b6020815260006109ef6020830184610e26565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602081526000825160a06020840152610ed460c0840182610e26565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60005b83811015610f2b578181015183820152602001610f13565b83811115610f3a576000848401525b5050505056fe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122079db22d195509a1167f810faa2b2afab2c0227ec649b44aeed5999d3e6daea1664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "constructor": {
        "params": {
          "_ogv": "OGV Proxy Contract Address",
          "_ousd": "OUSD Proxy Contract Address",
          "_rewardsSource": "Address of RewardsSource contract",
          "_strategistAddr": "Address of Strategist multi-sig wallet",
          "_uniswapAddr": "Address of Uniswap",
          "_usdt": "USDT Address",
          "_weth9": "WETH Address"
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "setStrategistAddr(address)": {
        "details": "Set address of Strategist",
        "params": {
          "_address": "Address of Strategist"
        }
      },
      "setUniswapAddr(address)": {
        "details": "Set address of Uniswap for performing liquidation of strategy reward tokens. Setting to 0x0 will pause swaps.",
        "params": {
          "_address": "Address of Uniswap"
        }
      },
      "swap()": {
        "details": "Execute a swap of OGV for OUSD via Uniswap or Uniswap compatible protocol (e.g. Sushiswap)*"
      },
      "swapNow(uint256,uint256)": {
        "details": "Execute a swap of OGV for OUSD via Uniswap or Uniswap compatible protocol (e.g. Sushiswap)",
        "params": {
          "minExpected": "mininum amount of OGV to receive*",
          "ousdAmount": "OUSD to sell"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "amount": "amount of the token to be transferred",
          "token": "token to be transferered"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "transferToken(address,uint256)": {
        "notice": "Owner function to withdraw a specific amount of a token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4066,
        "contract": "contracts/buyback/Buyback.sol:Buyback",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4070,
        "contract": "contracts/buyback/Buyback.sol:Buyback",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1619,
        "contract": "contracts/buyback/Buyback.sol:Buyback",
        "label": "uniswapAddr",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x6aD90cB172001eE0096Bb758c617F5cba5163687",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_allowedSlippageBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_harvestRewardBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_uniswapV2CompatibleAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidationLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_doSwapRewardToken",
          "type": "bool"
        }
      ],
      "name": "RewardTokenConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "SupportedStrategyUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "UniswapUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTo",
          "type": "address"
        }
      ],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardProceedsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokenConfigs",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "allowedSlippageBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "harvestRewardBps",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "uniswapV2CompatibleAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "doSwapRewardToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_allowedSlippageBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_harvestRewardBps",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2CompatibleAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationLimit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_doSwapRewardToken",
          "type": "bool"
        }
      ],
      "name": "setRewardTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardProceedsAddress",
          "type": "address"
        }
      ],
      "name": "setRewardsProceedsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "setSupportedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapToken",
          "type": "address"
        }
      ],
      "name": "swapRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x31a939b0763b6b93163893855c23ec1a48a1e5eef829c7d738035ec23f0debce",
  "receipt": {
    "to": null,
    "from": "0x3Ba227D87c2A7aB89EAaCEFbeD9bfa0D15Ad249A",
    "contractAddress": "0x6aD90cB172001eE0096Bb758c617F5cba5163687",
    "transactionIndex": 11,
    "gasUsed": "2115903",
    "logsBloom": "0x
    "blockHash": "0xd1845cd97f0a2cd2a6f1b87d860640b3bb9895a1f5251fbe3a472b99719977ce",
    "transactionHash": "0x31a939b0763b6b93163893855c23ec1a48a1e5eef829c7d738035ec23f0debce",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 17940294,
        "transactionHash": "0x31a939b0763b6b93163893855c23ec1a48a1e5eef829c7d738035ec23f0debce",
        "address": "0x6aD90cB172001eE0096Bb758c617F5cba5163687",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003ba227d87c2a7ab89eaacefbed9bfa0d15ad249a"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0xd1845cd97f0a2cd2a6f1b87d860640b3bb9895a1f5251fbe3a472b99719977ce"
      }
    ],
    "blockNumber": 17940294,
    "cumulativeGasUsed": "5272365",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE75D77B1865Ae93c7eaa3040B038D7aA7BC02F70",
    "0xdAC17F958D2ee523a2206206994597C13D831ec7"
  ],
  "numDeployments": 2,
  "solcInputHash": "4b50676bca9e9a4e842de1d53a0040b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_allowedSlippageBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_harvestRewardBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniswapV2CompatibleAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidationLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_doSwapRewardToken\",\"type\":\"bool\"}],\"name\":\"RewardTokenConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"SupportedStrategyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UniswapUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTo\",\"type\":\"address\"}],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardProceedsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenConfigs\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"allowedSlippageBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"harvestRewardBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"uniswapV2CompatibleAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"doSwapRewardToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_allowedSlippageBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_harvestRewardBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2CompatibleAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_doSwapRewardToken\",\"type\":\"bool\"}],\"name\":\"setRewardTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardProceedsAddress\",\"type\":\"address\"}],\"name\":\"setRewardsProceedsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"setSupportedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"}],\"name\":\"swapRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor to set up initial internal state\",\"params\":{\"_usdtAddress\":\"Address of Tether\",\"_vault\":\"Address of the Vault\"}},\"harvest()\":{\"details\":\"Collect reward tokens from all strategies\"},\"harvest(address)\":{\"details\":\"Collect reward tokens for a specific strategy.\",\"params\":{\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"harvestAndSwap(address)\":{\"details\":\"Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone. Rewards incentivizing      the caller are sent to the caller of this function.\",\"params\":{\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"harvestAndSwap(address,address)\":{\"details\":\"Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone.\",\"params\":{\"_rewardTo\":\"Address where to send a share of harvest rewards to as an incentive      for executing this function\",\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"setRewardTokenConfig(address,uint16,uint16,address,uint256,bool)\":{\"details\":\"Add/update a reward token configuration that holds harvesting config variables\",\"params\":{\"_allowedSlippageBps\":\"uint16 maximum allowed slippage denominated in basis points.        Example: 300 == 3% slippage\",\"_doSwapRewardToken\":\"bool When true the reward token is being swapped. In a need of (temporarily)        disabling the swapping of a reward token this needs to be set to false.\",\"_harvestRewardBps\":\"uint16 amount of reward tokens the caller of the function is rewarded.        Example: 100 == 1%\",\"_liquidationLimit\":\"uint256 Maximum amount of token to be sold per one swap function call.        When value is 0 there is no limit.\",\"_tokenAddress\":\"Address of the reward token\",\"_uniswapV2CompatibleAddr\":\"Address Address of a UniswapV2 compatible contract to perform        the exchange from reward tokens to stablecoin (currently hard-coded to USDT)\"}},\"setRewardsProceedsAddress(address)\":{\"params\":{\"_rewardProceedsAddress\":\"Address of the reward token\"}},\"setSupportedStrategy(address,bool)\":{\"details\":\"Flags a strategy as supported or not supported one\",\"params\":{\"_isSupported\":\"Bool marking strategy as supported or not supported\",\"_strategyAddress\":\"Address of the strategy\"}},\"swap()\":{\"details\":\"Swap all supported swap tokens for stablecoins via Uniswap.\"},\"swapRewardToken(address)\":{\"details\":\"Governance convenience function to swap a specific _rewardToken and send       rewards to the vault.\",\"params\":{\"_swapToken\":\"Address of the token to swap.\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"rewardProceedsAddress()\":{\"notice\":\"Address receiving rewards proceeds. Initially the Vault contract later will possibly be replaced by another contract that eases out rewards distribution.\"},\"setRewardsProceedsAddress(address)\":{\"notice\":\"Set the Address receiving rewards proceeds.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/harvest/Harvester.sol\":\"Harvester\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xf5e76834bd232ca3efe29300d38ded1b98bcb30de367211ee66c648765e40a53\",\"license\":\"MIT\"},\"contracts/harvest/BaseHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\nabstract contract BaseHarvester is Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event UniswapUpdated(address _address);\\n    event SupportedStrategyUpdate(address _address, bool _isSupported);\\n    event RewardTokenConfigUpdated(\\n        address _tokenAddress,\\n        uint16 _allowedSlippageBps,\\n        uint16 _harvestRewardBps,\\n        address _uniswapV2CompatibleAddr,\\n        uint256 _liquidationLimit,\\n        bool _doSwapRewardToken\\n    );\\n\\n    // Configuration properties for harvesting logic of reward tokens\\n    struct RewardTokenConfig {\\n        // Max allowed slippage when swapping reward token for a stablecoin denominated in basis points.\\n        uint16 allowedSlippageBps;\\n        // Reward when calling a harvest function denominated in basis points.\\n        uint16 harvestRewardBps;\\n        /* Address of Uniswap V2 compatible exchange (Uniswap V2, SushiSwap).\\n         */\\n        address uniswapV2CompatibleAddr;\\n        /* When true the reward token is being swapped. In a need of (temporarily) disabling the swapping of\\n         * a reward token this needs to be set to false.\\n         */\\n        bool doSwapRewardToken;\\n        /* How much token can be sold per one harvest call. If the balance of rewards tokens\\n         * exceeds that limit multiple harvest calls are required to harvest all of the tokens.\\n         * Set it to MAX_INT to effectively disable the limit.\\n         */\\n        uint256 liquidationLimit;\\n    }\\n\\n    mapping(address => RewardTokenConfig) public rewardTokenConfigs;\\n    mapping(address => bool) public supportedStrategies;\\n\\n    address public immutable vaultAddress;\\n\\n    /**\\n     * Address receiving rewards proceeds. Initially the Vault contract later will possibly\\n     * be replaced by another contract that eases out rewards distribution.\\n     */\\n    address public rewardProceedsAddress;\\n\\n    /**\\n     * @dev Constructor to set up initial internal state\\n     * @param _vaultAddress Address of the Vault\\n     */\\n    constructor(address _vaultAddress) {\\n        require(address(_vaultAddress) != address(0));\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /***************************************\\n                 Configuration\\n    ****************************************/\\n\\n    /**\\n     * @dev Throws if called by any address other than the Vault.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || isGovernor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Set the Address receiving rewards proceeds.\\n     * @param _rewardProceedsAddress Address of the reward token\\n     */\\n    function setRewardsProceedsAddress(address _rewardProceedsAddress)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _rewardProceedsAddress != address(0),\\n            \\\"Rewards proceeds address should be a non zero address\\\"\\n        );\\n\\n        rewardProceedsAddress = _rewardProceedsAddress;\\n    }\\n\\n    /**\\n     * @dev Add/update a reward token configuration that holds harvesting config variables\\n     * @param _tokenAddress Address of the reward token\\n     * @param _allowedSlippageBps uint16 maximum allowed slippage denominated in basis points.\\n     *        Example: 300 == 3% slippage\\n     * @param _harvestRewardBps uint16 amount of reward tokens the caller of the function is rewarded.\\n     *        Example: 100 == 1%\\n     * @param _uniswapV2CompatibleAddr Address Address of a UniswapV2 compatible contract to perform\\n     *        the exchange from reward tokens to stablecoin (currently hard-coded to USDT)\\n     * @param _liquidationLimit uint256 Maximum amount of token to be sold per one swap function call.\\n     *        When value is 0 there is no limit.\\n     * @param _doSwapRewardToken bool When true the reward token is being swapped. In a need of (temporarily)\\n     *        disabling the swapping of a reward token this needs to be set to false.\\n     */\\n    function setRewardTokenConfig(\\n        address _tokenAddress,\\n        uint16 _allowedSlippageBps,\\n        uint16 _harvestRewardBps,\\n        address _uniswapV2CompatibleAddr,\\n        uint256 _liquidationLimit,\\n        bool _doSwapRewardToken\\n    ) external onlyGovernor {\\n        require(\\n            _allowedSlippageBps <= 1000,\\n            \\\"Allowed slippage should not be over 10%\\\"\\n        );\\n        require(\\n            _harvestRewardBps <= 1000,\\n            \\\"Harvest reward fee should not be over 10%\\\"\\n        );\\n        require(\\n            _uniswapV2CompatibleAddr != address(0),\\n            \\\"Uniswap compatible address should be non zero address\\\"\\n        );\\n\\n        RewardTokenConfig memory tokenConfig = RewardTokenConfig({\\n            allowedSlippageBps: _allowedSlippageBps,\\n            harvestRewardBps: _harvestRewardBps,\\n            uniswapV2CompatibleAddr: _uniswapV2CompatibleAddr,\\n            doSwapRewardToken: _doSwapRewardToken,\\n            liquidationLimit: _liquidationLimit\\n        });\\n\\n        address oldUniswapAddress = rewardTokenConfigs[_tokenAddress]\\n            .uniswapV2CompatibleAddr;\\n        rewardTokenConfigs[_tokenAddress] = tokenConfig;\\n\\n        IERC20 token = IERC20(_tokenAddress);\\n\\n        address priceProvider = IVault(vaultAddress).priceProvider();\\n\\n        // Revert if feed does not exist\\n        // slither-disable-next-line unused-return\\n        IOracle(priceProvider).price(_tokenAddress);\\n\\n        // if changing token swap provider cancel existing allowance\\n        if (\\n            /* oldUniswapAddress == address(0) when there is no pre-existing\\n             * configuration for said rewards token\\n             */\\n            oldUniswapAddress != address(0) &&\\n            oldUniswapAddress != _uniswapV2CompatibleAddr\\n        ) {\\n            token.safeApprove(oldUniswapAddress, 0);\\n        }\\n\\n        // Give Uniswap infinite approval when needed\\n        if (oldUniswapAddress != _uniswapV2CompatibleAddr) {\\n            token.safeApprove(_uniswapV2CompatibleAddr, 0);\\n            token.safeApprove(_uniswapV2CompatibleAddr, type(uint256).max);\\n        }\\n\\n        emit RewardTokenConfigUpdated(\\n            _tokenAddress,\\n            _allowedSlippageBps,\\n            _harvestRewardBps,\\n            _uniswapV2CompatibleAddr,\\n            _liquidationLimit,\\n            _doSwapRewardToken\\n        );\\n    }\\n\\n    /**\\n     * @dev Flags a strategy as supported or not supported one\\n     * @param _strategyAddress Address of the strategy\\n     * @param _isSupported Bool marking strategy as supported or not supported\\n     */\\n    function setSupportedStrategy(address _strategyAddress, bool _isSupported)\\n        external\\n        onlyVaultOrGovernor\\n    {\\n        supportedStrategies[_strategyAddress] = _isSupported;\\n        emit SupportedStrategyUpdate(_strategyAddress, _isSupported);\\n    }\\n\\n    /***************************************\\n                    Rewards\\n    ****************************************/\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      contract, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        external\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from all strategies\\n     */\\n    function harvest() external onlyGovernor nonReentrant {\\n        _harvest();\\n    }\\n\\n    /**\\n     * @dev Swap all supported swap tokens for stablecoins via Uniswap.\\n     */\\n    function swap() external onlyGovernor nonReentrant {\\n        _swap(rewardProceedsAddress);\\n    }\\n\\n    /*\\n     * @dev Collect reward tokens from all strategies and swap for supported\\n     *      stablecoin via Uniswap\\n     */\\n    function harvestAndSwap() external onlyGovernor nonReentrant {\\n        _harvest();\\n        _swap(rewardProceedsAddress);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     */\\n    function harvest(address _strategyAddr) external onlyGovernor nonReentrant {\\n        _harvest(_strategyAddr);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy and swap for supported\\n     *      stablecoin via Uniswap. Can be called by anyone. Rewards incentivizing\\n     *      the caller are sent to the caller of this function.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     */\\n    function harvestAndSwap(address _strategyAddr) external nonReentrant {\\n        // Remember _harvest function checks for the validity of _strategyAddr\\n        _harvestAndSwap(_strategyAddr, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy and swap for supported\\n     *      stablecoin via Uniswap. Can be called by anyone.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function harvestAndSwap(address _strategyAddr, address _rewardTo)\\n        external\\n        nonReentrant\\n    {\\n        // Remember _harvest function checks for the validity of _strategyAddr\\n        _harvestAndSwap(_strategyAddr, _rewardTo);\\n    }\\n\\n    /**\\n     * @dev Governance convenience function to swap a specific _rewardToken and send\\n     *       rewards to the vault.\\n     * @param _swapToken Address of the token to swap.\\n     */\\n    function swapRewardToken(address _swapToken)\\n        external\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        _swap(_swapToken, rewardProceedsAddress);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from all strategies\\n     */\\n    function _harvest() internal {\\n        address[] memory allStrategies = IVault(vaultAddress)\\n            .getAllStrategies();\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            _harvest(allStrategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy and swap for supported\\n     *      stablecoin via Uniswap.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function _harvestAndSwap(address _strategyAddr, address _rewardTo)\\n        internal\\n    {\\n        _harvest(_strategyAddr);\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        address[] memory rewardTokens = strategy.getRewardTokenAddresses();\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            _swap(rewardTokens[i], _rewardTo);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from a single strategy and swap them for a\\n     *      supported stablecoin via Uniswap\\n     * @param _strategyAddr Address of the strategy to collect rewards from.\\n     */\\n    function _harvest(address _strategyAddr) internal {\\n        require(\\n            supportedStrategies[_strategyAddr],\\n            \\\"Not a valid strategy address\\\"\\n        );\\n\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        strategy.collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Swap all supported swap tokens for stablecoins via Uniswap. And send the incentive part\\n     * of the rewards to _rewardTo address.\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function _swap(address _rewardTo) internal {\\n        address[] memory allStrategies = IVault(vaultAddress)\\n            .getAllStrategies();\\n\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            address[] memory rewardTokenAddresses = strategy\\n                .getRewardTokenAddresses();\\n\\n            for (uint256 j = 0; j < rewardTokenAddresses.length; j++) {\\n                _swap(rewardTokenAddresses[j], _rewardTo);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Swap a reward token for stablecoins on Uniswap. The token must have\\n     *       a registered price feed with the price provider.\\n     * @param _swapToken Address of the token to swap.\\n     * @param _rewardTo Address where to send the share of harvest rewards to\\n     */\\n    function _swap(address _swapToken, address _rewardTo) internal virtual;\\n}\\n\",\"keccak256\":\"0x18f3b3a1f6514fa45fb2ce9495a77734ce5872a564c61b6b852a53bb0bdfed4f\",\"license\":\"MIT\"},\"contracts/harvest/Harvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { BaseHarvester } from \\\"./BaseHarvester.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract Harvester is BaseHarvester {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    address public immutable usdtAddress;\\n\\n    /**\\n     * @dev Constructor to set up initial internal state\\n     * @param _vault Address of the Vault\\n     * @param _usdtAddress Address of Tether\\n     */\\n    constructor(address _vault, address _usdtAddress) BaseHarvester(_vault) {\\n        require(address(_usdtAddress) != address(0));\\n        usdtAddress = _usdtAddress;\\n    }\\n\\n    /**\\n     * @dev Swap a reward token for stablecoins on Uniswap. The token must have\\n     *       a registered price feed with the price provider.\\n     * @param _swapToken Address of the token to swap.\\n     * @param _rewardTo Address where to send the share of harvest rewards to\\n     */\\n    function _swap(address _swapToken, address _rewardTo) internal override {\\n        RewardTokenConfig memory tokenConfig = rewardTokenConfigs[_swapToken];\\n\\n        /* This will trigger a return when reward token configuration has not yet been set\\n         * or we have temporarily disabled swapping of specific reward token via setting\\n         * doSwapRewardToken to false.\\n         */\\n        if (!tokenConfig.doSwapRewardToken) {\\n            return;\\n        }\\n\\n        address priceProvider = IVault(vaultAddress).priceProvider();\\n\\n        IERC20 swapToken = IERC20(_swapToken);\\n        uint256 balance = swapToken.balanceOf(address(this));\\n\\n        if (balance == 0) {\\n            return;\\n        }\\n\\n        uint256 balanceToSwap = Math.min(balance, tokenConfig.liquidationLimit);\\n\\n        // This'll revert if there is no price feed\\n        uint256 oraclePrice = IOracle(priceProvider).price(_swapToken);\\n\\n        // Oracle price is 1e18, USDT output is 1e6\\n        uint256 minExpected = (balanceToSwap *\\n            (1e4 - tokenConfig.allowedSlippageBps) * // max allowed slippage\\n            oraclePrice).scaleBy(6, Helpers.getDecimals(_swapToken)) /\\n            1e4 / // fix the max slippage decimal position\\n            1e18; // and oracle price decimals position\\n\\n        // Uniswap redemption path\\n        address[] memory path = new address[](3);\\n        path[0] = _swapToken;\\n        path[1] = IUniswapV2Router(tokenConfig.uniswapV2CompatibleAddr).WETH();\\n        path[2] = usdtAddress;\\n\\n        // slither-disable-next-line unused-return\\n        IUniswapV2Router(tokenConfig.uniswapV2CompatibleAddr)\\n            .swapExactTokensForTokens(\\n                balanceToSwap,\\n                minExpected,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        IERC20 usdt = IERC20(usdtAddress);\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\n\\n        uint256 vaultBps = 1e4 - tokenConfig.harvestRewardBps;\\n        uint256 rewardsProceedsShare = (usdtBalance * vaultBps) / 1e4;\\n\\n        require(\\n            vaultBps > tokenConfig.harvestRewardBps,\\n            \\\"Address receiving harvest incentive is receiving more rewards than the rewards proceeds address\\\"\\n        );\\n\\n        usdt.safeTransfer(rewardProceedsAddress, rewardsProceedsShare);\\n        usdt.safeTransfer(\\n            _rewardTo,\\n            usdtBalance - rewardsProceedsShare // remaining share of the rewards\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe2a769d10ea5e18d029bbbf4ffdc393898bdeb1c59f9cb3d0491a4039d58986c\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eabf152389f145c9c23ed71972af73fb1708cbc4b26e524a9ba29a557b7cfe5\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    // The following two function definitions exist for backward compatibility\\n    function priceUSDMint(address asset) external view returns (uint256);\\n\\n    function priceUSDRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x1db6b6b05abe41ffab1f7d01acc214514b5c94040f99d639debddcd6fe7acbed\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router {\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n}\\n\",\"keccak256\":\"0x3fdf2b91880f2b669202cc43bdceaf9d01537a9b955fc7a51159fb04fdbc68d4\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(msg.sender));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\n\\n        _creditBalances[msg.sender] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\n\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x14a6bcf58e3622e475941619b0491b5e486bc7f6a3568ac179630bd4d725b85b\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xed91beae8c271cd70d80a9fce9306f1c46b8437cdd1d78ed9b75c067961e5259\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x9ffba86e00ab24fab65da197f3c44f4b672dafbc63926584bdf42c47425dba51\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configiration\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n    address public ousdMetaStrategy = address(0);\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy = 0;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold = 0;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19891574f3b33074486f48166879b4cccc88162c392e77192bd54367ec263287\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200268338038062002683833981016040819052620000349162000101565b816200004d336000805160206200266383398151915255565b60008051602062002663833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36001600160a01b038116620000a957600080fd5b60601b6001600160601b0319166080526001600160a01b038116620000cd57600080fd5b60601b6001600160601b03191660a0525062000139565b80516001600160a01b0381168114620000fc57600080fd5b919050565b600080604083850312156200011557600080fd5b6200012083620000e4565b91506200013060208401620000e4565b90509250929050565b60805160601c60a05160601c6124cd62000196600039600081816102a7015281816114da01526115bf0152600081816101b10152818161072001528181610af101528181610e8001528181610f5901526111c801526124cd6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80635d36b190116100ad578063b76e83af11610071578063b76e83af146102dc578063bb444881146102ef578063c7af335214610302578063d38bfff41461031a578063ee3be5f51461032d57600080fd5b80635d36b1901461027f57806365f6fa94146102875780638119c0651461029a5780639ab4a445146102a2578063a994317f146102c957600080fd5b806326aaf9cf116100f457806326aaf9cf14610199578063430bf08a146101ac5780634641257d146101d3578063548f5ae5146101db578063587c8440146101ee57600080fd5b806305f566e5146101315780630c340a24146101465780630e5c011e1461016b5780630fbd78081461017e5780631072cbea14610186575b600080fd5b61014461013f366004611e00565b610350565b005b61014e610413565b6040516001600160a01b0390911681526020015b60405180910390f35b610144610179366004611e00565b610430565b61014461049b565b610144610194366004611f16565b610519565b6101446101a7366004611e00565b61055d565b61014e7f000000000000000000000000000000000000000000000000000000000000000081565b6101446105cd565b6101446101e9366004611e00565b61062f565b6102436101fc366004611e00565b6000602081905290815260409020805460019091015461ffff808316926201000081049091169164010000000082046001600160a01b031691600160c01b900460ff169085565b6040805161ffff96871681529590941660208601526001600160a01b03909216928401929092529015156060830152608082015260a001610162565b61014461066f565b610144610295366004611e73565b610715565b61014461080a565b61014e7f000000000000000000000000000000000000000000000000000000000000000081565b6101446102d7366004611e3a565b610878565b60025461014e906001600160a01b031681565b6101446102fd366004611ea1565b6108c1565b61030a610ce3565b6040519015158152602001610162565b610144610328366004611e00565b610d14565b61030a61033b366004611e00565b60016020526000908152604090205460ff1681565b610358610ce3565b61037d5760405162461bcd60e51b81526004016103749061211c565b60405180910390fd5b6001600160a01b0381166103f15760405162461bcd60e51b815260206004820152603560248201527f526577617264732070726f636565647320616464726573732073686f756c642060448201527462652061206e6f6e207a65726f206164647265737360581b6064820152608401610374565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061042b6000805160206124788339815191525490565b905090565b610438610ce3565b6104545760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156104865760405162461bcd60e51b815260040161037490612153565b6002825561049383610db8565b506001905550565b6104a3610ce3565b6104bf5760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156104f15760405162461bcd60e51b815260040161037490612153565b600282556104fd610e7c565b600254610512906001600160a01b0316610f55565b5060019055565b610521610ce3565b61053d5760405162461bcd60e51b81526004016103749061211c565b610559610548610413565b6001600160a01b03841690836110ed565b5050565b610565610ce3565b6105815760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156105b35760405162461bcd60e51b815260040161037490612153565b6002808355546104939084906001600160a01b0316611150565b6105d5610ce3565b6105f15760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156106235760405162461bcd60e51b815260040161037490612153565b60028255610512610e7c565b600080516020612458833981519152805460028114156106615760405162461bcd60e51b815260040161037490612153565b600282556104938333611769565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b03161461070a5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610374565b61071333611838565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061074f575061074f610ce3565b6107a75760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610374565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f013ed61add17cbfcbbd95bf8543da67c89658c5477d3f3199a1a2d58ecf1913f910160405180910390a15050565b610812610ce3565b61082e5760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156108605760405162461bcd60e51b815260040161037490612153565b600280835554610512906001600160a01b0316610f55565b600080516020612458833981519152805460028114156108aa5760405162461bcd60e51b815260040161037490612153565b600282556108b88484611769565b50600190555050565b6108c9610ce3565b6108e55760405162461bcd60e51b81526004016103749061211c565b6103e88561ffff16111561094b5760405162461bcd60e51b815260206004820152602760248201527f416c6c6f77656420736c6970706167652073686f756c64206e6f74206265206f6044820152667665722031302560c81b6064820152608401610374565b6103e88461ffff1611156109b35760405162461bcd60e51b815260206004820152602960248201527f4861727665737420726577617264206665652073686f756c64206e6f74206265604482015268206f7665722031302560b81b6064820152608401610374565b6001600160a01b038316610a275760405162461bcd60e51b815260206004820152603560248201527f556e697377617020636f6d70617469626c6520616464726573732073686f756c60448201527464206265206e6f6e207a65726f206164647265737360581b6064820152608401610374565b6040805160a08101825261ffff878116825286811660208084019182526001600160a01b0388811685870190815287151560608701908152608087018a81528e8416600090815280865289812080548a51985195519451988a1663ffffffff198216176201000096909a169590950298909817640100000000600160c81b031916640100000000938616840260ff60c01b191617600160c01b97151597909702969096178755516001909601959095558651635c4443cf60e11b8152965195969490048116948c947f00000000000000000000000000000000000000000000000000000000000000009092169263b888879e9260048082019391829003018186803b158015610b3557600080fd5b505afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190611e1d565b6040516315d5220f60e31b81526001600160a01b038c811660048301529192509082169063aea910789060240160206040518083038186803b158015610bb257600080fd5b505afa158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190612091565b506001600160a01b03831615801590610c155750866001600160a01b0316836001600160a01b031614155b15610c2f57610c2f6001600160a01b0383168460006118fc565b866001600160a01b0316836001600160a01b031614610c7357610c5d6001600160a01b0383168860006118fc565b610c736001600160a01b038316886000196118fc565b604080516001600160a01b038c8116825261ffff8c811660208401528b1682840152891660608201526080810188905286151560a082015290517fa366f54fe2381dd56321b1e05d11e00e0acbbee5663bcd5111ed8f604ba530ad9181900360c00190a150505050505050505050565b6000610cfb6000805160206124788339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610d1c610ce3565b610d385760405162461bcd60e51b81526004016103749061211c565b610d60817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610d806000805160206124788339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b03811660009081526001602052604090205460ff16610e205760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420612076616c69642073747261746567792061646472657373000000006044820152606401610374565b6000819050806001600160a01b0316635a063f636040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610ed757600080fd5b505afa158015610eeb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f139190810190611f42565b905060005b815181101561055957610f43828281518110610f3657610f36612408565b6020026020010151610db8565b80610f4d816123d7565b915050610f18565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fec9190810190611f42565b905060005b81518110156110e857600082828151811061100e5761100e612408565b602002602001015190506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108f9190810190611f42565b905060005b81518110156110d2576110c08282815181106110b2576110b2612408565b602002602001015187611150565b806110ca816123d7565b915050611094565b50505080806110e0906123d7565b915050610ff1565b505050565b6040516001600160a01b0383166024820152604481018290526110e890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a20565b6001600160a01b0382811660009081526020818152604091829020825160a081018452815461ffff80821683526201000082041693820193909352640100000000830490941692840192909252600160c01b900460ff1615156060830181905260019091015460808301526111c457505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190611e1d565b6040516370a0823160e01b815230600482015290915084906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561129e57600080fd5b505afa1580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d69190612091565b9050806112e557505050505050565b60006112f5828660800151611af2565b6040516315d5220f60e31b81526001600160a01b03898116600483015291925060009186169063aea910789060240160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612091565b90506000670de0b6b3a76400006127106113c160066113928d611b0c565b8b5187906113a29061271061236d565b6113b09061ffff168a61234e565b6113ba919061234e565b9190611bf5565b6113cb9190612241565b6113d59190612241565b604080516003808252608082019092529192506000919060208201606080368337019050509050898160008151811061141057611410612408565b60200260200101906001600160a01b031690816001600160a01b03168152505087604001516001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561146d57600080fd5b505afa158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a59190611e1d565b816001815181106114b8576114b8612408565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160028151811061150c5761150c612408565b6001600160a01b0392831660209182029290920101526040808a015190516338ed173960e01b81529116906338ed173990611553908790869086903090429060040161217b565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115a99190810190611fe8565b506040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561160e57600080fd5b505afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116469190612091565b905060008a6020015161271061165c919061236d565b61ffff1690506000612710611671838561234e565b61167b9190612241565b90508b6020015161ffff1682116117205760405162461bcd60e51b815260206004820152605f60248201527f4164647265737320726563656976696e67206861727665737420696e63656e7460448201527f69766520697320726563656976696e67206d6f7265207265776172647320746860648201527f616e2074686520726577617264732070726f6365656473206164647265737300608482015260a401610374565b60025461173a906001600160a01b038681169116836110ed565b6117598d6117488386612390565b6001600160a01b03871691906110ed565b5050505050505050505050505050565b61177282610db8565b60008290506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b1580156117b257600080fd5b505afa1580156117c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ee9190810190611f42565b905060005b81518110156118315761181f82828151811061181157611811612408565b602002602001015185611150565b80611829816123d7565b9150506117f3565b5050505050565b6001600160a01b03811661188e5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610374565b806001600160a01b03166118ae6000805160206124788339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36118f98160008051602061247883398151915255565b50565b8015806119855750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119839190612091565b155b6119f05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610374565b6040516001600160a01b0383166024820152604481018290526110e890849063095ea7b360e01b90606401611119565b6000611a75826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c599092919063ffffffff16565b8051909150156110e85780806020019051810190611a939190612074565b6110e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610374565b6000818310611b015781611b03565b825b90505b92915050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4857600080fd5b505afa158015611b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8091906120aa565b60ff16905060048110158015611b97575060128111155b611b065760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610374565b600081831115611c2557611c1e611c0c8385612390565b611c1790600a6122a6565b8590611c70565b9350611c4f565b81831015611c4f57611c4c611c3a8484612390565b611c4590600a6122a6565b8590611c7c565b93505b50825b9392505050565b6060611c688484600085611c88565b949350505050565b6000611b03828461234e565b6000611b038284612241565b606082471015611ce95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610374565b843b611d375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610374565b600080866001600160a01b03168587604051611d5391906120cd565b60006040518083038185875af1925050503d8060008114611d90576040519150601f19603f3d011682016040523d82523d6000602084013e611d95565b606091505b5091509150611da5828286611db0565b979650505050505050565b60608315611dbf575081611c52565b825115611dcf5782518084602001fd5b8160405162461bcd60e51b815260040161037491906120e9565b803561ffff81168114611dfb57600080fd5b919050565b600060208284031215611e1257600080fd5b8135611c5281612434565b600060208284031215611e2f57600080fd5b8151611c5281612434565b60008060408385031215611e4d57600080fd5b8235611e5881612434565b91506020830135611e6881612434565b809150509250929050565b60008060408385031215611e8657600080fd5b8235611e9181612434565b91506020830135611e6881612449565b60008060008060008060c08789031215611eba57600080fd5b8635611ec581612434565b9550611ed360208801611de9565b9450611ee160408801611de9565b93506060870135611ef181612434565b92506080870135915060a0870135611f0881612449565b809150509295509295509295565b60008060408385031215611f2957600080fd5b8235611f3481612434565b946020939093013593505050565b60006020808385031215611f5557600080fd5b825167ffffffffffffffff811115611f6c57600080fd5b8301601f81018513611f7d57600080fd5b8051611f90611f8b8261221d565b6121ec565b80828252848201915084840188868560051b8701011115611fb057600080fd5b600094505b83851015611fdc578051611fc881612434565b835260019490940193918501918501611fb5565b50979650505050505050565b60006020808385031215611ffb57600080fd5b825167ffffffffffffffff81111561201257600080fd5b8301601f8101851361202357600080fd5b8051612031611f8b8261221d565b80828252848201915084840188868560051b870101111561205157600080fd5b600094505b83851015611fdc578051835260019490940193918501918501612056565b60006020828403121561208657600080fd5b8151611c5281612449565b6000602082840312156120a357600080fd5b5051919050565b6000602082840312156120bc57600080fd5b815160ff81168114611c5257600080fd5b600082516120df8184602087016123a7565b9190910192915050565b60208152600082518060208401526121088160408501602087016123a7565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121cb5784516001600160a01b0316835293830193918301916001016121a6565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156122155761221561241e565b604052919050565b600067ffffffffffffffff8211156122375761223761241e565b5060051b60200190565b60008261225e57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561229e578160001904821115612284576122846123f2565b8085161561229157918102915b93841c9390800290612268565b509250929050565b6000611b0383836000826122bc57506001611b06565b816122c957506000611b06565b81600181146122df57600281146122e957612305565b6001915050611b06565b60ff8411156122fa576122fa6123f2565b50506001821b611b06565b5060208310610133831016604e8410600b8410161715612328575081810a611b06565b6123328383612263565b8060001904821115612346576123466123f2565b029392505050565b6000816000190483118215151615612368576123686123f2565b500290565b600061ffff83811690831681811015612388576123886123f2565b039392505050565b6000828210156123a2576123a26123f2565b500390565b60005b838110156123c25781810151838201526020016123aa565b838111156123d1576000848401525b50505050565b60006000198214156123eb576123eb6123f2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118f957600080fd5b80151581146118f957600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122010ec4ac34929fe07b5bcfa3fa8895773da6d4c8e40477ba6080c9c2e009c883564736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80635d36b190116100ad578063b76e83af11610071578063b76e83af146102dc578063bb444881146102ef578063c7af335214610302578063d38bfff41461031a578063ee3be5f51461032d57600080fd5b80635d36b1901461027f57806365f6fa94146102875780638119c0651461029a5780639ab4a445146102a2578063a994317f146102c957600080fd5b806326aaf9cf116100f457806326aaf9cf14610199578063430bf08a146101ac5780634641257d146101d3578063548f5ae5146101db578063587c8440146101ee57600080fd5b806305f566e5146101315780630c340a24146101465780630e5c011e1461016b5780630fbd78081461017e5780631072cbea14610186575b600080fd5b61014461013f366004611e00565b610350565b005b61014e610413565b6040516001600160a01b0390911681526020015b60405180910390f35b610144610179366004611e00565b610430565b61014461049b565b610144610194366004611f16565b610519565b6101446101a7366004611e00565b61055d565b61014e7f000000000000000000000000000000000000000000000000000000000000000081565b6101446105cd565b6101446101e9366004611e00565b61062f565b6102436101fc366004611e00565b6000602081905290815260409020805460019091015461ffff808316926201000081049091169164010000000082046001600160a01b031691600160c01b900460ff169085565b6040805161ffff96871681529590941660208601526001600160a01b03909216928401929092529015156060830152608082015260a001610162565b61014461066f565b610144610295366004611e73565b610715565b61014461080a565b61014e7f000000000000000000000000000000000000000000000000000000000000000081565b6101446102d7366004611e3a565b610878565b60025461014e906001600160a01b031681565b6101446102fd366004611ea1565b6108c1565b61030a610ce3565b6040519015158152602001610162565b610144610328366004611e00565b610d14565b61030a61033b366004611e00565b60016020526000908152604090205460ff1681565b610358610ce3565b61037d5760405162461bcd60e51b81526004016103749061211c565b60405180910390fd5b6001600160a01b0381166103f15760405162461bcd60e51b815260206004820152603560248201527f526577617264732070726f636565647320616464726573732073686f756c642060448201527462652061206e6f6e207a65726f206164647265737360581b6064820152608401610374565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061042b6000805160206124788339815191525490565b905090565b610438610ce3565b6104545760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156104865760405162461bcd60e51b815260040161037490612153565b6002825561049383610db8565b506001905550565b6104a3610ce3565b6104bf5760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156104f15760405162461bcd60e51b815260040161037490612153565b600282556104fd610e7c565b600254610512906001600160a01b0316610f55565b5060019055565b610521610ce3565b61053d5760405162461bcd60e51b81526004016103749061211c565b610559610548610413565b6001600160a01b03841690836110ed565b5050565b610565610ce3565b6105815760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156105b35760405162461bcd60e51b815260040161037490612153565b6002808355546104939084906001600160a01b0316611150565b6105d5610ce3565b6105f15760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156106235760405162461bcd60e51b815260040161037490612153565b60028255610512610e7c565b600080516020612458833981519152805460028114156106615760405162461bcd60e51b815260040161037490612153565b600282556104938333611769565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b03161461070a5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610374565b61071333611838565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061074f575061074f610ce3565b6107a75760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610374565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f013ed61add17cbfcbbd95bf8543da67c89658c5477d3f3199a1a2d58ecf1913f910160405180910390a15050565b610812610ce3565b61082e5760405162461bcd60e51b81526004016103749061211c565b600080516020612458833981519152805460028114156108605760405162461bcd60e51b815260040161037490612153565b600280835554610512906001600160a01b0316610f55565b600080516020612458833981519152805460028114156108aa5760405162461bcd60e51b815260040161037490612153565b600282556108b88484611769565b50600190555050565b6108c9610ce3565b6108e55760405162461bcd60e51b81526004016103749061211c565b6103e88561ffff16111561094b5760405162461bcd60e51b815260206004820152602760248201527f416c6c6f77656420736c6970706167652073686f756c64206e6f74206265206f6044820152667665722031302560c81b6064820152608401610374565b6103e88461ffff1611156109b35760405162461bcd60e51b815260206004820152602960248201527f4861727665737420726577617264206665652073686f756c64206e6f74206265604482015268206f7665722031302560b81b6064820152608401610374565b6001600160a01b038316610a275760405162461bcd60e51b815260206004820152603560248201527f556e697377617020636f6d70617469626c6520616464726573732073686f756c60448201527464206265206e6f6e207a65726f206164647265737360581b6064820152608401610374565b6040805160a08101825261ffff878116825286811660208084019182526001600160a01b0388811685870190815287151560608701908152608087018a81528e8416600090815280865289812080548a51985195519451988a1663ffffffff198216176201000096909a169590950298909817640100000000600160c81b031916640100000000938616840260ff60c01b191617600160c01b97151597909702969096178755516001909601959095558651635c4443cf60e11b8152965195969490048116948c947f00000000000000000000000000000000000000000000000000000000000000009092169263b888879e9260048082019391829003018186803b158015610b3557600080fd5b505afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190611e1d565b6040516315d5220f60e31b81526001600160a01b038c811660048301529192509082169063aea910789060240160206040518083038186803b158015610bb257600080fd5b505afa158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190612091565b506001600160a01b03831615801590610c155750866001600160a01b0316836001600160a01b031614155b15610c2f57610c2f6001600160a01b0383168460006118fc565b866001600160a01b0316836001600160a01b031614610c7357610c5d6001600160a01b0383168860006118fc565b610c736001600160a01b038316886000196118fc565b604080516001600160a01b038c8116825261ffff8c811660208401528b1682840152891660608201526080810188905286151560a082015290517fa366f54fe2381dd56321b1e05d11e00e0acbbee5663bcd5111ed8f604ba530ad9181900360c00190a150505050505050505050565b6000610cfb6000805160206124788339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610d1c610ce3565b610d385760405162461bcd60e51b81526004016103749061211c565b610d60817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610d806000805160206124788339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b03811660009081526001602052604090205460ff16610e205760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420612076616c69642073747261746567792061646472657373000000006044820152606401610374565b6000819050806001600160a01b0316635a063f636040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610ed757600080fd5b505afa158015610eeb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f139190810190611f42565b905060005b815181101561055957610f43828281518110610f3657610f36612408565b6020026020010151610db8565b80610f4d816123d7565b915050610f18565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fec9190810190611f42565b905060005b81518110156110e857600082828151811061100e5761100e612408565b602002602001015190506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108f9190810190611f42565b905060005b81518110156110d2576110c08282815181106110b2576110b2612408565b602002602001015187611150565b806110ca816123d7565b915050611094565b50505080806110e0906123d7565b915050610ff1565b505050565b6040516001600160a01b0383166024820152604481018290526110e890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a20565b6001600160a01b0382811660009081526020818152604091829020825160a081018452815461ffff80821683526201000082041693820193909352640100000000830490941692840192909252600160c01b900460ff1615156060830181905260019091015460808301526111c457505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190611e1d565b6040516370a0823160e01b815230600482015290915084906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561129e57600080fd5b505afa1580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d69190612091565b9050806112e557505050505050565b60006112f5828660800151611af2565b6040516315d5220f60e31b81526001600160a01b03898116600483015291925060009186169063aea910789060240160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612091565b90506000670de0b6b3a76400006127106113c160066113928d611b0c565b8b5187906113a29061271061236d565b6113b09061ffff168a61234e565b6113ba919061234e565b9190611bf5565b6113cb9190612241565b6113d59190612241565b604080516003808252608082019092529192506000919060208201606080368337019050509050898160008151811061141057611410612408565b60200260200101906001600160a01b031690816001600160a01b03168152505087604001516001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561146d57600080fd5b505afa158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a59190611e1d565b816001815181106114b8576114b8612408565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160028151811061150c5761150c612408565b6001600160a01b0392831660209182029290920101526040808a015190516338ed173960e01b81529116906338ed173990611553908790869086903090429060040161217b565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115a99190810190611fe8565b506040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561160e57600080fd5b505afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116469190612091565b905060008a6020015161271061165c919061236d565b61ffff1690506000612710611671838561234e565b61167b9190612241565b90508b6020015161ffff1682116117205760405162461bcd60e51b815260206004820152605f60248201527f4164647265737320726563656976696e67206861727665737420696e63656e7460448201527f69766520697320726563656976696e67206d6f7265207265776172647320746860648201527f616e2074686520726577617264732070726f6365656473206164647265737300608482015260a401610374565b60025461173a906001600160a01b038681169116836110ed565b6117598d6117488386612390565b6001600160a01b03871691906110ed565b5050505050505050505050505050565b61177282610db8565b60008290506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b1580156117b257600080fd5b505afa1580156117c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ee9190810190611f42565b905060005b81518110156118315761181f82828151811061181157611811612408565b602002602001015185611150565b80611829816123d7565b9150506117f3565b5050505050565b6001600160a01b03811661188e5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610374565b806001600160a01b03166118ae6000805160206124788339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36118f98160008051602061247883398151915255565b50565b8015806119855750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119839190612091565b155b6119f05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610374565b6040516001600160a01b0383166024820152604481018290526110e890849063095ea7b360e01b90606401611119565b6000611a75826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c599092919063ffffffff16565b8051909150156110e85780806020019051810190611a939190612074565b6110e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610374565b6000818310611b015781611b03565b825b90505b92915050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4857600080fd5b505afa158015611b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8091906120aa565b60ff16905060048110158015611b97575060128111155b611b065760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610374565b600081831115611c2557611c1e611c0c8385612390565b611c1790600a6122a6565b8590611c70565b9350611c4f565b81831015611c4f57611c4c611c3a8484612390565b611c4590600a6122a6565b8590611c7c565b93505b50825b9392505050565b6060611c688484600085611c88565b949350505050565b6000611b03828461234e565b6000611b038284612241565b606082471015611ce95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610374565b843b611d375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610374565b600080866001600160a01b03168587604051611d5391906120cd565b60006040518083038185875af1925050503d8060008114611d90576040519150601f19603f3d011682016040523d82523d6000602084013e611d95565b606091505b5091509150611da5828286611db0565b979650505050505050565b60608315611dbf575081611c52565b825115611dcf5782518084602001fd5b8160405162461bcd60e51b815260040161037491906120e9565b803561ffff81168114611dfb57600080fd5b919050565b600060208284031215611e1257600080fd5b8135611c5281612434565b600060208284031215611e2f57600080fd5b8151611c5281612434565b60008060408385031215611e4d57600080fd5b8235611e5881612434565b91506020830135611e6881612434565b809150509250929050565b60008060408385031215611e8657600080fd5b8235611e9181612434565b91506020830135611e6881612449565b60008060008060008060c08789031215611eba57600080fd5b8635611ec581612434565b9550611ed360208801611de9565b9450611ee160408801611de9565b93506060870135611ef181612434565b92506080870135915060a0870135611f0881612449565b809150509295509295509295565b60008060408385031215611f2957600080fd5b8235611f3481612434565b946020939093013593505050565b60006020808385031215611f5557600080fd5b825167ffffffffffffffff811115611f6c57600080fd5b8301601f81018513611f7d57600080fd5b8051611f90611f8b8261221d565b6121ec565b80828252848201915084840188868560051b8701011115611fb057600080fd5b600094505b83851015611fdc578051611fc881612434565b835260019490940193918501918501611fb5565b50979650505050505050565b60006020808385031215611ffb57600080fd5b825167ffffffffffffffff81111561201257600080fd5b8301601f8101851361202357600080fd5b8051612031611f8b8261221d565b80828252848201915084840188868560051b870101111561205157600080fd5b600094505b83851015611fdc578051835260019490940193918501918501612056565b60006020828403121561208657600080fd5b8151611c5281612449565b6000602082840312156120a357600080fd5b5051919050565b6000602082840312156120bc57600080fd5b815160ff81168114611c5257600080fd5b600082516120df8184602087016123a7565b9190910192915050565b60208152600082518060208401526121088160408501602087016123a7565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121cb5784516001600160a01b0316835293830193918301916001016121a6565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156122155761221561241e565b604052919050565b600067ffffffffffffffff8211156122375761223761241e565b5060051b60200190565b60008261225e57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561229e578160001904821115612284576122846123f2565b8085161561229157918102915b93841c9390800290612268565b509250929050565b6000611b0383836000826122bc57506001611b06565b816122c957506000611b06565b81600181146122df57600281146122e957612305565b6001915050611b06565b60ff8411156122fa576122fa6123f2565b50506001821b611b06565b5060208310610133831016604e8410600b8410161715612328575081810a611b06565b6123328383612263565b8060001904821115612346576123466123f2565b029392505050565b6000816000190483118215151615612368576123686123f2565b500290565b600061ffff83811690831681811015612388576123886123f2565b039392505050565b6000828210156123a2576123a26123f2565b500390565b60005b838110156123c25781810151838201526020016123aa565b838111156123d1576000848401525b50505050565b60006000198214156123eb576123eb6123f2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118f957600080fd5b80151581146118f957600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122010ec4ac34929fe07b5bcfa3fa8895773da6d4c8e40477ba6080c9c2e009c883564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor to set up initial internal state",
        "params": {
          "_usdtAddress": "Address of Tether",
          "_vault": "Address of the Vault"
        }
      },
      "harvest()": {
        "details": "Collect reward tokens from all strategies"
      },
      "harvest(address)": {
        "details": "Collect reward tokens for a specific strategy.",
        "params": {
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "harvestAndSwap(address)": {
        "details": "Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone. Rewards incentivizing      the caller are sent to the caller of this function.",
        "params": {
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "harvestAndSwap(address,address)": {
        "details": "Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone.",
        "params": {
          "_rewardTo": "Address where to send a share of harvest rewards to as an incentive      for executing this function",
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "setRewardTokenConfig(address,uint16,uint16,address,uint256,bool)": {
        "details": "Add/update a reward token configuration that holds harvesting config variables",
        "params": {
          "_allowedSlippageBps": "uint16 maximum allowed slippage denominated in basis points.        Example: 300 == 3% slippage",
          "_doSwapRewardToken": "bool When true the reward token is being swapped. In a need of (temporarily)        disabling the swapping of a reward token this needs to be set to false.",
          "_harvestRewardBps": "uint16 amount of reward tokens the caller of the function is rewarded.        Example: 100 == 1%",
          "_liquidationLimit": "uint256 Maximum amount of token to be sold per one swap function call.        When value is 0 there is no limit.",
          "_tokenAddress": "Address of the reward token",
          "_uniswapV2CompatibleAddr": "Address Address of a UniswapV2 compatible contract to perform        the exchange from reward tokens to stablecoin (currently hard-coded to USDT)"
        }
      },
      "setRewardsProceedsAddress(address)": {
        "params": {
          "_rewardProceedsAddress": "Address of the reward token"
        }
      },
      "setSupportedStrategy(address,bool)": {
        "details": "Flags a strategy as supported or not supported one",
        "params": {
          "_isSupported": "Bool marking strategy as supported or not supported",
          "_strategyAddress": "Address of the strategy"
        }
      },
      "swap()": {
        "details": "Swap all supported swap tokens for stablecoins via Uniswap."
      },
      "swapRewardToken(address)": {
        "details": "Governance convenience function to swap a specific _rewardToken and send       rewards to the vault.",
        "params": {
          "_swapToken": "Address of the token to swap."
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "rewardProceedsAddress()": {
        "notice": "Address receiving rewards proceeds. Initially the Vault contract later will possibly be replaced by another contract that eases out rewards distribution."
      },
      "setRewardsProceedsAddress(address)": {
        "notice": "Set the Address receiving rewards proceeds."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4984,
        "contract": "contracts/harvest/Harvester.sol:Harvester",
        "label": "rewardTokenConfigs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(RewardTokenConfig)4979_storage)"
      },
      {
        "astId": 4988,
        "contract": "contracts/harvest/Harvester.sol:Harvester",
        "label": "supportedStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4993,
        "contract": "contracts/harvest/Harvester.sol:Harvester",
        "label": "rewardProceedsAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(RewardTokenConfig)4979_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseHarvester.RewardTokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardTokenConfig)4979_storage"
      },
      "t_struct(RewardTokenConfig)4979_storage": {
        "encoding": "inplace",
        "label": "struct BaseHarvester.RewardTokenConfig",
        "members": [
          {
            "astId": 4970,
            "contract": "contracts/harvest/Harvester.sol:Harvester",
            "label": "allowedSlippageBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4972,
            "contract": "contracts/harvest/Harvester.sol:Harvester",
            "label": "harvestRewardBps",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4974,
            "contract": "contracts/harvest/Harvester.sol:Harvester",
            "label": "uniswapV2CompatibleAddr",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4976,
            "contract": "contracts/harvest/Harvester.sol:Harvester",
            "label": "doSwapRewardToken",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4978,
            "contract": "contracts/harvest/Harvester.sol:Harvester",
            "label": "liquidationLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
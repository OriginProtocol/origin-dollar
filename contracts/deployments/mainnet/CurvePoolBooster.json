{
  "address": "0x4ac93fEE1c7D6de332403155C78352fB173b31Ee",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_campaignRemoteManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRewardPerVote",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "BribeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newId",
          "type": "uint256"
        }
      ],
      "name": "CampaignIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_newFee",
          "type": "uint16"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "extraNumberOfPeriods",
          "type": "uint8"
        }
      ],
      "name": "NumberOfPeriodsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxRewardPerVote",
          "type": "uint256"
        }
      ],
      "name": "RewardPerVoteUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "TokensRescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extraTotalRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "TotalRewardAmountUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_FEE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignRemoteManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numberOfPeriods",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxRewardPerVote",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "blacklist",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalGasLimit",
          "type": "uint256"
        }
      ],
      "name": "createCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "extraNumberOfPeriods",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalGasLimit",
          "type": "uint256"
        }
      ],
      "name": "manageNumberOfPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxRewardPerVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalGasLimit",
          "type": "uint256"
        }
      ],
      "name": "manageRewardPerVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalGasLimit",
          "type": "uint256"
        }
      ],
      "name": "manageTotalRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "rescueETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "setCampaignId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStrategistAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2f362d16fe329547077e4594c119e6a14380f2e43e4be673ebfabdd70aadc802",
  "receipt": {
    "to": null,
    "from": "0x074105fdD39e982B2ffE749A193c942db1046AB9",
    "contractAddress": "0x4ac93fEE1c7D6de332403155C78352fB173b31Ee",
    "transactionIndex": 0,
    "gasUsed": "1968337",
    "logsBloom": "0x
    "blockHash": "0x0312a3020aab5ffd42caa495aa67fd1955c8b8b18f9b58f052dd53d1636a1226",
    "transactionHash": "0x2f362d16fe329547077e4594c119e6a14380f2e43e4be673ebfabdd70aadc802",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21673325,
        "transactionHash": "0x2f362d16fe329547077e4594c119e6a14380f2e43e4be673ebfabdd70aadc802",
        "address": "0x4ac93fEE1c7D6de332403155C78352fB173b31Ee",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000074105fdd39e982b2ffe749a193c942db1046ab9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0312a3020aab5ffd42caa495aa67fd1955c8b8b18f9b58f052dd53d1636a1226"
      }
    ],
    "blockNumber": 21673325,
    "cumulativeGasUsed": "1968337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    42161,
    "0xd1f0101Df22Cb7447F486Da5784237AB7a55eB4e",
    "0x2A8e1E676Ec238d8A992307B495b45B3fEAa5e86",
    "0x74231E4d96498A30FCEaf9aACCAbBD79339Ecd7f"
  ],
  "numDeployments": 1,
  "solcInputHash": "98aa1bd538b315fcbb466c9f6208745c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_campaignRemoteManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRewardPerVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardAmount\",\"type\":\"uint256\"}],\"name\":\"BribeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newId\",\"type\":\"uint256\"}],\"name\":\"CampaignIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"extraNumberOfPeriods\",\"type\":\"uint8\"}],\"name\":\"NumberOfPeriodsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxRewardPerVote\",\"type\":\"uint256\"}],\"name\":\"RewardPerVoteUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TokensRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraTotalRewardAmount\",\"type\":\"uint256\"}],\"name\":\"TotalRewardAmountUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignRemoteManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numberOfPeriods\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxRewardPerVote\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"blacklist\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalGasLimit\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"extraNumberOfPeriods\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalGasLimit\",\"type\":\"uint256\"}],\"name\":\"manageNumberOfPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxRewardPerVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalGasLimit\",\"type\":\"uint256\"}],\"name\":\"manageRewardPerVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalGasLimit\",\"type\":\"uint256\"}],\"name\":\"manageTotalRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"setCampaignId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStrategistAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Origin Protocol\",\"kind\":\"dev\",\"methods\":{\"createCampaign(uint8,uint256,address[],uint256,uint256)\":{\"details\":\"This will use all token available in this contract\",\"params\":{\"additionalGasLimit\":\"Additional gas limit for the bridge\",\"blacklist\":\"List of addresses to exclude from the campaign\",\"bridgeFee\":\"Fee to pay for the bridge\",\"maxRewardPerVote\":\"Maximum reward per vote to distribute, to avoid overspending\",\"numberOfPeriods\":\"Duration of the campaign in weeks\"}},\"initialize(address,uint16,address)\":{\"params\":{\"_fee\":\"Fee in BASE_FEE unit payed when managing campaign\",\"_feeCollector\":\"Address of the fee collector\",\"_strategist\":\"Address of the strategist\"}},\"manageNumberOfPeriods(uint8,uint256,uint256)\":{\"details\":\"This function should be called after the campaign is created\",\"params\":{\"additionalGasLimit\":\"Additional gas limit for the bridge\",\"bridgeFee\":\"Fee to pay for the bridge\",\"extraNumberOfPeriods\":\"Number of additional periods (cannot be 0)\"}},\"manageRewardPerVote(uint256,uint256,uint256)\":{\"details\":\"This function should be called after the campaign is created\",\"params\":{\"additionalGasLimit\":\"Additional gas limit for the bridge\",\"bridgeFee\":\"Fee to pay for the bridge\",\"newMaxRewardPerVote\":\"New maximum reward per vote\"}},\"manageTotalRewardAmount(uint256,uint256)\":{\"details\":\"This function should be called after the campaign is createdThis will use all the token available in this contract\",\"params\":{\"additionalGasLimit\":\"Additional gas limit for the bridge\",\"bridgeFee\":\"Fee to pay for the bridge\"}},\"rescueETH(address)\":{\"details\":\"Only callable by the governor or strategist\",\"params\":{\"receiver\":\"Address to receive the ETH\"}},\"rescueToken(address,address)\":{\"details\":\"Only callable by the governor or strategist\",\"params\":{\"token\":\"Address of the token to rescue\"}},\"setCampaignId(uint256)\":{\"details\":\"Only callable by the governor or strategist\",\"params\":{\"_campaignId\":\"New campaign id\"}},\"setFee(uint16)\":{\"details\":\"Only callable by the governor\",\"params\":{\"_fee\":\"New fee\"}},\"setFeeCollector(address)\":{\"details\":\"Only callable by the governor\",\"params\":{\"_feeCollector\":\"New fee collector\"}},\"setStrategistAddr(address)\":{\"details\":\"Set address of Strategist\",\"params\":{\"_address\":\"Address of Strategist\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"title\":\"CurvePoolBooster\",\"version\":1},\"userdoc\":{\"events\":{\"FeeUpdated(uint16)\":{\"notice\":\"--- EVENTS\"}},\"kind\":\"user\",\"methods\":{\"BASE_FEE()\":{\"notice\":\"Base fee for the contract, 100%\"},\"campaignId()\":{\"notice\":\"Id of the campaign created\"},\"campaignRemoteManager()\":{\"notice\":\"Address of the campaignRemoteManager linked to VotemarketV2\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"constructor\":{\"notice\":\"--- CONSTRUCTOR && INITIALIZATION\"},\"createCampaign(uint8,uint256,address[],uint256,uint256)\":{\"notice\":\"Create a new campaign on VotemarketV2\"},\"fee()\":{\"notice\":\"Fee in BASE_FEE unit payed when managing campaign.\"},\"feeCollector()\":{\"notice\":\"Address of the fee collector\"},\"gauge()\":{\"notice\":\"Address of the gauge to manage\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"initialize(address,uint16,address)\":{\"notice\":\"initialize function, to set up initial internal state\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"manageNumberOfPeriods(uint8,uint256,uint256)\":{\"notice\":\"Manage the number of periods of the campaign\"},\"manageRewardPerVote(uint256,uint256,uint256)\":{\"notice\":\"Manage the reward per vote of the campaign\"},\"manageTotalRewardAmount(uint256,uint256)\":{\"notice\":\"Manage the total reward amount of the campaign\"},\"rescueETH(address)\":{\"notice\":\"Rescue ETH from the contract\"},\"rescueToken(address,address)\":{\"notice\":\"Rescue ERC20 tokens from the contract\"},\"rewardToken()\":{\"notice\":\"Address of the reward token\"},\"setCampaignId(uint256)\":{\"notice\":\"Set the campaign id\"},\"setFee(uint16)\":{\"notice\":\"Set the fee\"},\"setFeeCollector(address)\":{\"notice\":\"Set the fee collector\"},\"targetChainId()\":{\"notice\":\"Chain id of the target chain\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"}},\"notice\":\"Contract to manage interactions with VotemarketV2 for a dedicated Curve pool/gauge.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/CurvePoolBooster.sol\":\"CurvePoolBooster\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/governance/Strategizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Governable } from \\\"./Governable.sol\\\";\\n\\ncontract Strategizable is Governable {\\n    event StrategistUpdated(address _address);\\n\\n    // Address of strategist\\n    address public strategistAddr;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Verifies that the caller is either Governor or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == strategistAddr || isGovernor(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function setStrategistAddr(address _address) external onlyGovernor {\\n        _setStrategistAddr(_address);\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function _setStrategistAddr(address _address) internal {\\n        strategistAddr = _address;\\n        emit StrategistUpdated(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x7fd5473fd8d117575500c6b8fc1bb94e39a68082143d99da9946aed020a41619\",\"license\":\"MIT\"},\"contracts/interfaces/ICampaignRemoteManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICampaignRemoteManager {\\n    function createCampaign(\\n        CampaignCreationParams memory params,\\n        uint256 destinationChainId,\\n        uint256 additionalGasLimit\\n    ) external payable;\\n\\n    function manageCampaign(\\n        CampaignManagementParams memory params,\\n        uint256 destinationChainId,\\n        uint256 additionalGasLimit\\n    ) external payable;\\n\\n    struct CampaignCreationParams {\\n        uint256 chainId;\\n        address gauge;\\n        address manager;\\n        address rewardToken;\\n        uint8 numberOfPeriods;\\n        uint256 maxRewardPerVote;\\n        uint256 totalRewardAmount;\\n        address[] addresses;\\n        address hook;\\n        bool isWhitelist;\\n    }\\n\\n    struct CampaignManagementParams {\\n        uint256 campaignId;\\n        address rewardToken;\\n        uint8 numberOfPeriods;\\n        uint256 totalRewardAmount;\\n        uint256 maxRewardPerVote;\\n    }\\n}\\n\",\"keccak256\":\"0xfbe5ff4655c2dc2bc36b62022aab7bc8e71399faf4be3e3b54a5f5290fba6ece\",\"license\":\"MIT\"},\"contracts/strategies/CurvePoolBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Strategizable } from \\\"../governance/Strategizable.sol\\\";\\nimport { ICampaignRemoteManager } from \\\"../interfaces/ICampaignRemoteManager.sol\\\";\\n\\n/// @title CurvePoolBooster\\n/// @author Origin Protocol\\n/// @notice Contract to manage interactions with VotemarketV2 for a dedicated Curve pool/gauge.\\ncontract CurvePoolBooster is Initializable, Strategizable {\\n    using SafeERC20 for IERC20;\\n\\n    ////////////////////////////////////////////////////\\n    /// --- CONSTANTS && IMMUTABLES\\n    ////////////////////////////////////////////////////\\n    /// @notice Base fee for the contract, 100%\\n    uint16 public constant BASE_FEE = 10_000;\\n\\n    /// @notice Address of the gauge to manage\\n    address public immutable gauge;\\n\\n    /// @notice Address of the reward token\\n    address public immutable rewardToken;\\n\\n    /// @notice Address of the campaignRemoteManager linked to VotemarketV2\\n    address public immutable campaignRemoteManager;\\n\\n    /// @notice Chain id of the target chain\\n    uint256 public immutable targetChainId;\\n\\n    ////////////////////////////////////////////////////\\n    /// --- STORAGE\\n    ////////////////////////////////////////////////////\\n    /// @notice Fee in BASE_FEE unit payed when managing campaign.\\n    uint16 public fee;\\n\\n    /// @notice Address of the fee collector\\n    address public feeCollector;\\n\\n    /// @notice Id of the campaign created\\n    uint256 public campaignId;\\n\\n    ////////////////////////////////////////////////////\\n    /// --- EVENTS\\n    ////////////////////////////////////////////////////\\n    event FeeUpdated(uint16 _newFee);\\n    event FeeCollected(address _feeCollector, uint256 _feeAmount);\\n    event FeeCollectorUpdated(address _newFeeCollector);\\n    event CampaignIdUpdated(uint256 _newId);\\n    event BribeCreated(\\n        address gauge,\\n        address rewardToken,\\n        uint256 maxRewardPerVote,\\n        uint256 totalRewardAmount\\n    );\\n    event TotalRewardAmountUpdated(uint256 extraTotalRewardAmount);\\n    event NumberOfPeriodsUpdated(uint8 extraNumberOfPeriods);\\n    event RewardPerVoteUpdated(uint256 newMaxRewardPerVote);\\n    event TokensRescued(address token, uint256 amount, address receiver);\\n\\n    ////////////////////////////////////////////////////\\n    /// --- CONSTRUCTOR && INITIALIZATION\\n    ////////////////////////////////////////////////////\\n    constructor(\\n        uint256 _targetChainId,\\n        address _campaignRemoteManager,\\n        address _rewardToken,\\n        address _gauge\\n    ) {\\n        targetChainId = _targetChainId;\\n        campaignRemoteManager = _campaignRemoteManager;\\n        rewardToken = _rewardToken;\\n        gauge = _gauge;\\n\\n        // Prevent implementation contract to be governed\\n        _setGovernor(address(0));\\n    }\\n\\n    /// @notice initialize function, to set up initial internal state\\n    /// @param _strategist Address of the strategist\\n    /// @param _fee Fee in BASE_FEE unit payed when managing campaign\\n    /// @param _feeCollector Address of the fee collector\\n    function initialize(\\n        address _strategist,\\n        uint16 _fee,\\n        address _feeCollector\\n    ) external onlyGovernor initializer {\\n        _setStrategistAddr(_strategist);\\n        _setFee(_fee);\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    /// --- MUTATIVE FUNCTIONS\\n    ////////////////////////////////////////////////////\\n    /// @notice Create a new campaign on VotemarketV2\\n    /// @dev This will use all token available in this contract\\n    /// @param numberOfPeriods Duration of the campaign in weeks\\n    /// @param maxRewardPerVote Maximum reward per vote to distribute, to avoid overspending\\n    /// @param blacklist  List of addresses to exclude from the campaign\\n    /// @param bridgeFee Fee to pay for the bridge\\n    /// @param additionalGasLimit Additional gas limit for the bridge\\n    function createCampaign(\\n        uint8 numberOfPeriods,\\n        uint256 maxRewardPerVote,\\n        address[] calldata blacklist,\\n        uint256 bridgeFee,\\n        uint256 additionalGasLimit\\n    ) external onlyGovernorOrStrategist {\\n        require(campaignId == 0, \\\"Campaign already created\\\");\\n        require(numberOfPeriods > 1, \\\"Invalid number of periods\\\");\\n        require(maxRewardPerVote > 0, \\\"Invalid reward per vote\\\");\\n\\n        // Handle fee (if any)\\n        uint256 balanceSubFee = _handleFee();\\n\\n        // Approve the balanceSubFee to the campaign manager\\n        IERC20(rewardToken).safeApprove(campaignRemoteManager, balanceSubFee);\\n\\n        // Create a new campaign\\n        ICampaignRemoteManager(campaignRemoteManager).createCampaign{\\n            value: bridgeFee\\n        }(\\n            ICampaignRemoteManager.CampaignCreationParams({\\n                chainId: targetChainId,\\n                gauge: gauge,\\n                manager: address(this),\\n                rewardToken: rewardToken,\\n                numberOfPeriods: numberOfPeriods,\\n                maxRewardPerVote: maxRewardPerVote,\\n                totalRewardAmount: balanceSubFee,\\n                addresses: blacklist,\\n                hook: address(0),\\n                isWhitelist: false\\n            }),\\n            targetChainId,\\n            additionalGasLimit\\n        );\\n\\n        emit BribeCreated(gauge, rewardToken, maxRewardPerVote, balanceSubFee);\\n    }\\n\\n    /// @notice Manage the total reward amount of the campaign\\n    /// @dev This function should be called after the campaign is created\\n    /// @dev This will use all the token available in this contract\\n    /// @param bridgeFee Fee to pay for the bridge\\n    /// @param additionalGasLimit Additional gas limit for the bridge\\n    function manageTotalRewardAmount(\\n        uint256 bridgeFee,\\n        uint256 additionalGasLimit\\n    ) external onlyGovernorOrStrategist {\\n        require(campaignId != 0, \\\"Campaign not created\\\");\\n\\n        // Handle fee (if any)\\n        uint256 balanceSubFee = _handleFee();\\n\\n        // Approve the total reward amount to the campaign manager\\n        IERC20(rewardToken).safeApprove(campaignRemoteManager, balanceSubFee);\\n\\n        // Manage the campaign\\n        ICampaignRemoteManager(campaignRemoteManager).manageCampaign{\\n            value: bridgeFee\\n        }(\\n            ICampaignRemoteManager.CampaignManagementParams({\\n                campaignId: campaignId,\\n                rewardToken: rewardToken,\\n                numberOfPeriods: 0,\\n                totalRewardAmount: balanceSubFee,\\n                maxRewardPerVote: 0\\n            }),\\n            targetChainId,\\n            additionalGasLimit\\n        );\\n\\n        emit TotalRewardAmountUpdated(balanceSubFee);\\n    }\\n\\n    /// @notice Manage the number of periods of the campaign\\n    /// @dev This function should be called after the campaign is created\\n    /// @param extraNumberOfPeriods Number of additional periods (cannot be 0)\\n    /// @param bridgeFee Fee to pay for the bridge\\n    /// @param additionalGasLimit Additional gas limit for the bridge\\n    function manageNumberOfPeriods(\\n        uint8 extraNumberOfPeriods,\\n        uint256 bridgeFee,\\n        uint256 additionalGasLimit\\n    ) external onlyGovernorOrStrategist {\\n        require(campaignId != 0, \\\"Campaign not created\\\");\\n        require(extraNumberOfPeriods > 0, \\\"Invalid number of periods\\\");\\n\\n        // Manage the campaign\\n        ICampaignRemoteManager(campaignRemoteManager).manageCampaign{\\n            value: bridgeFee\\n        }(\\n            ICampaignRemoteManager.CampaignManagementParams({\\n                campaignId: campaignId,\\n                rewardToken: rewardToken,\\n                numberOfPeriods: extraNumberOfPeriods,\\n                totalRewardAmount: 0,\\n                maxRewardPerVote: 0\\n            }),\\n            targetChainId,\\n            additionalGasLimit\\n        );\\n\\n        emit NumberOfPeriodsUpdated(extraNumberOfPeriods);\\n    }\\n\\n    /// @notice Manage the reward per vote of the campaign\\n    /// @dev This function should be called after the campaign is created\\n    /// @param newMaxRewardPerVote New maximum reward per vote\\n    /// @param bridgeFee Fee to pay for the bridge\\n    /// @param additionalGasLimit Additional gas limit for the bridge\\n    function manageRewardPerVote(\\n        uint256 newMaxRewardPerVote,\\n        uint256 bridgeFee,\\n        uint256 additionalGasLimit\\n    ) external onlyGovernorOrStrategist {\\n        require(campaignId != 0, \\\"Campaign not created\\\");\\n        require(newMaxRewardPerVote > 0, \\\"Invalid reward per vote\\\");\\n\\n        // Manage the campaign\\n        ICampaignRemoteManager(campaignRemoteManager).manageCampaign{\\n            value: bridgeFee\\n        }(\\n            ICampaignRemoteManager.CampaignManagementParams({\\n                campaignId: campaignId,\\n                rewardToken: rewardToken,\\n                numberOfPeriods: 0,\\n                totalRewardAmount: 0,\\n                maxRewardPerVote: newMaxRewardPerVote\\n            }),\\n            targetChainId,\\n            additionalGasLimit\\n        );\\n\\n        emit RewardPerVoteUpdated(newMaxRewardPerVote);\\n    }\\n\\n    /// @notice calculate the fee amount and transfer it to the feeCollector\\n    /// @return Balance after fee\\n    function _handleFee() internal returns (uint256) {\\n        // Cache current rewardToken balance\\n        uint256 balance = IERC20(rewardToken).balanceOf(address(this));\\n        require(balance > 0, \\\"No reward to manage\\\");\\n\\n        uint256 feeAmount = (balance * fee) / BASE_FEE;\\n\\n        // If there is a fee, transfer it to the feeCollector\\n        if (feeAmount > 0) {\\n            // Transfer the fee to the feeCollector\\n            IERC20(rewardToken).transfer(feeCollector, feeAmount);\\n\\n            emit FeeCollected(feeCollector, feeAmount);\\n\\n            // Return the balance after fee\\n            return balance - feeAmount;\\n        }\\n\\n        // If there is no fee, return the original balance\\n        return balance;\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    /// --- GOVERNANCE && OPERATION\\n    ////////////////////////////////////////////////////\\n    /// @notice Set the campaign id\\n    /// @dev Only callable by the governor or strategist\\n    /// @param _campaignId New campaign id\\n    function setCampaignId(uint256 _campaignId)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        campaignId = _campaignId;\\n        emit CampaignIdUpdated(_campaignId);\\n    }\\n\\n    /// @notice Rescue ETH from the contract\\n    /// @dev Only callable by the governor or strategist\\n    /// @param receiver Address to receive the ETH\\n    function rescueETH(address receiver) external onlyGovernorOrStrategist {\\n        require(receiver != address(0), \\\"Invalid receiver\\\");\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = receiver.call{ value: balance }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit TokensRescued(address(0), balance, receiver);\\n    }\\n\\n    /// @notice Rescue ERC20 tokens from the contract\\n    /// @dev Only callable by the governor or strategist\\n    /// @param token Address of the token to rescue\\n    function rescueToken(address token, address receiver)\\n        external\\n        onlyGovernor\\n    {\\n        require(receiver != address(0), \\\"Invalid receiver\\\");\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(receiver, balance);\\n        emit TokensRescued(token, balance, receiver);\\n    }\\n\\n    /// @notice Set the fee\\n    /// @dev Only callable by the governor\\n    /// @param _fee New fee\\n    function setFee(uint16 _fee) external onlyGovernor {\\n        _setFee(_fee);\\n    }\\n\\n    /// @notice Internal logic to set the fee\\n    function _setFee(uint16 _fee) internal {\\n        require(_fee <= BASE_FEE / 2, \\\"Fee too high\\\");\\n        fee = _fee;\\n        emit FeeUpdated(_fee);\\n    }\\n\\n    /// @notice Set the fee collector\\n    /// @dev Only callable by the governor\\n    /// @param _feeCollector New fee collector\\n    function setFeeCollector(address _feeCollector) external onlyGovernor {\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    /// @notice Internal logic to set the fee collector\\n    function _setFeeCollector(address _feeCollector) internal {\\n        require(_feeCollector != address(0), \\\"Invalid fee collector\\\");\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorUpdated(_feeCollector);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x0efa9680c5a0a36e526e43129a1ca5c31d226f7aa0afd4e98824d04c38d78759\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620024d8380380620024d88339810160408190526200003591620000fc565b6200004d33600080516020620024b883398151915255565b600080516020620024b8833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a360e08490526001600160601b0319606084811b821660c05283811b821660a05282901b16608052620000d56000600080516020620024b883398151915255565b5050505062000150565b80516001600160a01b0381168114620000f757600080fd5b919050565b600080600080608085870312156200011357600080fd5b845193506200012560208601620000df565b92506200013560408601620000df565b91506200014560608601620000df565b905092959194509250565b60805160601c60a05160601c60c05160601c60e05161228b6200022d600039600081816101e10152818161076301528181610bc001528181611013015281816111140152611416015260008181610301015281816106dc01528181610b1201528181610b3901528181610fb001528181610fd7015261138f0152600081816104a50152818161071f01528181610af001528181610b7c01528181610f8e01528181611077015281816111a0015281816113d20152818161159e01526116ba0152600081816103ab01528181611039015261117b015261228b6000f3fe60806040526004361061014f5760003560e01c80638e005553116100b6578063c415b95c1161006f578063c415b95c146103ed578063c7af335214610413578063d38bfff414610438578063ddca3f4314610458578063e9a0214314610473578063f7c618c11461049357600080fd5b80638e005553146103235780638ed5b0fc1461034357806394095c2d14610359578063a42dce8014610379578063a6f19c8414610399578063ab34884c146103cd57600080fd5b8063570d8e1d11610108578063570d8e1d1461025a5780635d36b1901461027a5780637039e0021461028f578063708c0db9146102af578063773540b3146102cf578063833f68c8146102ef57600080fd5b806304824e701461015b5780630aaef8541461017d5780630c340a241461019d578063146ffb26146101cf5780633d18651e146102115780634707d0001461023a57600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b610176366004611cfa565b6104c7565b005b34801561018957600080fd5b5061017b610198366004611e1c565b610639565b3480156101a957600080fd5b506101b2610804565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101db57600080fd5b506102037f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101c6565b34801561021d57600080fd5b5061022761271081565b60405161ffff90911681526020016101c6565b34801561024657600080fd5b5061017b610255366004611d15565b610821565b34801561026657600080fd5b506033546101b2906001600160a01b031681565b34801561028657600080fd5b5061017b6109da565b34801561029b57600080fd5b5061017b6102aa366004611dfa565b610a80565b3480156102bb57600080fd5b5061017b6102ca366004611d48565b610c61565b3480156102db57600080fd5b5061017b6102ea366004611cfa565b610d56565b3480156102fb57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561032f57600080fd5b5061017b61033e366004611dad565b610d86565b34801561034f57600080fd5b5061020360675481565b34801561036557600080fd5b5061017b610374366004611dc8565b610db3565b34801561038557600080fd5b5061017b610394366004611cfa565b610e27565b3480156103a557600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d957600080fd5b5061017b6103e8366004611e48565b610e54565b3480156103f957600080fd5b506066546101b2906201000090046001600160a01b031681565b34801561041f57600080fd5b50610428611212565b60405190151581526020016101c6565b34801561044457600080fd5b5061017b610453366004611cfa565b611243565b34801561046457600080fd5b506066546102279061ffff1681565b34801561047f57600080fd5b5061017b61048e366004611ee4565b6112e7565b34801561049f57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b6033546001600160a01b03163314806104e357506104e3611212565b6105085760405162461bcd60e51b81526004016104ff90611fe1565b60405180910390fd5b6001600160a01b0381166105515760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b60448201526064016104ff565b60405147906000906001600160a01b0384169083908381818185875af1925050503d806000811461059e576040519150601f19603f3d011682016040523d82523d6000602084013e6105a3565b606091505b50509050806105e65760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016104ff565b6040805160008152602081018490526001600160a01b038516918101919091527ffb475a842bad10d3800b61bd1a92e716051afba979b124b583bd99a2d1d7bfd5906060015b60405180910390a1505050565b6033546001600160a01b03163314806106555750610655611212565b6106715760405162461bcd60e51b81526004016104ff90611fe1565b6067546106905760405162461bcd60e51b81526004016104ff90612029565b600083116106da5760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964207265776172642070657220766f746560481b60448201526064016104ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371733579836040518060a0016040528060675481526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600060ff16815260200160008152602001878152507f0000000000000000000000000000000000000000000000000000000000000000856040518563ffffffff1660e01b81526004016107a193929190612124565b6000604051808303818588803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b50505050507f8f283dbedfa7a1926a86469a652c5f13e8f038708d78cbeb0e1950c9e08625028360405161062c91815260200190565b600061081c6000805160206122368339815191525490565b905090565b610829611212565b6108455760405162461bcd60e51b81526004016104ff90611faa565b6001600160a01b03811661088e5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b60448201526064016104ff565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190611de1565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018390529192509084169063a9059cbb90604401602060405180830381600087803b15801561095657600080fd5b505af115801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190611d8b565b50604080516001600160a01b038086168252602082018490528416918101919091527ffb475a842bad10d3800b61bd1a92e716051afba979b124b583bd99a2d1d7bfd59060600161062c565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610a755760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016104ff565b610a7e336114bb565b565b6033546001600160a01b0316331480610a9c5750610a9c611212565b610ab85760405162461bcd60e51b81526004016104ff90611fe1565b606754610ad75760405162461bcd60e51b81526004016104ff90612029565b6000610ae161157c565b9050610b376001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611799565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371733579846040518060a0016040528060675481526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600060ff16815260200185815260200160008152507f0000000000000000000000000000000000000000000000000000000000000000866040518563ffffffff1660e01b8152600401610bfe93929190612124565b6000604051808303818588803b158015610c1757600080fd5b505af1158015610c2b573d6000803e3d6000fd5b50505050507fd922add93b22e9295e2ea259b37756ee2ccafa6872cccda342584d40c754c7668160405161062c91815260200190565b610c69611212565b610c855760405162461bcd60e51b81526004016104ff90611faa565b600054610100900460ff1680610c9e575060005460ff16155b610d015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ff565b600054610100900460ff16158015610d23576000805461ffff19166101011790555b610d2c846118e4565b610d3583611932565b610d3e826119c9565b8015610d50576000805461ff00191690555b50505050565b610d5e611212565b610d7a5760405162461bcd60e51b81526004016104ff90611faa565b610d83816118e4565b50565b610d8e611212565b610daa5760405162461bcd60e51b81526004016104ff90611faa565b610d8381611932565b6033546001600160a01b0316331480610dcf5750610dcf611212565b610deb5760405162461bcd60e51b81526004016104ff90611fe1565b60678190556040518181527f53c4764ec903d5e515c69c93f0b9b2916f9aa3fa54b34caeeae7bb596d7ec0f6906020015b60405180910390a150565b610e2f611212565b610e4b5760405162461bcd60e51b81526004016104ff90611faa565b610d83816119c9565b6033546001600160a01b0316331480610e705750610e70611212565b610e8c5760405162461bcd60e51b81526004016104ff90611fe1565b60675415610edc5760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e20616c72656164792063726561746564000000000000000060448201526064016104ff565b60018660ff1611610f2b5760405162461bcd60e51b8152602060048201526019602482015278496e76616c6964206e756d626572206f6620706572696f647360381b60448201526064016104ff565b60008511610f755760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964207265776172642070657220766f746560481b60448201526064016104ff565b6000610f7f61157c565b9050610fd56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611799565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd0fbb84846040518061014001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018b60ff1681526020018a8152602001858152602001898980806020026020016040519081016040528093929190818152602001838360200280828437600092018290525093855250505060208201819052604091820152516001600160e01b031960e085901b16815261113e91907f0000000000000000000000000000000000000000000000000000000000000000908890600401612057565b6000604051808303818588803b15801561115757600080fd5b505af115801561116b573d6000803e3d6000fd5b5050604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201529081018a9052606081018590527f1618645e9a24ee8c2a7ff0c7ac509942e59ed5a52647b1f38ae8b5dd581463d9935060800191506112019050565b60405180910390a150505050505050565b600061122a6000805160206122368339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61124b611212565b6112675760405162461bcd60e51b81526004016104ff90611faa565b61128f817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166112af6000805160206122368339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6033546001600160a01b03163314806113035750611303611212565b61131f5760405162461bcd60e51b81526004016104ff90611fe1565b60675461133e5760405162461bcd60e51b81526004016104ff90612029565b60008360ff161161138d5760405162461bcd60e51b8152602060048201526019602482015278496e76616c6964206e756d626572206f6620706572696f647360381b60448201526064016104ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371733579836040518060a0016040528060675481526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018760ff1681526020016000815260200160008152507f0000000000000000000000000000000000000000000000000000000000000000856040518563ffffffff1660e01b815260040161145493929190612124565b6000604051808303818588803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505060405160ff871681527f71113ae8f52afc8062af1d0ec71513000c9a7b93eeb737ab8fb50f908445d78a9350602001915061062c9050565b6001600160a01b0381166115115760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016104ff565b806001600160a01b03166115316000805160206122368339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610d838160008051602061223683398151915255565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116189190611de1565b9050600081116116605760405162461bcd60e51b81526020600482015260136024820152724e6f2072657761726420746f206d616e61676560681b60448201526064016104ff565b606654600090612710906116789061ffff16846121a7565b6116829190612193565b905080156117935760665460405163a9059cbb60e01b8152620100009091046001600160a01b039081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117369190611d8b565b5060665460408051620100009092046001600160a01b03168252602082018390527f06c5efeff5c320943d265dc4e5f1af95ad523555ce0c1957e367dda5514572df910160405180910390a161178c81836121c6565b9250505090565b50919050565b8015806118225750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118209190611de1565b155b61188d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104ff565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526118df908490611a6f565b505050565b603380546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee90602001610e1c565b61193f6002612710612172565b61ffff168161ffff1611156119855760405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b60448201526064016104ff565b6066805461ffff191661ffff83169081179091556040519081527fc8fcf8ee1425e7e60b8af83735e1eb516d5b9ef05bfd6eece552ebaeb7c75b4890602001610e1c565b6001600160a01b038116611a175760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103332b29031b7b63632b1ba37b960591b60448201526064016104ff565b6066805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90602001610e1c565b6000611ac4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b419092919063ffffffff16565b8051909150156118df5780806020019051810190611ae29190611d8b565b6118df5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ff565b6060611b508484600085611b5a565b90505b9392505050565b606082471015611bbb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ff565b843b611c095760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ff565b600080866001600160a01b03168587604051611c259190611f5b565b60006040518083038185875af1925050503d8060008114611c62576040519150601f19603f3d011682016040523d82523d6000602084013e611c67565b606091505b5091509150611c77828286611c82565b979650505050505050565b60608315611c91575081611b53565b825115611ca15782518084602001fd5b8160405162461bcd60e51b81526004016104ff9190611f77565b80356001600160a01b0381168114611cd257600080fd5b919050565b803561ffff81168114611cd257600080fd5b803560ff81168114611cd257600080fd5b600060208284031215611d0c57600080fd5b611b5382611cbb565b60008060408385031215611d2857600080fd5b611d3183611cbb565b9150611d3f60208401611cbb565b90509250929050565b600080600060608486031215611d5d57600080fd5b611d6684611cbb565b9250611d7460208501611cd7565b9150611d8260408501611cbb565b90509250925092565b600060208284031215611d9d57600080fd5b81518015158114611b5357600080fd5b600060208284031215611dbf57600080fd5b611b5382611cd7565b600060208284031215611dda57600080fd5b5035919050565b600060208284031215611df357600080fd5b5051919050565b60008060408385031215611e0d57600080fd5b50508035926020909101359150565b600080600060608486031215611e3157600080fd5b505081359360208301359350604090920135919050565b60008060008060008060a08789031215611e6157600080fd5b611e6a87611ce9565b955060208701359450604087013567ffffffffffffffff80821115611e8e57600080fd5b818901915089601f830112611ea257600080fd5b813581811115611eb157600080fd5b8a60208260051b8501011115611ec657600080fd5b979a9699505060200196606081013595608090910135945092505050565b600080600060608486031215611ef957600080fd5b611f0284611ce9565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b83811015611f505781516001600160a01b031687529582019590820190600101611f2b565b509495945050505050565b60008251611f6d8184602087016121dd565b9190910192915050565b6020815260008251806020840152611f968160408501602087016121dd565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60208082526028908201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060408201526723b7bb32b93737b960c11b606082015260800190565b60208082526014908201527310d85b5c185a59db881b9bdd0818dc99585d195960621b604082015260600190565b60608152835160608201526000602085015161207e60808401826001600160a01b03169052565b5060408501516001600160a01b03811660a08401525060608501516001600160a01b03811660c084015250608085015160ff811660e08401525060a0850151610100818185015260c08701519150610120828186015260e088015192506101408081870152506120f26101a0860184611f17565b918801516001600160a01b03166101608601529096015115156101808401525050602081019290925260409091015290565b835181526020808501516001600160a01b03169082015260408085015160ff1690820152606080850151908201526080938401519381019390935260a083019190915260c082015260e00190565b600061ffff808416806121875761218761221f565b92169190910492915050565b6000826121a2576121a261221f565b500490565b60008160001904831182151516156121c1576121c1612209565b500290565b6000828210156121d8576121d8612209565b500390565b60005b838110156121f85781810151838201526020016121e0565b83811115610d505750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212201f72d5f9561bd3eccad0d902c92a3f7a66653f856b939dae11a6e0c1501af0ee64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c80638e005553116100b6578063c415b95c1161006f578063c415b95c146103ed578063c7af335214610413578063d38bfff414610438578063ddca3f4314610458578063e9a0214314610473578063f7c618c11461049357600080fd5b80638e005553146103235780638ed5b0fc1461034357806394095c2d14610359578063a42dce8014610379578063a6f19c8414610399578063ab34884c146103cd57600080fd5b8063570d8e1d11610108578063570d8e1d1461025a5780635d36b1901461027a5780637039e0021461028f578063708c0db9146102af578063773540b3146102cf578063833f68c8146102ef57600080fd5b806304824e701461015b5780630aaef8541461017d5780630c340a241461019d578063146ffb26146101cf5780633d18651e146102115780634707d0001461023a57600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b610176366004611cfa565b6104c7565b005b34801561018957600080fd5b5061017b610198366004611e1c565b610639565b3480156101a957600080fd5b506101b2610804565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101db57600080fd5b506102037f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101c6565b34801561021d57600080fd5b5061022761271081565b60405161ffff90911681526020016101c6565b34801561024657600080fd5b5061017b610255366004611d15565b610821565b34801561026657600080fd5b506033546101b2906001600160a01b031681565b34801561028657600080fd5b5061017b6109da565b34801561029b57600080fd5b5061017b6102aa366004611dfa565b610a80565b3480156102bb57600080fd5b5061017b6102ca366004611d48565b610c61565b3480156102db57600080fd5b5061017b6102ea366004611cfa565b610d56565b3480156102fb57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561032f57600080fd5b5061017b61033e366004611dad565b610d86565b34801561034f57600080fd5b5061020360675481565b34801561036557600080fd5b5061017b610374366004611dc8565b610db3565b34801561038557600080fd5b5061017b610394366004611cfa565b610e27565b3480156103a557600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d957600080fd5b5061017b6103e8366004611e48565b610e54565b3480156103f957600080fd5b506066546101b2906201000090046001600160a01b031681565b34801561041f57600080fd5b50610428611212565b60405190151581526020016101c6565b34801561044457600080fd5b5061017b610453366004611cfa565b611243565b34801561046457600080fd5b506066546102279061ffff1681565b34801561047f57600080fd5b5061017b61048e366004611ee4565b6112e7565b34801561049f57600080fd5b506101b27f000000000000000000000000000000000000000000000000000000000000000081565b6033546001600160a01b03163314806104e357506104e3611212565b6105085760405162461bcd60e51b81526004016104ff90611fe1565b60405180910390fd5b6001600160a01b0381166105515760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b60448201526064016104ff565b60405147906000906001600160a01b0384169083908381818185875af1925050503d806000811461059e576040519150601f19603f3d011682016040523d82523d6000602084013e6105a3565b606091505b50509050806105e65760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016104ff565b6040805160008152602081018490526001600160a01b038516918101919091527ffb475a842bad10d3800b61bd1a92e716051afba979b124b583bd99a2d1d7bfd5906060015b60405180910390a1505050565b6033546001600160a01b03163314806106555750610655611212565b6106715760405162461bcd60e51b81526004016104ff90611fe1565b6067546106905760405162461bcd60e51b81526004016104ff90612029565b600083116106da5760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964207265776172642070657220766f746560481b60448201526064016104ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371733579836040518060a0016040528060675481526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600060ff16815260200160008152602001878152507f0000000000000000000000000000000000000000000000000000000000000000856040518563ffffffff1660e01b81526004016107a193929190612124565b6000604051808303818588803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b50505050507f8f283dbedfa7a1926a86469a652c5f13e8f038708d78cbeb0e1950c9e08625028360405161062c91815260200190565b600061081c6000805160206122368339815191525490565b905090565b610829611212565b6108455760405162461bcd60e51b81526004016104ff90611faa565b6001600160a01b03811661088e5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b60448201526064016104ff565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190611de1565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018390529192509084169063a9059cbb90604401602060405180830381600087803b15801561095657600080fd5b505af115801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190611d8b565b50604080516001600160a01b038086168252602082018490528416918101919091527ffb475a842bad10d3800b61bd1a92e716051afba979b124b583bd99a2d1d7bfd59060600161062c565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610a755760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016104ff565b610a7e336114bb565b565b6033546001600160a01b0316331480610a9c5750610a9c611212565b610ab85760405162461bcd60e51b81526004016104ff90611fe1565b606754610ad75760405162461bcd60e51b81526004016104ff90612029565b6000610ae161157c565b9050610b376001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611799565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371733579846040518060a0016040528060675481526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001600060ff16815260200185815260200160008152507f0000000000000000000000000000000000000000000000000000000000000000866040518563ffffffff1660e01b8152600401610bfe93929190612124565b6000604051808303818588803b158015610c1757600080fd5b505af1158015610c2b573d6000803e3d6000fd5b50505050507fd922add93b22e9295e2ea259b37756ee2ccafa6872cccda342584d40c754c7668160405161062c91815260200190565b610c69611212565b610c855760405162461bcd60e51b81526004016104ff90611faa565b600054610100900460ff1680610c9e575060005460ff16155b610d015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ff565b600054610100900460ff16158015610d23576000805461ffff19166101011790555b610d2c846118e4565b610d3583611932565b610d3e826119c9565b8015610d50576000805461ff00191690555b50505050565b610d5e611212565b610d7a5760405162461bcd60e51b81526004016104ff90611faa565b610d83816118e4565b50565b610d8e611212565b610daa5760405162461bcd60e51b81526004016104ff90611faa565b610d8381611932565b6033546001600160a01b0316331480610dcf5750610dcf611212565b610deb5760405162461bcd60e51b81526004016104ff90611fe1565b60678190556040518181527f53c4764ec903d5e515c69c93f0b9b2916f9aa3fa54b34caeeae7bb596d7ec0f6906020015b60405180910390a150565b610e2f611212565b610e4b5760405162461bcd60e51b81526004016104ff90611faa565b610d83816119c9565b6033546001600160a01b0316331480610e705750610e70611212565b610e8c5760405162461bcd60e51b81526004016104ff90611fe1565b60675415610edc5760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e20616c72656164792063726561746564000000000000000060448201526064016104ff565b60018660ff1611610f2b5760405162461bcd60e51b8152602060048201526019602482015278496e76616c6964206e756d626572206f6620706572696f647360381b60448201526064016104ff565b60008511610f755760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964207265776172642070657220766f746560481b60448201526064016104ff565b6000610f7f61157c565b9050610fd56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611799565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd0fbb84846040518061014001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018b60ff1681526020018a8152602001858152602001898980806020026020016040519081016040528093929190818152602001838360200280828437600092018290525093855250505060208201819052604091820152516001600160e01b031960e085901b16815261113e91907f0000000000000000000000000000000000000000000000000000000000000000908890600401612057565b6000604051808303818588803b15801561115757600080fd5b505af115801561116b573d6000803e3d6000fd5b5050604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208201529081018a9052606081018590527f1618645e9a24ee8c2a7ff0c7ac509942e59ed5a52647b1f38ae8b5dd581463d9935060800191506112019050565b60405180910390a150505050505050565b600061122a6000805160206122368339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61124b611212565b6112675760405162461bcd60e51b81526004016104ff90611faa565b61128f817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166112af6000805160206122368339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6033546001600160a01b03163314806113035750611303611212565b61131f5760405162461bcd60e51b81526004016104ff90611fe1565b60675461133e5760405162461bcd60e51b81526004016104ff90612029565b60008360ff161161138d5760405162461bcd60e51b8152602060048201526019602482015278496e76616c6964206e756d626572206f6620706572696f647360381b60448201526064016104ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371733579836040518060a0016040528060675481526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018760ff1681526020016000815260200160008152507f0000000000000000000000000000000000000000000000000000000000000000856040518563ffffffff1660e01b815260040161145493929190612124565b6000604051808303818588803b15801561146d57600080fd5b505af1158015611481573d6000803e3d6000fd5b505060405160ff871681527f71113ae8f52afc8062af1d0ec71513000c9a7b93eeb737ab8fb50f908445d78a9350602001915061062c9050565b6001600160a01b0381166115115760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016104ff565b806001600160a01b03166115316000805160206122368339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610d838160008051602061223683398151915255565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116189190611de1565b9050600081116116605760405162461bcd60e51b81526020600482015260136024820152724e6f2072657761726420746f206d616e61676560681b60448201526064016104ff565b606654600090612710906116789061ffff16846121a7565b6116829190612193565b905080156117935760665460405163a9059cbb60e01b8152620100009091046001600160a01b039081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156116fe57600080fd5b505af1158015611712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117369190611d8b565b5060665460408051620100009092046001600160a01b03168252602082018390527f06c5efeff5c320943d265dc4e5f1af95ad523555ce0c1957e367dda5514572df910160405180910390a161178c81836121c6565b9250505090565b50919050565b8015806118225750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118209190611de1565b155b61188d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104ff565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526118df908490611a6f565b505050565b603380546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee90602001610e1c565b61193f6002612710612172565b61ffff168161ffff1611156119855760405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b60448201526064016104ff565b6066805461ffff191661ffff83169081179091556040519081527fc8fcf8ee1425e7e60b8af83735e1eb516d5b9ef05bfd6eece552ebaeb7c75b4890602001610e1c565b6001600160a01b038116611a175760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103332b29031b7b63632b1ba37b960591b60448201526064016104ff565b6066805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90602001610e1c565b6000611ac4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b419092919063ffffffff16565b8051909150156118df5780806020019051810190611ae29190611d8b565b6118df5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ff565b6060611b508484600085611b5a565b90505b9392505050565b606082471015611bbb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ff565b843b611c095760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ff565b600080866001600160a01b03168587604051611c259190611f5b565b60006040518083038185875af1925050503d8060008114611c62576040519150601f19603f3d011682016040523d82523d6000602084013e611c67565b606091505b5091509150611c77828286611c82565b979650505050505050565b60608315611c91575081611b53565b825115611ca15782518084602001fd5b8160405162461bcd60e51b81526004016104ff9190611f77565b80356001600160a01b0381168114611cd257600080fd5b919050565b803561ffff81168114611cd257600080fd5b803560ff81168114611cd257600080fd5b600060208284031215611d0c57600080fd5b611b5382611cbb565b60008060408385031215611d2857600080fd5b611d3183611cbb565b9150611d3f60208401611cbb565b90509250929050565b600080600060608486031215611d5d57600080fd5b611d6684611cbb565b9250611d7460208501611cd7565b9150611d8260408501611cbb565b90509250925092565b600060208284031215611d9d57600080fd5b81518015158114611b5357600080fd5b600060208284031215611dbf57600080fd5b611b5382611cd7565b600060208284031215611dda57600080fd5b5035919050565b600060208284031215611df357600080fd5b5051919050565b60008060408385031215611e0d57600080fd5b50508035926020909101359150565b600080600060608486031215611e3157600080fd5b505081359360208301359350604090920135919050565b60008060008060008060a08789031215611e6157600080fd5b611e6a87611ce9565b955060208701359450604087013567ffffffffffffffff80821115611e8e57600080fd5b818901915089601f830112611ea257600080fd5b813581811115611eb157600080fd5b8a60208260051b8501011115611ec657600080fd5b979a9699505060200196606081013595608090910135945092505050565b600080600060608486031215611ef957600080fd5b611f0284611ce9565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b83811015611f505781516001600160a01b031687529582019590820190600101611f2b565b509495945050505050565b60008251611f6d8184602087016121dd565b9190910192915050565b6020815260008251806020840152611f968160408501602087016121dd565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60208082526028908201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060408201526723b7bb32b93737b960c11b606082015260800190565b60208082526014908201527310d85b5c185a59db881b9bdd0818dc99585d195960621b604082015260600190565b60608152835160608201526000602085015161207e60808401826001600160a01b03169052565b5060408501516001600160a01b03811660a08401525060608501516001600160a01b03811660c084015250608085015160ff811660e08401525060a0850151610100818185015260c08701519150610120828186015260e088015192506101408081870152506120f26101a0860184611f17565b918801516001600160a01b03166101608601529096015115156101808401525050602081019290925260409091015290565b835181526020808501516001600160a01b03169082015260408085015160ff1690820152606080850151908201526080938401519381019390935260a083019190915260c082015260e00190565b600061ffff808416806121875761218761221f565b92169190910492915050565b6000826121a2576121a261221f565b500490565b60008160001904831182151516156121c1576121c1612209565b500290565b6000828210156121d8576121d8612209565b500390565b60005b838110156121f85781810151838201526020016121e0565b83811115610d505750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212201f72d5f9561bd3eccad0d902c92a3f7a66653f856b939dae11a6e0c1501af0ee64736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol",
    "kind": "dev",
    "methods": {
      "createCampaign(uint8,uint256,address[],uint256,uint256)": {
        "details": "This will use all token available in this contract",
        "params": {
          "additionalGasLimit": "Additional gas limit for the bridge",
          "blacklist": "List of addresses to exclude from the campaign",
          "bridgeFee": "Fee to pay for the bridge",
          "maxRewardPerVote": "Maximum reward per vote to distribute, to avoid overspending",
          "numberOfPeriods": "Duration of the campaign in weeks"
        }
      },
      "initialize(address,uint16,address)": {
        "params": {
          "_fee": "Fee in BASE_FEE unit payed when managing campaign",
          "_feeCollector": "Address of the fee collector",
          "_strategist": "Address of the strategist"
        }
      },
      "manageNumberOfPeriods(uint8,uint256,uint256)": {
        "details": "This function should be called after the campaign is created",
        "params": {
          "additionalGasLimit": "Additional gas limit for the bridge",
          "bridgeFee": "Fee to pay for the bridge",
          "extraNumberOfPeriods": "Number of additional periods (cannot be 0)"
        }
      },
      "manageRewardPerVote(uint256,uint256,uint256)": {
        "details": "This function should be called after the campaign is created",
        "params": {
          "additionalGasLimit": "Additional gas limit for the bridge",
          "bridgeFee": "Fee to pay for the bridge",
          "newMaxRewardPerVote": "New maximum reward per vote"
        }
      },
      "manageTotalRewardAmount(uint256,uint256)": {
        "details": "This function should be called after the campaign is createdThis will use all the token available in this contract",
        "params": {
          "additionalGasLimit": "Additional gas limit for the bridge",
          "bridgeFee": "Fee to pay for the bridge"
        }
      },
      "rescueETH(address)": {
        "details": "Only callable by the governor or strategist",
        "params": {
          "receiver": "Address to receive the ETH"
        }
      },
      "rescueToken(address,address)": {
        "details": "Only callable by the governor or strategist",
        "params": {
          "token": "Address of the token to rescue"
        }
      },
      "setCampaignId(uint256)": {
        "details": "Only callable by the governor or strategist",
        "params": {
          "_campaignId": "New campaign id"
        }
      },
      "setFee(uint16)": {
        "details": "Only callable by the governor",
        "params": {
          "_fee": "New fee"
        }
      },
      "setFeeCollector(address)": {
        "details": "Only callable by the governor",
        "params": {
          "_feeCollector": "New fee collector"
        }
      },
      "setStrategistAddr(address)": {
        "details": "Set address of Strategist",
        "params": {
          "_address": "Address of Strategist"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "title": "CurvePoolBooster",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeUpdated(uint16)": {
        "notice": "--- EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "BASE_FEE()": {
        "notice": "Base fee for the contract, 100%"
      },
      "campaignId()": {
        "notice": "Id of the campaign created"
      },
      "campaignRemoteManager()": {
        "notice": "Address of the campaignRemoteManager linked to VotemarketV2"
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "constructor": {
        "notice": "--- CONSTRUCTOR && INITIALIZATION"
      },
      "createCampaign(uint8,uint256,address[],uint256,uint256)": {
        "notice": "Create a new campaign on VotemarketV2"
      },
      "fee()": {
        "notice": "Fee in BASE_FEE unit payed when managing campaign."
      },
      "feeCollector()": {
        "notice": "Address of the fee collector"
      },
      "gauge()": {
        "notice": "Address of the gauge to manage"
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "initialize(address,uint16,address)": {
        "notice": "initialize function, to set up initial internal state"
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "manageNumberOfPeriods(uint8,uint256,uint256)": {
        "notice": "Manage the number of periods of the campaign"
      },
      "manageRewardPerVote(uint256,uint256,uint256)": {
        "notice": "Manage the reward per vote of the campaign"
      },
      "manageTotalRewardAmount(uint256,uint256)": {
        "notice": "Manage the total reward amount of the campaign"
      },
      "rescueETH(address)": {
        "notice": "Rescue ETH from the contract"
      },
      "rescueToken(address,address)": {
        "notice": "Rescue ERC20 tokens from the contract"
      },
      "rewardToken()": {
        "notice": "Address of the reward token"
      },
      "setCampaignId(uint256)": {
        "notice": "Set the campaign id"
      },
      "setFee(uint16)": {
        "notice": "Set the fee"
      },
      "setFeeCollector(address)": {
        "notice": "Set the fee collector"
      },
      "targetChainId()": {
        "notice": "Chain id of the target chain"
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      }
    },
    "notice": "Contract to manage interactions with VotemarketV2 for a dedicated Curve pool/gauge.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 49934,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 49937,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 49977,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9019,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 9023,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 33289,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "fee",
        "offset": 0,
        "slot": "102",
        "type": "t_uint16"
      },
      {
        "astId": 33292,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "feeCollector",
        "offset": 2,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 33295,
        "contract": "contracts/strategies/CurvePoolBooster.sol:CurvePoolBooster",
        "label": "campaignId",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
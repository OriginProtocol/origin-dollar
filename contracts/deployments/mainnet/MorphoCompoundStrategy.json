{
  "address": "0x5cC70898c47f73265BdE5b8BB9D37346d0726c09",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LENS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MORPHO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cba3074b20e8b2a3821b32c5cee7cf5c6d33e2be27570c65097d8c88f9d64ad",
  "receipt": {
    "to": null,
    "from": "0xFD9E6005187F448957a0972a7d0C0A6dA2911236",
    "contractAddress": "0x5cC70898c47f73265BdE5b8BB9D37346d0726c09",
    "transactionIndex": 35,
    "gasUsed": "2293907",
    "logsBloom": "0x
    "blockHash": "0x86949441ecec63b1c722de593ca0ae8375837f3546d08fa70b9e9e60b31546f4",
    "transactionHash": "0x9cba3074b20e8b2a3821b32c5cee7cf5c6d33e2be27570c65097d8c88f9d64ad",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 15949650,
        "transactionHash": "0x9cba3074b20e8b2a3821b32c5cee7cf5c6d33e2be27570c65097d8c88f9d64ad",
        "address": "0x5cC70898c47f73265BdE5b8BB9D37346d0726c09",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd9e6005187f448957a0972a7d0c0a6da2911236"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0x86949441ecec63b1c722de593ca0ae8375837f3546d08fa70b9e9e60b31546f4"
      }
    ],
    "blockNumber": 15949650,
    "cumulativeGasUsed": "6050917",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "45f21ed8322beac01d1e19cec9c24934",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LENS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPHO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"details\":\"Return total value of an asset held in the platform\",\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated rewards and send them to Harvester.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into Morpho\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"}},\"depositAll()\":{\"details\":\"Deposit the entire balance of any supported asset into Morpho\"},\"getPendingRewards()\":{\"details\":\"Get the amount of rewards pending to be collected from the protocol\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"initialize(address,address[],address[],address[])\":{\"details\":\"Initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by main Morpho contract,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from Morpho\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_asset\":\"Address of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/MorphoCompoundStrategy.sol\":\"MorphoCompoundStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xefcaeb7742eaa0414c2c1b6e64cdcf7f1506a66bbb5586efd189d3ce7a7fe84b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcabd808c03076fa6fb5838a13210b2b99314d23842e0e3d5e55e0c1466e75212\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IComptroller {\\n    // Claim all the COMP accrued by specific holders in specific markets for their supplies and/or borrows\\n    function claimComp(\\n        address[] memory holders,\\n        address[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n\\n    function oracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1f521b811cb18a644b9c8662794961e6606bd3ab75a76e169cccc3872adfb2b6\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function supportAsset(address _asset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUSDMint(address asset) external view returns (uint256);\\n\\n    function priceUSDRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x412c0070c2556325930e2a6297adbe62ea9725186dd966a03caa42d0df57c744\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/morpho/ILens.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./compound/ICompoundOracle.sol\\\";\\nimport \\\"./IMorpho.sol\\\";\\n\\ninterface ILens {\\n    /// STORAGE ///\\n\\n    function MAX_BASIS_POINTS() external view returns (uint256);\\n\\n    function WAD() external view returns (uint256);\\n\\n    function morpho() external view returns (IMorpho);\\n\\n    function comptroller() external view returns (IComptroller);\\n\\n    /// GENERAL ///\\n\\n    function getTotalSupply()\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyAmount,\\n            uint256 poolSupplyAmount,\\n            uint256 totalSupplyAmount\\n        );\\n\\n    function getTotalBorrow()\\n        external\\n        view\\n        returns (\\n            uint256 p2pBorrowAmount,\\n            uint256 poolBorrowAmount,\\n            uint256 totalBorrowAmount\\n        );\\n\\n    /// MARKETS ///\\n\\n    function isMarketCreated(address _poolToken) external view returns (bool);\\n\\n    function isMarketCreatedAndNotPaused(address _poolToken)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isMarketCreatedAndNotPausedNorPartiallyPaused(address _poolToken)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAllMarkets()\\n        external\\n        view\\n        returns (address[] memory marketsCreated_);\\n\\n    function getMainMarketData(address _poolToken)\\n        external\\n        view\\n        returns (\\n            uint256 avgSupplyRatePerBlock,\\n            uint256 avgBorrowRatePerBlock,\\n            uint256 p2pSupplyAmount,\\n            uint256 p2pBorrowAmount,\\n            uint256 poolSupplyAmount,\\n            uint256 poolBorrowAmount\\n        );\\n\\n    function getAdvancedMarketData(address _poolToken)\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyIndex,\\n            uint256 p2pBorrowIndex,\\n            uint256 poolSupplyIndex,\\n            uint256 poolBorrowIndex,\\n            uint32 lastUpdateBlockNumber,\\n            uint256 p2pSupplyDelta,\\n            uint256 p2pBorrowDelta\\n        );\\n\\n    function getMarketConfiguration(address _poolToken)\\n        external\\n        view\\n        returns (\\n            address underlying,\\n            bool isCreated,\\n            bool p2pDisabled,\\n            bool isPaused,\\n            bool isPartiallyPaused,\\n            uint16 reserveFactor,\\n            uint16 p2pIndexCursor,\\n            uint256 collateralFactor\\n        );\\n\\n    function getTotalMarketSupply(address _poolToken)\\n        external\\n        view\\n        returns (uint256 p2pSupplyAmount, uint256 poolSupplyAmount);\\n\\n    function getTotalMarketBorrow(address _poolToken)\\n        external\\n        view\\n        returns (uint256 p2pBorrowAmount, uint256 poolBorrowAmount);\\n\\n    /// INDEXES ///\\n\\n    function getCurrentP2PSupplyIndex(address _poolToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurrentP2PBorrowIndex(address _poolToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurrentPoolIndexes(address _poolToken)\\n        external\\n        view\\n        returns (\\n            uint256 currentPoolSupplyIndex,\\n            uint256 currentPoolBorrowIndex\\n        );\\n\\n    function getIndexes(address _poolToken, bool _computeUpdatedIndexes)\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyIndex,\\n            uint256 p2pBorrowIndex,\\n            uint256 poolSupplyIndex,\\n            uint256 poolBorrowIndex\\n        );\\n\\n    /// USERS ///\\n\\n    function getEnteredMarkets(address _user)\\n        external\\n        view\\n        returns (address[] memory enteredMarkets);\\n\\n    function getUserHealthFactor(\\n        address _user,\\n        address[] calldata _updatedMarkets\\n    ) external view returns (uint256);\\n\\n    function getUserBalanceStates(\\n        address _user,\\n        address[] calldata _updatedMarkets\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 collateralValue,\\n            uint256 debtValue,\\n            uint256 maxDebtValue\\n        );\\n\\n    function getCurrentSupplyBalanceInOf(address _poolToken, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        );\\n\\n    function getCurrentBorrowBalanceInOf(address _poolToken, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        );\\n\\n    function getUserMaxCapacitiesForAsset(address _user, address _poolToken)\\n        external\\n        view\\n        returns (uint256 withdrawable, uint256 borrowable);\\n\\n    function getUserHypotheticalBalanceStates(\\n        address _user,\\n        address _poolToken,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    ) external view returns (uint256 debtValue, uint256 maxDebtValue);\\n\\n    function getUserLiquidityDataForAsset(\\n        address _user,\\n        address _poolToken,\\n        bool _computeUpdatedIndexes,\\n        ICompoundOracle _oracle\\n    ) external view returns (Types.AssetLiquidityData memory assetData);\\n\\n    function isLiquidatable(address _user, address[] memory _updatedMarkets)\\n        external\\n        view\\n        returns (bool);\\n\\n    function computeLiquidationRepayAmount(\\n        address _user,\\n        address _poolTokenBorrowed,\\n        address _poolTokenCollateral,\\n        address[] calldata _updatedMarkets\\n    ) external view returns (uint256 toRepay);\\n\\n    /// RATES ///\\n\\n    function getAverageSupplyRatePerBlock(address _poolToken)\\n        external\\n        view\\n        returns (\\n            uint256 avgSupplyRatePerBlock,\\n            uint256 p2pSupplyAmount,\\n            uint256 poolSupplyAmount\\n        );\\n\\n    function getAverageBorrowRatePerBlock(address _poolToken)\\n        external\\n        view\\n        returns (\\n            uint256 avgBorrowRatePerBlock,\\n            uint256 p2pBorrowAmount,\\n            uint256 poolBorrowAmount\\n        );\\n\\n    function getNextUserSupplyRatePerBlock(\\n        address _poolToken,\\n        address _user,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nextSupplyRatePerBlock,\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        );\\n\\n    function getNextUserBorrowRatePerBlock(\\n        address _poolToken,\\n        address _user,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 nextBorrowRatePerBlock,\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        );\\n\\n    function getCurrentUserSupplyRatePerBlock(address _poolToken, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurrentUserBorrowRatePerBlock(address _poolToken, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRatesPerBlock(address _poolToken)\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyRate,\\n            uint256 p2pBorrowRate,\\n            uint256 poolSupplyRate,\\n            uint256 poolBorrowRate\\n        );\\n\\n    /// REWARDS ///\\n\\n    function getUserUnclaimedRewards(\\n        address[] calldata _poolTokens,\\n        address _user\\n    ) external view returns (uint256 unclaimedRewards);\\n\\n    function getAccruedSupplierComp(\\n        address _supplier,\\n        address _poolToken,\\n        uint256 _balance\\n    ) external view returns (uint256);\\n\\n    function getAccruedBorrowerComp(\\n        address _borrower,\\n        address _poolToken,\\n        uint256 _balance\\n    ) external view returns (uint256);\\n\\n    function getCurrentCompSupplyIndex(address _poolToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurrentCompBorrowIndex(address _poolToken)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xb25ad1ccb4c75b766971e57743478a83bd9d1326f92e0f673d4c7a8ede8a0373\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/morpho/IMorpho.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Types.sol\\\";\\nimport \\\"../IComptroller.sol\\\";\\nimport \\\"./compound/ICompoundOracle.sol\\\";\\n\\n// prettier-ignore\\ninterface IMorpho {\\n    function comptroller() external view returns (IComptroller);\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount) external;\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount, uint256 _maxGasForMatching) external;\\n    function withdraw(address _poolTokenAddress, uint256 _amount) external;\\n    function claimRewards(\\n        address[] calldata _cTokenAddresses,\\n        bool _tradeForMorphoToken\\n    ) external returns (uint256 claimedAmount);\\n}\\n\",\"keccak256\":\"0x4f95c9b7dcab3965587b7b59b0bf427d9f10e5db2b14cd6295e868ca5febf403\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/morpho/Types.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\n/// @title Types.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Common types and structs used in Moprho contracts.\\nlibrary Types {\\n    /// ENUMS ///\\n\\n    enum PositionType {\\n        SUPPLIERS_IN_P2P,\\n        SUPPLIERS_ON_POOL,\\n        BORROWERS_IN_P2P,\\n        BORROWERS_ON_POOL\\n    }\\n\\n    /// STRUCTS ///\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In supplier's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests earned by suppliers in peer-to-peer. Multiply by the peer-to-peer supply index to get the underlying amount.\\n        uint256 onPool; // In cToken. Multiply by the pool supply index to get the underlying amount.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In borrower's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests paid by borrowers in peer-to-peer. Multiply by the peer-to-peer borrow index to get the underlying amount.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when borrowers are on Compound. Multiply by the pool borrow index to get the underlying amount.\\n    }\\n\\n    // Max gas to consume during the matching process for supply, borrow, withdraw and repay functions.\\n    struct MaxGasForMatching {\\n        uint64 supply;\\n        uint64 borrow;\\n        uint64 withdraw;\\n        uint64 repay;\\n    }\\n\\n    struct Delta {\\n        uint256 p2pSupplyDelta; // Difference between the stored peer-to-peer supply amount and the real peer-to-peer supply amount (in pool supply unit).\\n        uint256 p2pBorrowDelta; // Difference between the stored peer-to-peer borrow amount and the real peer-to-peer borrow amount (in pool borrow unit).\\n        uint256 p2pSupplyAmount; // Sum of all stored peer-to-peer supply (in peer-to-peer supply unit).\\n        uint256 p2pBorrowAmount; // Sum of all stored peer-to-peer borrow (in peer-to-peer borrow unit).\\n    }\\n\\n    struct AssetLiquidityData {\\n        uint256 collateralValue; // The collateral value of the asset.\\n        uint256 maxDebtValue; // The maximum possible debt value of the asset.\\n        uint256 debtValue; // The debt value of the asset.\\n        uint256 underlyingPrice; // The price of the token.\\n        uint256 collateralFactor; // The liquidation threshold applied on this token.\\n    }\\n\\n    struct LiquidityData {\\n        uint256 collateralValue; // The collateral value.\\n        uint256 maxDebtValue; // The maximum debt value possible.\\n        uint256 debtValue; // The debt value.\\n    }\\n\\n    // Variables are packed together to save gas (will not exceed their limit during Morpho's lifetime).\\n    struct LastPoolIndexes {\\n        uint32 lastUpdateBlockNumber; // The last time the peer-to-peer indexes were updated.\\n        uint112 lastSupplyPoolIndex; // Last pool supply index.\\n        uint112 lastBorrowPoolIndex; // Last pool borrow index.\\n    }\\n\\n    struct MarketParameters {\\n        uint16 reserveFactor; // Proportion of the interest earned by users sent to the DAO for each market, in basis point (100% = 10 000). The value is set at market creation.\\n        uint16 p2pIndexCursor; // Position of the peer-to-peer rate in the pool's spread. Determine the weights of the weighted arithmetic average in the indexes computations ((1 - p2pIndexCursor) * r^S + p2pIndexCursor * r^B) (in basis point).\\n    }\\n\\n    struct MarketStatus {\\n        bool isCreated; // Whether or not this market is created.\\n        bool isPaused; // Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n        bool isPartiallyPaused; // Whether the market is partially paused or not (only supply and borrow are frozen).\\n    }\\n}\\n\",\"keccak256\":\"0xca2086652fff1cec5c8343db5c215862af180401c538fcd59cf0f6c11fab8329\",\"license\":\"GNU AGPLv3\"},\"contracts/interfaces/morpho/compound/ICompoundOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6235ee746b102d87e2cc34a23342f63655667054ee6cc2ef94b0bd6906786cf\",\"license\":\"GNU AGPLv3\"},\"contracts/strategies/BaseCompoundStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Base Compound Abstract Strategy\\n * @author Origin Protocol Inc\\n */\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ICERC20 } from \\\"./ICompound.sol\\\";\\nimport { IComptroller } from \\\"../interfaces/IComptroller.sol\\\";\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\n\\nabstract contract BaseCompoundStrategy is InitializableAbstractStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    int256[50] private __reserved;\\n\\n    /**\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return assetToPToken[_asset] != address(0);\\n    }\\n\\n    /**\\n     * @dev Get the cToken wrapped in the ICERC20 interface for this asset.\\n     *      Fails if the pToken doesn't exist in our mappings.\\n     * @param _asset Address of the asset\\n     * @return Corresponding cToken to this asset\\n     */\\n    function _getCTokenFor(address _asset) internal view returns (ICERC20) {\\n        address cToken = assetToPToken[_asset];\\n        require(cToken != address(0), \\\"cToken does not exist\\\");\\n        return ICERC20(cToken);\\n    }\\n\\n    /**\\n     * @dev Converts an underlying amount into cToken amount\\n     *      cTokenAmt = (underlying * 1e18) / exchangeRate\\n     * @param _cToken     cToken for which to change\\n     * @param _underlying Amount of underlying to convert\\n     * @return amount     Equivalent amount of cTokens\\n     */\\n    function _convertUnderlyingToCToken(ICERC20 _cToken, uint256 _underlying)\\n        internal\\n        view\\n        returns (uint256 amount)\\n    {\\n        // e.g. 1e18*1e18 / 205316390724364402565641705 = 50e8\\n        // e.g. 1e8*1e18 / 205316390724364402565641705 = 0.45 or 0\\n        amount = (_underlying * 1e18) / _cToken.exchangeRateStored();\\n    }\\n}\\n\",\"keccak256\":\"0x4f1d64d20fbc38fbcee25934010f42ac5715fadd9086ca6cf8fc162bf85dc345\",\"license\":\"agpl-3.0\"},\"contracts/strategies/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Compound C Token interface\\n * Documentation: https://compound.finance/developers/ctokens\\n */\\ninterface ICERC20 {\\n    /**\\n     * @notice The mint function transfers an asset into the protocol, which begins accumulating\\n     * interest based on the current Supply Rate for the asset. The user receives a quantity of\\n     * cTokens equal to the underlying tokens supplied, divided by the current Exchange Rate.\\n     * @param mintAmount The amount of the asset to be supplied, in units of the underlying asset.\\n     * @return 0 on success, otherwise an Error codes\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise an error code.\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    /**\\n     * @notice The redeem underlying function converts cTokens into a specified quantity of the underlying\\n     * asset, and returns them to the user. The amount of cTokens redeemed is equal to the quantity of\\n     * underlying tokens received, divided by the current Exchange Rate. The amount redeemed must be less\\n     * than the user's Account Liquidity and the market's available liquidity.\\n     * @param redeemAmount The amount of underlying to be redeemed.\\n     * @return 0 on success, otherwise an error code.\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    /**\\n     * @notice The user's underlying balance, representing their assets in the protocol, is equal to\\n     * the user's cToken balance multiplied by the Exchange Rate.\\n     * @param owner The account to get the underlying balance of.\\n     * @return The amount of underlying currently owned by the account.\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the supply rate per block for supplying the token to Compound.\\n     */\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    /**\\n     * @notice Address of the Compound Comptroller.\\n     */\\n    function comptroller() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdb44904e01cf044d6bd0e32cbe5c66be0b879a6c10c389df4fb89edff8598414\",\"license\":\"agpl-3.0\"},\"contracts/strategies/MorphoCompoundStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Morpho Compound Strategy\\n * @notice Investment strategy for investing stablecoins via Morpho (Compound)\\n * @author Origin Protocol Inc\\n */\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { BaseCompoundStrategy } from \\\"./BaseCompoundStrategy.sol\\\";\\nimport { IERC20 } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { IMorpho } from \\\"../interfaces/morpho/IMorpho.sol\\\";\\nimport { ILens } from \\\"../interfaces/morpho/ILens.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract MorphoCompoundStrategy is BaseCompoundStrategy {\\n    address public constant MORPHO = 0x8888882f8f843896699869179fB6E4f7e3B58888;\\n    address public constant LENS = 0x930f1b46e1D081Ec1524efD95752bE3eCe51EF67;\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    /**\\n     * @dev Initialize function, to set up initial internal state\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        super._initialize(\\n            MORPHO,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets by main Morpho contract,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens()\\n        external\\n        override\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        uint256 assetCount = assetsMapped.length;\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            address asset = assetsMapped[i];\\n\\n            // Safe approval\\n            IERC20(asset).safeApprove(MORPHO, 0);\\n            IERC20(asset).safeApprove(MORPHO, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal method to respond to the addition of new asset\\n     *      We need to approve and allow Morpho to move them\\n     * @param _asset Address of the asset to approve\\n     * @param _pToken The pToken for the approval\\n     */\\n    // solhint-disable-next-line no-unused-vars\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        override\\n    {\\n        IERC20(_asset).safeApprove(MORPHO, 0);\\n        IERC20(_asset).safeApprove(MORPHO, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Collect accumulated rewards and send them to Harvester.\\n     */\\n    function collectRewardTokens()\\n        external\\n        override\\n        onlyHarvester\\n        nonReentrant\\n    {\\n        /**\\n         * Gas considerations. We could query Morpho LENS's `getUserUnclaimedRewards` for each\\n         * cToken separately and only claimRewards where it is economically feasible. Each call\\n         * (out of 3) costs ~60k gas extra.\\n         *\\n         * Each extra cToken in the `poolTokens` of `claimRewards` function makes that call\\n         * 89-120k more expensive gas wise.\\n         *\\n         * With Lens query in case where:\\n         *  - there is only 1 reward token to collect. Net gas usage in best case would be\\n         *    3*60 - 2*120 = -60k -> saving 60k gas\\n         *  - there are 2 reward tokens to collect. Net gas usage in best case would be\\n         *    3*60 - 120 = 60k -> more expensive for 60k gas\\n         *  - there are 3 reward tokens to collect. Net gas usage in best case would be\\n         *    3*60 = 180k -> more expensive for 180k gas\\n         *\\n         * For the above reasoning such \\\"optimization\\\" is not implemented\\n         */\\n\\n        address[] memory poolTokens = new address[](assetsMapped.length);\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            poolTokens[i] = assetToPToken[assetsMapped[i]];\\n        }\\n\\n        // slither-disable-next-line unused-return\\n        IMorpho(MORPHO).claimRewards(\\n            poolTokens, // The addresses of the underlying protocol's pools to claim rewards from\\n            false // Whether to trade the accrued rewards for MORPHO token, with a premium\\n        );\\n\\n        // Transfer COMP to Harvester\\n        IERC20 rewardToken = IERC20(rewardTokenAddresses[0]);\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        emit RewardTokenCollected(\\n            harvesterAddress,\\n            rewardTokenAddresses[0],\\n            balance\\n        );\\n        rewardToken.safeTransfer(harvesterAddress, balance);\\n    }\\n\\n    /**\\n     * @dev Get the amount of rewards pending to be collected from the protocol\\n     */\\n    function getPendingRewards() external view returns (uint256 balance) {\\n        address[] memory poolTokens = new address[](assetsMapped.length);\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            poolTokens[i] = assetToPToken[assetsMapped[i]];\\n        }\\n\\n        return ILens(LENS).getUserUnclaimedRewards(poolTokens, address(this));\\n    }\\n\\n    /**\\n     * @dev Deposit asset into Morpho\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        _deposit(_asset, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposit asset into Morpho\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n\\n        IMorpho(MORPHO).supply(\\n            address(_getCTokenFor(_asset)),\\n            address(this), // the address of the user you want to supply on behalf of\\n            _amount\\n        );\\n        emit Deposit(_asset, address(_getCTokenFor(_asset)), _amount);\\n    }\\n\\n    /**\\n     * @dev Deposit the entire balance of any supported asset into Morpho\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            uint256 balance = IERC20(assetsMapped[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                _deposit(assetsMapped[i], balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw asset from Morpho\\n     * @param _recipient Address to receive withdrawn asset\\n     * @param _asset Address of asset to withdraw\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        _withdraw(_recipient, _asset, _amount);\\n    }\\n\\n    function _withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\n\\n        address pToken = assetToPToken[_asset];\\n\\n        IMorpho(MORPHO).withdraw(pToken, _amount);\\n        emit Withdrawal(_asset, address(_getCTokenFor(_asset)), _amount);\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Remove all assets from platform and send them to Vault contract.\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            uint256 balance = _checkBalance(assetsMapped[i]);\\n            if (balance > 0) {\\n                _withdraw(vaultAddress, assetsMapped[i], balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Return total value of an asset held in the platform\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        return _checkBalance(_asset);\\n    }\\n\\n    function _checkBalance(address _asset)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        address pToken = assetToPToken[_asset];\\n\\n        // Total value represented by decimal position of underlying token\\n        (, , balance) = ILens(LENS).getCurrentSupplyBalanceInOf(\\n            pToken,\\n            address(this)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xedee9da666deb2d605123a6f1b6b105631ae8f0835f471162297c3ae05309556\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce41c7eacd2b6722029bd87759fe6e4d9b48a862277707737be82c94581b855\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xff2a83835ed8984e10338905bc31dbcaeeabdfc0e58d49257389cb1e5a3b9d8a\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    // Core address for the given platform\\n    address public platformAddress;\\n\\n    address public vaultAddress;\\n\\n    // asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    // Full list of all assets supported here\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address public _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\n\\n    // Address of the one address allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    // Reward token addresses\\n    address[] public rewardTokenAddresses;\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _platformAddress Generic platform address\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    function _collectRewardTokens() internal {\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            emit RewardTokenCollected(\\n                harvesterAddress,\\n                rewardTokenAddresses[i],\\n                balance\\n            );\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _rewardTokenAddresses Address array of the reward token\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _harvesterAddress Address of the harvester\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        harvesterAddress = _harvesterAddress;\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @dev Deposit an amount of asset into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @dev Deposit balance of all supported assets into the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the platform.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @dev Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x46bcb70a954f71a14ff223f8a3691ce1679f15b2194e9ae6b09ec29d3a526bbc\",\"license\":\"agpl-3.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd9c475e374285f00f73351de859ed44b490f9989baee63c2d5db79b41aa9e8\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506100273360008051602061288e83398151915255565b60008051602061288e833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36128118061007d6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063853828b611610104578063c7af3352116100a2578063dbe55e5611610071578063dbe55e56146103fe578063de5f626814610411578063f6ca71b014610419578063f817bc631461042e57600080fd5b8063c7af3352146103c8578063d38bfff4146103d0578063d9621f9e146103e3578063d9caed12146103eb57600080fd5b806396d538bb116100de57806396d538bb1461035c578063aa388af61461036f578063ad1728cb146103ad578063c2e1e3f4146103b557600080fd5b8063853828b61461032e5780639136616a146103365780639688d2fc1461034957600080fd5b80633acb56241161017c5780635d36b1901161014b5780635d36b190146102df5780635f515226146102e757806367c7066c146103085780637b2d9b2c1461031b57600080fd5b80633acb562414610296578063430bf08a146102b157806347e7ef24146102c45780635a063f63146102d757600080fd5b80631072cbea116101b85780631072cbea1461024257806318a4619a146102555780632e655201146102705780632f26b1de1461028357600080fd5b80630c340a24146101df5780630ed57b3a146102045780630fc3b4c414610219575b600080fd5b6101e7610437565b6040516001600160a01b0390911681526020015b60405180910390f35b6102176102123660046121b4565b610454565b005b6101e7610227366004612199565b6035602052600090815260409020546001600160a01b031681565b610217610250366004612389565b61048f565b6101e773930f1b46e1d081ec1524efd95752be3ece51ef6781565b6037546101e7906001600160a01b031681565b6102176102913660046122de565b6104cf565b6101e7738888882f8f843896699869179fb6e4f7e3b5888881565b6034546101e7906001600160a01b031681565b6102176102d2366004612389565b6105eb565b61021761065e565b610217610996565b6102fa6102f5366004612199565b610a3c565b6040519081526020016101fb565b6039546101e7906001600160a01b031681565b6101e7610329366004612417565b610a4d565b610217610a77565b610217610344366004612417565b610bd9565b6102176103573660046121e7565b610da4565b61021761036a3660046123b3565b610ead565b61039d61037d366004612199565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101fb565b610217610fd3565b6102176103c3366004612199565b6110ce565b61039d61114d565b6102176103de366004612199565b61117e565b6102fa611222565b6102176103f93660046122a2565b61138d565b6033546101e7906001600160a01b031681565b610217611402565b610421611554565b6040516101fb91906124d7565b6102fa60385481565b600061044f6000805160206127bc8339815191525490565b905090565b61045c61114d565b6104815760405162461bcd60e51b815260040161047890612638565b60405180910390fd5b61048b82826115b6565b5050565b61049761114d565b6104b35760405162461bcd60e51b815260040161047890612638565b61048b6104be610437565b6001600160a01b038416908361171b565b6104d761114d565b6104f35760405162461bcd60e51b815260040161047890612638565b600054610100900460ff168061050c575060005460ff16155b6105285760405162461bcd60e51b81526004016104789061266f565b600054610100900460ff1615801561054a576000805461ffff19166101011790555b6105cf738888882f8f843896699869179fb6e4f7e3b5888889898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061177e92505050565b80156105e1576000805461ff00191690555b5050505050505050565b6034546001600160a01b031633146106155760405162461bcd60e51b815260040161047890612601565b60008051602061279c833981519152805460028114156106475760405162461bcd60e51b8152600401610478906126bd565b60028255610655848461185d565b50600190555050565b6039546001600160a01b031633146106b85760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610478565b60008051602061279c833981519152805460028114156106ea5760405162461bcd60e51b8152600401610478906126bd565b6002825560365460009067ffffffffffffffff81111561070c5761070c612785565b604051908082528060200260200182016040528015610735578160200160208202803683370190505b50905060005b6036548110156107c757603560006036838154811061075c5761075c61276f565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054835191169083908390811061079d5761079d61276f565b6001600160a01b0390921660209283029190910190910152806107bf81612728565b91505061073b565b50604051630a4711e760e11b8152738888882f8f843896699869179fb6e4f7e3b588889063148e23ce90610802908490600090600401612514565b602060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108549190612430565b506000603a60008154811061086b5761086b61276f565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156108b957600080fd5b505afa1580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f19190612430565b603954603a80549293507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353926001600160a01b03909216916000906109385761093861276f565b60009182526020918290200154604080516001600160a01b0394851681529390911691830191909152810183905260600160405180910390a160395461098b906001600160a01b0384811691168361171b565b505050600182555050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610a315760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610478565b610a3a33611988565b565b6000610a4782611a4c565b92915050565b603a8181548110610a5d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610aa85750610a93610437565b6001600160a01b0316336001600160a01b0316145b610b005760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610478565b60008051602061279c83398151915280546002811415610b325760405162461bcd60e51b8152600401610478906126bd565b6002825560005b603654811015610bd1576000610b7560368381548110610b5b57610b5b61276f565b6000918252602090912001546001600160a01b0316611a4c565b90508015610bbe5760345460368054610bbe926001600160a01b0316919085908110610ba357610ba361276f565b6000918252602090912001546001600160a01b031683611afc565b5080610bc981612728565b915050610b39565b505060019055565b610be161114d565b610bfd5760405162461bcd60e51b815260040161047890612638565b6036548110610c3e5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610478565b600060368281548110610c5357610c5361276f565b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690610c90906001906126e5565b831015610d125760368054610ca7906001906126e5565b81548110610cb757610cb761276f565b600091825260209091200154603680546001600160a01b039092169185908110610ce357610ce361276f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6036805480610d2357610d23612759565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b610dac61114d565b610dc85760405162461bcd60e51b815260040161047890612638565b600054610100900460ff1680610de1575060005460ff16155b610dfd5760405162461bcd60e51b81526004016104789061266f565b600054610100900460ff16158015610e1f576000805461ffff19166101011790555b610e908989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061177e92505050565b8015610ea2576000805461ff00191690555b505050505050505050565b610eb561114d565b610ed15760405162461bcd60e51b815260040161047890612638565b60005b81811015610f85576000838383818110610ef057610ef061276f565b9050602002016020810190610f059190612199565b6001600160a01b03161415610f735760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610478565b80610f7d81612728565b915050610ed4565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a8383604051610fba93929190612538565b60405180910390a1610fce603a83836120b9565b505050565b610fdb61114d565b610ff75760405162461bcd60e51b815260040161047890612638565b60008051602061279c833981519152805460028114156110295760405162461bcd60e51b8152600401610478906126bd565b6002825560365460005b818110156110c4576000603682815481106110505761105061276f565b60009182526020822001546001600160a01b03169150611087908290738888882f8f843896699869179fb6e4f7e3b5888890611c94565b6110b16001600160a01b038216738888882f8f843896699869179fb6e4f7e3b58888600019611c94565b50806110bc81612728565b915050611033565b5050600182555050565b6110d661114d565b6110f25760405162461bcd60e51b815260040161047890612638565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60006111656000805160206127bc8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61118661114d565b6111a25760405162461bcd60e51b815260040161047890612638565b6111ca817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166111ea6000805160206127bc8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b603654600090819067ffffffffffffffff81111561124257611242612785565b60405190808252806020026020018201604052801561126b578160200160208202803683370190505b50905060005b6036548110156112fd5760356000603683815481106112925761129261276f565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205483519116908390839081106112d3576112d361276f565b6001600160a01b0390921660209283029190910190910152806112f581612728565b915050611271565b5060405163c11940b560e01b815273930f1b46e1d081ec1524efd95752be3ece51ef679063c11940b59061133790849030906004016124ea565b60206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113879190612430565b91505090565b6034546001600160a01b031633146113b75760405162461bcd60e51b815260040161047890612601565b60008051602061279c833981519152805460028114156113e95760405162461bcd60e51b8152600401610478906126bd565b600282556113f8858585611afc565b5060019055505050565b6034546001600160a01b0316331461142c5760405162461bcd60e51b815260040161047890612601565b60008051602061279c8339815191528054600281141561145e5760405162461bcd60e51b8152600401610478906126bd565b6002825560005b603654811015610bd1576000603682815481106114845761148461276f565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115089190612430565b9050801561154157611541603683815481106115265761152661276f565b6000918252602090912001546001600160a01b03168261185d565b508061154c81612728565b915050611465565b6060603a8054806020026020016040519081016040528092919081815260200182805480156115ac57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161158e575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156116135760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610478565b6001600160a01b0382161580159061163357506001600160a01b03811615155b6116735760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610478565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a261048b8282611db8565b6040516001600160a01b038316602482015260448101829052610fce90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e0b565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556117ba603a85856120b9565b508151815181146118045760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610478565b60005b818110156105e15761184b8482815181106118245761182461276f565b602002602001015184838151811061183e5761183e61276f565b60200260200101516115b6565b8061185581612728565b915050611807565b600081116118a65760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610478565b738888882f8f843896699869179fb6e4f7e3b58888630c0a769b6118c984611edd565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401600060405180830381600087803b15801561191757600080fd5b505af115801561192b573d6000803e3d6000fd5b50505050816001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6261196384611edd565b604080516001600160a01b039092168252602082018590520160405180910390a25050565b6001600160a01b0381166119de5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610478565b806001600160a01b03166119fe6000805160206127bc8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611a49816000805160206127bc83398151915255565b50565b6001600160a01b0381811660009081526035602052604080822054905163a480b7ed60e01b8152921660048301819052306024840152909173930f1b46e1d081ec1524efd95752be3ece51ef679063a480b7ed9060440160606040518083038186803b158015611abb57600080fd5b505afa158015611acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af39190612449565b95945050505050565b60008111611b4c5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e670000000000000000006044820152606401610478565b6001600160a01b038316611b9b5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b6044820152606401610478565b6001600160a01b038281166000908152603560205260409081902054905163f3fef3a360e01b81529116600482018190526024820183905290738888882f8f843896699869179fb6e4f7e3b588889063f3fef3a390604401600060405180830381600087803b158015611c0d57600080fd5b505af1158015611c21573d6000803e3d6000fd5b50505050826001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398611c5985611edd565b604080516001600160a01b039092168252602082018690520160405180910390a2611c8e6001600160a01b038416858461171b565b50505050565b801580611d1d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611ce357600080fd5b505afa158015611cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1b9190612430565b155b611d885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610478565b6040516001600160a01b038316602482015260448101829052610fce90849063095ea7b360e01b90606401611747565b611de16001600160a01b038316738888882f8f843896699869179fb6e4f7e3b588886000611c94565b61048b6001600160a01b038316738888882f8f843896699869179fb6e4f7e3b58888600019611c94565b6000611e60826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f3f9092919063ffffffff16565b805190915015610fce5780806020019051810190611e7e91906123f5565b610fce5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610478565b6001600160a01b0380821660009081526035602052604081205490911680610a475760405162461bcd60e51b815260206004820152601560248201527418d51bdad95b88191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610478565b6060611f4e8484600085611f58565b90505b9392505050565b606082471015611fb95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610478565b843b6120075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610478565b600080866001600160a01b0316858760405161202391906124bb565b60006040518083038185875af1925050503d8060008114612060576040519150601f19603f3d011682016040523d82523d6000602084013e612065565b606091505b5091509150612075828286612080565b979650505050505050565b6060831561208f575081611f51565b82511561209f5782518084602001fd5b8160405162461bcd60e51b815260040161047891906125ce565b82805482825590600052602060002090810192821561210c579160200282015b8281111561210c5781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906120d9565b5061211892915061211c565b5090565b5b80821115612118576000815560010161211d565b80356001600160a01b038116811461214857600080fd5b919050565b60008083601f84011261215f57600080fd5b50813567ffffffffffffffff81111561217757600080fd5b6020830191508360208260051b850101111561219257600080fd5b9250929050565b6000602082840312156121ab57600080fd5b611f5182612131565b600080604083850312156121c757600080fd5b6121d083612131565b91506121de60208401612131565b90509250929050565b60008060008060008060008060a0898b03121561220357600080fd5b61220c89612131565b975061221a60208a01612131565b9650604089013567ffffffffffffffff8082111561223757600080fd5b6122438c838d0161214d565b909850965060608b013591508082111561225c57600080fd5b6122688c838d0161214d565b909650945060808b013591508082111561228157600080fd5b5061228e8b828c0161214d565b999c989b5096995094979396929594505050565b6000806000606084860312156122b757600080fd5b6122c084612131565b92506122ce60208501612131565b9150604084013590509250925092565b60008060008060008060006080888a0312156122f957600080fd5b61230288612131565b9650602088013567ffffffffffffffff8082111561231f57600080fd5b61232b8b838c0161214d565b909850965060408a013591508082111561234457600080fd5b6123508b838c0161214d565b909650945060608a013591508082111561236957600080fd5b506123768a828b0161214d565b989b979a50959850939692959293505050565b6000806040838503121561239c57600080fd5b6123a583612131565b946020939093013593505050565b600080602083850312156123c657600080fd5b823567ffffffffffffffff8111156123dd57600080fd5b6123e98582860161214d565b90969095509350505050565b60006020828403121561240757600080fd5b81518015158114611f5157600080fd5b60006020828403121561242957600080fd5b5035919050565b60006020828403121561244257600080fd5b5051919050565b60008060006060848603121561245e57600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b838110156124b05781516001600160a01b03168752958201959082019060010161248b565b509495945050505050565b600082516124cd8184602087016126fc565b9190910192915050565b602081526000611f516020830184612477565b6040815260006124fd6040830185612477565b905060018060a01b03831660208301529392505050565b6040815260006125276040830185612477565b905082151560208301529392505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156125825781546001600160a01b03168452928401926001918201910161255d565b505050838103828501528481528590820160005b868110156125c2576001600160a01b036125af84612131565b1682529183019190830190600101612596565b50979650505050505050565b60208152600082518060208401526125ed8160408501602087016126fc565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000828210156126f7576126f7612743565b500390565b60005b838110156127175781810151838201526020016126ff565b83811115611c8e5750506000910152565b600060001982141561273c5761273c612743565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122087d57a3fed5d4cb4d4582a2d6ab886b4fe38e7ced3ffc7cbb63013479db076d364736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063853828b611610104578063c7af3352116100a2578063dbe55e5611610071578063dbe55e56146103fe578063de5f626814610411578063f6ca71b014610419578063f817bc631461042e57600080fd5b8063c7af3352146103c8578063d38bfff4146103d0578063d9621f9e146103e3578063d9caed12146103eb57600080fd5b806396d538bb116100de57806396d538bb1461035c578063aa388af61461036f578063ad1728cb146103ad578063c2e1e3f4146103b557600080fd5b8063853828b61461032e5780639136616a146103365780639688d2fc1461034957600080fd5b80633acb56241161017c5780635d36b1901161014b5780635d36b190146102df5780635f515226146102e757806367c7066c146103085780637b2d9b2c1461031b57600080fd5b80633acb562414610296578063430bf08a146102b157806347e7ef24146102c45780635a063f63146102d757600080fd5b80631072cbea116101b85780631072cbea1461024257806318a4619a146102555780632e655201146102705780632f26b1de1461028357600080fd5b80630c340a24146101df5780630ed57b3a146102045780630fc3b4c414610219575b600080fd5b6101e7610437565b6040516001600160a01b0390911681526020015b60405180910390f35b6102176102123660046121b4565b610454565b005b6101e7610227366004612199565b6035602052600090815260409020546001600160a01b031681565b610217610250366004612389565b61048f565b6101e773930f1b46e1d081ec1524efd95752be3ece51ef6781565b6037546101e7906001600160a01b031681565b6102176102913660046122de565b6104cf565b6101e7738888882f8f843896699869179fb6e4f7e3b5888881565b6034546101e7906001600160a01b031681565b6102176102d2366004612389565b6105eb565b61021761065e565b610217610996565b6102fa6102f5366004612199565b610a3c565b6040519081526020016101fb565b6039546101e7906001600160a01b031681565b6101e7610329366004612417565b610a4d565b610217610a77565b610217610344366004612417565b610bd9565b6102176103573660046121e7565b610da4565b61021761036a3660046123b3565b610ead565b61039d61037d366004612199565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101fb565b610217610fd3565b6102176103c3366004612199565b6110ce565b61039d61114d565b6102176103de366004612199565b61117e565b6102fa611222565b6102176103f93660046122a2565b61138d565b6033546101e7906001600160a01b031681565b610217611402565b610421611554565b6040516101fb91906124d7565b6102fa60385481565b600061044f6000805160206127bc8339815191525490565b905090565b61045c61114d565b6104815760405162461bcd60e51b815260040161047890612638565b60405180910390fd5b61048b82826115b6565b5050565b61049761114d565b6104b35760405162461bcd60e51b815260040161047890612638565b61048b6104be610437565b6001600160a01b038416908361171b565b6104d761114d565b6104f35760405162461bcd60e51b815260040161047890612638565b600054610100900460ff168061050c575060005460ff16155b6105285760405162461bcd60e51b81526004016104789061266f565b600054610100900460ff1615801561054a576000805461ffff19166101011790555b6105cf738888882f8f843896699869179fb6e4f7e3b5888889898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061177e92505050565b80156105e1576000805461ff00191690555b5050505050505050565b6034546001600160a01b031633146106155760405162461bcd60e51b815260040161047890612601565b60008051602061279c833981519152805460028114156106475760405162461bcd60e51b8152600401610478906126bd565b60028255610655848461185d565b50600190555050565b6039546001600160a01b031633146106b85760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610478565b60008051602061279c833981519152805460028114156106ea5760405162461bcd60e51b8152600401610478906126bd565b6002825560365460009067ffffffffffffffff81111561070c5761070c612785565b604051908082528060200260200182016040528015610735578160200160208202803683370190505b50905060005b6036548110156107c757603560006036838154811061075c5761075c61276f565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054835191169083908390811061079d5761079d61276f565b6001600160a01b0390921660209283029190910190910152806107bf81612728565b91505061073b565b50604051630a4711e760e11b8152738888882f8f843896699869179fb6e4f7e3b588889063148e23ce90610802908490600090600401612514565b602060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108549190612430565b506000603a60008154811061086b5761086b61276f565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156108b957600080fd5b505afa1580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f19190612430565b603954603a80549293507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353926001600160a01b03909216916000906109385761093861276f565b60009182526020918290200154604080516001600160a01b0394851681529390911691830191909152810183905260600160405180910390a160395461098b906001600160a01b0384811691168361171b565b505050600182555050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610a315760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610478565b610a3a33611988565b565b6000610a4782611a4c565b92915050565b603a8181548110610a5d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610aa85750610a93610437565b6001600160a01b0316336001600160a01b0316145b610b005760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610478565b60008051602061279c83398151915280546002811415610b325760405162461bcd60e51b8152600401610478906126bd565b6002825560005b603654811015610bd1576000610b7560368381548110610b5b57610b5b61276f565b6000918252602090912001546001600160a01b0316611a4c565b90508015610bbe5760345460368054610bbe926001600160a01b0316919085908110610ba357610ba361276f565b6000918252602090912001546001600160a01b031683611afc565b5080610bc981612728565b915050610b39565b505060019055565b610be161114d565b610bfd5760405162461bcd60e51b815260040161047890612638565b6036548110610c3e5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610478565b600060368281548110610c5357610c5361276f565b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690610c90906001906126e5565b831015610d125760368054610ca7906001906126e5565b81548110610cb757610cb761276f565b600091825260209091200154603680546001600160a01b039092169185908110610ce357610ce361276f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6036805480610d2357610d23612759565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b610dac61114d565b610dc85760405162461bcd60e51b815260040161047890612638565b600054610100900460ff1680610de1575060005460ff16155b610dfd5760405162461bcd60e51b81526004016104789061266f565b600054610100900460ff16158015610e1f576000805461ffff19166101011790555b610e908989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061177e92505050565b8015610ea2576000805461ff00191690555b505050505050505050565b610eb561114d565b610ed15760405162461bcd60e51b815260040161047890612638565b60005b81811015610f85576000838383818110610ef057610ef061276f565b9050602002016020810190610f059190612199565b6001600160a01b03161415610f735760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610478565b80610f7d81612728565b915050610ed4565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a8383604051610fba93929190612538565b60405180910390a1610fce603a83836120b9565b505050565b610fdb61114d565b610ff75760405162461bcd60e51b815260040161047890612638565b60008051602061279c833981519152805460028114156110295760405162461bcd60e51b8152600401610478906126bd565b6002825560365460005b818110156110c4576000603682815481106110505761105061276f565b60009182526020822001546001600160a01b03169150611087908290738888882f8f843896699869179fb6e4f7e3b5888890611c94565b6110b16001600160a01b038216738888882f8f843896699869179fb6e4f7e3b58888600019611c94565b50806110bc81612728565b915050611033565b5050600182555050565b6110d661114d565b6110f25760405162461bcd60e51b815260040161047890612638565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60006111656000805160206127bc8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61118661114d565b6111a25760405162461bcd60e51b815260040161047890612638565b6111ca817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166111ea6000805160206127bc8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b603654600090819067ffffffffffffffff81111561124257611242612785565b60405190808252806020026020018201604052801561126b578160200160208202803683370190505b50905060005b6036548110156112fd5760356000603683815481106112925761129261276f565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205483519116908390839081106112d3576112d361276f565b6001600160a01b0390921660209283029190910190910152806112f581612728565b915050611271565b5060405163c11940b560e01b815273930f1b46e1d081ec1524efd95752be3ece51ef679063c11940b59061133790849030906004016124ea565b60206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113879190612430565b91505090565b6034546001600160a01b031633146113b75760405162461bcd60e51b815260040161047890612601565b60008051602061279c833981519152805460028114156113e95760405162461bcd60e51b8152600401610478906126bd565b600282556113f8858585611afc565b5060019055505050565b6034546001600160a01b0316331461142c5760405162461bcd60e51b815260040161047890612601565b60008051602061279c8339815191528054600281141561145e5760405162461bcd60e51b8152600401610478906126bd565b6002825560005b603654811015610bd1576000603682815481106114845761148461276f565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115089190612430565b9050801561154157611541603683815481106115265761152661276f565b6000918252602090912001546001600160a01b03168261185d565b508061154c81612728565b915050611465565b6060603a8054806020026020016040519081016040528092919081815260200182805480156115ac57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161158e575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156116135760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610478565b6001600160a01b0382161580159061163357506001600160a01b03811615155b6116735760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610478565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a261048b8282611db8565b6040516001600160a01b038316602482015260448101829052610fce90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e0b565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556117ba603a85856120b9565b508151815181146118045760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610478565b60005b818110156105e15761184b8482815181106118245761182461276f565b602002602001015184838151811061183e5761183e61276f565b60200260200101516115b6565b8061185581612728565b915050611807565b600081116118a65760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610478565b738888882f8f843896699869179fb6e4f7e3b58888630c0a769b6118c984611edd565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401600060405180830381600087803b15801561191757600080fd5b505af115801561192b573d6000803e3d6000fd5b50505050816001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6261196384611edd565b604080516001600160a01b039092168252602082018590520160405180910390a25050565b6001600160a01b0381166119de5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610478565b806001600160a01b03166119fe6000805160206127bc8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611a49816000805160206127bc83398151915255565b50565b6001600160a01b0381811660009081526035602052604080822054905163a480b7ed60e01b8152921660048301819052306024840152909173930f1b46e1d081ec1524efd95752be3ece51ef679063a480b7ed9060440160606040518083038186803b158015611abb57600080fd5b505afa158015611acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af39190612449565b95945050505050565b60008111611b4c5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e670000000000000000006044820152606401610478565b6001600160a01b038316611b9b5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b6044820152606401610478565b6001600160a01b038281166000908152603560205260409081902054905163f3fef3a360e01b81529116600482018190526024820183905290738888882f8f843896699869179fb6e4f7e3b588889063f3fef3a390604401600060405180830381600087803b158015611c0d57600080fd5b505af1158015611c21573d6000803e3d6000fd5b50505050826001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398611c5985611edd565b604080516001600160a01b039092168252602082018690520160405180910390a2611c8e6001600160a01b038416858461171b565b50505050565b801580611d1d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611ce357600080fd5b505afa158015611cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1b9190612430565b155b611d885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610478565b6040516001600160a01b038316602482015260448101829052610fce90849063095ea7b360e01b90606401611747565b611de16001600160a01b038316738888882f8f843896699869179fb6e4f7e3b588886000611c94565b61048b6001600160a01b038316738888882f8f843896699869179fb6e4f7e3b58888600019611c94565b6000611e60826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f3f9092919063ffffffff16565b805190915015610fce5780806020019051810190611e7e91906123f5565b610fce5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610478565b6001600160a01b0380821660009081526035602052604081205490911680610a475760405162461bcd60e51b815260206004820152601560248201527418d51bdad95b88191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610478565b6060611f4e8484600085611f58565b90505b9392505050565b606082471015611fb95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610478565b843b6120075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610478565b600080866001600160a01b0316858760405161202391906124bb565b60006040518083038185875af1925050503d8060008114612060576040519150601f19603f3d011682016040523d82523d6000602084013e612065565b606091505b5091509150612075828286612080565b979650505050505050565b6060831561208f575081611f51565b82511561209f5782518084602001fd5b8160405162461bcd60e51b815260040161047891906125ce565b82805482825590600052602060002090810192821561210c579160200282015b8281111561210c5781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906120d9565b5061211892915061211c565b5090565b5b80821115612118576000815560010161211d565b80356001600160a01b038116811461214857600080fd5b919050565b60008083601f84011261215f57600080fd5b50813567ffffffffffffffff81111561217757600080fd5b6020830191508360208260051b850101111561219257600080fd5b9250929050565b6000602082840312156121ab57600080fd5b611f5182612131565b600080604083850312156121c757600080fd5b6121d083612131565b91506121de60208401612131565b90509250929050565b60008060008060008060008060a0898b03121561220357600080fd5b61220c89612131565b975061221a60208a01612131565b9650604089013567ffffffffffffffff8082111561223757600080fd5b6122438c838d0161214d565b909850965060608b013591508082111561225c57600080fd5b6122688c838d0161214d565b909650945060808b013591508082111561228157600080fd5b5061228e8b828c0161214d565b999c989b5096995094979396929594505050565b6000806000606084860312156122b757600080fd5b6122c084612131565b92506122ce60208501612131565b9150604084013590509250925092565b60008060008060008060006080888a0312156122f957600080fd5b61230288612131565b9650602088013567ffffffffffffffff8082111561231f57600080fd5b61232b8b838c0161214d565b909850965060408a013591508082111561234457600080fd5b6123508b838c0161214d565b909650945060608a013591508082111561236957600080fd5b506123768a828b0161214d565b989b979a50959850939692959293505050565b6000806040838503121561239c57600080fd5b6123a583612131565b946020939093013593505050565b600080602083850312156123c657600080fd5b823567ffffffffffffffff8111156123dd57600080fd5b6123e98582860161214d565b90969095509350505050565b60006020828403121561240757600080fd5b81518015158114611f5157600080fd5b60006020828403121561242957600080fd5b5035919050565b60006020828403121561244257600080fd5b5051919050565b60008060006060848603121561245e57600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b838110156124b05781516001600160a01b03168752958201959082019060010161248b565b509495945050505050565b600082516124cd8184602087016126fc565b9190910192915050565b602081526000611f516020830184612477565b6040815260006124fd6040830185612477565b905060018060a01b03831660208301529392505050565b6040815260006125276040830185612477565b905082151560208301529392505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156125825781546001600160a01b03168452928401926001918201910161255d565b505050838103828501528481528590820160005b868110156125c2576001600160a01b036125af84612131565b1682529183019190830190600101612596565b50979650505050505050565b60208152600082518060208401526125ed8160408501602087016126fc565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000828210156126f7576126f7612743565b500390565b60005b838110156127175781810151838201526020016126ff565b83811115611c8e5750506000910152565b600060001982141561273c5761273c612743565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122087d57a3fed5d4cb4d4582a2d6ab886b4fe38e7ced3ffc7cbb63013479db076d364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "details": "Return total value of an asset held in the platform",
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated rewards and send them to Harvester."
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into Morpho",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        }
      },
      "depositAll()": {
        "details": "Deposit the entire balance of any supported asset into Morpho"
      },
      "getPendingRewards()": {
        "details": "Get the amount of rewards pending to be collected from the protocol"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "initialize(address,address[],address[],address[])": {
        "details": "Initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by main Morpho contract,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from Morpho",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_asset": "Address of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22574,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22577,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22617,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22695,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 22697,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 22701,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 22704,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22706,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 22708,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 22710,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 22713,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22717,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 16030,
        "contract": "contracts/strategies/MorphoCompoundStrategy.sol:MorphoCompoundStrategy",
        "label": "__reserved",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_int256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)50_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
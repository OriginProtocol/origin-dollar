{
  "address": "0x8c135F50C7317A93Cc95bB208A494E5ADe5B66b0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oeth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintFrom",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOETH",
          "type": "uint256"
        }
      ],
      "name": "depositSFRXETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseOptIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xea6668d086d29ced78144e13db9312561f9f869ed80103ce12dee05c1f4c65dd",
  "receipt": {
    "to": null,
    "from": "0xFD9E6005187F448957a0972a7d0C0A6dA2911236",
    "contractAddress": "0x8c135F50C7317A93Cc95bB208A494E5ADe5B66b0",
    "transactionIndex": 33,
    "gasUsed": "456082",
    "logsBloom": "0x00000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000002000000080000000000000000200040000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000020000000002000000000800000000000000000000000000040000000000000000000000000000000000000000002000000000000000000000000000000000000010200000000000000000000200000000000000000000000000000000000000",
    "blockHash": "0x43123383531e29bda1050f9cec86bbbb9002a8d137a358e6dca34c9b2c334239",
    "transactionHash": "0xea6668d086d29ced78144e13db9312561f9f869ed80103ce12dee05c1f4c65dd",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 17067220,
        "transactionHash": "0xea6668d086d29ced78144e13db9312561f9f869ed80103ce12dee05c1f4c65dd",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008c135f50c7317a93cc95bb208a494e5ade5b66b0",
          "0x00000000000000000000000039254033945aa2e4809cc2977e7087bee48bd7ab"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 141,
        "blockHash": "0x43123383531e29bda1050f9cec86bbbb9002a8d137a358e6dca34c9b2c334239"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 17067220,
        "transactionHash": "0xea6668d086d29ced78144e13db9312561f9f869ed80103ce12dee05c1f4c65dd",
        "address": "0x5E8422345238F34275888049021821E8E08CAa1f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008c135f50c7317a93cc95bb208a494e5ade5b66b0",
          "0x00000000000000000000000039254033945aa2e4809cc2977e7087bee48bd7ab"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 142,
        "blockHash": "0x43123383531e29bda1050f9cec86bbbb9002a8d137a358e6dca34c9b2c334239"
      }
    ],
    "blockNumber": 17067220,
    "cumulativeGasUsed": "4187406",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x856c4Efb76C1D1AE02e20CEB03A2A6a08b0b8dC3",
    "0x39254033945AA2E4809Cc2977E7087BEE48bd7Ab"
  ],
  "solcInputHash": "8564b351f4bb5da3f43a5b9c5739eec4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oeth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintFrom\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOETH\",\"type\":\"uint256\"}],\"name\":\"depositSFRXETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseOptIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/OETHZapper.sol\":\"OETHZapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/interfaces/IOUSD.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IOUSD {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function _totalSupply() external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function changeSupply(uint256 _newTotalSupply) external;\\n\\n    function claimGovernance() external;\\n\\n    function creditsBalanceOf(address _account)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function creditsBalanceOfHighres(address _account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function governor() external view returns (address);\\n\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        external\\n        returns (bool);\\n\\n    function initialize(\\n        string memory _nameArg,\\n        string memory _symbolArg,\\n        address _vaultAddress\\n    ) external;\\n\\n    function isGovernor() external view returns (bool);\\n\\n    function isUpgraded(address) external view returns (uint256);\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function nonRebasingCreditsPerToken(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function nonRebasingSupply() external view returns (uint256);\\n\\n    function rebaseOptIn() external;\\n\\n    function rebaseOptOut() external;\\n\\n    function rebaseState(address) external view returns (uint8);\\n\\n    function rebasingCredits() external view returns (uint256);\\n\\n    function rebasingCreditsHighres() external view returns (uint256);\\n\\n    function rebasingCreditsPerToken() external view returns (uint256);\\n\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x91291805f1caa4206bf5df018eccfebba8b37af1fbfa16f7b7e5ab308ebe4415\"},\"contracts/interfaces/ISfrxETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISfrxETH {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n    event NewRewardsCycle(uint32 indexed cycleEnd, uint256 rewardAmount);\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function asset() external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit(uint256 assets, address receiver)\\n        external\\n        returns (uint256 shares);\\n\\n    function depositWithSignature(\\n        uint256 assets,\\n        address receiver,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 shares);\\n\\n    function lastRewardAmount() external view returns (uint192);\\n\\n    function lastSync() external view returns (uint32);\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256);\\n\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    function mint(uint256 shares, address receiver)\\n        external\\n        returns (uint256 assets);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n\\n    function rewardsCycleEnd() external view returns (uint32);\\n\\n    function rewardsCycleLength() external view returns (uint32);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function syncRewards() external;\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n}\\n\",\"keccak256\":\"0x9ca7bb96b340626c583a783a8629b26f043779f990bfda571718ed563b729015\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xb05bdc712c2661e92e351ae0823f0c8fca4249e6cbb43e78b96fafc290bee198\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x05b7dce6c24d3cd4e48b5c6346d86e5e40ecc3291bcdf3f3ef091c98fc826519\",\"license\":\"MIT\"},\"contracts/vault/OETHZapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IOUSD } from \\\"../interfaces/IOUSD.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IWETH9 } from \\\"../interfaces/IWETH9.sol\\\";\\nimport { ISfrxETH } from \\\"../interfaces/ISfrxETH.sol\\\";\\n\\ncontract OETHZapper {\\n    IOUSD immutable oeth;\\n    IVault immutable vault;\\n    IWETH9 constant weth = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    ISfrxETH constant sfrxeth =\\n        ISfrxETH(0xac3E018457B222d93114458476f3E3416Abbe38F);\\n    address constant ETH_MARKER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address constant FRXETH = 0x5E8422345238F34275888049021821E8E08CAa1f;\\n\\n    event MintFrom(\\n        address indexed minter,\\n        address indexed asset,\\n        uint256 amount\\n    );\\n\\n    constructor(address _oeth, address _vault) {\\n        oeth = IOUSD(_oeth);\\n        vault = IVault(_vault);\\n\\n        // slither-disable-next-line unused-return\\n        weth.approve(address(_vault), type(uint256).max);\\n        // slither-disable-next-line unused-return\\n        IERC20(FRXETH).approve(address(_vault), type(uint256).max);\\n    }\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    function deposit() public payable returns (uint256) {\\n        weth.deposit{ value: msg.value }();\\n        emit MintFrom(msg.sender, ETH_MARKER, msg.value);\\n        return _mint(address(weth), msg.value);\\n    }\\n\\n    function depositSFRXETH(uint256 amount, uint256 minOETH)\\n        external\\n        returns (uint256)\\n    {\\n        // slither-disable-next-line unused-return\\n        sfrxeth.redeem(amount, address(this), msg.sender);\\n        emit MintFrom(msg.sender, address(sfrxeth), amount);\\n        return _mint(FRXETH, minOETH);\\n    }\\n\\n    function rebaseOptIn() external {\\n        oeth.rebaseOptIn(); // Gas savings for every zap\\n    }\\n\\n    function _mint(address asset, uint256 minOETH) internal returns (uint256) {\\n        uint256 toMint = IERC20(asset).balanceOf(address(this));\\n        vault.mint(asset, toMint, minOETH);\\n        uint256 mintedAmount = oeth.balanceOf(address(this));\\n        require(mintedAmount >= minOETH, \\\"Zapper: not enough minted\\\");\\n        // slither-disable-next-line unchecked-transfer\\n        oeth.transfer(msg.sender, mintedAmount);\\n        return mintedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x5e4c5c844f070e34b5617e4b8c1e533928840ee00d082eba59f853ab6a1dd636\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161085338038061085383398101604081905261002f91610198565b6001600160601b0319606083811b821660805282901b1660a05260405163095ea7b360e01b81526001600160a01b0382166004820152600019602482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29063095ea7b390604401602060405180830381600087803b1580156100a657600080fd5b505af11580156100ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100de91906101cb565b5060405163095ea7b360e01b81526001600160a01b03821660048201526000196024820152735e8422345238f34275888049021821e8e08caa1f9063095ea7b390604401602060405180830381600087803b15801561013c57600080fd5b505af1158015610150573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017491906101cb565b5050506101f4565b80516001600160a01b038116811461019357600080fd5b919050565b600080604083850312156101ab57600080fd5b6101b48361017c565b91506101c26020840161017c565b90509250929050565b6000602082840312156101dd57600080fd5b815180151581146101ed57600080fd5b9392505050565b60805160601c60a05160601c61062661022d600039600061039c01526000818161027d01528181610411015261050601526106266000f3fe6080604052600436106100385760003560e01c8063d0e30db01461004d578063d443e97d14610067578063f51b0fd41461008757600080fd5b366100485761004561009e565b50005b600080fd5b61005561009e565b60405190815260200160405180910390f35b34801561007357600080fd5b506100556100823660046105ce565b610176565b34801561009357600080fd5b5061009c61027b565b005b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156100ef57600080fd5b505af1158015610103573d6000803e3d6000fd5b505060405134815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee93503392507fe52fb9dd72d5b6a27bb72cf678bbcde313246a977042563221f2d578c77c3da9915060200160405180910390a361017173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2346102f0565b905090565b604051635d043b2960e11b81526004810183905230602482015233604482015260009073ac3e018457b222d93114458476f3e3416abbe38f9063ba08765290606401602060405180830381600087803b1580156101d257600080fd5b505af11580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906105b5565b5060405183815273ac3e018457b222d93114458476f3e3416abbe38f9033907fe52fb9dd72d5b6a27bb72cf678bbcde313246a977042563221f2d578c77c3da99060200160405180910390a3610274735e8422345238f34275888049021821e8e08caa1f836102f0565b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51b0fd46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102d657600080fd5b505af11580156102ea573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c91906105b5565b604051630ab714fb60e11b81526001600160a01b03868116600483015260248201839052604482018690529192507f00000000000000000000000000000000000000000000000000000000000000009091169063156e29f690606401600060405180830381600087803b1580156103e257600080fd5b505af11580156103f6573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049491906105b5565b9050838110156104ea5760405162461bcd60e51b815260206004820152601960248201527f5a61707065723a206e6f7420656e6f756768206d696e74656400000000000000604482015260640160405180910390fd5b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190610593565b50949350505050565b6000602082840312156105a557600080fd5b8151801515811461027457600080fd5b6000602082840312156105c757600080fd5b5051919050565b600080604083850312156105e157600080fd5b5050803592602090910135915056fea264697066735822122018948d0b2512549f16b5d55fdb85b44dcf2972cc2cf1ca21bf7ae8c35c7e5d4064736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c8063d0e30db01461004d578063d443e97d14610067578063f51b0fd41461008757600080fd5b366100485761004561009e565b50005b600080fd5b61005561009e565b60405190815260200160405180910390f35b34801561007357600080fd5b506100556100823660046105ce565b610176565b34801561009357600080fd5b5061009c61027b565b005b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156100ef57600080fd5b505af1158015610103573d6000803e3d6000fd5b505060405134815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee93503392507fe52fb9dd72d5b6a27bb72cf678bbcde313246a977042563221f2d578c77c3da9915060200160405180910390a361017173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2346102f0565b905090565b604051635d043b2960e11b81526004810183905230602482015233604482015260009073ac3e018457b222d93114458476f3e3416abbe38f9063ba08765290606401602060405180830381600087803b1580156101d257600080fd5b505af11580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906105b5565b5060405183815273ac3e018457b222d93114458476f3e3416abbe38f9033907fe52fb9dd72d5b6a27bb72cf678bbcde313246a977042563221f2d578c77c3da99060200160405180910390a3610274735e8422345238f34275888049021821e8e08caa1f836102f0565b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51b0fd46040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102d657600080fd5b505af11580156102ea573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c91906105b5565b604051630ab714fb60e11b81526001600160a01b03868116600483015260248201839052604482018690529192507f00000000000000000000000000000000000000000000000000000000000000009091169063156e29f690606401600060405180830381600087803b1580156103e257600080fd5b505af11580156103f6573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049491906105b5565b9050838110156104ea5760405162461bcd60e51b815260206004820152601960248201527f5a61707065723a206e6f7420656e6f756768206d696e74656400000000000000604482015260640160405180910390fd5b60405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190610593565b50949350505050565b6000602082840312156105a557600080fd5b8151801515811461027457600080fd5b6000602082840312156105c757600080fd5b5051919050565b600080604083850312156105e157600080fd5b5050803592602090910135915056fea264697066735822122018948d0b2512549f16b5d55fdb85b44dcf2972cc2cf1ca21bf7ae8c35c7e5d4064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
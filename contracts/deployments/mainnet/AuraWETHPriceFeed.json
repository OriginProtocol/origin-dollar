{
  "address": "0x94e16bC08d7CCd7f2999Eb5eA3f35DD1EDCBd15B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auraOracleWeightedPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deviation",
          "type": "uint256"
        }
      ],
      "name": "HighPriceVolatility",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToleranceBps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeedPausedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceFeedUnpausedError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PriceFeedPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PriceFeedUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTolerance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTolerance",
          "type": "uint256"
        }
      ],
      "name": "ToleranceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auraOracleWeightedPool",
      "outputs": [
        {
          "internalType": "contract IOracleWeightedPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStrategistAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tolerance",
          "type": "uint256"
        }
      ],
      "name": "setTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25baa8d127808c290d0289b536fb1b00f42385540c557739444f0fd0648ec972",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0x94e16bC08d7CCd7f2999Eb5eA3f35DD1EDCBd15B",
    "transactionIndex": 176,
    "gasUsed": "948156",
    "logsBloom": "0x
    "blockHash": "0xdfdbba81884f9e9cee381d1adf0c9f00bcb0b56bb11cae55276cfdc3d4d4c14c",
    "transactionHash": "0x25baa8d127808c290d0289b536fb1b00f42385540c557739444f0fd0648ec972",
    "logs": [
      {
        "transactionIndex": 176,
        "blockNumber": 18669662,
        "transactionHash": "0x25baa8d127808c290d0289b536fb1b00f42385540c557739444f0fd0648ec972",
        "address": "0x94e16bC08d7CCd7f2999Eb5eA3f35DD1EDCBd15B",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 341,
        "blockHash": "0xdfdbba81884f9e9cee381d1adf0c9f00bcb0b56bb11cae55276cfdc3d4d4c14c"
      }
    ],
    "blockNumber": 18669662,
    "cumulativeGasUsed": "17084846",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc29562b045D80fD77c69Bec09541F5c16fe20d9d",
    "0x35918cDE7233F2dD33fA41ae3Cb6aE0e42E0e69F"
  ],
  "numDeployments": 1,
  "solcInputHash": "12a0ec7d553ea14c37843dc6b8319f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auraOracleWeightedPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deviation\",\"type\":\"uint256\"}],\"name\":\"HighPriceVolatility\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToleranceBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeedPausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeedUnpausedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PriceFeedPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PriceFeedUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTolerance\",\"type\":\"uint256\"}],\"name\":\"ToleranceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auraOracleWeightedPool\",\"outputs\":[{\"internalType\":\"contract IOracleWeightedPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStrategistAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tolerance\",\"type\":\"uint256\"}],\"name\":\"setTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoundData(uint80)\":{\"details\":\"This function exists to make the contract compatible with AggregatorV3Interface. Always reverts since there're no round data in this contract.*\"},\"latestRoundData()\":{\"details\":\"This function exists to make the contract compatible with AggregatorV3Interface (which OETHOracleRouter uses to get the price). The `answer` returned by this is same as what `price()` would return. It doesn't return any data about rounds (since those doesn't exist).*\"},\"price()\":{\"details\":\"Queries the OracleWeightedPool for TWAP of two intervals (1h data from 5m ago and the recent 5m data) and ensures that the price hasn't deviated too much and returns the most recent TWAP price.\",\"returns\":{\"_0\":\"price The price scaled to 18 decimals*\"}},\"setStrategistAddr(address)\":{\"details\":\"Set address of Strategist\",\"params\":{\"_address\":\"Address of Strategist\"}},\"setTolerance(uint256)\":{\"params\":{\"_tolerance\":\"New tolerance value*\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"pause()\":{\"notice\":\"Pauses the price feed. Callable by Strategist as well.*\"},\"setTolerance(uint256)\":{\"notice\":\"Set the max amount of tolerance acceptable between two different price points.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"unpause()\":{\"notice\":\"Unpauses the price feed. Only Governor can call it*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/AuraWETHPriceFeed.sol\":\"AuraWETHPriceFeed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/governance/Strategizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Governable } from \\\"./Governable.sol\\\";\\n\\ncontract Strategizable is Governable {\\n    event StrategistUpdated(address _address);\\n\\n    // Address of strategist\\n    address public strategistAddr;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Verifies that the caller is either Governor or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == strategistAddr || isGovernor(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function setStrategistAddr(address _address) external onlyGovernor {\\n        _setStrategistAddr(_address);\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function _setStrategistAddr(address _address) internal {\\n        strategistAddr = _address;\\n        emit StrategistUpdated(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x7fd5473fd8d117575500c6b8fc1bb94e39a68082143d99da9946aed020a41619\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IOracleWeightedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// The three values that can be queried:\\n//\\n// - PAIR_PRICE: the price of the tokens in the Pool, expressed as the price of the second token in units of the\\n//   first token. For example, if token A is worth $2, and token B is worth $4, the pair price will be 2.0.\\n//   Note that the price is computed *including* the tokens decimals. This means that the pair price of a Pool with\\n//   DAI and USDC will be close to 1.0, despite DAI having 18 decimals and USDC 6.\\n//\\n// - BPT_PRICE: the price of the Pool share token (BPT), in units of the first token.\\n//   Note that the price is computed *including* the tokens decimals. This means that the BPT price of a Pool with\\n//   USDC in which BPT is worth $5 will be 5.0, despite the BPT having 18 decimals and USDC 6.\\n//\\n// - INVARIANT: the value of the Pool's invariant, which serves as a measure of its liquidity.\\nenum Variable {\\n    PAIR_PRICE,\\n    BPT_PRICE,\\n    INVARIANT\\n}\\n\\n/**\\n * @dev Information for a Time Weighted Average query.\\n *\\n * Each query computes the average over a window of duration `secs` seconds that ended `ago` seconds ago. For\\n * example, the average over the past 30 minutes is computed by settings secs to 1800 and ago to 0. If secs is 1800\\n * and ago is 1800 as well, the average between 60 and 30 minutes ago is computed instead.\\n */\\nstruct OracleAverageQuery {\\n    Variable variable;\\n    uint256 secs;\\n    uint256 ago;\\n}\\n\\ninterface IOracleWeightedPool {\\n    /**\\n     * @dev Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18\\n     * decimal fixed point values.\\n     */\\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\\n        external\\n        view\\n        returns (uint256[] memory results);\\n}\\n\",\"keccak256\":\"0x13b6065fe64e705a3495f026fb2a1dd74ad9dfce56b9b452d9b149395ef42840\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x18fb68de95136c49f3874fe7795a7bda730339198b2816690ddbdf1eacd4e273\",\"license\":\"MIT\"},\"contracts/oracle/AuraWETHPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Variable, OracleAverageQuery, IOracleWeightedPool } from \\\"../interfaces/balancer/IOracleWeightedPool.sol\\\";\\nimport { Strategizable } from \\\"../governance/Strategizable.sol\\\";\\nimport { AggregatorV3Interface } from \\\"../interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract AuraWETHPriceFeed is AggregatorV3Interface, Strategizable {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    event PriceFeedPaused();\\n    event PriceFeedUnpaused();\\n    event ToleranceChanged(uint256 oldTolerance, uint256 newTolerance);\\n\\n    error PriceFeedPausedError();\\n    error PriceFeedUnpausedError();\\n    error InvalidToleranceBps();\\n    error HighPriceVolatility(uint256 deviation);\\n\\n    bool public paused;\\n    uint256 public tolerance = 0.02 ether; // 2% by default\\n\\n    // Fields to make it compatible with `AggregatorV3Interface`\\n    uint8 public constant override decimals = 18;\\n    string public constant override description = \\\"\\\";\\n    uint256 public constant override version = 1;\\n\\n    IOracleWeightedPool public immutable auraOracleWeightedPool;\\n\\n    constructor(address _auraOracleWeightedPool, address _governor) {\\n        _setGovernor(_governor);\\n        auraOracleWeightedPool = IOracleWeightedPool(_auraOracleWeightedPool);\\n    }\\n\\n    /**\\n     * @dev Queries the OracleWeightedPool for TWAP of two intervals\\n     * (1h data from 5m ago and the recent 5m data) and ensures that\\n     * the price hasn't deviated too much and returns the most recent\\n     * TWAP price.\\n     *\\n     * @return price The price scaled to 18 decimals\\n     **/\\n    function price() external view returns (int256) {\\n        return _price();\\n    }\\n\\n    function _price() internal view returns (int256) {\\n        if (paused) {\\n            revert PriceFeedPausedError();\\n        }\\n        OracleAverageQuery[] memory queries = new OracleAverageQuery[](2);\\n\\n        queries[0] = OracleAverageQuery({\\n            variable: Variable.PAIR_PRICE,\\n            secs: 3600, // Get 1h data\\n            ago: 300 // From 5min ago\\n        });\\n        queries[1] = OracleAverageQuery({\\n            variable: Variable.PAIR_PRICE,\\n            secs: 300, // Get 5min data\\n            ago: 0 // From now\\n        });\\n\\n        uint256[] memory prices = auraOracleWeightedPool.getTimeWeightedAverage(\\n            queries\\n        );\\n        int256 price_1h = prices[0].toInt256();\\n        int256 price_5m = prices[1].toInt256();\\n\\n        int256 diff = (1e18 * (price_1h - price_5m)) /\\n            ((price_1h + price_5m) / 2);\\n        uint256 absDiff = diff >= 0 ? diff.toUint256() : (-diff).toUint256();\\n\\n        // Ensure the price hasn't moved too much (2% tolerance)\\n        // between now and the past hour\\n        if (absDiff > tolerance) {\\n            revert HighPriceVolatility(absDiff);\\n        }\\n\\n        // Return the recent price\\n        return price_5m;\\n    }\\n\\n    /**\\n     * Pauses the price feed. Callable by Strategist as well.\\n     **/\\n    function pause() external onlyGovernorOrStrategist {\\n        if (paused) {\\n            revert PriceFeedPausedError();\\n        }\\n        paused = true;\\n        emit PriceFeedPaused();\\n    }\\n\\n    /**\\n     * Unpauses the price feed. Only Governor can call it\\n     **/\\n    function unpause() external onlyGovernor {\\n        if (!paused) {\\n            revert PriceFeedUnpausedError();\\n        }\\n        paused = false;\\n        emit PriceFeedUnpaused();\\n    }\\n\\n    /**\\n     * Set the max amount of tolerance acceptable between\\n     * two different price points.\\n     *\\n     * @param _tolerance New tolerance value\\n     **/\\n    function setTolerance(uint256 _tolerance) external onlyGovernor {\\n        if (_tolerance > 0.1 ether) {\\n            revert InvalidToleranceBps();\\n        }\\n        emit ToleranceChanged(tolerance, _tolerance);\\n        tolerance = _tolerance;\\n    }\\n\\n    /**\\n     * @dev This function exists to make the contract compatible\\n     * with AggregatorV3Interface (which OETHOracleRouter uses to\\n     * get the price).\\n     *\\n     * The `answer` returned by this is same as what `price()` would return.\\n     *\\n     * It doesn't return any data about rounds (since those doesn't exist).\\n     **/\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80,\\n            int256 answer,\\n            uint256,\\n            uint256 updatedAt,\\n            uint80\\n        )\\n    {\\n        answer = _price();\\n        updatedAt = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev This function exists to make the contract compatible\\n     * with AggregatorV3Interface.\\n     *\\n     * Always reverts since there're no round data in this contract.\\n     **/\\n    function getRoundData(uint80)\\n        external\\n        pure\\n        override\\n        returns (\\n            uint80,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint80\\n        )\\n    {\\n        revert(\\\"No data present\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x65456ece84bff9161f0bc83a0d6a0234fe26b60c2587365ed0307d7689b64ea0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637284e416116100a2578063a035b1fe11610071578063a035b1fe14610274578063c7af33521461027c578063d38bfff414610284578063dce52dfa14610297578063feaf968c146102a057600080fd5b80637284e416146101ec578063773540b31461020f5780638456cb59146102225780639a6fc8f51461022a57600080fd5b80633f4ba83a116100e95780633f4ba83a1461019657806354fd4d501461019e578063570d8e1d146101b45780635c975abb146101c75780635d36b190146101e457600080fd5b80630c340a241461011b57806330ff916514610140578063313ce567146101675780633c5fd98214610181575b600080fd5b6101236102a8565b6040516001600160a01b0390911681526020015b60405180910390f35b6101237f000000000000000000000000000000000000000000000000000000000000000081565b61016f601281565b60405160ff9091168152602001610137565b61019461018f366004610c04565b6102c5565b005b61019461035c565b6101a6600181565b604051908152602001610137565b600054610123906001600160a01b031681565b6033546101d49060ff1681565b6040519015158152602001610137565b6101946103d8565b6102026040518060200160405280600081525081565b6040516101379190610cc0565b61019461021d366004610b0f565b61047e565b6101946104ae565b61023d610238366004610c1d565b610583565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610137565b6101a66105c7565b6101d46105d1565b610194610292366004610b0f565b610602565b6101a660345481565b61023d6106a6565b60006102c0600080516020610eed8339815191525490565b905090565b6102cd6105d1565b6102f25760405162461bcd60e51b81526004016102e990610d15565b60405180910390fd5b67016345785d8a000081111561031b57604051631a6278f560e31b815260040160405180910390fd5b60345460408051918252602082018390527f83578fc15e450873d2fb3bd60f83d473be884e7c3b4e459afca1019cde43956f910160405180910390a1603455565b6103646105d1565b6103805760405162461bcd60e51b81526004016102e990610d15565b60335460ff166103a357604051632b224f2560e21b815260040160405180910390fd5b6033805460ff191690556040517fad6bc5d4793981a1bcc5c97b3454b837723f2ea81ded607686ffa5c7879dbffd90600090a1565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146104735760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016102e9565b61047c336106c2565b565b6104866105d1565b6104a25760405162461bcd60e51b81526004016102e990610d15565b6104ab81610783565b50565b6000546001600160a01b03163314806104ca57506104ca6105d1565b6105275760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060448201526723b7bb32b93737b960c11b60648201526084016102e9565b60335460ff161561054b57604051630bedf72960e11b815260040160405180910390fd5b6033805460ff191660011790556040517ff027da09cffaacba1b3e51b1b0fb54c4f512a0cb08029232ec28b460f022504c90600090a1565b600080600080600060405162461bcd60e51b81526004016102e9906020808252600f908201526e139bc819185d18481c1c995cd95b9d608a1b604082015260600190565b60006102c06107d7565b60006105e9600080516020610eed8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61060a6105d1565b6106265760405162461bcd60e51b81526004016102e990610d15565b61064e817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661066e600080516020610eed8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60008060008060006106b66107d7565b93504291509091929394565b6001600160a01b0381166107185760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016102e9565b806001600160a01b0316610738600080516020610eed8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36104ab81600080516020610eed83398151915255565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200160405180910390a150565b60335460009060ff16156107fe57604051630bedf72960e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b61083b6040805160608101909152806000815260200160008152602001600081525090565b8152602001906001900390816108165790505060408051606081019091529091508060008152602001610e10815260200161012c8152508160008151811061088557610885610ec0565b60209081029190910101526040805160608101909152806000815260200161012c81526020016000815250816001815181106108c3576108c3610ec0565b602002602001018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631dccd830836040518263ffffffff1660e01b815260040161091c9190610c49565b60006040518083038186803b15801561093457600080fd5b505afa158015610948573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109709190810190610b3f565b905060006109978260008151811061098a5761098a610ec0565b6020026020010151610a4f565b905060006109b18360018151811061098a5761098a610ec0565b9050600060026109c18385610d4c565b6109cb9190610d8d565b6109d58385610e4e565b6109e790670de0b6b3a7640000610dc9565b6109f19190610d8d565b9050600080821215610a1357610a0e610a0983610e8d565b610abd565b610a1c565b610a1c82610abd565b9050603454811115610a4457604051630688be0b60e41b8152600481018290526024016102e9565b509095945050505050565b60006001600160ff1b03821115610ab95760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016102e9565b5090565b600080821215610ab95760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016102e9565b600060208284031215610b2157600080fd5b81356001600160a01b0381168114610b3857600080fd5b9392505050565b60006020808385031215610b5257600080fd5b825167ffffffffffffffff80821115610b6a57600080fd5b818501915085601f830112610b7e57600080fd5b815181811115610b9057610b90610ed6565b8060051b604051601f19603f83011681018181108582111715610bb557610bb5610ed6565b604052828152858101935084860182860187018a1015610bd457600080fd5b600095505b83861015610bf7578051855260019590950194938601938601610bd9565b5098975050505050505050565b600060208284031215610c1657600080fd5b5035919050565b600060208284031215610c2f57600080fd5b813569ffffffffffffffffffff81168114610b3857600080fd5b60208082528251828201819052600091906040908185019086840185805b83811015610cb2578251805160038110610c8f57634e487b7160e01b84526021600452602484fd5b865280880151888701528601518686015260609094019391860191600101610c67565b509298975050505050505050565b600060208083528351808285015260005b81811015610ced57858101830151858201604001528201610cd1565b81811115610cff576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b600080821280156001600160ff1b0384900385131615610d6e57610d6e610eaa565b600160ff1b8390038412811615610d8757610d87610eaa565b50500190565b600082610daa57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610dc457610dc4610eaa565b500590565b60006001600160ff1b0381841382841380821686840486111615610def57610def610eaa565b600160ff1b6000871282811687830589121615610e0e57610e0e610eaa565b60008712925087820587128484161615610e2a57610e2a610eaa565b87850587128184161615610e4057610e40610eaa565b505050929093029392505050565b60008083128015600160ff1b850184121615610e6c57610e6c610eaa565b6001600160ff1b0384018313811615610e8757610e87610eaa565b50500390565b6000600160ff1b821415610ea357610ea3610eaa565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212201b129e339a473cb6ff688c28439bf0c613967e9e8624dfbe24dbceaa481362b164736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoundData(uint80)": {
        "details": "This function exists to make the contract compatible with AggregatorV3Interface. Always reverts since there're no round data in this contract.*"
      },
      "latestRoundData()": {
        "details": "This function exists to make the contract compatible with AggregatorV3Interface (which OETHOracleRouter uses to get the price). The `answer` returned by this is same as what `price()` would return. It doesn't return any data about rounds (since those doesn't exist).*"
      },
      "price()": {
        "details": "Queries the OracleWeightedPool for TWAP of two intervals (1h data from 5m ago and the recent 5m data) and ensures that the price hasn't deviated too much and returns the most recent TWAP price.",
        "returns": {
          "_0": "price The price scaled to 18 decimals*"
        }
      },
      "setStrategistAddr(address)": {
        "details": "Set address of Strategist",
        "params": {
          "_address": "Address of Strategist"
        }
      },
      "setTolerance(uint256)": {
        "params": {
          "_tolerance": "New tolerance value*"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "pause()": {
        "notice": "Pauses the price feed. Callable by Strategist as well.*"
      },
      "setTolerance(uint256)": {
        "notice": "Set the max amount of tolerance acceptable between two different price points."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "unpause()": {
        "notice": "Unpauses the price feed. Only Governor can call it*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7682,
        "contract": "contracts/oracle/AuraWETHPriceFeed.sol:AuraWETHPriceFeed",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7686,
        "contract": "contracts/oracle/AuraWETHPriceFeed.sol:AuraWETHPriceFeed",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19945,
        "contract": "contracts/oracle/AuraWETHPriceFeed.sol:AuraWETHPriceFeed",
        "label": "paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 19948,
        "contract": "contracts/oracle/AuraWETHPriceFeed.sol:AuraWETHPriceFeed",
        "label": "tolerance",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
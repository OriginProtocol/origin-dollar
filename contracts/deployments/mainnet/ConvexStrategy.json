{
  "address": "0xEe83F8eBB435373f6c231173995cC990697af1B8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_deprecated_cvxRewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_cvxDepositorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cvxRewardStakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cvxDepositorPTokenId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x843422a062d1ee317577832b6b61429bbb0a21904927c3486aed038f0fa7388c",
  "receipt": {
    "to": null,
    "from": "0x69e078EBc4631E1947F0c38Ef0357De7ED064644",
    "contractAddress": "0xEe83F8eBB435373f6c231173995cC990697af1B8",
    "transactionIndex": 105,
    "gasUsed": "2823773",
    "logsBloom": "0x
    "blockHash": "0x1e4f63f3aae76ddae3be6c2863b7ecb910058c4164bb46989a958b8787cf428c",
    "transactionHash": "0x843422a062d1ee317577832b6b61429bbb0a21904927c3486aed038f0fa7388c",
    "logs": [
      {
        "transactionIndex": 105,
        "blockNumber": 14206826,
        "transactionHash": "0x843422a062d1ee317577832b6b61429bbb0a21904927c3486aed038f0fa7388c",
        "address": "0xEe83F8eBB435373f6c231173995cC990697af1B8",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069e078ebc4631e1947f0c38ef0357de7ed064644"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x1e4f63f3aae76ddae3be6c2863b7ecb910058c4164bb46989a958b8787cf428c"
      }
    ],
    "blockNumber": 14206826,
    "cumulativeGasUsed": "7361016",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0d2296c1822a9318e7d4eca895a31e55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_deprecated_cvxRewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_cvxDepositorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxRewardStakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cvxDepositorPTokenId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"details\":\"Get the total asset value held in the platform\",\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated CRV and CVX and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into the Curve 3Pool\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"}},\"depositAll()\":{\"details\":\"Deposit the entire balance of any supported asset into the Curve 3pool\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"initialize(address,address,address[],address[],address[],address,address,uint256)\":{\"params\":{\"_assets\":\"Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                DAI, USDC, USDT\",\"_cvxDepositorAddress\":\"Address of the Convex depositor(AKA booster) for this pool\",\"_cvxDepositorPTokenId\":\"Pid of the pool referred to by Depositor and staker\",\"_cvxRewardStakerAddress\":\"Address of the CVX rewards staker\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Address of the Curve 3pool\",\"_rewardTokenAddresses\":\"Address of CRV & CVX\",\"_vaultAddress\":\"Address of the vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from Curve 3Pool\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_asset\":\"Address of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address[],address[],address[],address,address,uint256)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/ConvexStrategy.sol\":\"ConvexStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x29d258134253bdaeeea64c17baaf6108ff50aec65ceddb7216ef3a948a88808c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcabd808c03076fa6fb5838a13210b2b99314d23842e0e3d5e55e0c1466e75212\",\"license\":\"agpl-3.0\"},\"contracts/strategies/BaseCurveStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Curve 3Pool Strategy\\n * @notice Investment strategy for investing stablecoins via Curve 3Pool\\n * @author Origin Protocol Inc\\n */\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { ICurvePool } from \\\"./ICurvePool.sol\\\";\\nimport { ICRVMinter } from \\\"./ICRVMinter.sol\\\";\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\n\\nabstract contract BaseCurveStrategy is InitializableAbstractStrategy {\\n    using StableMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant maxSlippage = 1e16; // 1%, same as the Curve UI\\n    address internal pTokenAddress;\\n\\n    /**\\n     * @dev Deposit asset into the Curve 3Pool\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n        emit Deposit(_asset, address(platformAddress), _amount);\\n        // 3Pool requires passing deposit amounts for all 3 assets, set to 0 for\\n        // all\\n        uint256[3] memory _amounts;\\n        uint256 poolCoinIndex = _getCoinIndex(_asset);\\n        // Set the amount on the asset we want to deposit\\n        _amounts[poolCoinIndex] = _amount;\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\\n        uint256 depositValue = _amount.scaleBy(18, assetDecimals).divPrecisely(\\n            curvePool.get_virtual_price()\\n        );\\n        uint256 minMintAmount = depositValue.mulTruncate(\\n            uint256(1e18) - maxSlippage\\n        );\\n        // Do the deposit to 3pool\\n        curvePool.add_liquidity(_amounts, minMintAmount);\\n        _lpDepositAll();\\n    }\\n\\n    function _lpDepositAll() internal virtual;\\n\\n    /**\\n     * @dev Deposit the entire balance of any supported asset into the Curve 3pool\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        uint256[3] memory _amounts = [uint256(0), uint256(0), uint256(0)];\\n        uint256 depositValue = 0;\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\n        uint256 curveVirtualPrice = curvePool.get_virtual_price();\\n\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            address assetAddress = assetsMapped[i];\\n            uint256 balance = IERC20(assetAddress).balanceOf(address(this));\\n            if (balance > 0) {\\n                uint256 poolCoinIndex = _getCoinIndex(assetAddress);\\n                // Set the amount on the asset we want to deposit\\n                _amounts[poolCoinIndex] = balance;\\n                uint256 assetDecimals = Helpers.getDecimals(assetAddress);\\n                // Get value of deposit in Curve LP token to later determine\\n                // the minMintAmount argument for add_liquidity\\n                depositValue =\\n                    depositValue +\\n                    balance.scaleBy(18, assetDecimals).divPrecisely(\\n                        curveVirtualPrice\\n                    );\\n                emit Deposit(assetAddress, address(platformAddress), balance);\\n            }\\n        }\\n\\n        uint256 minMintAmount = depositValue.mulTruncate(\\n            uint256(1e18) - maxSlippage\\n        );\\n        // Do the deposit to 3pool\\n        curvePool.add_liquidity(_amounts, minMintAmount);\\n        // Deposit into Gauge, the PToken is the same (3Crv) for all mapped\\n        // assets, so just get the address from the first one\\n        _lpDepositAll();\\n    }\\n\\n    function _lpWithdraw(uint256 numPTokens) internal virtual;\\n\\n    /**\\n     * @dev Withdraw asset from Curve 3Pool\\n     * @param _recipient Address to receive withdrawn asset\\n     * @param _asset Address of asset to withdraw\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        emit Withdrawal(_asset, address(assetToPToken[_asset]), _amount);\\n\\n        (uint256 contractPTokens, , uint256 totalPTokens) = _getTotalPTokens();\\n\\n        uint256 coinIndex = _getCoinIndex(_asset);\\n        int128 curveCoinIndex = int128(uint128(coinIndex));\\n        // Calculate the max amount of the asset we'd get if we withdrew all the\\n        // platform tokens\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\n        // Calculate how many platform tokens we need to withdraw the asset\\n        // amount in the worst case (i.e withdrawing all LP tokens)\\n        uint256 maxAmount = curvePool.calc_withdraw_one_coin(\\n            totalPTokens,\\n            curveCoinIndex\\n        );\\n        uint256 maxBurnedPTokens = (totalPTokens * _amount) / maxAmount;\\n\\n        // Not enough in this contract or in the Gauge, can't proceed\\n        require(totalPTokens > maxBurnedPTokens, \\\"Insufficient 3CRV balance\\\");\\n        // We have enough LP tokens, make sure they are all on this contract\\n        if (contractPTokens < maxBurnedPTokens) {\\n            _lpWithdraw(maxBurnedPTokens - contractPTokens);\\n        }\\n\\n        uint256[3] memory _amounts = [uint256(0), uint256(0), uint256(0)];\\n        _amounts[coinIndex] = _amount;\\n        curvePool.remove_liquidity_imbalance(_amounts, maxBurnedPTokens);\\n\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Remove all assets from platform and send them to Vault contract.\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        // Withdraw all from Gauge\\n        (, uint256 gaugePTokens, uint256 totalPTokens) = _getTotalPTokens();\\n        _lpWithdraw(gaugePTokens);\\n        // Withdraws are proportional to assets held by 3Pool\\n        uint256[3] memory minWithdrawAmounts = [\\n            uint256(0),\\n            uint256(0),\\n            uint256(0)\\n        ];\\n        // Remove liquidity\\n        ICurvePool threePool = ICurvePool(platformAddress);\\n        threePool.remove_liquidity(totalPTokens, minWithdrawAmounts);\\n        // Transfer assets out of Vault\\n        // Note that Curve will provide all 3 of the assets in 3pool even if\\n        // we have not set PToken addresses for all of them in this strategy\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            IERC20 asset = IERC20(threePool.coins(i));\\n            asset.safeTransfer(vaultAddress, asset.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        public\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        require(assetToPToken[_asset] != address(0), \\\"Unsupported asset\\\");\\n        // LP tokens in this contract. This should generally be nothing as we\\n        // should always stake the full balance in the Gauge, but include for\\n        // safety\\n        (, , uint256 totalPTokens) = _getTotalPTokens();\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\n        if (totalPTokens > 0) {\\n            uint256 virtual_price = curvePool.get_virtual_price();\\n            uint256 value = (totalPTokens * virtual_price) / 1e18;\\n            uint256 assetDecimals = Helpers.getDecimals(_asset);\\n            balance = value.scaleBy(assetDecimals, 18) / 3;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return assetToPToken[_asset] != address(0);\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets by their corresponding pool tokens,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens()\\n        external\\n        override\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        _approveBase();\\n        // This strategy is a special case since it only supports one asset\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            _approveAsset(assetsMapped[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate the total platform token balance (i.e. 3CRV) that exist in\\n     * this contract or is staked in the Gauge (or in other words, the total\\n     * amount platform tokens we own).\\n     * @return contractPTokens Amount of platform tokens in this contract\\n     * @return gaugePTokens Amount of platform tokens staked in gauge\\n     * @return totalPTokens Total amount of platform tokens in native decimals\\n     */\\n    function _getTotalPTokens()\\n        internal\\n        view\\n        virtual\\n        returns (\\n            uint256 contractPTokens,\\n            uint256 gaugePTokens,\\n            uint256 totalPTokens\\n        );\\n\\n    /**\\n     * @dev Call the necessary approvals for the Curve pool and gauge\\n     * @param _asset Address of the asset\\n     */\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        override\\n    {\\n        _approveAsset(_asset);\\n    }\\n\\n    function _approveAsset(address _asset) internal {\\n        IERC20 asset = IERC20(_asset);\\n        // 3Pool for asset (required for adding liquidity)\\n        asset.safeApprove(platformAddress, 0);\\n        asset.safeApprove(platformAddress, type(uint256).max);\\n    }\\n\\n    function _approveBase() internal virtual;\\n\\n    /**\\n     * @dev Get the index of the coin\\n     */\\n    function _getCoinIndex(address _asset) internal view returns (uint256) {\\n        for (uint256 i = 0; i < 3; i++) {\\n            if (assetsMapped[i] == _asset) return i;\\n        }\\n        revert(\\\"Invalid 3pool asset\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8aa30fd3b68bd495470a73a44c50736563507a4d49c20c6a7eadafd9708e5391\",\"license\":\"agpl-3.0\"},\"contracts/strategies/ConvexStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Curve Convex Strategy\\n * @notice Investment strategy for investing stablecoins via Curve 3Pool\\n * @author Origin Protocol Inc\\n */\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IRewardStaking } from \\\"./IRewardStaking.sol\\\";\\nimport { IConvexDeposits } from \\\"./IConvexDeposits.sol\\\";\\nimport { IERC20, BaseCurveStrategy } from \\\"./BaseCurveStrategy.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\n\\ncontract ConvexStrategy is BaseCurveStrategy {\\n    using StableMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address internal cvxDepositorAddress;\\n    address internal cvxRewardStakerAddress;\\n    // slither-disable-next-line constable-states\\n    address public _deprecated_cvxRewardTokenAddress;\\n    uint256 internal cvxDepositorPTokenId;\\n\\n    /**\\n     * Initializer for setting up strategy internal state. This overrides the\\n     * InitializableAbstractStrategy initializer as Curve strategies don't fit\\n     * well within that abstraction.\\n     * @param _platformAddress Address of the Curve 3pool\\n     * @param _vaultAddress Address of the vault\\n     * @param _rewardTokenAddresses Address of CRV & CVX\\n     * @param _assets Addresses of supported assets. MUST be passed in the same\\n     *                order as returned by coins on the pool contract, i.e.\\n     *                DAI, USDC, USDT\\n     * @param _pTokens Platform Token corresponding addresses\\n     * @param _cvxDepositorAddress Address of the Convex depositor(AKA booster) for this pool\\n     * @param _cvxRewardStakerAddress Address of the CVX rewards staker\\n     * @param _cvxDepositorPTokenId Pid of the pool referred to by Depositor and staker\\n     */\\n    function initialize(\\n        address _platformAddress, // 3Pool address\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses, // CRV + CVX\\n        address[] calldata _assets,\\n        address[] calldata _pTokens,\\n        address _cvxDepositorAddress,\\n        address _cvxRewardStakerAddress,\\n        uint256 _cvxDepositorPTokenId\\n    ) external onlyGovernor initializer {\\n        require(_assets.length == 3, \\\"Must have exactly three assets\\\");\\n        // Should be set prior to abstract initialize call otherwise\\n        // abstractSetPToken calls will fail\\n        cvxDepositorAddress = _cvxDepositorAddress;\\n        cvxRewardStakerAddress = _cvxRewardStakerAddress;\\n        cvxDepositorPTokenId = _cvxDepositorPTokenId;\\n        pTokenAddress = _pTokens[0];\\n\\n        super._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n        _approveBase();\\n    }\\n\\n    function _lpDepositAll() internal override {\\n        IERC20 pToken = IERC20(pTokenAddress);\\n        // Deposit with staking\\n        bool success = IConvexDeposits(cvxDepositorAddress).deposit(\\n            cvxDepositorPTokenId,\\n            pToken.balanceOf(address(this)),\\n            true\\n        );\\n        require(success, \\\"Failed to deposit to Convex\\\");\\n    }\\n\\n    function _lpWithdraw(uint256 numPTokens) internal override {\\n        // withdraw and unwrap with claim takes back the lpTokens and also collects the rewards to this\\n        IRewardStaking(cvxRewardStakerAddress).withdrawAndUnwrap(\\n            numPTokens,\\n            true\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculate the total platform token balance (i.e. 3CRV) that exist in\\n     * this contract or is staked in the Gauge (or in other words, the total\\n     * amount platform tokens we own).\\n     * @return contractPTokens Amount of platform tokens in this contract\\n     * @return gaugePTokens Amount of platform tokens staked in gauge\\n     * @return totalPTokens Total amount of platform tokens in native decimals\\n     */\\n    function _getTotalPTokens()\\n        internal\\n        view\\n        override\\n        returns (\\n            uint256 contractPTokens,\\n            uint256 gaugePTokens, // gauge is a misnomer here, need a better name\\n            uint256 totalPTokens\\n        )\\n    {\\n        contractPTokens = IERC20(pTokenAddress).balanceOf(address(this));\\n        gaugePTokens = IRewardStaking(cvxRewardStakerAddress).balanceOf(\\n            address(this)\\n        ); //booster.poolInfo[pid].token.balanceOf(address(this)) Not needed if we always stake..\\n        totalPTokens = contractPTokens + gaugePTokens;\\n    }\\n\\n    function _approveBase() internal override {\\n        IERC20 pToken = IERC20(pTokenAddress);\\n        // 3Pool for LP token (required for removing liquidity)\\n        pToken.safeApprove(platformAddress, 0);\\n        pToken.safeApprove(platformAddress, type(uint256).max);\\n        // Gauge for LP token\\n        pToken.safeApprove(cvxDepositorAddress, 0);\\n        pToken.safeApprove(cvxDepositorAddress, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Collect accumulated CRV and CVX and send to Vault.\\n     */\\n    function collectRewardTokens()\\n        external\\n        override\\n        onlyHarvester\\n        nonReentrant\\n    {\\n        // Collect CRV and CVX\\n        IRewardStaking(cvxRewardStakerAddress).getReward();\\n        _collectRewardTokens();\\n    }\\n}\\n\",\"keccak256\":\"0x457e3f473b8cc1993eccbb3438845a46215b1759894c0ff7a130b201c1a6b350\",\"license\":\"agpl-3.0\"},\"contracts/strategies/ICRVMinter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ICRVMinter {\\n    function mint(address gaugeAddress) external;\\n}\\n\",\"keccak256\":\"0x2b688e8ee9b61faeaf9362bb3d5f21f622fc1a2c2eec81badde983e9a34b16c5\",\"license\":\"agpl-3.0\"},\"contracts/strategies/IConvexDeposits.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IConvexDeposits {\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function deposit(\\n        uint256 _amount,\\n        bool _lock,\\n        address _stakeAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaeb8e3858c2678e4e915c4f8f30d07941de7bc62139513f4443a041c3f224364\",\"license\":\"agpl-3.0\"},\"contracts/strategies/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _deposit)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _amount,\\n        int128 _index,\\n        uint256 _minAmount\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] calldata _minWithdrawAmounts\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _amount, int128 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function coins(uint256 _index) external view returns (address);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata _amounts,\\n        uint256 maxBurnAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd1faec85f8e7c5b29526b14770e9f4e7b29a542a7378c9b58574280b7bd94131\",\"license\":\"agpl-3.0\"},\"contracts/strategies/IRewardStaking.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IRewardStaking {\\n    function stakeFor(address, uint256) external;\\n\\n    function stake(uint256) external;\\n\\n    function withdraw(uint256 amount, bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function extraRewardsLength() external returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external returns (address);\\n\\n    function rewardToken() external returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06ca761842121009d3fe326fd61d3108fdad0ac2c95b94b723a322228578d8b2\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce41c7eacd2b6722029bd87759fe6e4d9b48a862277707737be82c94581b855\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xff2a83835ed8984e10338905bc31dbcaeeabdfc0e58d49257389cb1e5a3b9d8a\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    // Core address for the given platform\\n    address public platformAddress;\\n\\n    address public vaultAddress;\\n\\n    // asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    // Full list of all assets supported here\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address public _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\n\\n    // Address of the one address allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    // Reward token addresses\\n    address[] public rewardTokenAddresses;\\n    // Reserved for future expansion\\n    int256[98] private _reserved;\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _platformAddress Generic platform address\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    function _collectRewardTokens() internal {\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            emit RewardTokenCollected(\\n                harvesterAddress,\\n                rewardTokenAddresses[i],\\n                balance\\n            );\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _rewardTokenAddresses Address array of the reward token\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _harvesterAddress Address of the harvester\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        harvesterAddress = _harvesterAddress;\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @dev Deposit an amount of asset into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @dev Deposit balance of all supported assets into the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the platform.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @dev Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xea76d28ab651be15bec88ab73611a54efb38942d98adf36a1d64367fc7418eb6\",\"license\":\"agpl-3.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd9c475e374285f00f73351de859ed44b490f9989baee63c2d5db79b41aa9e8\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610028336000805160206200322983398151915255565b60008051602062003229833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36131a980620000806000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80639688d2fc116100f9578063d38bfff411610097578063de5f626811610071578063de5f6268146103bd578063f08aa030146103c5578063f6ca71b0146103d8578063f817bc63146103ed57600080fd5b8063d38bfff414610384578063d9caed1214610397578063dbe55e56146103aa57600080fd5b8063aa388af6116100d3578063aa388af614610323578063ad1728cb14610361578063c2e1e3f414610369578063c7af33521461037c57600080fd5b80639688d2fc146102ea57806396d538bb146102fd5780639aaca3e61461031057600080fd5b80635a063f631161016657806367c7066c1161014057806367c7066c146102a95780637b2d9b2c146102bc578063853828b6146102cf5780639136616a146102d757600080fd5b80635a063f63146102785780635d36b190146102805780635f5152261461028857600080fd5b80631072cbea116101a25780631072cbea1461022c5780632e6552011461023f578063430bf08a1461025257806347e7ef241461026557600080fd5b80630c340a24146101c95780630ed57b3a146101ee5780630fc3b4c414610203575b600080fd5b6101d16103f6565b6040516001600160a01b0390911681526020015b60405180910390f35b6102016101fc3660046129c2565b610413565b005b6101d1610211366004612988565b6035602052600090815260409020546001600160a01b031681565b61020161023a366004612be5565b61044e565b6037546101d1906001600160a01b031681565b6034546101d1906001600160a01b031681565b610201610273366004612be5565b61048e565b6102016106f1565b6102016107f8565b61029b610296366004612988565b61089e565b6040519081526020016101e5565b6039546101d1906001600160a01b031681565b6101d16102ca366004612c75565b6109e5565b610201610a0f565b6102016102e5366004612c75565b610ca4565b6102016102f83660046129fb565b610e6f565b61020161030b366004612c11565b610f78565b61020161031e366004612aba565b61109e565b610351610331366004612988565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101e5565b610201611294565b610201610377366004612988565b61134d565b6103516113cc565b610201610392366004612988565b6113fd565b6102016103a5366004612ba4565b6114a1565b6033546101d1906001600160a01b031681565b610201611789565b60a0546101d1906001600160a01b031681565b6103e0611a79565b6040516101e59190612d0f565b61029b60385481565b600061040e6000805160206131548339815191525490565b905090565b61041b6113cc565b6104405760405162461bcd60e51b815260040161043790612e79565b60405180910390fd5b61044a8282611adb565b5050565b6104566113cc565b6104725760405162461bcd60e51b815260040161043790612e79565b61044a61047d6103f6565b6001600160a01b0384169083611c40565b6034546001600160a01b031633146104b85760405162461bcd60e51b815260040161043790612e42565b600080516020613134833981519152805460028114156104ea5760405162461bcd60e51b815260040161043790612efe565b60028255600083116105375760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610437565b603354604080516001600160a01b03928316815260208101869052918616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2610589612896565b600061059486611ca3565b9050848282600381106105a9576105a9613108565b60200201526033546001600160a01b031660006105c588611d3f565b9050600061064f836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612c8e565b6106498a601286611e2e565b90611e92565b9050600061067661066f662386f26fc10000670de0b6b3a764000061307e565b8390611ebb565b604051634515cef360e01b81529091506001600160a01b03851690634515cef3906106a79089908590600401612df4565b600060405180830381600087803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b505050506106e1611ed0565b5050505050506001825550505050565b6039546001600160a01b0316331461074b5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610437565b6000805160206131348339815191528054600281141561077d5760405162461bcd60e51b815260040161043790612efe565b60028255609f60009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107d157600080fd5b505af11580156107e5573d6000803e3d6000fd5b505050506107f161202a565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146108935760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610437565b61089c33612185565b565b6001600160a01b038181166000908152603560205260408120549091166108fb5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b6044820152606401610437565b6000610905612246565b6033549093506001600160a01b031691505081156109de576000816001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612c8e565b90506000670de0b6b3a76400006109a7838661305f565b6109b19190612f52565b905060006109be87611d3f565b905060036109ce83836012611e2e565b6109d89190612f52565b95505050505b5050919050565b603a81815481106109f557600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610a405750610a2b6103f6565b6001600160a01b0316336001600160a01b0316145b610a985760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610437565b60008051602061313483398151915280546002811415610aca5760405162461bcd60e51b815260040161043790612efe565b60028255600080610ad9612246565b9250925050610ae782612355565b6040805160608101825260008082526020820181905281830152603354915163ecb586a560e01b815290916001600160a01b031690819063ecb586a590610b349086908690600401612f26565b600060405180830381600087803b158015610b4e57600080fd5b505af1158015610b62573d6000803e3d6000fd5b5050505060005b603654811015610c975760405163c661065760e01b8152600481018290526000906001600160a01b0384169063c66106579060240160206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee91906129a5565b6034546040516370a0823160e01b8152306004820152919250610c84916001600160a01b03918216918416906370a082319060240160206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190612c8e565b6001600160a01b0384169190611c40565b5080610c8f816130c1565b915050610b69565b5050505050600182555050565b610cac6113cc565b610cc85760405162461bcd60e51b815260040161043790612e79565b6036548110610d095760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610437565b600060368281548110610d1e57610d1e613108565b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690610d5b9060019061307e565b831015610ddd5760368054610d729060019061307e565b81548110610d8257610d82613108565b600091825260209091200154603680546001600160a01b039092169185908110610dae57610dae613108565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6036805480610dee57610dee6130f2565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b610e776113cc565b610e935760405162461bcd60e51b815260040161043790612e79565b600054610100900460ff1680610eac575060005460ff16155b610ec85760405162461bcd60e51b815260040161043790612eb0565b600054610100900460ff16158015610eea576000805461ffff19166101011790555b610f5b8989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152506123bd92505050565b8015610f6d576000805461ff00191690555b505050505050505050565b610f806113cc565b610f9c5760405162461bcd60e51b815260040161043790612e79565b60005b81811015611050576000838383818110610fbb57610fbb613108565b9050602002016020810190610fd09190612988565b6001600160a01b0316141561103e5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610437565b80611048816130c1565b915050610f9f565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161108593929190612d5c565b60405180910390a1611099603a83836128b4565b505050565b6110a66113cc565b6110c25760405162461bcd60e51b815260040161043790612e79565b600054610100900460ff16806110db575060005460ff16155b6110f75760405162461bcd60e51b815260040161043790612eb0565b600054610100900460ff16158015611119576000805461ffff19166101011790555b600387146111695760405162461bcd60e51b815260206004820152601e60248201527f4d75737420686176652065786163746c792074687265652061737365747300006044820152606401610437565b609e80546001600160a01b038087166001600160a01b031992831617909255609f80549286169290911691909117905560a182905585856000816111af576111af613108565b90506020020160208101906111c49190612988565b609d60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061126c8c8c8c8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506123bd92505050565b6112746124a6565b8015611286576000805461ff00191690555b505050505050505050505050565b61129c6113cc565b6112b85760405162461bcd60e51b815260040161043790612e79565b600080516020613134833981519152805460028114156112ea5760405162461bcd60e51b815260040161043790612efe565b600282556112f66124a6565b60005b603654811015611345576113336036828154811061131957611319613108565b6000918252602090912001546001600160a01b0316612519565b8061133d816130c1565b9150506112f9565b505060019055565b6113556113cc565b6113715760405162461bcd60e51b815260040161043790612e79565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60006113e46000805160206131548339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6114056113cc565b6114215760405162461bcd60e51b815260040161043790612e79565b611449817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166114696000805160206131548339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146114cb5760405162461bcd60e51b815260040161043790612e42565b600080516020613134833981519152805460028114156114fd5760405162461bcd60e51b815260040161043790612efe565b60028255600083116115425760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610437565b6001600160a01b0384811660008181526035602090815260409182902054825194168452830186905290917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a26000806115a3612246565b925050915060006115b387611ca3565b60335460405163cc2b27d760e01b815260048101859052600f83900b602482015291925082916001600160a01b0390911690600090829063cc2b27d79060440160206040518083038186803b15801561160b57600080fd5b505afa15801561161f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116439190612c8e565b90506000816116528b8861305f565b61165c9190612f52565b90508086116116ad5760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420334352562062616c616e6365000000000000006044820152606401610437565b808710156116c7576116c76116c2888361307e565b612355565b600060405180606001604052806000815260200160008152602001600081525090508a8187600381106116fc576116fc613108565b60200201526040516327f6ba8360e21b81526001600160a01b03851690639fdaea0c9061172f9084908690600401612df4565b600060405180830381600087803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b50611776925050506001600160a01b038d168e8d611c40565b5050505050505050600182555050505050565b6034546001600160a01b031633146117b35760405162461bcd60e51b815260040161043790612e42565b600080516020613134833981519152805460028114156117e55760405162461bcd60e51b815260040161043790612efe565b6002825560408051606081018252600080825260208083018290528284018290526033548451630176f71760e71b81529451939492936001600160a01b03909116928492849263bb7b8b80926004808201939291829003018186803b15801561184d57600080fd5b505afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118859190612c8e565b905060005b6036548110156119e8576000603682815481106118a9576118a9613108565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156118f757600080fd5b505afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f9190612c8e565b905080156119d357600061194283611ca3565b90508188826003811061195757611957613108565b6020020152600061196784611d3f565b90506119798661064985601285611e2e565b6119839089612f3a565b603354604080516001600160a01b03928316815260208101879052929a50908616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a250505b505080806119e0906130c1565b91505061188a565b506000611a0e611a07662386f26fc10000670de0b6b3a764000061307e565b8590611ebb565b604051634515cef360e01b81529091506001600160a01b03841690634515cef390611a3f9088908590600401612df4565b600060405180830381600087803b158015611a5957600080fd5b505af1158015611a6d573d6000803e3d6000fd5b50505050610c97611ed0565b6060603a805480602002602001604051908101604052809291908181526020018280548015611ad157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ab3575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611b385760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610437565b6001600160a01b03821615801590611b5857506001600160a01b03811615155b611b985760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610437565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a261044a8282612552565b6040516001600160a01b03831660248201526044810182905261109990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261255b565b6000805b6003811015611d0057826001600160a01b031660368281548110611ccd57611ccd613108565b6000918252602090912001546001600160a01b03161415611cee5792915050565b80611cf8816130c1565b915050611ca7565b5060405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59080cdc1bdbdb08185cdcd95d606a1b6044820152606401610437565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7b57600080fd5b505afa158015611d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db39190612ca7565b60ff16905060048110158015611dca575060128111155b611e285760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610437565b92915050565b600081831115611e5e57611e57611e45838561307e565b611e5090600a612fb7565b859061262d565b9350611e88565b81831015611e8857611e85611e73848461307e565b611e7e90600a612fb7565b8590612639565b93505b50825b9392505050565b600080611ea784670de0b6b3a764000061262d565b9050611eb38184612639565b949350505050565b6000611e8b8383670de0b6b3a7640000612645565b609d54609e5460a1546040516370a0823160e01b81523060048201526001600160a01b039384169360009316916343a0d0669185906370a082319060240160206040518083038186803b158015611f2657600080fd5b505afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190612c8e565b6040516001600160e01b031960e085901b1681526004810192909252602482015260016044820152606401602060405180830381600087803b158015611fa357600080fd5b505af1158015611fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdb9190612c53565b90508061044a5760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f206465706f73697420746f20436f6e76657800000000006044820152606401610437565b60005b603a54811015612182576000603a828154811061204c5761204c613108565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561209a57600080fd5b505afa1580156120ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d29190612c8e565b603954603a80549293507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353926001600160a01b03909216918690811061211a5761211a613108565b60009182526020918290200154604080516001600160a01b0394851681529390911691830191909152810183905260600160405180910390a160395461216d906001600160a01b03848116911683611c40565b5050808061217a906130c1565b91505061202d565b50565b6001600160a01b0381166121db5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610437565b806001600160a01b03166121fb6000805160206131548339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36121828160008051602061315483398151915255565b609d546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b15801561228e57600080fd5b505afa1580156122a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c69190612c8e565b609f546040516370a0823160e01b81523060048201529194506001600160a01b0316906370a082319060240160206040518083038186803b15801561230a57600080fd5b505afa15801561231e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123429190612c8e565b915061234e8284612f3a565b9050909192565b609f54604051636197390160e11b815260048101839052600160248201526001600160a01b039091169063c32e720290604401600060405180830381600087803b1580156123a257600080fd5b505af11580156123b6573d6000803e3d6000fd5b5050505050565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556123f9603a85856128b4565b508151815181146124435760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610437565b60005b8181101561249c5761248a84828151811061246357612463613108565b602002602001015184838151811061247d5761247d613108565b6020026020010151611adb565b80612494816130c1565b915050612446565b5050505050505050565b609d546033546001600160a01b03918216916124c6918391166000612667565b6033546124e2906001600160a01b038381169116600019612667565b609e546124fd906001600160a01b0383811691166000612667565b609e54612182906001600160a01b038381169116600019612667565b6033548190612536906001600160a01b0380841691166000612667565b60335461044a906001600160a01b038381169116600019612667565b61044a82612519565b60006125b0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661278b9092919063ffffffff16565b80519091501561109957808060200190518101906125ce9190612c53565b6110995760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610437565b6000611e8b828461305f565b6000611e8b8284612f52565b600080612652858561262d565b905061265e8184612639565b95945050505050565b8015806126f05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156126b657600080fd5b505afa1580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee9190612c8e565b155b61275b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610437565b6040516001600160a01b03831660248201526044810182905261109990849063095ea7b360e01b90606401611c6c565b6060611eb3848460008585843b6127e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610437565b600080866001600160a01b031685876040516128009190612cf3565b60006040518083038185875af1925050503d806000811461283d576040519150601f19603f3d011682016040523d82523d6000602084013e612842565b606091505b509150915061285282828661285d565b979650505050505050565b6060831561286c575081611e8b565b82511561287c5782518084602001fd5b8160405162461bcd60e51b81526004016104379190612e0f565b60405180606001604052806003906020820280368337509192915050565b828054828255906000526020600020908101928215612907579160200282015b828111156129075781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906128d4565b50612913929150612917565b5090565b5b808211156129135760008155600101612918565b80356129378161311e565b919050565b60008083601f84011261294e57600080fd5b50813567ffffffffffffffff81111561296657600080fd5b6020830191508360208260051b850101111561298157600080fd5b9250929050565b60006020828403121561299a57600080fd5b8135611e8b8161311e565b6000602082840312156129b757600080fd5b8151611e8b8161311e565b600080604083850312156129d557600080fd5b82356129e08161311e565b915060208301356129f08161311e565b809150509250929050565b60008060008060008060008060a0898b031215612a1757600080fd5b8835612a228161311e565b97506020890135612a328161311e565b9650604089013567ffffffffffffffff80821115612a4f57600080fd5b612a5b8c838d0161293c565b909850965060608b0135915080821115612a7457600080fd5b612a808c838d0161293c565b909650945060808b0135915080821115612a9957600080fd5b50612aa68b828c0161293c565b999c989b5096995094979396929594505050565b60008060008060008060008060008060006101008c8e031215612adc57600080fd5b612ae58c61292c565b9a50612af360208d0161292c565b995067ffffffffffffffff8060408e01351115612b0f57600080fd5b612b1f8e60408f01358f0161293c565b909a50985060608d0135811015612b3557600080fd5b612b458e60608f01358f0161293c565b909850965060808d0135811015612b5b57600080fd5b50612b6c8d60808e01358e0161293c565b9095509350612b7d60a08d0161292c565b9250612b8b60c08d0161292c565b915060e08c013590509295989b509295989b9093969950565b600080600060608486031215612bb957600080fd5b8335612bc48161311e565b92506020840135612bd48161311e565b929592945050506040919091013590565b60008060408385031215612bf857600080fd5b8235612c038161311e565b946020939093013593505050565b60008060208385031215612c2457600080fd5b823567ffffffffffffffff811115612c3b57600080fd5b612c478582860161293c565b90969095509350505050565b600060208284031215612c6557600080fd5b81518015158114611e8b57600080fd5b600060208284031215612c8757600080fd5b5035919050565b600060208284031215612ca057600080fd5b5051919050565b600060208284031215612cb957600080fd5b815160ff81168114611e8b57600080fd5b8060005b6003811015612ced578151845260209384019390910190600101612cce565b50505050565b60008251612d05818460208701613095565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612d505783516001600160a01b031683529284019291840191600101612d2b565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612da65781546001600160a01b031684529284019260019182019101612d81565b505050838103828501528481528590820160005b86811015612de8578235612dcd8161311e565b6001600160a01b031682529183019190830190600101612dba565b50979650505050505050565b60808101612e028285612cca565b8260608301529392505050565b6020815260008251806020840152612e2e816040850160208701613095565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b82815260808101611e8b6020830184612cca565b60008219821115612f4d57612f4d6130dc565b500190565b600082612f6f57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612faf578160001904821115612f9557612f956130dc565b80851615612fa257918102915b93841c9390800290612f79565b509250929050565b6000611e8b8383600082612fcd57506001611e28565b81612fda57506000611e28565b8160018114612ff05760028114612ffa57613016565b6001915050611e28565b60ff84111561300b5761300b6130dc565b50506001821b611e28565b5060208310610133831016604e8410600b8410161715613039575081810a611e28565b6130438383612f74565b8060001904821115613057576130576130dc565b029392505050565b6000816000190483118215151615613079576130796130dc565b500290565b600082821015613090576130906130dc565b500390565b60005b838110156130b0578181015183820152602001613098565b83811115612ced5750506000910152565b60006000198214156130d5576130d56130dc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461218257600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220eef156762a9dc171f4edd919ed4f304b9ff1fdd419d7a9f0ac97bf258a15a51a64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80639688d2fc116100f9578063d38bfff411610097578063de5f626811610071578063de5f6268146103bd578063f08aa030146103c5578063f6ca71b0146103d8578063f817bc63146103ed57600080fd5b8063d38bfff414610384578063d9caed1214610397578063dbe55e56146103aa57600080fd5b8063aa388af6116100d3578063aa388af614610323578063ad1728cb14610361578063c2e1e3f414610369578063c7af33521461037c57600080fd5b80639688d2fc146102ea57806396d538bb146102fd5780639aaca3e61461031057600080fd5b80635a063f631161016657806367c7066c1161014057806367c7066c146102a95780637b2d9b2c146102bc578063853828b6146102cf5780639136616a146102d757600080fd5b80635a063f63146102785780635d36b190146102805780635f5152261461028857600080fd5b80631072cbea116101a25780631072cbea1461022c5780632e6552011461023f578063430bf08a1461025257806347e7ef241461026557600080fd5b80630c340a24146101c95780630ed57b3a146101ee5780630fc3b4c414610203575b600080fd5b6101d16103f6565b6040516001600160a01b0390911681526020015b60405180910390f35b6102016101fc3660046129c2565b610413565b005b6101d1610211366004612988565b6035602052600090815260409020546001600160a01b031681565b61020161023a366004612be5565b61044e565b6037546101d1906001600160a01b031681565b6034546101d1906001600160a01b031681565b610201610273366004612be5565b61048e565b6102016106f1565b6102016107f8565b61029b610296366004612988565b61089e565b6040519081526020016101e5565b6039546101d1906001600160a01b031681565b6101d16102ca366004612c75565b6109e5565b610201610a0f565b6102016102e5366004612c75565b610ca4565b6102016102f83660046129fb565b610e6f565b61020161030b366004612c11565b610f78565b61020161031e366004612aba565b61109e565b610351610331366004612988565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101e5565b610201611294565b610201610377366004612988565b61134d565b6103516113cc565b610201610392366004612988565b6113fd565b6102016103a5366004612ba4565b6114a1565b6033546101d1906001600160a01b031681565b610201611789565b60a0546101d1906001600160a01b031681565b6103e0611a79565b6040516101e59190612d0f565b61029b60385481565b600061040e6000805160206131548339815191525490565b905090565b61041b6113cc565b6104405760405162461bcd60e51b815260040161043790612e79565b60405180910390fd5b61044a8282611adb565b5050565b6104566113cc565b6104725760405162461bcd60e51b815260040161043790612e79565b61044a61047d6103f6565b6001600160a01b0384169083611c40565b6034546001600160a01b031633146104b85760405162461bcd60e51b815260040161043790612e42565b600080516020613134833981519152805460028114156104ea5760405162461bcd60e51b815260040161043790612efe565b60028255600083116105375760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610437565b603354604080516001600160a01b03928316815260208101869052918616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2610589612896565b600061059486611ca3565b9050848282600381106105a9576105a9613108565b60200201526033546001600160a01b031660006105c588611d3f565b9050600061064f836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612c8e565b6106498a601286611e2e565b90611e92565b9050600061067661066f662386f26fc10000670de0b6b3a764000061307e565b8390611ebb565b604051634515cef360e01b81529091506001600160a01b03851690634515cef3906106a79089908590600401612df4565b600060405180830381600087803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b505050506106e1611ed0565b5050505050506001825550505050565b6039546001600160a01b0316331461074b5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610437565b6000805160206131348339815191528054600281141561077d5760405162461bcd60e51b815260040161043790612efe565b60028255609f60009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107d157600080fd5b505af11580156107e5573d6000803e3d6000fd5b505050506107f161202a565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146108935760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610437565b61089c33612185565b565b6001600160a01b038181166000908152603560205260408120549091166108fb5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b6044820152606401610437565b6000610905612246565b6033549093506001600160a01b031691505081156109de576000816001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612c8e565b90506000670de0b6b3a76400006109a7838661305f565b6109b19190612f52565b905060006109be87611d3f565b905060036109ce83836012611e2e565b6109d89190612f52565b95505050505b5050919050565b603a81815481106109f557600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610a405750610a2b6103f6565b6001600160a01b0316336001600160a01b0316145b610a985760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610437565b60008051602061313483398151915280546002811415610aca5760405162461bcd60e51b815260040161043790612efe565b60028255600080610ad9612246565b9250925050610ae782612355565b6040805160608101825260008082526020820181905281830152603354915163ecb586a560e01b815290916001600160a01b031690819063ecb586a590610b349086908690600401612f26565b600060405180830381600087803b158015610b4e57600080fd5b505af1158015610b62573d6000803e3d6000fd5b5050505060005b603654811015610c975760405163c661065760e01b8152600481018290526000906001600160a01b0384169063c66106579060240160206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee91906129a5565b6034546040516370a0823160e01b8152306004820152919250610c84916001600160a01b03918216918416906370a082319060240160206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190612c8e565b6001600160a01b0384169190611c40565b5080610c8f816130c1565b915050610b69565b5050505050600182555050565b610cac6113cc565b610cc85760405162461bcd60e51b815260040161043790612e79565b6036548110610d095760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610437565b600060368281548110610d1e57610d1e613108565b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690610d5b9060019061307e565b831015610ddd5760368054610d729060019061307e565b81548110610d8257610d82613108565b600091825260209091200154603680546001600160a01b039092169185908110610dae57610dae613108565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6036805480610dee57610dee6130f2565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b610e776113cc565b610e935760405162461bcd60e51b815260040161043790612e79565b600054610100900460ff1680610eac575060005460ff16155b610ec85760405162461bcd60e51b815260040161043790612eb0565b600054610100900460ff16158015610eea576000805461ffff19166101011790555b610f5b8989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152506123bd92505050565b8015610f6d576000805461ff00191690555b505050505050505050565b610f806113cc565b610f9c5760405162461bcd60e51b815260040161043790612e79565b60005b81811015611050576000838383818110610fbb57610fbb613108565b9050602002016020810190610fd09190612988565b6001600160a01b0316141561103e5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610437565b80611048816130c1565b915050610f9f565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161108593929190612d5c565b60405180910390a1611099603a83836128b4565b505050565b6110a66113cc565b6110c25760405162461bcd60e51b815260040161043790612e79565b600054610100900460ff16806110db575060005460ff16155b6110f75760405162461bcd60e51b815260040161043790612eb0565b600054610100900460ff16158015611119576000805461ffff19166101011790555b600387146111695760405162461bcd60e51b815260206004820152601e60248201527f4d75737420686176652065786163746c792074687265652061737365747300006044820152606401610437565b609e80546001600160a01b038087166001600160a01b031992831617909255609f80549286169290911691909117905560a182905585856000816111af576111af613108565b90506020020160208101906111c49190612988565b609d60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061126c8c8c8c8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506123bd92505050565b6112746124a6565b8015611286576000805461ff00191690555b505050505050505050505050565b61129c6113cc565b6112b85760405162461bcd60e51b815260040161043790612e79565b600080516020613134833981519152805460028114156112ea5760405162461bcd60e51b815260040161043790612efe565b600282556112f66124a6565b60005b603654811015611345576113336036828154811061131957611319613108565b6000918252602090912001546001600160a01b0316612519565b8061133d816130c1565b9150506112f9565b505060019055565b6113556113cc565b6113715760405162461bcd60e51b815260040161043790612e79565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60006113e46000805160206131548339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6114056113cc565b6114215760405162461bcd60e51b815260040161043790612e79565b611449817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166114696000805160206131548339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146114cb5760405162461bcd60e51b815260040161043790612e42565b600080516020613134833981519152805460028114156114fd5760405162461bcd60e51b815260040161043790612efe565b60028255600083116115425760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610437565b6001600160a01b0384811660008181526035602090815260409182902054825194168452830186905290917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a26000806115a3612246565b925050915060006115b387611ca3565b60335460405163cc2b27d760e01b815260048101859052600f83900b602482015291925082916001600160a01b0390911690600090829063cc2b27d79060440160206040518083038186803b15801561160b57600080fd5b505afa15801561161f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116439190612c8e565b90506000816116528b8861305f565b61165c9190612f52565b90508086116116ad5760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420334352562062616c616e6365000000000000006044820152606401610437565b808710156116c7576116c76116c2888361307e565b612355565b600060405180606001604052806000815260200160008152602001600081525090508a8187600381106116fc576116fc613108565b60200201526040516327f6ba8360e21b81526001600160a01b03851690639fdaea0c9061172f9084908690600401612df4565b600060405180830381600087803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b50611776925050506001600160a01b038d168e8d611c40565b5050505050505050600182555050505050565b6034546001600160a01b031633146117b35760405162461bcd60e51b815260040161043790612e42565b600080516020613134833981519152805460028114156117e55760405162461bcd60e51b815260040161043790612efe565b6002825560408051606081018252600080825260208083018290528284018290526033548451630176f71760e71b81529451939492936001600160a01b03909116928492849263bb7b8b80926004808201939291829003018186803b15801561184d57600080fd5b505afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118859190612c8e565b905060005b6036548110156119e8576000603682815481106118a9576118a9613108565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156118f757600080fd5b505afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f9190612c8e565b905080156119d357600061194283611ca3565b90508188826003811061195757611957613108565b6020020152600061196784611d3f565b90506119798661064985601285611e2e565b6119839089612f3a565b603354604080516001600160a01b03928316815260208101879052929a50908616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a250505b505080806119e0906130c1565b91505061188a565b506000611a0e611a07662386f26fc10000670de0b6b3a764000061307e565b8590611ebb565b604051634515cef360e01b81529091506001600160a01b03841690634515cef390611a3f9088908590600401612df4565b600060405180830381600087803b158015611a5957600080fd5b505af1158015611a6d573d6000803e3d6000fd5b50505050610c97611ed0565b6060603a805480602002602001604051908101604052809291908181526020018280548015611ad157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ab3575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611b385760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610437565b6001600160a01b03821615801590611b5857506001600160a01b03811615155b611b985760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610437565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a261044a8282612552565b6040516001600160a01b03831660248201526044810182905261109990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261255b565b6000805b6003811015611d0057826001600160a01b031660368281548110611ccd57611ccd613108565b6000918252602090912001546001600160a01b03161415611cee5792915050565b80611cf8816130c1565b915050611ca7565b5060405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59080cdc1bdbdb08185cdcd95d606a1b6044820152606401610437565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7b57600080fd5b505afa158015611d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db39190612ca7565b60ff16905060048110158015611dca575060128111155b611e285760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610437565b92915050565b600081831115611e5e57611e57611e45838561307e565b611e5090600a612fb7565b859061262d565b9350611e88565b81831015611e8857611e85611e73848461307e565b611e7e90600a612fb7565b8590612639565b93505b50825b9392505050565b600080611ea784670de0b6b3a764000061262d565b9050611eb38184612639565b949350505050565b6000611e8b8383670de0b6b3a7640000612645565b609d54609e5460a1546040516370a0823160e01b81523060048201526001600160a01b039384169360009316916343a0d0669185906370a082319060240160206040518083038186803b158015611f2657600080fd5b505afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190612c8e565b6040516001600160e01b031960e085901b1681526004810192909252602482015260016044820152606401602060405180830381600087803b158015611fa357600080fd5b505af1158015611fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdb9190612c53565b90508061044a5760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f206465706f73697420746f20436f6e76657800000000006044820152606401610437565b60005b603a54811015612182576000603a828154811061204c5761204c613108565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561209a57600080fd5b505afa1580156120ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d29190612c8e565b603954603a80549293507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353926001600160a01b03909216918690811061211a5761211a613108565b60009182526020918290200154604080516001600160a01b0394851681529390911691830191909152810183905260600160405180910390a160395461216d906001600160a01b03848116911683611c40565b5050808061217a906130c1565b91505061202d565b50565b6001600160a01b0381166121db5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610437565b806001600160a01b03166121fb6000805160206131548339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36121828160008051602061315483398151915255565b609d546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b15801561228e57600080fd5b505afa1580156122a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c69190612c8e565b609f546040516370a0823160e01b81523060048201529194506001600160a01b0316906370a082319060240160206040518083038186803b15801561230a57600080fd5b505afa15801561231e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123429190612c8e565b915061234e8284612f3a565b9050909192565b609f54604051636197390160e11b815260048101839052600160248201526001600160a01b039091169063c32e720290604401600060405180830381600087803b1580156123a257600080fd5b505af11580156123b6573d6000803e3d6000fd5b5050505050565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556123f9603a85856128b4565b508151815181146124435760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610437565b60005b8181101561249c5761248a84828151811061246357612463613108565b602002602001015184838151811061247d5761247d613108565b6020026020010151611adb565b80612494816130c1565b915050612446565b5050505050505050565b609d546033546001600160a01b03918216916124c6918391166000612667565b6033546124e2906001600160a01b038381169116600019612667565b609e546124fd906001600160a01b0383811691166000612667565b609e54612182906001600160a01b038381169116600019612667565b6033548190612536906001600160a01b0380841691166000612667565b60335461044a906001600160a01b038381169116600019612667565b61044a82612519565b60006125b0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661278b9092919063ffffffff16565b80519091501561109957808060200190518101906125ce9190612c53565b6110995760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610437565b6000611e8b828461305f565b6000611e8b8284612f52565b600080612652858561262d565b905061265e8184612639565b95945050505050565b8015806126f05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156126b657600080fd5b505afa1580156126ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ee9190612c8e565b155b61275b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610437565b6040516001600160a01b03831660248201526044810182905261109990849063095ea7b360e01b90606401611c6c565b6060611eb3848460008585843b6127e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610437565b600080866001600160a01b031685876040516128009190612cf3565b60006040518083038185875af1925050503d806000811461283d576040519150601f19603f3d011682016040523d82523d6000602084013e612842565b606091505b509150915061285282828661285d565b979650505050505050565b6060831561286c575081611e8b565b82511561287c5782518084602001fd5b8160405162461bcd60e51b81526004016104379190612e0f565b60405180606001604052806003906020820280368337509192915050565b828054828255906000526020600020908101928215612907579160200282015b828111156129075781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906128d4565b50612913929150612917565b5090565b5b808211156129135760008155600101612918565b80356129378161311e565b919050565b60008083601f84011261294e57600080fd5b50813567ffffffffffffffff81111561296657600080fd5b6020830191508360208260051b850101111561298157600080fd5b9250929050565b60006020828403121561299a57600080fd5b8135611e8b8161311e565b6000602082840312156129b757600080fd5b8151611e8b8161311e565b600080604083850312156129d557600080fd5b82356129e08161311e565b915060208301356129f08161311e565b809150509250929050565b60008060008060008060008060a0898b031215612a1757600080fd5b8835612a228161311e565b97506020890135612a328161311e565b9650604089013567ffffffffffffffff80821115612a4f57600080fd5b612a5b8c838d0161293c565b909850965060608b0135915080821115612a7457600080fd5b612a808c838d0161293c565b909650945060808b0135915080821115612a9957600080fd5b50612aa68b828c0161293c565b999c989b5096995094979396929594505050565b60008060008060008060008060008060006101008c8e031215612adc57600080fd5b612ae58c61292c565b9a50612af360208d0161292c565b995067ffffffffffffffff8060408e01351115612b0f57600080fd5b612b1f8e60408f01358f0161293c565b909a50985060608d0135811015612b3557600080fd5b612b458e60608f01358f0161293c565b909850965060808d0135811015612b5b57600080fd5b50612b6c8d60808e01358e0161293c565b9095509350612b7d60a08d0161292c565b9250612b8b60c08d0161292c565b915060e08c013590509295989b509295989b9093969950565b600080600060608486031215612bb957600080fd5b8335612bc48161311e565b92506020840135612bd48161311e565b929592945050506040919091013590565b60008060408385031215612bf857600080fd5b8235612c038161311e565b946020939093013593505050565b60008060208385031215612c2457600080fd5b823567ffffffffffffffff811115612c3b57600080fd5b612c478582860161293c565b90969095509350505050565b600060208284031215612c6557600080fd5b81518015158114611e8b57600080fd5b600060208284031215612c8757600080fd5b5035919050565b600060208284031215612ca057600080fd5b5051919050565b600060208284031215612cb957600080fd5b815160ff81168114611e8b57600080fd5b8060005b6003811015612ced578151845260209384019390910190600101612cce565b50505050565b60008251612d05818460208701613095565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612d505783516001600160a01b031683529284019291840191600101612d2b565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612da65781546001600160a01b031684529284019260019182019101612d81565b505050838103828501528481528590820160005b86811015612de8578235612dcd8161311e565b6001600160a01b031682529183019190830190600101612dba565b50979650505050505050565b60808101612e028285612cca565b8260608301529392505050565b6020815260008251806020840152612e2e816040850160208701613095565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b82815260808101611e8b6020830184612cca565b60008219821115612f4d57612f4d6130dc565b500190565b600082612f6f57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612faf578160001904821115612f9557612f956130dc565b80851615612fa257918102915b93841c9390800290612f79565b509250929050565b6000611e8b8383600082612fcd57506001611e28565b81612fda57506000611e28565b8160018114612ff05760028114612ffa57613016565b6001915050611e28565b60ff84111561300b5761300b6130dc565b50506001821b611e28565b5060208310610133831016604e8410600b8410161715613039575081810a611e28565b6130438383612f74565b8060001904821115613057576130576130dc565b029392505050565b6000816000190483118215151615613079576130796130dc565b500290565b600082821015613090576130906130dc565b500390565b60005b838110156130b0578181015183820152602001613098565b83811115612ced5750506000910152565b60006000198214156130d5576130d56130dc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461218257600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220eef156762a9dc171f4edd919ed4f304b9ff1fdd419d7a9f0ac97bf258a15a51a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "details": "Get the total asset value held in the platform",
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated CRV and CVX and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into the Curve 3Pool",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        }
      },
      "depositAll()": {
        "details": "Deposit the entire balance of any supported asset into the Curve 3pool"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "initialize(address,address,address[],address[],address[],address,address,uint256)": {
        "params": {
          "_assets": "Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                DAI, USDC, USDT",
          "_cvxDepositorAddress": "Address of the Convex depositor(AKA booster) for this pool",
          "_cvxDepositorPTokenId": "Pid of the pool referred to by Depositor and staker",
          "_cvxRewardStakerAddress": "Address of the CVX rewards staker",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Address of the Curve 3pool",
          "_rewardTokenAddresses": "Address of CRV & CVX",
          "_vaultAddress": "Address of the vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from Curve 3Pool",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_asset": "Address of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address[],address[],address[],address,address,uint256)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18714,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18717,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18757,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18833,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 18835,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 18839,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 18842,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18844,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 18846,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 18848,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 18851,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18855,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 14505,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "pTokenAddress",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 15881,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "cvxDepositorAddress",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 15883,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "cvxRewardStakerAddress",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 15885,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "_deprecated_cvxRewardTokenAddress",
        "offset": 0,
        "slot": "160",
        "type": "t_address"
      },
      {
        "astId": 15887,
        "contract": "contracts/strategies/ConvexStrategy.sol:ConvexStrategy",
        "label": "cvxDepositorPTokenId",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
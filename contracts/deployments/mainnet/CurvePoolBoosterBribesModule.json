{
  "address": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolBoosterAddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolBoosterAddressRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "POOLS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "addPoolBoosterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manageBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "removePoolBoosterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeContract",
      "outputs": [
        {
          "internalType": "contract ISafe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
  "receipt": {
    "to": null,
    "from": "0x074105fdD39e982B2ffE749A193c942db1046AB9",
    "contractAddress": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
    "transactionIndex": 87,
    "gasUsed": "1607507",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020002000000000000800000000000000000008000020000000000400000000800000000000000000000000000000000000080000000000000000000000000000000000800000000000000000000000000000000000080000000000000000000000000000000018000001000100000000000000000000000000000000000000000000000000000400500000010000020080000000000000000000000800000000000000000000000020000000000000000",
    "blockHash": "0x432b205b0602194f5f289f8227c202cff51d1f07a24bbe8559b78af6b0a9dfc7",
    "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 23066190,
        "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
        "address": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ff1b9d9ba8558f5eafcec096318ea0d8b541971",
          "0x000000000000000000000000074105fdd39e982b2ffe749a193c942db1046ab9"
        ],
        "data": "0x",
        "logIndex": 253,
        "blockHash": "0x432b205b0602194f5f289f8227c202cff51d1f07a24bbe8559b78af6b0a9dfc7"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 23066190,
        "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
        "address": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000004ff1b9d9ba8558f5eafcec096318ea0d8b541971",
          "0x000000000000000000000000074105fdd39e982b2ffe749a193c942db1046ab9"
        ],
        "data": "0x",
        "logIndex": 254,
        "blockHash": "0x432b205b0602194f5f289f8227c202cff51d1f07a24bbe8559b78af6b0a9dfc7"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 23066190,
        "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
        "address": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000004b91827516f79d6f6a1f292ed99671663b09169a",
          "0x000000000000000000000000074105fdd39e982b2ffe749a193c942db1046ab9"
        ],
        "data": "0x",
        "logIndex": 255,
        "blockHash": "0x432b205b0602194f5f289f8227c202cff51d1f07a24bbe8559b78af6b0a9dfc7"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 23066190,
        "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
        "address": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
        "topics": [
          "0x73fbf341ebd14259e9d6b52784447ca2c15aa93c480c93927fd8135aefff7747"
        ],
        "data": "0x0000000000000000000000001bc53929ff517531da09eaa281c2375de3a0ad2c",
        "logIndex": 256,
        "blockHash": "0x432b205b0602194f5f289f8227c202cff51d1f07a24bbe8559b78af6b0a9dfc7"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 23066190,
        "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
        "address": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
        "topics": [
          "0x73fbf341ebd14259e9d6b52784447ca2c15aa93c480c93927fd8135aefff7747"
        ],
        "data": "0x0000000000000000000000007b5e7adebc2da89912bffe55c86675cece59803e",
        "logIndex": 257,
        "blockHash": "0x432b205b0602194f5f289f8227c202cff51d1f07a24bbe8559b78af6b0a9dfc7"
      },
      {
        "transactionIndex": 87,
        "blockNumber": 23066190,
        "transactionHash": "0xb3e5c7654efac22cdaf8ff128407a6893e18c8d033907def9e3905522169bd06",
        "address": "0x12856b1944a6a8c86c61D0F8B6e44C37726e86D7",
        "topics": [
          "0x73fbf341ebd14259e9d6b52784447ca2c15aa93c480c93927fd8135aefff7747"
        ],
        "data": "0x000000000000000000000000514447a1ef103f3cf4b0fe92a947f071239f2809",
        "logIndex": 258,
        "blockHash": "0x432b205b0602194f5f289f8227c202cff51d1f07a24bbe8559b78af6b0a9dfc7"
      }
    ],
    "blockNumber": 23066190,
    "cumulativeGasUsed": "11239155",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4FF1b9D9ba8558F5EAfCec096318eA0d8b541971",
    "0x4b91827516f79d6F6a1F292eD99671663b09169a",
    [
      "0x1bc53929fF517531Da09EAa281c2375dE3a0AD2C",
      "0x7B5e7aDEBC2da89912BffE55c86675CeCE59803E",
      "0x514447A1Ef103f3cF4B0fE92A947F071239f2809"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "eb999b2eb828bb03b1ec2101f023b5f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolBoosterAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolBoosterAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"POOLS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addPoolBoosterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manageBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"removePoolBoosterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeContract\",\"outputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferTokens(address,uint256)\":{\"details\":\"Helps recovering any tokens accidentally sent to this module.\",\"params\":{\"amount\":\"Amount to transfer. 0 to transfer all balance.\",\"token\":\"Token to transfer. 0x0 to transfer Native token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automation/CurvePoolBoosterBribesModule.sol\":\"CurvePoolBoosterBribesModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x1304796e9cdc64294735b4222849a240363b2aff374bb58b7c728f8dc0f4aa75\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/automation/AbstractSafeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISafe } from \\\"../interfaces/ISafe.sol\\\";\\n\\nabstract contract AbstractSafeModule is AccessControlEnumerable {\\n    ISafe public immutable safeContract;\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    modifier onlySafe() {\\n        require(\\n            msg.sender == address(safeContract),\\n            \\\"Caller is not the safe contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            hasRole(OPERATOR_ROLE, msg.sender),\\n            \\\"Caller is not an operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _safeContract) {\\n        safeContract = ISafe(_safeContract);\\n        _grantRole(DEFAULT_ADMIN_ROLE, address(safeContract));\\n        _grantRole(OPERATOR_ROLE, address(safeContract));\\n    }\\n\\n    /**\\n     * @dev Helps recovering any tokens accidentally sent to this module.\\n     * @param token Token to transfer. 0x0 to transfer Native token.\\n     * @param amount Amount to transfer. 0 to transfer all balance.\\n     */\\n    function transferTokens(address token, uint256 amount) external onlySafe {\\n        if (address(token) == address(0)) {\\n            // Move ETH\\n            amount = amount > 0 ? amount : address(this).balance;\\n            payable(address(safeContract)).transfer(amount);\\n            return;\\n        }\\n\\n        // Move all balance if amount set to 0\\n        amount = amount > 0 ? amount : IERC20(token).balanceOf(address(this));\\n\\n        // Transfer to Safe contract\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        IERC20(token).transfer(address(safeContract), amount);\\n    }\\n\\n    receive() external payable {\\n        // Accept ETH to pay for bridge fees\\n    }\\n}\\n\",\"keccak256\":\"0x02f5cebee3ef21afb1e5dafe15a9160017dde1b7361653e6285f884124d15af5\",\"license\":\"BUSL-1.1\"},\"contracts/automation/CurvePoolBoosterBribesModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AbstractSafeModule } from \\\"./AbstractSafeModule.sol\\\";\\n\\ninterface ICurvePoolBooster {\\n    function manageTotalRewardAmount(\\n        uint256 bridgeFee,\\n        uint256 additionalGasLimit\\n    ) external;\\n\\n    function manageNumberOfPeriods(\\n        uint8 extraNumberOfPeriods,\\n        uint256 bridgeFee,\\n        uint256 additionalGasLimit\\n    ) external;\\n}\\n\\ncontract CurvePoolBoosterBribesModule is AbstractSafeModule {\\n    address[] public POOLS;\\n\\n    event PoolBoosterAddressAdded(address pool);\\n    event PoolBoosterAddressRemoved(address pool);\\n\\n    constructor(\\n        address _safeContract,\\n        address _operator,\\n        address[] memory _pools\\n    ) AbstractSafeModule(_safeContract) {\\n        _grantRole(OPERATOR_ROLE, _operator);\\n        _addPoolBoosterAddress(_pools);\\n    }\\n\\n    function addPoolBoosterAddress(address[] memory pools)\\n        external\\n        onlyOperator\\n    {\\n        _addPoolBoosterAddress(pools);\\n    }\\n\\n    function _addPoolBoosterAddress(address[] memory pools) internal {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            POOLS.push(pools[i]);\\n            emit PoolBoosterAddressAdded(pools[i]);\\n        }\\n    }\\n\\n    function removePoolBoosterAddress(address[] calldata pools)\\n        external\\n        onlyOperator\\n    {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            _removePoolBoosterAddress(pools[i]);\\n        }\\n    }\\n\\n    function _removePoolBoosterAddress(address pool) internal {\\n        uint256 length = POOLS.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (POOLS[i] == pool) {\\n                POOLS[i] = POOLS[length - 1];\\n                POOLS.pop();\\n                emit PoolBoosterAddressRemoved(pool);\\n            }\\n        }\\n    }\\n\\n    function manageBribes() external onlyOperator {\\n        uint256 length = POOLS.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            address poolBoosterAddress = POOLS[i];\\n\\n            safeContract.execTransactionFromModule(\\n                poolBoosterAddress,\\n                0, // Value\\n                abi.encodeWithSelector(\\n                    ICurvePoolBooster.manageNumberOfPeriods.selector,\\n                    1, // extraNumberOfPeriods\\n                    1000000000000000, // bridgeFee\\n                    1000000 // additionalGasLimit\\n                ),\\n                0\\n            );\\n\\n            safeContract.execTransactionFromModule(\\n                poolBoosterAddress,\\n                0, // Value\\n                abi.encodeWithSelector(\\n                    ICurvePoolBooster.manageTotalRewardAmount.selector,\\n                    1000000000000000, // bridgeFee\\n                    1000000 // additionalGasLimit\\n                ),\\n                0\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25115238a4eac6f10256f91225ac5cbe88ae03f9e76480dcc9e3aa1bb4522fdd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address,\\n        uint256,\\n        bytes memory,\\n        uint8\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6d5fb3512c4fab418222023fb1b482891906eae8d2bda9d1eb2ef3d3c7653dee\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516119b83803806119b883398101604081905261002f916102c3565b6001600160a01b0383166080819052839061004c90600090610096565b61006c60008051602061199883398151915260805161009660201b60201c565b5061008560008051602061199883398151915283610096565b61008e816100bd565b5050506103cc565b6100a08282610186565b60008281526001602052604090206100b89082610224565b505050565b60005b81518110156101825760028282815181106100dd576100dd6103b6565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905581517f73fbf341ebd14259e9d6b52784447ca2c15aa93c480c93927fd8135aefff77479083908390811061014e5761014e6103b6565b602002602001015160405161017291906001600160a01b0391909116815260200190565b60405180910390a16001016100c0565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610182576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556101e03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610239836001600160a01b038416610242565b90505b92915050565b60008181526001830160205260408120546102895750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561023c565b50600061023c565b80516001600160a01b03811681146102a857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156102d857600080fd5b6102e184610291565b92506102ef60208501610291565b60408501519092506001600160401b0381111561030b57600080fd5b8401601f8101861361031c57600080fd5b80516001600160401b03811115610335576103356102ad565b604051600582901b90603f8201601f191681016001600160401b0381118282101715610363576103636102ad565b60405291825260208184018101929081018984111561038157600080fd5b6020850194505b838510156103a75761039985610291565b815260209485019401610388565b50809450505050509250925092565b634e487b7160e01b600052603260045260246000fd5b60805161158e61040a6000396000818161032e015281816104530152818161052901528181610755015281816107f001526108c7015261158e6000f3fe6080604052600436106100f75760003560e01c8063a8423c081161008a578063d547741f11610059578063d547741f146102ba578063eec8e967146102da578063f5b541a6146102fa578063f9081ba21461031c57600080fd5b8063a8423c081461023a578063ab384df01461025a578063bec3fa171461027a578063ca15c8731461029a57600080fd5b806336568abe116100c657806336568abe146101ad5780639010d07c146101cd57806391d1485414610205578063a217fddf1461022557600080fd5b806301ffc9a71461010357806316d5fd0e14610138578063248a9ca31461014f5780632f2ff15d1461018d57600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e3660046110ce565b610350565b60405190151581526020015b60405180910390f35b34801561014457600080fd5b5061014d61037b565b005b34801561015b57600080fd5b5061017f61016a3660046110f8565b60009081526020819052604090206001015490565b60405190815260200161012f565b34801561019957600080fd5b5061014d6101a836600461112d565b6105bd565b3480156101b957600080fd5b5061014d6101c836600461112d565b6105e8565b3480156101d957600080fd5b506101ed6101e8366004611159565b610662565b6040516001600160a01b03909116815260200161012f565b34801561021157600080fd5b5061012361022036600461112d565b610681565b34801561023157600080fd5b5061017f600081565b34801561024657600080fd5b506101ed6102553660046110f8565b6106aa565b34801561026657600080fd5b5061014d61027536600461117b565b6106d4565b34801561028657600080fd5b5061014d6102953660046111f2565b61074a565b3480156102a657600080fd5b5061017f6102b53660046110f8565b610947565b3480156102c657600080fd5b5061014d6102d536600461112d565b61095e565b3480156102e657600080fd5b5061014d6102f5366004611232565b610984565b34801561030657600080fd5b5061017f60008051602061153983398151915281565b34801561032857600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216635a05180f60e01b14806103755750610375826109c4565b92915050565b61039360008051602061153983398151915233610681565b6103b85760405162461bcd60e51b81526004016103af90611302565b60405180910390fd5b60025460005b818110156105b9576000600282815481106103db576103db611339565b600091825260208083209190910154604080516001602482015266038d7ea4c680006044820152620f4240606480830191909152825180830390910181526084909101825292830180516001600160e01b031663e9a0214360e01b1790525163468721a760e01b81526001600160a01b0391821694507f00000000000000000000000000000000000000000000000000000000000000009091169263468721a79261048e9286929190829060040161139f565b6020604051808303816000875af11580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d191906113da565b506040805166038d7ea4c680006024820152620f424060448083019190915282518083039091018152606490910182526020810180516001600160e01b031663381cf00160e11b179052905163468721a760e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a79161056c91859160009190829060040161139f565b6020604051808303816000875af115801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105af91906113da565b50506001016103be565b5050565b6000828152602081905260409020600101546105d981336109f9565b6105e38383610a5d565b505050565b6001600160a01b03811633146106585760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103af565b6105b98282610a7f565b600082815260016020526040812061067a9083610aa1565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600281815481106106ba57600080fd5b6000918252602090912001546001600160a01b0316905081565b6106ec60008051602061153983398151915233610681565b6107085760405162461bcd60e51b81526004016103af90611302565b60005b818110156105e35761074283838381811061072857610728611339565b905060200201602081019061073d91906113fc565b610aad565b60010161070b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107c25760405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206973206e6f7420746865207361666520636f6e74726163740060448201526064016103af565b6001600160a01b03821661083957600081116107de57476107e0565b805b6040519091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f193505050501580156105e3573d6000803e3d6000fd5b600081116108ae576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190611417565b6108b0565b805b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e391906113da565b600081815260016020526040812061037590610be4565b60008281526020819052604090206001015461097a81336109f9565b6105e38383610a7f565b61099c60008051602061153983398151915233610681565b6109b85760405162461bcd60e51b81526004016103af90611302565b6109c181610bee565b50565b60006001600160e01b03198216637965db0b60e01b148061037557506301ffc9a760e01b6001600160e01b0319831614610375565b610a038282610681565b6105b957610a1b816001600160a01b03166014610cb3565b610a26836020610cb3565b604051602001610a37929190611430565b60408051601f198184030181529082905262461bcd60e51b82526103af916004016114a5565b610a678282610e4f565b60008281526001602052604090206105e39082610ed3565b610a898282610ee8565b60008281526001602052604090206105e39082610f4d565b600061067a8383610f62565b60025460005b818110156105e357826001600160a01b031660028281548110610ad857610ad8611339565b6000918252602090912001546001600160a01b031603610bdc576002610aff6001846114ce565b81548110610b0f57610b0f611339565b600091825260209091200154600280546001600160a01b039092169183908110610b3b57610b3b611339565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480610b7a57610b7a6114e1565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03851681527f5acf3d4990bcb8de36e8b743ef49e57f65600af9d09b4a50da91c2061b8aca79910160405180910390a15b600101610ab3565b6000610375825490565b60005b81518110156105b9576002828281518110610c0e57610c0e611339565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905581517f73fbf341ebd14259e9d6b52784447ca2c15aa93c480c93927fd8135aefff774790839083908110610c7f57610c7f611339565b6020026020010151604051610ca391906001600160a01b0391909116815260200190565b60405180910390a1600101610bf1565b60606000610cc28360026114f7565b610ccd90600261150e565b67ffffffffffffffff811115610ce557610ce561121c565b6040519080825280601f01601f191660200182016040528015610d0f576020820181803683370190505b509050600360fc1b81600081518110610d2a57610d2a611339565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610d5957610d59611339565b60200101906001600160f81b031916908160001a9053506000610d7d8460026114f7565b610d8890600161150e565b90505b6001811115610e00576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610dbc57610dbc611339565b1a60f81b828281518110610dd257610dd2611339565b60200101906001600160f81b031916908160001a90535060049490941c93610df981611521565b9050610d8b565b50831561067a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103af565b610e598282610681565b6105b9576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e8f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061067a836001600160a01b038416610f8c565b610ef28282610681565b156105b9576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061067a836001600160a01b038416610fdb565b6000826000018281548110610f7957610f79611339565b9060005260206000200154905092915050565b6000818152600183016020526040812054610fd357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610375565b506000610375565b600081815260018301602052604081205480156110c4576000610fff6001836114ce565b8554909150600090611013906001906114ce565b905081811461107857600086600001828154811061103357611033611339565b906000526020600020015490508087600001848154811061105657611056611339565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611089576110896114e1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610375565b6000915050610375565b6000602082840312156110e057600080fd5b81356001600160e01b03198116811461067a57600080fd5b60006020828403121561110a57600080fd5b5035919050565b80356001600160a01b038116811461112857600080fd5b919050565b6000806040838503121561114057600080fd5b8235915061115060208401611111565b90509250929050565b6000806040838503121561116c57600080fd5b50508035926020909101359150565b6000806020838503121561118e57600080fd5b823567ffffffffffffffff8111156111a557600080fd5b8301601f810185136111b657600080fd5b803567ffffffffffffffff8111156111cd57600080fd5b8560208260051b84010111156111e257600080fd5b6020919091019590945092505050565b6000806040838503121561120557600080fd5b61120e83611111565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561124457600080fd5b813567ffffffffffffffff81111561125b57600080fd5b8201601f8101841361126c57600080fd5b803567ffffffffffffffff8111156112865761128661121c565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156112b3576112b361121c565b6040529182526020818401810192908101878411156112d157600080fd5b6020850194505b838510156112f7576112e985611111565b8152602094850194016112d8565b509695505050505050565b60208082526019908201527f43616c6c6572206973206e6f7420616e206f70657261746f7200000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561136a578181015183820152602001611352565b50506000910152565b6000815180845261138b81602086016020860161134f565b601f01601f19169290920160200192915050565b60018060a01b03851681528360208201526080604082015260006113c66080830185611373565b905060ff8316606083015295945050505050565b6000602082840312156113ec57600080fd5b8151801515811461067a57600080fd5b60006020828403121561140e57600080fd5b61067a82611111565b60006020828403121561142957600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161146881601785016020880161134f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161149981602884016020880161134f565b01602801949350505050565b60208152600061067a6020830184611373565b634e487b7160e01b600052601160045260246000fd5b81810381811115610375576103756114b8565b634e487b7160e01b600052603160045260246000fd5b8082028115828204841417610375576103756114b8565b80820180821115610375576103756114b8565b600081611530576115306114b8565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a264697066735822122081417c9752425b90adacf0c9544a6442408a8218d77a3020269499cdf4ce4b5064736f6c634300081c003397667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c8063a8423c081161008a578063d547741f11610059578063d547741f146102ba578063eec8e967146102da578063f5b541a6146102fa578063f9081ba21461031c57600080fd5b8063a8423c081461023a578063ab384df01461025a578063bec3fa171461027a578063ca15c8731461029a57600080fd5b806336568abe116100c657806336568abe146101ad5780639010d07c146101cd57806391d1485414610205578063a217fddf1461022557600080fd5b806301ffc9a71461010357806316d5fd0e14610138578063248a9ca31461014f5780632f2ff15d1461018d57600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e3660046110ce565b610350565b60405190151581526020015b60405180910390f35b34801561014457600080fd5b5061014d61037b565b005b34801561015b57600080fd5b5061017f61016a3660046110f8565b60009081526020819052604090206001015490565b60405190815260200161012f565b34801561019957600080fd5b5061014d6101a836600461112d565b6105bd565b3480156101b957600080fd5b5061014d6101c836600461112d565b6105e8565b3480156101d957600080fd5b506101ed6101e8366004611159565b610662565b6040516001600160a01b03909116815260200161012f565b34801561021157600080fd5b5061012361022036600461112d565b610681565b34801561023157600080fd5b5061017f600081565b34801561024657600080fd5b506101ed6102553660046110f8565b6106aa565b34801561026657600080fd5b5061014d61027536600461117b565b6106d4565b34801561028657600080fd5b5061014d6102953660046111f2565b61074a565b3480156102a657600080fd5b5061017f6102b53660046110f8565b610947565b3480156102c657600080fd5b5061014d6102d536600461112d565b61095e565b3480156102e657600080fd5b5061014d6102f5366004611232565b610984565b34801561030657600080fd5b5061017f60008051602061153983398151915281565b34801561032857600080fd5b506101ed7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216635a05180f60e01b14806103755750610375826109c4565b92915050565b61039360008051602061153983398151915233610681565b6103b85760405162461bcd60e51b81526004016103af90611302565b60405180910390fd5b60025460005b818110156105b9576000600282815481106103db576103db611339565b600091825260208083209190910154604080516001602482015266038d7ea4c680006044820152620f4240606480830191909152825180830390910181526084909101825292830180516001600160e01b031663e9a0214360e01b1790525163468721a760e01b81526001600160a01b0391821694507f00000000000000000000000000000000000000000000000000000000000000009091169263468721a79261048e9286929190829060040161139f565b6020604051808303816000875af11580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d191906113da565b506040805166038d7ea4c680006024820152620f424060448083019190915282518083039091018152606490910182526020810180516001600160e01b031663381cf00160e11b179052905163468721a760e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a79161056c91859160009190829060040161139f565b6020604051808303816000875af115801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105af91906113da565b50506001016103be565b5050565b6000828152602081905260409020600101546105d981336109f9565b6105e38383610a5d565b505050565b6001600160a01b03811633146106585760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103af565b6105b98282610a7f565b600082815260016020526040812061067a9083610aa1565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600281815481106106ba57600080fd5b6000918252602090912001546001600160a01b0316905081565b6106ec60008051602061153983398151915233610681565b6107085760405162461bcd60e51b81526004016103af90611302565b60005b818110156105e35761074283838381811061072857610728611339565b905060200201602081019061073d91906113fc565b610aad565b60010161070b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107c25760405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206973206e6f7420746865207361666520636f6e74726163740060448201526064016103af565b6001600160a01b03821661083957600081116107de57476107e0565b805b6040519091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f193505050501580156105e3573d6000803e3d6000fd5b600081116108ae576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a99190611417565b6108b0565b805b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e391906113da565b600081815260016020526040812061037590610be4565b60008281526020819052604090206001015461097a81336109f9565b6105e38383610a7f565b61099c60008051602061153983398151915233610681565b6109b85760405162461bcd60e51b81526004016103af90611302565b6109c181610bee565b50565b60006001600160e01b03198216637965db0b60e01b148061037557506301ffc9a760e01b6001600160e01b0319831614610375565b610a038282610681565b6105b957610a1b816001600160a01b03166014610cb3565b610a26836020610cb3565b604051602001610a37929190611430565b60408051601f198184030181529082905262461bcd60e51b82526103af916004016114a5565b610a678282610e4f565b60008281526001602052604090206105e39082610ed3565b610a898282610ee8565b60008281526001602052604090206105e39082610f4d565b600061067a8383610f62565b60025460005b818110156105e357826001600160a01b031660028281548110610ad857610ad8611339565b6000918252602090912001546001600160a01b031603610bdc576002610aff6001846114ce565b81548110610b0f57610b0f611339565b600091825260209091200154600280546001600160a01b039092169183908110610b3b57610b3b611339565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480610b7a57610b7a6114e1565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03851681527f5acf3d4990bcb8de36e8b743ef49e57f65600af9d09b4a50da91c2061b8aca79910160405180910390a15b600101610ab3565b6000610375825490565b60005b81518110156105b9576002828281518110610c0e57610c0e611339565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905581517f73fbf341ebd14259e9d6b52784447ca2c15aa93c480c93927fd8135aefff774790839083908110610c7f57610c7f611339565b6020026020010151604051610ca391906001600160a01b0391909116815260200190565b60405180910390a1600101610bf1565b60606000610cc28360026114f7565b610ccd90600261150e565b67ffffffffffffffff811115610ce557610ce561121c565b6040519080825280601f01601f191660200182016040528015610d0f576020820181803683370190505b509050600360fc1b81600081518110610d2a57610d2a611339565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610d5957610d59611339565b60200101906001600160f81b031916908160001a9053506000610d7d8460026114f7565b610d8890600161150e565b90505b6001811115610e00576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610dbc57610dbc611339565b1a60f81b828281518110610dd257610dd2611339565b60200101906001600160f81b031916908160001a90535060049490941c93610df981611521565b9050610d8b565b50831561067a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103af565b610e598282610681565b6105b9576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e8f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061067a836001600160a01b038416610f8c565b610ef28282610681565b156105b9576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061067a836001600160a01b038416610fdb565b6000826000018281548110610f7957610f79611339565b9060005260206000200154905092915050565b6000818152600183016020526040812054610fd357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610375565b506000610375565b600081815260018301602052604081205480156110c4576000610fff6001836114ce565b8554909150600090611013906001906114ce565b905081811461107857600086600001828154811061103357611033611339565b906000526020600020015490508087600001848154811061105657611056611339565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611089576110896114e1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610375565b6000915050610375565b6000602082840312156110e057600080fd5b81356001600160e01b03198116811461067a57600080fd5b60006020828403121561110a57600080fd5b5035919050565b80356001600160a01b038116811461112857600080fd5b919050565b6000806040838503121561114057600080fd5b8235915061115060208401611111565b90509250929050565b6000806040838503121561116c57600080fd5b50508035926020909101359150565b6000806020838503121561118e57600080fd5b823567ffffffffffffffff8111156111a557600080fd5b8301601f810185136111b657600080fd5b803567ffffffffffffffff8111156111cd57600080fd5b8560208260051b84010111156111e257600080fd5b6020919091019590945092505050565b6000806040838503121561120557600080fd5b61120e83611111565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561124457600080fd5b813567ffffffffffffffff81111561125b57600080fd5b8201601f8101841361126c57600080fd5b803567ffffffffffffffff8111156112865761128661121c565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156112b3576112b361121c565b6040529182526020818401810192908101878411156112d157600080fd5b6020850194505b838510156112f7576112e985611111565b8152602094850194016112d8565b509695505050505050565b60208082526019908201527f43616c6c6572206973206e6f7420616e206f70657261746f7200000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561136a578181015183820152602001611352565b50506000910152565b6000815180845261138b81602086016020860161134f565b601f01601f19169290920160200192915050565b60018060a01b03851681528360208201526080604082015260006113c66080830185611373565b905060ff8316606083015295945050505050565b6000602082840312156113ec57600080fd5b8151801515811461067a57600080fd5b60006020828403121561140e57600080fd5b61067a82611111565b60006020828403121561142957600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161146881601785016020880161134f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161149981602884016020880161134f565b01602801949350505050565b60208152600061067a6020830184611373565b634e487b7160e01b600052601160045260246000fd5b81810381811115610375576103756114b8565b634e487b7160e01b600052603160045260246000fd5b8082028115828204841417610375576103756114b8565b80820180821115610375576103756114b8565b600081611530576115306114b8565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a264697066735822122081417c9752425b90adacf0c9544a6442408a8218d77a3020269499cdf4ce4b5064736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferTokens(address,uint256)": {
        "details": "Helps recovering any tokens accidentally sent to this module.",
        "params": {
          "amount": "Amount to transfer. 0 to transfer all balance.",
          "token": "Token to transfer. 0x0 to transfer Native token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1182_storage)"
      },
      {
        "astId": 1649,
        "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
        "label": "POOLS",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1182_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1182_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1182_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1181,
            "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)881_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)881_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 876,
            "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 880,
            "contract": "contracts/automation/CurvePoolBoosterBribesModule.sol:CurvePoolBoosterBribesModule",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
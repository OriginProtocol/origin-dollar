{
  "address": "0x1D6E0d7A1244276acf22a4E1dfC3C58186b1f624",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_allowedSlippageBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_harvestRewardBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_uniswapV2CompatibleAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidationLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_doSwapRewardToken",
          "type": "bool"
        }
      ],
      "name": "RewardTokenConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "SupportedStrategyUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "UniswapUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTo",
          "type": "address"
        }
      ],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardProceedsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokenConfigs",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "allowedSlippageBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "harvestRewardBps",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "uniswapV2CompatibleAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "doSwapRewardToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_allowedSlippageBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_harvestRewardBps",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2CompatibleAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationLimit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_doSwapRewardToken",
          "type": "bool"
        }
      ],
      "name": "setRewardTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardProceedsAddress",
          "type": "address"
        }
      ],
      "name": "setRewardsProceedsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "setSupportedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapToken",
          "type": "address"
        }
      ],
      "name": "swapRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x640f0c950f433cabed093d61138177e8eebe9bfb2fe35ec85a3c70296bfd8638",
  "receipt": {
    "to": null,
    "from": "0xFD9E6005187F448957a0972a7d0C0A6dA2911236",
    "contractAddress": "0x1D6E0d7A1244276acf22a4E1dfC3C58186b1f624",
    "transactionIndex": 45,
    "gasUsed": "2080182",
    "logsBloom": "0x
    "blockHash": "0x47b89ba4e7f6b84337b0c51aa506c88ebf558bebef01855d1c85f38bbe752bac",
    "transactionHash": "0x640f0c950f433cabed093d61138177e8eebe9bfb2fe35ec85a3c70296bfd8638",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 17249869,
        "transactionHash": "0x640f0c950f433cabed093d61138177e8eebe9bfb2fe35ec85a3c70296bfd8638",
        "address": "0x1D6E0d7A1244276acf22a4E1dfC3C58186b1f624",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd9e6005187f448957a0972a7d0c0a6da2911236"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x47b89ba4e7f6b84337b0c51aa506c88ebf558bebef01855d1c85f38bbe752bac"
      }
    ],
    "blockNumber": 17249869,
    "cumulativeGasUsed": "7483299",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39254033945AA2E4809Cc2977E7087BEE48bd7Ab"
  ],
  "solcInputHash": "3180b890bce877902c7cf982bc7b2dda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_allowedSlippageBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_harvestRewardBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniswapV2CompatibleAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidationLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_doSwapRewardToken\",\"type\":\"bool\"}],\"name\":\"RewardTokenConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"SupportedStrategyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UniswapUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTo\",\"type\":\"address\"}],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardProceedsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenConfigs\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"allowedSlippageBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"harvestRewardBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"uniswapV2CompatibleAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"doSwapRewardToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_allowedSlippageBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_harvestRewardBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2CompatibleAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_doSwapRewardToken\",\"type\":\"bool\"}],\"name\":\"setRewardTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardProceedsAddress\",\"type\":\"address\"}],\"name\":\"setRewardsProceedsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"setSupportedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"}],\"name\":\"swapRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"harvest()\":{\"details\":\"Collect reward tokens from all strategies\"},\"harvest(address)\":{\"details\":\"Collect reward tokens for a specific strategy.\",\"params\":{\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"harvestAndSwap(address)\":{\"details\":\"Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone. Rewards incentivizing      the caller are sent to the caller of this function.\",\"params\":{\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"harvestAndSwap(address,address)\":{\"details\":\"Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone.\",\"params\":{\"_rewardTo\":\"Address where to send a share of harvest rewards to as an incentive      for executing this function\",\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"setRewardTokenConfig(address,uint16,uint16,address,uint256,bool)\":{\"details\":\"Add/update a reward token configuration that holds harvesting config variables\",\"params\":{\"_allowedSlippageBps\":\"uint16 maximum allowed slippage denominated in basis points.        Example: 300 == 3% slippage\",\"_doSwapRewardToken\":\"bool When true the reward token is being swapped. In a need of (temporarily)        disabling the swapping of a reward token this needs to be set to false.\",\"_harvestRewardBps\":\"uint16 amount of reward tokens the caller of the function is rewarded.        Example: 100 == 1%\",\"_liquidationLimit\":\"uint256 Maximum amount of token to be sold per one swap function call.        When value is 0 there is no limit.\",\"_tokenAddress\":\"Address of the reward token\",\"_uniswapV2CompatibleAddr\":\"Address Address of a UniswapV2 compatible contract to perform        the exchange from reward tokens to stablecoin (currently hard-coded to USDT)\"}},\"setRewardsProceedsAddress(address)\":{\"params\":{\"_rewardProceedsAddress\":\"Address of the reward token\"}},\"setSupportedStrategy(address,bool)\":{\"details\":\"Flags a strategy as supported or not supported one\",\"params\":{\"_isSupported\":\"Bool marking strategy as supported or not supported\",\"_strategyAddress\":\"Address of the strategy\"}},\"swap()\":{\"details\":\"Swap all supported swap tokens for stablecoins via Uniswap.\"},\"swapRewardToken(address)\":{\"details\":\"Governance convenience function to swap a specific _rewardToken and send       rewards to the vault.\",\"params\":{\"_swapToken\":\"Address of the token to swap.\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rewardProceedsAddress()\":{\"notice\":\"Address receiving rewards proceeds. Initially the Vault contract later will possibly be replaced by another contract that eases out rewards distribution.\"},\"setRewardsProceedsAddress(address)\":{\"notice\":\"Set the Address receiving rewards proceeds.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/harvest/OETHHarvester.sol\":\"OETHHarvester\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x1b2af4d111ebd49acdbdfb4817b90bff752a453576d4e0b03dd5e5954f236c1b\",\"license\":\"MIT\"},\"contracts/harvest/BaseHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\nabstract contract BaseHarvester is Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event UniswapUpdated(address _address);\\n    event SupportedStrategyUpdate(address _address, bool _isSupported);\\n    event RewardTokenConfigUpdated(\\n        address _tokenAddress,\\n        uint16 _allowedSlippageBps,\\n        uint16 _harvestRewardBps,\\n        address _uniswapV2CompatibleAddr,\\n        uint256 _liquidationLimit,\\n        bool _doSwapRewardToken\\n    );\\n\\n    // Configuration properties for harvesting logic of reward tokens\\n    struct RewardTokenConfig {\\n        // Max allowed slippage when swapping reward token for a stablecoin denominated in basis points.\\n        uint16 allowedSlippageBps;\\n        // Reward when calling a harvest function denominated in basis points.\\n        uint16 harvestRewardBps;\\n        /* Address of Uniswap V2 compatible exchange (Uniswap V2, SushiSwap).\\n         */\\n        address uniswapV2CompatibleAddr;\\n        /* When true the reward token is being swapped. In a need of (temporarily) disabling the swapping of\\n         * a reward token this needs to be set to false.\\n         */\\n        bool doSwapRewardToken;\\n        /* How much token can be sold per one harvest call. If the balance of rewards tokens\\n         * exceeds that limit multiple harvest calls are required to harvest all of the tokens.\\n         * Set it to MAX_INT to effectively disable the limit.\\n         */\\n        uint256 liquidationLimit;\\n    }\\n\\n    mapping(address => RewardTokenConfig) public rewardTokenConfigs;\\n    mapping(address => bool) public supportedStrategies;\\n\\n    address public immutable vaultAddress;\\n\\n    /**\\n     * Address receiving rewards proceeds. Initially the Vault contract later will possibly\\n     * be replaced by another contract that eases out rewards distribution.\\n     */\\n    address public rewardProceedsAddress;\\n\\n    /**\\n     * @dev Constructor to set up initial internal state\\n     * @param _vaultAddress Address of the Vault\\n     */\\n    constructor(address _vaultAddress) {\\n        require(address(_vaultAddress) != address(0));\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /***************************************\\n                 Configuration\\n    ****************************************/\\n\\n    /**\\n     * @dev Throws if called by any address other than the Vault.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || isGovernor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Set the Address receiving rewards proceeds.\\n     * @param _rewardProceedsAddress Address of the reward token\\n     */\\n    function setRewardsProceedsAddress(address _rewardProceedsAddress)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _rewardProceedsAddress != address(0),\\n            \\\"Rewards proceeds address should be a non zero address\\\"\\n        );\\n\\n        rewardProceedsAddress = _rewardProceedsAddress;\\n    }\\n\\n    /**\\n     * @dev Add/update a reward token configuration that holds harvesting config variables\\n     * @param _tokenAddress Address of the reward token\\n     * @param _allowedSlippageBps uint16 maximum allowed slippage denominated in basis points.\\n     *        Example: 300 == 3% slippage\\n     * @param _harvestRewardBps uint16 amount of reward tokens the caller of the function is rewarded.\\n     *        Example: 100 == 1%\\n     * @param _uniswapV2CompatibleAddr Address Address of a UniswapV2 compatible contract to perform\\n     *        the exchange from reward tokens to stablecoin (currently hard-coded to USDT)\\n     * @param _liquidationLimit uint256 Maximum amount of token to be sold per one swap function call.\\n     *        When value is 0 there is no limit.\\n     * @param _doSwapRewardToken bool When true the reward token is being swapped. In a need of (temporarily)\\n     *        disabling the swapping of a reward token this needs to be set to false.\\n     */\\n    function setRewardTokenConfig(\\n        address _tokenAddress,\\n        uint16 _allowedSlippageBps,\\n        uint16 _harvestRewardBps,\\n        address _uniswapV2CompatibleAddr,\\n        uint256 _liquidationLimit,\\n        bool _doSwapRewardToken\\n    ) external onlyGovernor {\\n        require(\\n            _allowedSlippageBps <= 1000,\\n            \\\"Allowed slippage should not be over 10%\\\"\\n        );\\n        require(\\n            _harvestRewardBps <= 1000,\\n            \\\"Harvest reward fee should not be over 10%\\\"\\n        );\\n        require(\\n            _uniswapV2CompatibleAddr != address(0),\\n            \\\"Uniswap compatible address should be non zero address\\\"\\n        );\\n\\n        RewardTokenConfig memory tokenConfig = RewardTokenConfig({\\n            allowedSlippageBps: _allowedSlippageBps,\\n            harvestRewardBps: _harvestRewardBps,\\n            uniswapV2CompatibleAddr: _uniswapV2CompatibleAddr,\\n            doSwapRewardToken: _doSwapRewardToken,\\n            liquidationLimit: _liquidationLimit\\n        });\\n\\n        address oldUniswapAddress = rewardTokenConfigs[_tokenAddress]\\n            .uniswapV2CompatibleAddr;\\n        rewardTokenConfigs[_tokenAddress] = tokenConfig;\\n\\n        IERC20 token = IERC20(_tokenAddress);\\n\\n        address priceProvider = IVault(vaultAddress).priceProvider();\\n\\n        // Revert if feed does not exist\\n        // slither-disable-next-line unused-return\\n        IOracle(priceProvider).price(_tokenAddress);\\n\\n        // if changing token swap provider cancel existing allowance\\n        if (\\n            /* oldUniswapAddress == address(0) when there is no pre-existing\\n             * configuration for said rewards token\\n             */\\n            oldUniswapAddress != address(0) &&\\n            oldUniswapAddress != _uniswapV2CompatibleAddr\\n        ) {\\n            token.safeApprove(oldUniswapAddress, 0);\\n        }\\n\\n        // Give Uniswap infinite approval when needed\\n        if (oldUniswapAddress != _uniswapV2CompatibleAddr) {\\n            token.safeApprove(_uniswapV2CompatibleAddr, 0);\\n            token.safeApprove(_uniswapV2CompatibleAddr, type(uint256).max);\\n        }\\n\\n        emit RewardTokenConfigUpdated(\\n            _tokenAddress,\\n            _allowedSlippageBps,\\n            _harvestRewardBps,\\n            _uniswapV2CompatibleAddr,\\n            _liquidationLimit,\\n            _doSwapRewardToken\\n        );\\n    }\\n\\n    /**\\n     * @dev Flags a strategy as supported or not supported one\\n     * @param _strategyAddress Address of the strategy\\n     * @param _isSupported Bool marking strategy as supported or not supported\\n     */\\n    function setSupportedStrategy(address _strategyAddress, bool _isSupported)\\n        external\\n        onlyVaultOrGovernor\\n    {\\n        supportedStrategies[_strategyAddress] = _isSupported;\\n        emit SupportedStrategyUpdate(_strategyAddress, _isSupported);\\n    }\\n\\n    /***************************************\\n                    Rewards\\n    ****************************************/\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      contract, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        external\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from all strategies\\n     */\\n    function harvest() external onlyGovernor nonReentrant {\\n        _harvest();\\n    }\\n\\n    /**\\n     * @dev Swap all supported swap tokens for stablecoins via Uniswap.\\n     */\\n    function swap() external onlyGovernor nonReentrant {\\n        _swap(rewardProceedsAddress);\\n    }\\n\\n    /*\\n     * @dev Collect reward tokens from all strategies and swap for supported\\n     *      stablecoin via Uniswap\\n     */\\n    function harvestAndSwap() external onlyGovernor nonReentrant {\\n        _harvest();\\n        _swap(rewardProceedsAddress);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     */\\n    function harvest(address _strategyAddr) external onlyGovernor nonReentrant {\\n        _harvest(_strategyAddr);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy and swap for supported\\n     *      stablecoin via Uniswap. Can be called by anyone. Rewards incentivizing\\n     *      the caller are sent to the caller of this function.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     */\\n    function harvestAndSwap(address _strategyAddr) external nonReentrant {\\n        // Remember _harvest function checks for the validity of _strategyAddr\\n        _harvestAndSwap(_strategyAddr, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy and swap for supported\\n     *      stablecoin via Uniswap. Can be called by anyone.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function harvestAndSwap(address _strategyAddr, address _rewardTo)\\n        external\\n        nonReentrant\\n    {\\n        // Remember _harvest function checks for the validity of _strategyAddr\\n        _harvestAndSwap(_strategyAddr, _rewardTo);\\n    }\\n\\n    /**\\n     * @dev Governance convenience function to swap a specific _rewardToken and send\\n     *       rewards to the vault.\\n     * @param _swapToken Address of the token to swap.\\n     */\\n    function swapRewardToken(address _swapToken)\\n        external\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        _swap(_swapToken, rewardProceedsAddress);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from all strategies\\n     */\\n    function _harvest() internal {\\n        address[] memory allStrategies = IVault(vaultAddress)\\n            .getAllStrategies();\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            _harvest(allStrategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy and swap for supported\\n     *      stablecoin via Uniswap.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function _harvestAndSwap(address _strategyAddr, address _rewardTo)\\n        internal\\n    {\\n        _harvest(_strategyAddr);\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        address[] memory rewardTokens = strategy.getRewardTokenAddresses();\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            _swap(rewardTokens[i], _rewardTo);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from a single strategy and swap them for a\\n     *      supported stablecoin via Uniswap\\n     * @param _strategyAddr Address of the strategy to collect rewards from.\\n     */\\n    function _harvest(address _strategyAddr) internal {\\n        require(\\n            supportedStrategies[_strategyAddr],\\n            \\\"Not a valid strategy address\\\"\\n        );\\n\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        strategy.collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Swap all supported swap tokens for stablecoins via Uniswap. And send the incentive part\\n     * of the rewards to _rewardTo address.\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function _swap(address _rewardTo) internal {\\n        address[] memory allStrategies = IVault(vaultAddress)\\n            .getAllStrategies();\\n\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            address[] memory rewardTokenAddresses = strategy\\n                .getRewardTokenAddresses();\\n\\n            for (uint256 j = 0; j < rewardTokenAddresses.length; j++) {\\n                _swap(rewardTokenAddresses[j], _rewardTo);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Swap a reward token for stablecoins on Uniswap. The token must have\\n     *       a registered price feed with the price provider.\\n     * @param _swapToken Address of the token to swap.\\n     * @param _rewardTo Address where to send the share of harvest rewards to\\n     */\\n    function _swap(address _swapToken, address _rewardTo) internal virtual;\\n}\\n\",\"keccak256\":\"0x18f3b3a1f6514fa45fb2ce9495a77734ce5872a564c61b6b852a53bb0bdfed4f\",\"license\":\"MIT\"},\"contracts/harvest/OETHHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { BaseHarvester } from \\\"./BaseHarvester.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract OETHHarvester is BaseHarvester {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    // \\\"_usdtAddress\\\" is set to Vault's address, but is really not used\\n    constructor(address _vault) BaseHarvester(_vault) {}\\n\\n    /**\\n     * @dev Swap a reward token for stablecoins on Uniswap. The token must have\\n     *       a registered price feed with the price provider.\\n     * @param _swapToken Address of the token to swap.\\n     * @param _rewardTo Address where to send the share of harvest rewards to\\n     */\\n    function _swap(address _swapToken, address _rewardTo) internal override {\\n        RewardTokenConfig memory tokenConfig = rewardTokenConfigs[_swapToken];\\n\\n        /* This will trigger a return when reward token configuration has not yet been set\\n         * or we have temporarily disabled swapping of specific reward token via setting\\n         * doSwapRewardToken to false.\\n         */\\n        if (!tokenConfig.doSwapRewardToken) {\\n            return;\\n        }\\n\\n        address priceProvider = IVault(vaultAddress).priceProvider();\\n\\n        IERC20 swapToken = IERC20(_swapToken);\\n        uint256 balance = swapToken.balanceOf(address(this));\\n\\n        if (balance == 0) {\\n            return;\\n        }\\n\\n        uint256 balanceToSwap = Math.min(balance, tokenConfig.liquidationLimit);\\n\\n        // Find reward token price feed paired with (W)ETH\\n        uint256 oraclePrice = IOracle(priceProvider).price(_swapToken);\\n\\n        // Oracle price is in 18 digits, WETH decimals are in 1e18\\n        uint256 minExpected = (balanceToSwap *\\n            (1e4 - tokenConfig.allowedSlippageBps) * // max allowed slippage\\n            oraclePrice).scaleBy(18, Helpers.getDecimals(_swapToken)) /\\n            1e4 / // fix the max slippage decimal position\\n            1e18; // and oracle price decimals position\\n\\n        address wethAddress = IUniswapV2Router(\\n            tokenConfig.uniswapV2CompatibleAddr\\n        ).WETH();\\n\\n        // Uniswap redemption path\\n        address[] memory path = new address[](2);\\n        path[0] = _swapToken;\\n        path[1] = wethAddress;\\n\\n        // slither-disable-next-line unused-return\\n        IUniswapV2Router(tokenConfig.uniswapV2CompatibleAddr)\\n            .swapExactTokensForTokens(\\n                balanceToSwap,\\n                minExpected,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        IERC20 wethErc20 = IERC20(wethAddress);\\n        uint256 wethBalance = wethErc20.balanceOf(address(this));\\n\\n        uint256 vaultBps = 1e4 - tokenConfig.harvestRewardBps;\\n        uint256 rewardsProceedsShare = (wethBalance * vaultBps) / 1e4;\\n\\n        require(\\n            vaultBps > tokenConfig.harvestRewardBps,\\n            \\\"Address receiving harvest incentive is receiving more rewards than the rewards proceeds address\\\"\\n        );\\n\\n        wethErc20.safeTransfer(rewardProceedsAddress, rewardsProceedsShare);\\n        wethErc20.safeTransfer(\\n            _rewardTo,\\n            wethBalance - rewardsProceedsShare // remaining share of the rewards\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x36e009bfb6c4c399ec8732eff109e51b0495cc3568221f8b4822de2621c87b00\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eabf152389f145c9c23ed71972af73fb1708cbc4b26e524a9ba29a557b7cfe5\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xb05bdc712c2661e92e351ae0823f0c8fca4249e6cbb43e78b96fafc290bee198\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router {\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n}\\n\",\"keccak256\":\"0x3fdf2b91880f2b669202cc43bdceaf9d01537a9b955fc7a51159fb04fdbc68d4\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002580380380620025808339810160408190526200003491620000c0565b806200004d336000805160206200256083398151915255565b60008051602062002560833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36001600160a01b038116620000a957600080fd5b60601b6001600160601b03191660805250620000f2565b600060208284031215620000d357600080fd5b81516001600160a01b0381168114620000eb57600080fd5b9392505050565b60805160601c61242c62000134600039600081816101a6015281816106ee01528181610abf01528181610e4e01528181610f270152611196015261242c6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063587c8440116100ad578063b76e83af11610071578063b76e83af146102aa578063bb444881146102bd578063c7af3352146102d0578063d38bfff4146102e8578063ee3be5f5146102fb57600080fd5b8063587c8440146101e35780635d36b1901461027457806365f6fa941461027c5780638119c0651461028f578063a994317f1461029757600080fd5b80631072cbea116100f45780631072cbea1461017b57806326aaf9cf1461018e578063430bf08a146101a15780634641257d146101c8578063548f5ae5146101d057600080fd5b806305f566e5146101265780630c340a241461013b5780630e5c011e146101605780630fbd780814610173575b600080fd5b610139610134366004611d5f565b61031e565b005b6101436103e1565b6040516001600160a01b0390911681526020015b60405180910390f35b61013961016e366004611d5f565b6103fe565b610139610469565b610139610189366004611e75565b6104e7565b61013961019c366004611d5f565b61052b565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b61013961059b565b6101396101de366004611d5f565b6105fd565b6102386101f1366004611d5f565b6000602081905290815260409020805460019091015461ffff808316926201000081049091169164010000000082046001600160a01b031691600160c01b900460ff169085565b6040805161ffff96871681529590941660208601526001600160a01b03909216928401929092529015156060830152608082015260a001610157565b61013961063d565b61013961028a366004611dd2565b6106e3565b6101396107d8565b6101396102a5366004611d99565b610846565b600254610143906001600160a01b031681565b6101396102cb366004611e00565b61088f565b6102d8610cb1565b6040519015158152602001610157565b6101396102f6366004611d5f565b610ce2565b6102d8610309366004611d5f565b60016020526000908152604090205460ff1681565b610326610cb1565b61034b5760405162461bcd60e51b81526004016103429061207b565b60405180910390fd5b6001600160a01b0381166103bf5760405162461bcd60e51b815260206004820152603560248201527f526577617264732070726f636565647320616464726573732073686f756c642060448201527462652061206e6f6e207a65726f206164647265737360581b6064820152608401610342565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006103f96000805160206123d78339815191525490565b905090565b610406610cb1565b6104225760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156104545760405162461bcd60e51b8152600401610342906120b2565b6002825561046183610d86565b506001905550565b610471610cb1565b61048d5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156104bf5760405162461bcd60e51b8152600401610342906120b2565b600282556104cb610e4a565b6002546104e0906001600160a01b0316610f23565b5060019055565b6104ef610cb1565b61050b5760405162461bcd60e51b81526004016103429061207b565b6105276105166103e1565b6001600160a01b03841690836110bb565b5050565b610533610cb1565b61054f5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156105815760405162461bcd60e51b8152600401610342906120b2565b6002808355546104619084906001600160a01b031661111e565b6105a3610cb1565b6105bf5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156105f15760405162461bcd60e51b8152600401610342906120b2565b600282556104e0610e4a565b6000805160206123b78339815191528054600281141561062f5760405162461bcd60e51b8152600401610342906120b2565b6002825561046183336116c8565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146106d85760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610342565b6106e133611797565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061071d575061071d610cb1565b6107755760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610342565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f013ed61add17cbfcbbd95bf8543da67c89658c5477d3f3199a1a2d58ecf1913f910160405180910390a15050565b6107e0610cb1565b6107fc5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b78339815191528054600281141561082e5760405162461bcd60e51b8152600401610342906120b2565b6002808355546104e0906001600160a01b0316610f23565b6000805160206123b7833981519152805460028114156108785760405162461bcd60e51b8152600401610342906120b2565b6002825561088684846116c8565b50600190555050565b610897610cb1565b6108b35760405162461bcd60e51b81526004016103429061207b565b6103e88561ffff1611156109195760405162461bcd60e51b815260206004820152602760248201527f416c6c6f77656420736c6970706167652073686f756c64206e6f74206265206f6044820152667665722031302560c81b6064820152608401610342565b6103e88461ffff1611156109815760405162461bcd60e51b815260206004820152602960248201527f4861727665737420726577617264206665652073686f756c64206e6f74206265604482015268206f7665722031302560b81b6064820152608401610342565b6001600160a01b0383166109f55760405162461bcd60e51b815260206004820152603560248201527f556e697377617020636f6d70617469626c6520616464726573732073686f756c60448201527464206265206e6f6e207a65726f206164647265737360581b6064820152608401610342565b6040805160a08101825261ffff878116825286811660208084019182526001600160a01b0388811685870190815287151560608701908152608087018a81528e8416600090815280865289812080548a51985195519451988a1663ffffffff198216176201000096909a169590950298909817640100000000600160c81b031916640100000000938616840260ff60c01b191617600160c01b97151597909702969096178755516001909601959095558651635c4443cf60e11b8152965195969490048116948c947f00000000000000000000000000000000000000000000000000000000000000009092169263b888879e9260048082019391829003018186803b158015610b0357600080fd5b505afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190611d7c565b6040516315d5220f60e31b81526001600160a01b038c811660048301529192509082169063aea910789060240160206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190611ff0565b506001600160a01b03831615801590610be35750866001600160a01b0316836001600160a01b031614155b15610bfd57610bfd6001600160a01b03831684600061185b565b866001600160a01b0316836001600160a01b031614610c4157610c2b6001600160a01b03831688600061185b565b610c416001600160a01b0383168860001961185b565b604080516001600160a01b038c8116825261ffff8c811660208401528b1682840152891660608201526080810188905286151560a082015290517fa366f54fe2381dd56321b1e05d11e00e0acbbee5663bcd5111ed8f604ba530ad9181900360c00190a150505050505050505050565b6000610cc96000805160206123d78339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610cea610cb1565b610d065760405162461bcd60e51b81526004016103429061207b565b610d2e817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610d4e6000805160206123d78339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b03811660009081526001602052604090205460ff16610dee5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420612076616c69642073747261746567792061646472657373000000006044820152606401610342565b6000819050806001600160a01b0316635a063f636040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e2e57600080fd5b505af1158015610e42573d6000803e3d6000fd5b505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610ea557600080fd5b505afa158015610eb9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ee19190810190611ea1565b905060005b815181101561052757610f11828281518110610f0457610f04612367565b6020026020010151610d86565b80610f1b81612336565b915050610ee6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610f7e57600080fd5b505afa158015610f92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fba9190810190611ea1565b905060005b81518110156110b6576000828281518110610fdc57610fdc612367565b602002602001015190506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105d9190810190611ea1565b905060005b81518110156110a05761108e82828151811061108057611080612367565b60200260200101518761111e565b8061109881612336565b915050611062565b50505080806110ae90612336565b915050610fbf565b505050565b6040516001600160a01b0383166024820152604481018290526110b690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261197f565b6001600160a01b0382811660009081526020818152604091829020825160a081018452815461ffff80821683526201000082041693820193909352640100000000830490941692840192909252600160c01b900460ff16151560608301819052600190910154608083015261119257505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ed57600080fd5b505afa158015611201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112259190611d7c565b6040516370a0823160e01b815230600482015290915084906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561126c57600080fd5b505afa158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190611ff0565b9050806112b357505050505050565b60006112c3828660800151611a51565b6040516315d5220f60e31b81526001600160a01b03898116600483015291925060009186169063aea910789060240160206040518083038186803b15801561130a57600080fd5b505afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190611ff0565b90506000670de0b6b3a764000061271061138f60126113608d611a6b565b8b518790611370906127106122cc565b61137e9061ffff168a6122ad565b61138891906122ad565b9190611b54565b61139991906121a0565b6113a391906121a0565b9050600087604001516001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e457600080fd5b505afa1580156113f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141c9190611d7c565b60408051600280825260608201835292935060009290916020830190803683370190505090508a8160008151811061145657611456612367565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061148a5761148a612367565b6001600160a01b0392831660209182029290920101526040808b015190516338ed173960e01b81529116906338ed1739906114d190889087908690309042906004016120da565b600060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115279190810190611f47565b506040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a49190611ff0565b905060008b602001516127106115ba91906122cc565b61ffff16905060006127106115cf83856122ad565b6115d991906121a0565b90508c6020015161ffff16821161167e5760405162461bcd60e51b815260206004820152605f60248201527f4164647265737320726563656976696e67206861727665737420696e63656e7460448201527f69766520697320726563656976696e67206d6f7265207265776172647320746860648201527f616e2074686520726577617264732070726f6365656473206164647265737300608482015260a401610342565b600254611698906001600160a01b038681169116836110bb565b6116b78e6116a683866122ef565b6001600160a01b03871691906110bb565b505050505050505050505050505050565b6116d182610d86565b60008290506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561171157600080fd5b505afa158015611725573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174d9190810190611ea1565b905060005b81518110156117905761177e82828151811061177057611770612367565b60200260200101518561111e565b8061178881612336565b915050611752565b5050505050565b6001600160a01b0381166117ed5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610342565b806001600160a01b031661180d6000805160206123d78339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611858816000805160206123d783398151915255565b50565b8015806118e45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156118aa57600080fd5b505afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190611ff0565b155b61194f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610342565b6040516001600160a01b0383166024820152604481018290526110b690849063095ea7b360e01b906064016110e7565b60006119d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bb89092919063ffffffff16565b8051909150156110b657808060200190518101906119f29190611fd3565b6110b65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610342565b6000818310611a605781611a62565b825b90505b92915050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa757600080fd5b505afa158015611abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adf9190612009565b60ff16905060048110158015611af6575060128111155b611a655760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610342565b600081831115611b8457611b7d611b6b83856122ef565b611b7690600a612205565b8590611bcf565b9350611bae565b81831015611bae57611bab611b9984846122ef565b611ba490600a612205565b8590611bdb565b93505b50825b9392505050565b6060611bc78484600085611be7565b949350505050565b6000611a6282846122ad565b6000611a6282846121a0565b606082471015611c485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610342565b843b611c965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610342565b600080866001600160a01b03168587604051611cb2919061202c565b60006040518083038185875af1925050503d8060008114611cef576040519150601f19603f3d011682016040523d82523d6000602084013e611cf4565b606091505b5091509150611d04828286611d0f565b979650505050505050565b60608315611d1e575081611bb1565b825115611d2e5782518084602001fd5b8160405162461bcd60e51b81526004016103429190612048565b803561ffff81168114611d5a57600080fd5b919050565b600060208284031215611d7157600080fd5b8135611bb181612393565b600060208284031215611d8e57600080fd5b8151611bb181612393565b60008060408385031215611dac57600080fd5b8235611db781612393565b91506020830135611dc781612393565b809150509250929050565b60008060408385031215611de557600080fd5b8235611df081612393565b91506020830135611dc7816123a8565b60008060008060008060c08789031215611e1957600080fd5b8635611e2481612393565b9550611e3260208801611d48565b9450611e4060408801611d48565b93506060870135611e5081612393565b92506080870135915060a0870135611e67816123a8565b809150509295509295509295565b60008060408385031215611e8857600080fd5b8235611e9381612393565b946020939093013593505050565b60006020808385031215611eb457600080fd5b825167ffffffffffffffff811115611ecb57600080fd5b8301601f81018513611edc57600080fd5b8051611eef611eea8261217c565b61214b565b80828252848201915084840188868560051b8701011115611f0f57600080fd5b600094505b83851015611f3b578051611f2781612393565b835260019490940193918501918501611f14565b50979650505050505050565b60006020808385031215611f5a57600080fd5b825167ffffffffffffffff811115611f7157600080fd5b8301601f81018513611f8257600080fd5b8051611f90611eea8261217c565b80828252848201915084840188868560051b8701011115611fb057600080fd5b600094505b83851015611f3b578051835260019490940193918501918501611fb5565b600060208284031215611fe557600080fd5b8151611bb1816123a8565b60006020828403121561200257600080fd5b5051919050565b60006020828403121561201b57600080fd5b815160ff81168114611bb157600080fd5b6000825161203e818460208701612306565b9190910192915050565b6020815260008251806020840152612067816040850160208701612306565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561212a5784516001600160a01b031683529383019391830191600101612105565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156121745761217461237d565b604052919050565b600067ffffffffffffffff8211156121965761219661237d565b5060051b60200190565b6000826121bd57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156121fd5781600019048211156121e3576121e3612351565b808516156121f057918102915b93841c93908002906121c7565b509250929050565b6000611a62838360008261221b57506001611a65565b8161222857506000611a65565b816001811461223e576002811461224857612264565b6001915050611a65565b60ff84111561225957612259612351565b50506001821b611a65565b5060208310610133831016604e8410600b8410161715612287575081810a611a65565b61229183836121c2565b80600019048211156122a5576122a5612351565b029392505050565b60008160001904831182151516156122c7576122c7612351565b500290565b600061ffff838116908316818110156122e7576122e7612351565b039392505050565b60008282101561230157612301612351565b500390565b60005b83811015612321578181015183820152602001612309565b83811115612330576000848401525b50505050565b600060001982141561234a5761234a612351565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461185857600080fd5b801515811461185857600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122073cce3ab51ea2e787f2242d9d04e8bec328de8209e75eec953794cbbbf9346d464736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063587c8440116100ad578063b76e83af11610071578063b76e83af146102aa578063bb444881146102bd578063c7af3352146102d0578063d38bfff4146102e8578063ee3be5f5146102fb57600080fd5b8063587c8440146101e35780635d36b1901461027457806365f6fa941461027c5780638119c0651461028f578063a994317f1461029757600080fd5b80631072cbea116100f45780631072cbea1461017b57806326aaf9cf1461018e578063430bf08a146101a15780634641257d146101c8578063548f5ae5146101d057600080fd5b806305f566e5146101265780630c340a241461013b5780630e5c011e146101605780630fbd780814610173575b600080fd5b610139610134366004611d5f565b61031e565b005b6101436103e1565b6040516001600160a01b0390911681526020015b60405180910390f35b61013961016e366004611d5f565b6103fe565b610139610469565b610139610189366004611e75565b6104e7565b61013961019c366004611d5f565b61052b565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b61013961059b565b6101396101de366004611d5f565b6105fd565b6102386101f1366004611d5f565b6000602081905290815260409020805460019091015461ffff808316926201000081049091169164010000000082046001600160a01b031691600160c01b900460ff169085565b6040805161ffff96871681529590941660208601526001600160a01b03909216928401929092529015156060830152608082015260a001610157565b61013961063d565b61013961028a366004611dd2565b6106e3565b6101396107d8565b6101396102a5366004611d99565b610846565b600254610143906001600160a01b031681565b6101396102cb366004611e00565b61088f565b6102d8610cb1565b6040519015158152602001610157565b6101396102f6366004611d5f565b610ce2565b6102d8610309366004611d5f565b60016020526000908152604090205460ff1681565b610326610cb1565b61034b5760405162461bcd60e51b81526004016103429061207b565b60405180910390fd5b6001600160a01b0381166103bf5760405162461bcd60e51b815260206004820152603560248201527f526577617264732070726f636565647320616464726573732073686f756c642060448201527462652061206e6f6e207a65726f206164647265737360581b6064820152608401610342565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006103f96000805160206123d78339815191525490565b905090565b610406610cb1565b6104225760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156104545760405162461bcd60e51b8152600401610342906120b2565b6002825561046183610d86565b506001905550565b610471610cb1565b61048d5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156104bf5760405162461bcd60e51b8152600401610342906120b2565b600282556104cb610e4a565b6002546104e0906001600160a01b0316610f23565b5060019055565b6104ef610cb1565b61050b5760405162461bcd60e51b81526004016103429061207b565b6105276105166103e1565b6001600160a01b03841690836110bb565b5050565b610533610cb1565b61054f5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156105815760405162461bcd60e51b8152600401610342906120b2565b6002808355546104619084906001600160a01b031661111e565b6105a3610cb1565b6105bf5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b7833981519152805460028114156105f15760405162461bcd60e51b8152600401610342906120b2565b600282556104e0610e4a565b6000805160206123b78339815191528054600281141561062f5760405162461bcd60e51b8152600401610342906120b2565b6002825561046183336116c8565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146106d85760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610342565b6106e133611797565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061071d575061071d610cb1565b6107755760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610342565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f013ed61add17cbfcbbd95bf8543da67c89658c5477d3f3199a1a2d58ecf1913f910160405180910390a15050565b6107e0610cb1565b6107fc5760405162461bcd60e51b81526004016103429061207b565b6000805160206123b78339815191528054600281141561082e5760405162461bcd60e51b8152600401610342906120b2565b6002808355546104e0906001600160a01b0316610f23565b6000805160206123b7833981519152805460028114156108785760405162461bcd60e51b8152600401610342906120b2565b6002825561088684846116c8565b50600190555050565b610897610cb1565b6108b35760405162461bcd60e51b81526004016103429061207b565b6103e88561ffff1611156109195760405162461bcd60e51b815260206004820152602760248201527f416c6c6f77656420736c6970706167652073686f756c64206e6f74206265206f6044820152667665722031302560c81b6064820152608401610342565b6103e88461ffff1611156109815760405162461bcd60e51b815260206004820152602960248201527f4861727665737420726577617264206665652073686f756c64206e6f74206265604482015268206f7665722031302560b81b6064820152608401610342565b6001600160a01b0383166109f55760405162461bcd60e51b815260206004820152603560248201527f556e697377617020636f6d70617469626c6520616464726573732073686f756c60448201527464206265206e6f6e207a65726f206164647265737360581b6064820152608401610342565b6040805160a08101825261ffff878116825286811660208084019182526001600160a01b0388811685870190815287151560608701908152608087018a81528e8416600090815280865289812080548a51985195519451988a1663ffffffff198216176201000096909a169590950298909817640100000000600160c81b031916640100000000938616840260ff60c01b191617600160c01b97151597909702969096178755516001909601959095558651635c4443cf60e11b8152965195969490048116948c947f00000000000000000000000000000000000000000000000000000000000000009092169263b888879e9260048082019391829003018186803b158015610b0357600080fd5b505afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190611d7c565b6040516315d5220f60e31b81526001600160a01b038c811660048301529192509082169063aea910789060240160206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190611ff0565b506001600160a01b03831615801590610be35750866001600160a01b0316836001600160a01b031614155b15610bfd57610bfd6001600160a01b03831684600061185b565b866001600160a01b0316836001600160a01b031614610c4157610c2b6001600160a01b03831688600061185b565b610c416001600160a01b0383168860001961185b565b604080516001600160a01b038c8116825261ffff8c811660208401528b1682840152891660608201526080810188905286151560a082015290517fa366f54fe2381dd56321b1e05d11e00e0acbbee5663bcd5111ed8f604ba530ad9181900360c00190a150505050505050505050565b6000610cc96000805160206123d78339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610cea610cb1565b610d065760405162461bcd60e51b81526004016103429061207b565b610d2e817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610d4e6000805160206123d78339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b03811660009081526001602052604090205460ff16610dee5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420612076616c69642073747261746567792061646472657373000000006044820152606401610342565b6000819050806001600160a01b0316635a063f636040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e2e57600080fd5b505af1158015610e42573d6000803e3d6000fd5b505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610ea557600080fd5b505afa158015610eb9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ee19190810190611ea1565b905060005b815181101561052757610f11828281518110610f0457610f04612367565b6020026020010151610d86565b80610f1b81612336565b915050610ee6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b158015610f7e57600080fd5b505afa158015610f92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fba9190810190611ea1565b905060005b81518110156110b6576000828281518110610fdc57610fdc612367565b602002602001015190506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105d9190810190611ea1565b905060005b81518110156110a05761108e82828151811061108057611080612367565b60200260200101518761111e565b8061109881612336565b915050611062565b50505080806110ae90612336565b915050610fbf565b505050565b6040516001600160a01b0383166024820152604481018290526110b690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261197f565b6001600160a01b0382811660009081526020818152604091829020825160a081018452815461ffff80821683526201000082041693820193909352640100000000830490941692840192909252600160c01b900460ff16151560608301819052600190910154608083015261119257505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ed57600080fd5b505afa158015611201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112259190611d7c565b6040516370a0823160e01b815230600482015290915084906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561126c57600080fd5b505afa158015611280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a49190611ff0565b9050806112b357505050505050565b60006112c3828660800151611a51565b6040516315d5220f60e31b81526001600160a01b03898116600483015291925060009186169063aea910789060240160206040518083038186803b15801561130a57600080fd5b505afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190611ff0565b90506000670de0b6b3a764000061271061138f60126113608d611a6b565b8b518790611370906127106122cc565b61137e9061ffff168a6122ad565b61138891906122ad565b9190611b54565b61139991906121a0565b6113a391906121a0565b9050600087604001516001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e457600080fd5b505afa1580156113f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141c9190611d7c565b60408051600280825260608201835292935060009290916020830190803683370190505090508a8160008151811061145657611456612367565b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061148a5761148a612367565b6001600160a01b0392831660209182029290920101526040808b015190516338ed173960e01b81529116906338ed1739906114d190889087908690309042906004016120da565b600060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115279190810190611f47565b506040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a082319060240160206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a49190611ff0565b905060008b602001516127106115ba91906122cc565b61ffff16905060006127106115cf83856122ad565b6115d991906121a0565b90508c6020015161ffff16821161167e5760405162461bcd60e51b815260206004820152605f60248201527f4164647265737320726563656976696e67206861727665737420696e63656e7460448201527f69766520697320726563656976696e67206d6f7265207265776172647320746860648201527f616e2074686520726577617264732070726f6365656473206164647265737300608482015260a401610342565b600254611698906001600160a01b038681169116836110bb565b6116b78e6116a683866122ef565b6001600160a01b03871691906110bb565b505050505050505050505050505050565b6116d182610d86565b60008290506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561171157600080fd5b505afa158015611725573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174d9190810190611ea1565b905060005b81518110156117905761177e82828151811061177057611770612367565b60200260200101518561111e565b8061178881612336565b915050611752565b5050505050565b6001600160a01b0381166117ed5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610342565b806001600160a01b031661180d6000805160206123d78339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611858816000805160206123d783398151915255565b50565b8015806118e45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156118aa57600080fd5b505afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190611ff0565b155b61194f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610342565b6040516001600160a01b0383166024820152604481018290526110b690849063095ea7b360e01b906064016110e7565b60006119d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bb89092919063ffffffff16565b8051909150156110b657808060200190518101906119f29190611fd3565b6110b65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610342565b6000818310611a605781611a62565b825b90505b92915050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa757600080fd5b505afa158015611abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adf9190612009565b60ff16905060048110158015611af6575060128111155b611a655760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610342565b600081831115611b8457611b7d611b6b83856122ef565b611b7690600a612205565b8590611bcf565b9350611bae565b81831015611bae57611bab611b9984846122ef565b611ba490600a612205565b8590611bdb565b93505b50825b9392505050565b6060611bc78484600085611be7565b949350505050565b6000611a6282846122ad565b6000611a6282846121a0565b606082471015611c485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610342565b843b611c965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610342565b600080866001600160a01b03168587604051611cb2919061202c565b60006040518083038185875af1925050503d8060008114611cef576040519150601f19603f3d011682016040523d82523d6000602084013e611cf4565b606091505b5091509150611d04828286611d0f565b979650505050505050565b60608315611d1e575081611bb1565b825115611d2e5782518084602001fd5b8160405162461bcd60e51b81526004016103429190612048565b803561ffff81168114611d5a57600080fd5b919050565b600060208284031215611d7157600080fd5b8135611bb181612393565b600060208284031215611d8e57600080fd5b8151611bb181612393565b60008060408385031215611dac57600080fd5b8235611db781612393565b91506020830135611dc781612393565b809150509250929050565b60008060408385031215611de557600080fd5b8235611df081612393565b91506020830135611dc7816123a8565b60008060008060008060c08789031215611e1957600080fd5b8635611e2481612393565b9550611e3260208801611d48565b9450611e4060408801611d48565b93506060870135611e5081612393565b92506080870135915060a0870135611e67816123a8565b809150509295509295509295565b60008060408385031215611e8857600080fd5b8235611e9381612393565b946020939093013593505050565b60006020808385031215611eb457600080fd5b825167ffffffffffffffff811115611ecb57600080fd5b8301601f81018513611edc57600080fd5b8051611eef611eea8261217c565b61214b565b80828252848201915084840188868560051b8701011115611f0f57600080fd5b600094505b83851015611f3b578051611f2781612393565b835260019490940193918501918501611f14565b50979650505050505050565b60006020808385031215611f5a57600080fd5b825167ffffffffffffffff811115611f7157600080fd5b8301601f81018513611f8257600080fd5b8051611f90611eea8261217c565b80828252848201915084840188868560051b8701011115611fb057600080fd5b600094505b83851015611f3b578051835260019490940193918501918501611fb5565b600060208284031215611fe557600080fd5b8151611bb1816123a8565b60006020828403121561200257600080fd5b5051919050565b60006020828403121561201b57600080fd5b815160ff81168114611bb157600080fd5b6000825161203e818460208701612306565b9190910192915050565b6020815260008251806020840152612067816040850160208701612306565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561212a5784516001600160a01b031683529383019391830191600101612105565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156121745761217461237d565b604052919050565b600067ffffffffffffffff8211156121965761219661237d565b5060051b60200190565b6000826121bd57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156121fd5781600019048211156121e3576121e3612351565b808516156121f057918102915b93841c93908002906121c7565b509250929050565b6000611a62838360008261221b57506001611a65565b8161222857506000611a65565b816001811461223e576002811461224857612264565b6001915050611a65565b60ff84111561225957612259612351565b50506001821b611a65565b5060208310610133831016604e8410600b8410161715612287575081810a611a65565b61229183836121c2565b80600019048211156122a5576122a5612351565b029392505050565b60008160001904831182151516156122c7576122c7612351565b500290565b600061ffff838116908316818110156122e7576122e7612351565b039392505050565b60008282101561230157612301612351565b500390565b60005b83811015612321578181015183820152602001612309565b83811115612330576000848401525b50505050565b600060001982141561234a5761234a612351565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461185857600080fd5b801515811461185857600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122073cce3ab51ea2e787f2242d9d04e8bec328de8209e75eec953794cbbbf9346d464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "harvest()": {
        "details": "Collect reward tokens from all strategies"
      },
      "harvest(address)": {
        "details": "Collect reward tokens for a specific strategy.",
        "params": {
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "harvestAndSwap(address)": {
        "details": "Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone. Rewards incentivizing      the caller are sent to the caller of this function.",
        "params": {
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "harvestAndSwap(address,address)": {
        "details": "Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Can be called by anyone.",
        "params": {
          "_rewardTo": "Address where to send a share of harvest rewards to as an incentive      for executing this function",
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "setRewardTokenConfig(address,uint16,uint16,address,uint256,bool)": {
        "details": "Add/update a reward token configuration that holds harvesting config variables",
        "params": {
          "_allowedSlippageBps": "uint16 maximum allowed slippage denominated in basis points.        Example: 300 == 3% slippage",
          "_doSwapRewardToken": "bool When true the reward token is being swapped. In a need of (temporarily)        disabling the swapping of a reward token this needs to be set to false.",
          "_harvestRewardBps": "uint16 amount of reward tokens the caller of the function is rewarded.        Example: 100 == 1%",
          "_liquidationLimit": "uint256 Maximum amount of token to be sold per one swap function call.        When value is 0 there is no limit.",
          "_tokenAddress": "Address of the reward token",
          "_uniswapV2CompatibleAddr": "Address Address of a UniswapV2 compatible contract to perform        the exchange from reward tokens to stablecoin (currently hard-coded to USDT)"
        }
      },
      "setRewardsProceedsAddress(address)": {
        "params": {
          "_rewardProceedsAddress": "Address of the reward token"
        }
      },
      "setSupportedStrategy(address,bool)": {
        "details": "Flags a strategy as supported or not supported one",
        "params": {
          "_isSupported": "Bool marking strategy as supported or not supported",
          "_strategyAddress": "Address of the strategy"
        }
      },
      "swap()": {
        "details": "Swap all supported swap tokens for stablecoins via Uniswap."
      },
      "swapRewardToken(address)": {
        "details": "Governance convenience function to swap a specific _rewardToken and send       rewards to the vault.",
        "params": {
          "_swapToken": "Address of the token to swap."
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rewardProceedsAddress()": {
        "notice": "Address receiving rewards proceeds. Initially the Vault contract later will possibly be replaced by another contract that eases out rewards distribution."
      },
      "setRewardsProceedsAddress(address)": {
        "notice": "Set the Address receiving rewards proceeds."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4591,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "rewardTokenConfigs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(RewardTokenConfig)4586_storage)"
      },
      {
        "astId": 4595,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "supportedStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4600,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "rewardProceedsAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(RewardTokenConfig)4586_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseHarvester.RewardTokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardTokenConfig)4586_storage"
      },
      "t_struct(RewardTokenConfig)4586_storage": {
        "encoding": "inplace",
        "label": "struct BaseHarvester.RewardTokenConfig",
        "members": [
          {
            "astId": 4577,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "allowedSlippageBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4579,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "harvestRewardBps",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4581,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "uniswapV2CompatibleAddr",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4583,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "doSwapRewardToken",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4585,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "liquidationLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x4De255cd196469752632e76CbAaAEeE0070D9A85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minExpected",
          "type": "uint256"
        }
      ],
      "name": "BalanceMismatchAfterSwap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyBalancerPoolId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidCurvePoolAssetIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHarvestRewardBps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippageBps",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum BaseHarvester.SwapPlatform",
          "name": "swapPlatform",
          "type": "uint8"
        }
      ],
      "name": "InvalidSwapPlatform",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidTokenInSwapPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUniswapV2PathLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minExpected",
          "type": "uint256"
        }
      ],
      "name": "SlippageError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategyAddress",
          "type": "address"
        }
      ],
      "name": "UnsupportedStrategy",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newProceedsAddress",
          "type": "address"
        }
      ],
      "name": "RewardProceedsAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "farmer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protcolYield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "farmerFee",
          "type": "uint256"
        }
      ],
      "name": "RewardProceedsTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "allowedSlippageBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "harvestRewardBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum BaseHarvester.SwapPlatform",
          "name": "swapPlatform",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPlatformAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "doSwapRewardToken",
          "type": "bool"
        }
      ],
      "name": "RewardTokenConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "swappedInto",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum BaseHarvester.SwapPlatform",
          "name": "swapPlatform",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "name": "SupportedStrategyUpdate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balancerPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "curvePoolIndices",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "rewardTokenIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "baseTokenIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTo",
          "type": "address"
        }
      ],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardProceedsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokenConfigs",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "allowedSlippageBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "harvestRewardBps",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "swapPlatformAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "doSwapRewardToken",
          "type": "bool"
        },
        {
          "internalType": "enum BaseHarvester.SwapPlatform",
          "name": "swapPlatform",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardProceedsAddress",
          "type": "address"
        }
      ],
      "name": "setRewardProceedsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "allowedSlippageBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "harvestRewardBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "swapPlatformAddr",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "doSwapRewardToken",
              "type": "bool"
            },
            {
              "internalType": "enum BaseHarvester.SwapPlatform",
              "name": "swapPlatform",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "liquidationLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseHarvester.RewardTokenConfig",
          "name": "tokenConfig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "setRewardTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "setSupportedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniswapV2Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniswapV3Path",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa878fb2e1169054f60af2c19dad048749387d3da569ee97c25e038dd07ca527a",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0x4De255cd196469752632e76CbAaAEeE0070D9A85",
    "transactionIndex": 0,
    "gasUsed": "2857601",
    "logsBloom": "0x
    "blockHash": "0x2cc3b6a9bf522a434947ea224854576563cf5742d878394c5d3d56424d51a7cc",
    "transactionHash": "0xa878fb2e1169054f60af2c19dad048749387d3da569ee97c25e038dd07ca527a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18669697,
        "transactionHash": "0xa878fb2e1169054f60af2c19dad048749387d3da569ee97c25e038dd07ca527a",
        "address": "0x4De255cd196469752632e76CbAaAEeE0070D9A85",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2cc3b6a9bf522a434947ea224854576563cf5742d878394c5d3d56424d51a7cc"
      }
    ],
    "blockNumber": 18669697,
    "cumulativeGasUsed": "2857601",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39254033945AA2E4809Cc2977E7087BEE48bd7Ab",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 2,
  "solcInputHash": "12a0ec7d553ea14c37843dc6b8319f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExpected\",\"type\":\"uint256\"}],\"name\":\"BalanceMismatchAfterSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBalancerPoolId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidCurvePoolAssetIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHarvestRewardBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippageBps\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum BaseHarvester.SwapPlatform\",\"name\":\"swapPlatform\",\"type\":\"uint8\"}],\"name\":\"InvalidSwapPlatform\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenInSwapPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUniswapV2PathLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExpected\",\"type\":\"uint256\"}],\"name\":\"SlippageError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"}],\"name\":\"UnsupportedStrategy\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newProceedsAddress\",\"type\":\"address\"}],\"name\":\"RewardProceedsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protcolYield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmerFee\",\"type\":\"uint256\"}],\"name\":\"RewardProceedsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"allowedSlippageBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"harvestRewardBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum BaseHarvester.SwapPlatform\",\"name\":\"swapPlatform\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPlatformAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"doSwapRewardToken\",\"type\":\"bool\"}],\"name\":\"RewardTokenConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swappedInto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum BaseHarvester.SwapPlatform\",\"name\":\"swapPlatform\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"RewardTokenSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"SupportedStrategyUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancerPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curvePoolIndices\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardTokenIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseTokenIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTo\",\"type\":\"address\"}],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardProceedsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenConfigs\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"allowedSlippageBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"harvestRewardBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"swapPlatformAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"doSwapRewardToken\",\"type\":\"bool\"},{\"internalType\":\"enum BaseHarvester.SwapPlatform\",\"name\":\"swapPlatform\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardProceedsAddress\",\"type\":\"address\"}],\"name\":\"setRewardProceedsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"allowedSlippageBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"harvestRewardBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"swapPlatformAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"doSwapRewardToken\",\"type\":\"bool\"},{\"internalType\":\"enum BaseHarvester.SwapPlatform\",\"name\":\"swapPlatform\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseHarvester.RewardTokenConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"setRewardTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"setSupportedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapV2Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV3Path\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"harvestAndSwap(address)\":{\"details\":\"Collect reward tokens from a specific strategy and swap them for      base token on the configured swap platform. Can be called by anyone.      Rewards incentivizing the caller are sent to the caller of this function.\",\"params\":{\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"harvestAndSwap(address,address)\":{\"details\":\"Collect reward tokens from a specific strategy and swap them for      base token on the configured swap platform. Can be called by anyone\",\"params\":{\"_rewardTo\":\"Address where to send a share of harvest rewards to as an incentive      for executing this function\",\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"setRewardProceedsAddress(address)\":{\"params\":{\"_rewardProceedsAddress\":\"Address of the reward token\"}},\"setRewardTokenConfig(address,(uint16,uint16,address,bool,uint8,uint256),bytes)\":{\"details\":\"Add/update a reward token configuration that holds harvesting config variables\",\"params\":{\"_tokenAddress\":\"Address of the reward token\",\"swapData\":\"Additional data required for swapping\",\"tokenConfig\":\".swapPlatform SwapPlatform to use for Swapping\"}},\"setSupportedStrategy(address,bool)\":{\"details\":\"Flags a strategy as supported or not supported one\",\"params\":{\"_isSupported\":\"Bool marking strategy as supported or not supported\",\"_strategyAddress\":\"Address of the strategy\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseTokenAddress()\":{\"notice\":\"All tokens are swapped to this token before it gets transferred to the `rewardProceedsAddress`. USDT for OUSD and WETH for OETH.*\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"rewardProceedsAddress()\":{\"notice\":\"Address receiving rewards proceeds. Initially the Vault contract later will possibly be replaced by another contract that eases out rewards distribution.*\"},\"setRewardProceedsAddress(address)\":{\"notice\":\"Set the Address receiving rewards proceeds.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/harvest/OETHHarvester.sol\":\"OETHHarvester\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/harvest/BaseHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport { IUniswapV3Router } from \\\"../interfaces/uniswap/IUniswapV3Router.sol\\\";\\nimport { IBalancerVault } from \\\"../interfaces/balancer/IBalancerVault.sol\\\";\\nimport { ICurvePool } from \\\"../strategies/ICurvePool.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\nabstract contract BaseHarvester is Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    enum SwapPlatform {\\n        UniswapV2Compatible,\\n        UniswapV3,\\n        Balancer,\\n        Curve\\n    }\\n\\n    event SupportedStrategyUpdate(address strategyAddress, bool isSupported);\\n    event RewardTokenConfigUpdated(\\n        address tokenAddress,\\n        uint16 allowedSlippageBps,\\n        uint16 harvestRewardBps,\\n        SwapPlatform swapPlatform,\\n        address swapPlatformAddr,\\n        bytes swapData,\\n        uint256 liquidationLimit,\\n        bool doSwapRewardToken\\n    );\\n    event RewardTokenSwapped(\\n        address indexed rewardToken,\\n        address indexed swappedInto,\\n        SwapPlatform swapPlatform,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event RewardProceedsTransferred(\\n        address indexed token,\\n        address farmer,\\n        uint256 protcolYield,\\n        uint256 farmerFee\\n    );\\n    event RewardProceedsAddressChanged(address newProceedsAddress);\\n\\n    error EmptyAddress();\\n    error InvalidSlippageBps();\\n    error InvalidHarvestRewardBps();\\n\\n    error InvalidSwapPlatform(SwapPlatform swapPlatform);\\n\\n    error InvalidUniswapV2PathLength();\\n    error InvalidTokenInSwapPath(address token);\\n    error EmptyBalancerPoolId();\\n    error InvalidCurvePoolAssetIndex(address token);\\n\\n    error UnsupportedStrategy(address strategyAddress);\\n\\n    error SlippageError(uint256 actualBalance, uint256 minExpected);\\n    error BalanceMismatchAfterSwap(uint256 actualBalance, uint256 minExpected);\\n\\n    // Configuration properties for harvesting logic of reward tokens\\n    struct RewardTokenConfig {\\n        // Max allowed slippage when swapping reward token for a stablecoin denominated in basis points.\\n        uint16 allowedSlippageBps;\\n        // Reward when calling a harvest function denominated in basis points.\\n        uint16 harvestRewardBps;\\n        // Address of compatible exchange protocol (Uniswap V2/V3, SushiSwap, Balancer and Curve).\\n        address swapPlatformAddr;\\n        /* When true the reward token is being swapped. In a need of (temporarily) disabling the swapping of\\n         * a reward token this needs to be set to false.\\n         */\\n        bool doSwapRewardToken;\\n        // Platform to use for Swapping\\n        SwapPlatform swapPlatform;\\n        /* How much token can be sold per one harvest call. If the balance of rewards tokens\\n         * exceeds that limit multiple harvest calls are required to harvest all of the tokens.\\n         * Set it to MAX_INT to effectively disable the limit.\\n         */\\n        uint256 liquidationLimit;\\n    }\\n\\n    mapping(address => RewardTokenConfig) public rewardTokenConfigs;\\n    mapping(address => bool) public supportedStrategies;\\n\\n    address public immutable vaultAddress;\\n\\n    /**\\n     * Address receiving rewards proceeds. Initially the Vault contract later will possibly\\n     * be replaced by another contract that eases out rewards distribution.\\n     **/\\n    address public rewardProceedsAddress;\\n\\n    /**\\n     * All tokens are swapped to this token before it gets transferred\\n     * to the `rewardProceedsAddress`. USDT for OUSD and WETH for OETH.\\n     **/\\n    address public immutable baseTokenAddress;\\n    // Cached decimals for `baseTokenAddress`\\n    uint256 public immutable baseTokenDecimals;\\n\\n    // Uniswap V2 path for reward tokens using Uniswap V2 Router\\n    mapping(address => address[]) public uniswapV2Path;\\n    // Uniswap V3 path for reward tokens using Uniswap V3 Router\\n    mapping(address => bytes) public uniswapV3Path;\\n    // Pool ID to use for reward tokens on Balancer\\n    mapping(address => bytes32) public balancerPoolId;\\n\\n    struct CurvePoolIndices {\\n        // Casted into uint128 and stored in a struct to save gas\\n        uint128 rewardTokenIndex;\\n        uint128 baseTokenIndex;\\n    }\\n    // Packed indices of assets on the Curve pool\\n    mapping(address => CurvePoolIndices) public curvePoolIndices;\\n\\n    constructor(address _vaultAddress, address _baseTokenAddress) {\\n        require(_vaultAddress != address(0));\\n        require(_baseTokenAddress != address(0));\\n\\n        vaultAddress = _vaultAddress;\\n        baseTokenAddress = _baseTokenAddress;\\n\\n        // Cache decimals as well\\n        baseTokenDecimals = Helpers.getDecimals(_baseTokenAddress);\\n    }\\n\\n    /***************************************\\n                 Configuration\\n    ****************************************/\\n\\n    /**\\n     * Set the Address receiving rewards proceeds.\\n     * @param _rewardProceedsAddress Address of the reward token\\n     */\\n    function setRewardProceedsAddress(address _rewardProceedsAddress)\\n        external\\n        onlyGovernor\\n    {\\n        if (_rewardProceedsAddress == address(0)) {\\n            revert EmptyAddress();\\n        }\\n\\n        rewardProceedsAddress = _rewardProceedsAddress;\\n        emit RewardProceedsAddressChanged(_rewardProceedsAddress);\\n    }\\n\\n    /**\\n     * @dev Add/update a reward token configuration that holds harvesting config variables\\n     * @param _tokenAddress Address of the reward token\\n     * @param tokenConfig.allowedSlippageBps uint16 maximum allowed slippage denominated in basis points.\\n     *          Example: 300 == 3% slippage\\n     * @param tokenConfig.harvestRewardBps uint16 amount of reward tokens the caller of the function is rewarded.\\n     *          Example: 100 == 1%\\n     * @param tokenConfig.swapPlatformAddr Address Address of a UniswapV2 compatible contract to perform\\n     *          the exchange from reward tokens to stablecoin (currently hard-coded to USDT)\\n     * @param tokenConfig.liquidationLimit uint256 Maximum amount of token to be sold per one swap function call.\\n     *          When value is 0 there is no limit.\\n     * @param tokenConfig.doSwapRewardToken bool Disables swapping of the token when set to true,\\n     *          does not cause it to revert though.\\n     * @param tokenConfig.swapPlatform SwapPlatform to use for Swapping\\n     * @param swapData Additional data required for swapping\\n     */\\n    function setRewardTokenConfig(\\n        address _tokenAddress,\\n        RewardTokenConfig calldata tokenConfig,\\n        bytes calldata swapData\\n    ) external onlyGovernor {\\n        if (tokenConfig.allowedSlippageBps > 1000) {\\n            revert InvalidSlippageBps();\\n        }\\n\\n        if (tokenConfig.harvestRewardBps > 1000) {\\n            revert InvalidHarvestRewardBps();\\n        }\\n\\n        address newRouterAddress = tokenConfig.swapPlatformAddr;\\n        if (newRouterAddress == address(0)) {\\n            // Swap router address should be non zero address\\n            revert EmptyAddress();\\n        }\\n\\n        address oldRouterAddress = rewardTokenConfigs[_tokenAddress]\\n            .swapPlatformAddr;\\n        rewardTokenConfigs[_tokenAddress] = tokenConfig;\\n\\n        // Revert if feed does not exist\\n        // slither-disable-next-line unused-return\\n        IOracle(IVault(vaultAddress).priceProvider()).price(_tokenAddress);\\n\\n        IERC20 token = IERC20(_tokenAddress);\\n        // if changing token swap provider cancel existing allowance\\n        if (\\n            /* oldRouterAddress == address(0) when there is no pre-existing\\n             * configuration for said rewards token\\n             */\\n            oldRouterAddress != address(0) &&\\n            oldRouterAddress != newRouterAddress\\n        ) {\\n            token.safeApprove(oldRouterAddress, 0);\\n        }\\n\\n        // Give SwapRouter infinite approval when needed\\n        if (oldRouterAddress != newRouterAddress) {\\n            token.safeApprove(newRouterAddress, 0);\\n            token.safeApprove(newRouterAddress, type(uint256).max);\\n        }\\n\\n        SwapPlatform _platform = tokenConfig.swapPlatform;\\n        if (_platform == SwapPlatform.UniswapV2Compatible) {\\n            uniswapV2Path[_tokenAddress] = _decodeUniswapV2Path(\\n                swapData,\\n                _tokenAddress\\n            );\\n        } else if (_platform == SwapPlatform.UniswapV3) {\\n            uniswapV3Path[_tokenAddress] = _decodeUniswapV3Path(\\n                swapData,\\n                _tokenAddress\\n            );\\n        } else if (_platform == SwapPlatform.Balancer) {\\n            balancerPoolId[_tokenAddress] = _decodeBalancerPoolId(\\n                swapData,\\n                newRouterAddress,\\n                _tokenAddress\\n            );\\n        } else if (_platform == SwapPlatform.Curve) {\\n            curvePoolIndices[_tokenAddress] = _decodeCurvePoolIndices(\\n                swapData,\\n                newRouterAddress,\\n                _tokenAddress\\n            );\\n        } else {\\n            // Note: This code is unreachable since Solidity reverts when\\n            // the value is outside the range of defined values of the enum\\n            // (even if it's under the max length of the base type)\\n            revert InvalidSwapPlatform(_platform);\\n        }\\n\\n        emit RewardTokenConfigUpdated(\\n            _tokenAddress,\\n            tokenConfig.allowedSlippageBps,\\n            tokenConfig.harvestRewardBps,\\n            _platform,\\n            newRouterAddress,\\n            swapData,\\n            tokenConfig.liquidationLimit,\\n            tokenConfig.doSwapRewardToken\\n        );\\n    }\\n\\n    /**\\n     * @dev Decodes the data passed into Uniswap V2 path and validates\\n     *      it to make sure the path is for `token` to `baseToken`\\n     *\\n     * @param data Ecnoded data passed to the `setRewardTokenConfig`\\n     * @param token The address of the reward token\\n     * @return path The validated Uniswap V2 path\\n     */\\n    function _decodeUniswapV2Path(bytes calldata data, address token)\\n        internal\\n        view\\n        returns (address[] memory path)\\n    {\\n        (path) = abi.decode(data, (address[]));\\n        uint256 len = path.length;\\n\\n        if (len < 2) {\\n            // Path should have at least two tokens\\n            revert InvalidUniswapV2PathLength();\\n        }\\n\\n        // Do some validation\\n        if (path[0] != token) {\\n            revert InvalidTokenInSwapPath(path[0]);\\n        }\\n\\n        if (path[len - 1] != baseTokenAddress) {\\n            revert InvalidTokenInSwapPath(path[len - 1]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes the data passed into Uniswap V3 path and validates\\n     *      it to make sure the path is for `token` to `baseToken`\\n     *\\n     * @param data Ecnoded data passed to the `setRewardTokenConfig`\\n     * @param token The address of the reward token\\n     * @return path The validated Uniswap V3 path\\n     */\\n    function _decodeUniswapV3Path(bytes calldata data, address token)\\n        internal\\n        view\\n        returns (bytes calldata path)\\n    {\\n        path = data;\\n\\n        address decodedAddress = address(uint160(bytes20(data[0:20])));\\n\\n        if (decodedAddress != token) {\\n            // Invalid Reward Token in swap path\\n            revert InvalidTokenInSwapPath(decodedAddress);\\n        }\\n\\n        decodedAddress = address(uint160(bytes20(data[path.length - 20:])));\\n        if (decodedAddress != baseTokenAddress) {\\n            // Invalid Base Token in swap path\\n            revert InvalidTokenInSwapPath(decodedAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes the data passed to Balancer Pool ID\\n     *\\n     * @param data Ecnoded data passed to the `setRewardTokenConfig`\\n     * @return poolId The pool ID\\n     */\\n    function _decodeBalancerPoolId(\\n        bytes calldata data,\\n        address balancerVault,\\n        address token\\n    ) internal view returns (bytes32 poolId) {\\n        (poolId) = abi.decode(data, (bytes32));\\n\\n        if (poolId == bytes32(0)) {\\n            revert EmptyBalancerPoolId();\\n        }\\n\\n        IBalancerVault bVault = IBalancerVault(balancerVault);\\n\\n        // Note: this reverts if token is not a pool asset\\n        // slither-disable-next-line unused-return\\n        bVault.getPoolTokenInfo(poolId, token);\\n\\n        // slither-disable-next-line unused-return\\n        bVault.getPoolTokenInfo(poolId, baseTokenAddress);\\n    }\\n\\n    /**\\n     * @dev Decodes the data passed to get the pool indices and\\n     *      checks it against the Curve Pool to make sure it's\\n     *      not misconfigured. The indices are packed into a single\\n     *      uint256 for gas savings\\n     *\\n     * @param data Ecnoded data passed to the `setRewardTokenConfig`\\n     * @param poolAddress Curve pool address\\n     * @param token The address of the reward token\\n     * @return indices Packed pool asset indices\\n     */\\n    function _decodeCurvePoolIndices(\\n        bytes calldata data,\\n        address poolAddress,\\n        address token\\n    ) internal view returns (CurvePoolIndices memory indices) {\\n        indices = abi.decode(data, (CurvePoolIndices));\\n\\n        ICurvePool pool = ICurvePool(poolAddress);\\n        if (token != pool.coins(indices.rewardTokenIndex)) {\\n            revert InvalidCurvePoolAssetIndex(token);\\n        }\\n        if (baseTokenAddress != pool.coins(indices.baseTokenIndex)) {\\n            revert InvalidCurvePoolAssetIndex(baseTokenAddress);\\n        }\\n    }\\n\\n    /**\\n     * @dev Flags a strategy as supported or not supported one\\n     * @param _strategyAddress Address of the strategy\\n     * @param _isSupported Bool marking strategy as supported or not supported\\n     */\\n    function setSupportedStrategy(address _strategyAddress, bool _isSupported)\\n        external\\n        onlyGovernor\\n    {\\n        supportedStrategies[_strategyAddress] = _isSupported;\\n        emit SupportedStrategyUpdate(_strategyAddress, _isSupported);\\n    }\\n\\n    /***************************************\\n                    Rewards\\n    ****************************************/\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      contract, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        external\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from a specific strategy and swap them for\\n     *      base token on the configured swap platform. Can be called by anyone.\\n     *      Rewards incentivizing the caller are sent to the caller of this function.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     */\\n    function harvestAndSwap(address _strategyAddr) external nonReentrant {\\n        // Remember _harvest function checks for the validity of _strategyAddr\\n        _harvestAndSwap(_strategyAddr, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from a specific strategy and swap them for\\n     *      base token on the configured swap platform. Can be called by anyone\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function harvestAndSwap(address _strategyAddr, address _rewardTo)\\n        external\\n        nonReentrant\\n    {\\n        // Remember _harvest function checks for the validity of _strategyAddr\\n        _harvestAndSwap(_strategyAddr, _rewardTo);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from a specific strategy and swap them for\\n     *      base token on the configured swap platform\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     * @param _rewardTo Address where to send a share of harvest rewards to as an incentive\\n     *      for executing this function\\n     */\\n    function _harvestAndSwap(address _strategyAddr, address _rewardTo)\\n        internal\\n    {\\n        _harvest(_strategyAddr);\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        address[] memory rewardTokens = strategy.getRewardTokenAddresses();\\n        IOracle priceProvider = IOracle(IVault(vaultAddress).priceProvider());\\n        uint256 len = rewardTokens.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            _swap(rewardTokens[i], _rewardTo, priceProvider);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from a specific strategy and swap them for\\n     *      base token on the configured swap platform\\n     * @param _strategyAddr Address of the strategy to collect rewards from.\\n     */\\n    function _harvest(address _strategyAddr) internal {\\n        if (!supportedStrategies[_strategyAddr]) {\\n            revert UnsupportedStrategy(_strategyAddr);\\n        }\\n\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        strategy.collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Swap a reward token for the base token on the configured\\n     *      swap platform. The token must have a registered price feed\\n     *      with the price provider\\n     * @param _swapToken Address of the token to swap\\n     * @param _rewardTo Address where to send the share of harvest rewards to\\n     * @param _priceProvider Oracle to get prices of the swap token\\n     */\\n    function _swap(\\n        address _swapToken,\\n        address _rewardTo,\\n        IOracle _priceProvider\\n    ) internal virtual {\\n        RewardTokenConfig memory tokenConfig = rewardTokenConfigs[_swapToken];\\n\\n        /* This will trigger a return when reward token configuration has not yet been set\\n         * or we have temporarily disabled swapping of specific reward token via setting\\n         * doSwapRewardToken to false.\\n         */\\n        if (!tokenConfig.doSwapRewardToken) {\\n            return;\\n        }\\n\\n        uint256 balance = IERC20(_swapToken).balanceOf(address(this));\\n\\n        if (balance == 0) {\\n            return;\\n        }\\n\\n        if (tokenConfig.liquidationLimit > 0) {\\n            balance = Math.min(balance, tokenConfig.liquidationLimit);\\n        }\\n\\n        // This'll revert if there is no price feed\\n        uint256 oraclePrice = _priceProvider.price(_swapToken);\\n\\n        // Oracle price is 1e18\\n        uint256 minExpected = (balance *\\n            (1e4 - tokenConfig.allowedSlippageBps) * // max allowed slippage\\n            oraclePrice).scaleBy(\\n                baseTokenDecimals,\\n                Helpers.getDecimals(_swapToken)\\n            ) /\\n            1e4 / // fix the max slippage decimal position\\n            1e18; // and oracle price decimals position\\n\\n        // Do the swap\\n        uint256 amountReceived = _doSwap(\\n            tokenConfig.swapPlatform,\\n            tokenConfig.swapPlatformAddr,\\n            _swapToken,\\n            balance,\\n            minExpected\\n        );\\n\\n        if (amountReceived < minExpected) {\\n            revert SlippageError(amountReceived, minExpected);\\n        }\\n\\n        emit RewardTokenSwapped(\\n            _swapToken,\\n            baseTokenAddress,\\n            tokenConfig.swapPlatform,\\n            balance,\\n            amountReceived\\n        );\\n\\n        IERC20 baseToken = IERC20(baseTokenAddress);\\n        uint256 baseTokenBalance = baseToken.balanceOf(address(this));\\n        if (baseTokenBalance < amountReceived) {\\n            // Note: It's possible to bypass this check by transfering `baseToken`\\n            // directly to Harvester before calling the `harvestAndSwap`. However,\\n            // there's no incentive for an attacker to do that. Doing a balance diff\\n            // will increase the gas cost significantly\\n            revert BalanceMismatchAfterSwap(baseTokenBalance, amountReceived);\\n        }\\n\\n        // Farmer only gets fee from the base amount they helped farm,\\n        // They do not get anything from anything that already was there\\n        // on the Harvester\\n        uint256 farmerFee = amountReceived.mulTruncateScale(\\n            tokenConfig.harvestRewardBps,\\n            1e4\\n        );\\n        uint256 protcolYield = baseTokenBalance - farmerFee;\\n\\n        baseToken.safeTransfer(rewardProceedsAddress, protcolYield);\\n        baseToken.safeTransfer(_rewardTo, farmerFee);\\n        emit RewardProceedsTransferred(\\n            baseTokenAddress,\\n            _rewardTo,\\n            protcolYield,\\n            farmerFee\\n        );\\n    }\\n\\n    function _doSwap(\\n        SwapPlatform swapPlatform,\\n        address routerAddress,\\n        address rewardTokenAddress,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) internal returns (uint256 amountOut) {\\n        if (swapPlatform == SwapPlatform.UniswapV2Compatible) {\\n            return\\n                _swapWithUniswapV2(\\n                    routerAddress,\\n                    rewardTokenAddress,\\n                    amountIn,\\n                    minAmountOut\\n                );\\n        } else if (swapPlatform == SwapPlatform.UniswapV3) {\\n            return\\n                _swapWithUniswapV3(\\n                    routerAddress,\\n                    rewardTokenAddress,\\n                    amountIn,\\n                    minAmountOut\\n                );\\n        } else if (swapPlatform == SwapPlatform.Balancer) {\\n            return\\n                _swapWithBalancer(\\n                    routerAddress,\\n                    rewardTokenAddress,\\n                    amountIn,\\n                    minAmountOut\\n                );\\n        } else if (swapPlatform == SwapPlatform.Curve) {\\n            return\\n                _swapWithCurve(\\n                    routerAddress,\\n                    rewardTokenAddress,\\n                    amountIn,\\n                    minAmountOut\\n                );\\n        } else {\\n            // Should never be invoked since we catch invalid values\\n            // in the `setRewardTokenConfig` function before it's set\\n            revert InvalidSwapPlatform(swapPlatform);\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the token to `baseToken` with Uniswap V2\\n     *\\n     * @param routerAddress Uniswap V2 Router address\\n     * @param swapToken Address of the tokenIn\\n     * @param amountIn Amount of `swapToken` to swap\\n     * @param minAmountOut Minimum expected amount of `baseToken`\\n     *\\n     * @return amountOut Amount of `baseToken` received after the swap\\n     */\\n    function _swapWithUniswapV2(\\n        address routerAddress,\\n        address swapToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) internal returns (uint256 amountOut) {\\n        address[] memory path = uniswapV2Path[swapToken];\\n\\n        uint256[] memory amounts = IUniswapV2Router(routerAddress)\\n            .swapExactTokensForTokens(\\n                amountIn,\\n                minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        amountOut = amounts[amounts.length - 1];\\n    }\\n\\n    /**\\n     * @dev Swaps the token to `baseToken` with Uniswap V3\\n     *\\n     * @param routerAddress Uniswap V3 Router address\\n     * @param swapToken Address of the tokenIn\\n     * @param amountIn Amount of `swapToken` to swap\\n     * @param minAmountOut Minimum expected amount of `baseToken`\\n     *\\n     * @return amountOut Amount of `baseToken` received after the swap\\n     */\\n    function _swapWithUniswapV3(\\n        address routerAddress,\\n        address swapToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) internal returns (uint256 amountOut) {\\n        bytes memory path = uniswapV3Path[swapToken];\\n\\n        IUniswapV3Router.ExactInputParams memory params = IUniswapV3Router\\n            .ExactInputParams({\\n                path: path,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: minAmountOut\\n            });\\n        amountOut = IUniswapV3Router(routerAddress).exactInput(params);\\n    }\\n\\n    /**\\n     * @dev Swaps the token to `baseToken` on Balancer\\n     *\\n     * @param balancerVaultAddress BalancerVaultAddress\\n     * @param swapToken Address of the tokenIn\\n     * @param amountIn Amount of `swapToken` to swap\\n     * @param minAmountOut Minimum expected amount of `baseToken`\\n     *\\n     * @return amountOut Amount of `baseToken` received after the swap\\n     */\\n    function _swapWithBalancer(\\n        address balancerVaultAddress,\\n        address swapToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) internal returns (uint256 amountOut) {\\n        bytes32 poolId = balancerPoolId[swapToken];\\n\\n        IBalancerVault.SingleSwap memory singleSwap = IBalancerVault\\n            .SingleSwap({\\n                poolId: poolId,\\n                kind: IBalancerVault.SwapKind.GIVEN_IN,\\n                assetIn: swapToken,\\n                assetOut: baseTokenAddress,\\n                amount: amountIn,\\n                userData: hex\\\"\\\"\\n            });\\n\\n        IBalancerVault.FundManagement memory fundMgmt = IBalancerVault\\n            .FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(address(this)),\\n                toInternalBalance: false\\n            });\\n\\n        amountOut = IBalancerVault(balancerVaultAddress).swap(\\n            singleSwap,\\n            fundMgmt,\\n            minAmountOut,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Swaps the token to `baseToken` on Curve\\n     *\\n     * @param poolAddress Curve Pool Address\\n     * @param swapToken Address of the tokenIn\\n     * @param amountIn Amount of `swapToken` to swap\\n     * @param minAmountOut Minimum expected amount of `baseToken`\\n     *\\n     * @return amountOut Amount of `baseToken` received after the swap\\n     */\\n    function _swapWithCurve(\\n        address poolAddress,\\n        address swapToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) internal returns (uint256 amountOut) {\\n        CurvePoolIndices memory indices = curvePoolIndices[swapToken];\\n\\n        // Note: Not all CurvePools return the `amountOut`, make sure\\n        // to use only pool that do. Otherwise the swap would revert\\n        // always\\n        amountOut = ICurvePool(poolAddress).exchange(\\n            uint256(indices.rewardTokenIndex),\\n            uint256(indices.baseTokenIndex),\\n            amountIn,\\n            minAmountOut\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x909d6fcd5e294f04e1106bc0bedd344f5efc305db053cc678764ac64670df00d\",\"license\":\"MIT\"},\"contracts/harvest/OETHHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { BaseHarvester } from \\\"./BaseHarvester.sol\\\";\\n\\ncontract OETHHarvester is BaseHarvester {\\n    constructor(address _vault, address _wethAddress)\\n        BaseHarvester(_vault, _wethAddress)\\n    {}\\n}\\n\",\"keccak256\":\"0x67255aabc4a8ec5d6650b3ab1daedffa093d8f6c324ee92281581c05990098bc\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eabf152389f145c9c23ed71972af73fb1708cbc4b26e524a9ba29a557b7cfe5\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5f1379ac8f9bcd296931622147ae3bdb2f610dc855870124a5c59d746d3765a4\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"../../utils/InitializableAbstractStrategy.sol\\\";\\n\\ninterface IBalancerVault {\\n    enum WeightedPoolJoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\\n        ADD_TOKEN\\n    }\\n\\n    enum WeightedPoolExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\n        REMOVE_TOKEN\\n    }\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        address[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        address asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    enum UserBalanceOpKind {\\n        DEPOSIT_INTERNAL,\\n        WITHDRAW_INTERNAL,\\n        TRANSFER_INTERNAL,\\n        TRANSFER_EXTERNAL\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap calldata singleSwap,\\n        FundManagement calldata funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external returns (uint256 amountCalculated);\\n\\n    function getPoolTokenInfo(bytes32 poolId, address token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n}\\n\",\"keccak256\":\"0x597796f9c5b3d174acbec8b520c633695c10d87762f7a0a7fec49b291694d7de\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router {\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n}\\n\",\"keccak256\":\"0x3fdf2b91880f2b669202cc43bdceaf9d01537a9b955fc7a51159fb04fdbc68d4\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV3Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// -- Solididy v0.5.x compatible interface\\ninterface IUniswapV3Router {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xe32b76d23705979a297b164718aefa6b08e0ec3830883c020a5ac68d332a1dd2\",\"license\":\"MIT\"},\"contracts/strategies/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _deposit)\\n        external\\n        returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _amount,\\n        int128 _index,\\n        uint256 _minAmount\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] calldata _minWithdrawAmounts\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _amount, int128 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function coins(uint256 _index) external view returns (address);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata _amounts,\\n        uint256 maxBurnAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x65e40829ff1f51c6c64fe991ed6a536b413ced85b9d9aa852d37fa14966d474c\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(msg.sender));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\n\\n        _creditBalances[msg.sender] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\n\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x14a6bcf58e3622e475941619b0491b5e486bc7f6a3568ac179630bd4d725b85b\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Vault.\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x54a92d8ffa93ec8d047e95d93e0293f1b528a4a97d6d3c12c04d132ac882004a\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n * @author Origin Protocol Inc\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xe35ac2d813a30d845a3b52bba72588d7e936c2b3f3373d15568c14db46aeed60\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configiration\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n    address public ousdMetaStrategy = address(0);\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy = 0;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold = 0;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19891574f3b33074486f48166879b4cccc88162c392e77192bd54367ec263287\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200352f3803806200352f833981016040819052620000349162000215565b81816200004e336000805160206200350f83398151915255565b6000805160206200350f833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36001600160a01b038216620000aa57600080fd5b6001600160a01b038116620000be57600080fd5b606082811b6001600160601b03199081166080529082901b1660a052620000f181620000ff602090811b62000d3217901c565b60c052506200027992505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013c57600080fd5b505afa15801562000151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017791906200024d565b60ff169050600481101580156200018f575060128111155b620001f25760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b606482015260840160405180910390fd5b92915050565b80516001600160a01b03811681146200021057600080fd5b919050565b600080604083850312156200022957600080fd5b6200023483620001f8565b91506200024460208401620001f8565b90509250929050565b6000602082840312156200026057600080fd5b815160ff811681146200027257600080fd5b9392505050565b60805160601c60a05160601c60c05161320c62000303600039600081816102910152611a8401526000818161026a015281816110630152818161115c0152818161128001528181611486015281816114ca01528181611b3701528181611bbd01528181611cea01526122a70152600081816101a301528181610539015261158b015261320c6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806382aa1c88116100ad578063d38bfff411610071578063d38bfff414610312578063da70696c14610325578063dac4db4e14610345578063e48d7fc514610358578063ee3be5f5146103ac57600080fd5b806382aa1c881461028c578063a994317f146102c1578063b13dc20a146102d4578063b76e83af146102e7578063c7af3352146102fa57600080fd5b8063548f5ae5116100f4578063548f5ae5146101c5578063587c8440146101d85780635d36b1901461024a57806365f6fa94146102525780637cb374bd1461026557600080fd5b80630c340a24146101315780631072cbea146101565780632579153d1461016b5780632dfbe8311461017e578063430bf08a1461019e575b600080fd5b6101396103cf565b6040516001600160a01b0390911681526020015b60405180910390f35b6101696101643660046126ec565b6103ec565b005b61016961017936600461264f565b610439565b61019161018c3660046125ae565b6108c8565b60405161014d9190612b1f565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6101696101d33660046125ae565b610962565b6102386101e63660046125ae565b6000602081905290815260409020805460019091015461ffff80831692620100008104909116916001600160a01b036401000000008304169160ff600160c01b8204811692600160c81b909204169086565b60405161014d96959493929190612cb0565b6101696109dd565b610169610260366004612621565b610a83565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6102b37f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014d565b6101696102cf3660046125e8565b610b0a565b6101696102e23660046125ae565b610b86565b600254610139906001600160a01b031681565b610302610c25565b604051901515815260200161014d565b6101696103203660046125ae565b610c56565b6102b36103333660046125ae565b60056020526000908152604090205481565b6101396103533660046126ec565b610cfa565b61038c6103663660046125ae565b6006602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b0393841681529290911660208301520161014d565b6103026103ba3660046125ae565b60016020526000908152604090205460ff1681565b60006103e76000805160206131b78339815191525490565b905090565b6103f4610c25565b6104195760405162461bcd60e51b815260040161041090612b5f565b60405180910390fd5b6104356104246103cf565b6001600160a01b0384169083610e21565b5050565b610441610c25565b61045d5760405162461bcd60e51b815260040161041090612b5f565b6103e861046d60208501856129aa565b61ffff1611156104905760405163faa3445560e01b815260040160405180910390fd5b6103e86104a360408501602086016129aa565b61ffff1611156104c657604051631633c8cd60e31b815260040160405180910390fd5b60006104d860608501604086016125ae565b90506001600160a01b03811661050157604051637138356f60e01b815260040160405180910390fd5b6001600160a01b03808616600090815260208190526040902080546401000000009004909116908590610534828261307b565b9050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c891906125cb565b6040516315d5220f60e31b81526001600160a01b038881166004830152919091169063aea910789060240160206040518083038186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064391906129c7565b50856001600160a01b0382161580159061066f5750826001600160a01b0316826001600160a01b031614155b15610689576106896001600160a01b038216836000610e89565b826001600160a01b0316826001600160a01b0316146106cd576106b76001600160a01b038216846000610e89565b6106cd6001600160a01b03821684600019610e89565b60006106df60a0880160808901612932565b905060008160038111156106f5576106f561301f565b14156107395761070686868a610fad565b6001600160a01b0389166000908152600360209081526040909120825161073393919291909101906124a4565b50610846565b600181600381111561074d5761074d61301f565b14156107815761075e86868a6110d9565b6001600160a01b038a166000908152600460205260409020610733929091612509565b60028160038111156107955761079561301f565b14156107c5576107a78686868b6111af565b6001600160a01b038916600090815260056020526040902055610846565b60038160038111156107d9576107d961301f565b141561082b576107eb8686868b611311565b6001600160a01b0389166000908152600660209081526040909120825192909101516001600160801b03908116600160801b029216919091179055610846565b806040516336cb1d2160e01b81526004016104109190612b32565b7f5eb6073ba3980477f03b1ce0dccba754d48454bbd65a115dcd42db65ca1fefd28861087560208a018a6129aa565b61088560408b0160208c016129aa565b84888b8b8e60a001358f60600160208101906108a191906128df565b6040516108b699989796959493929190612aa0565b60405180910390a15050505050505050565b600460205260009081526040902080546108e190612fb3565b80601f016020809104026020016040519081016040528092919081815260200182805461090d90612fb3565b801561095a5780601f1061092f5761010080835404028352916020019161095a565b820191906000526020600020905b81548152906001019060200180831161093d57829003601f168201915b505050505081565b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535805460028114156109c75760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610410565b600282556109d58333611500565b506001905550565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610a785760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610410565b610a8133611667565b565b610a8b610c25565b610aa75760405162461bcd60e51b815260040161041090612b5f565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f013ed61add17cbfcbbd95bf8543da67c89658c5477d3f3199a1a2d58ecf1913f910160405180910390a15050565b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac453580546002811415610b6f5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610410565b60028255610b7d8484611500565b50600190555050565b610b8e610c25565b610baa5760405162461bcd60e51b815260040161041090612b5f565b6001600160a01b038116610bd157604051637138356f60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f50f4ca9002119593802480c412cb5e106ae726647a31dcf8a7e7ed4e6794bf5e9060200160405180910390a150565b6000610c3d6000805160206131b78339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610c5e610c25565b610c7a5760405162461bcd60e51b815260040161041090612b5f565b610ca2817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610cc26000805160206131b78339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60036020528160005260406000208181548110610d1657600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6e57600080fd5b505afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190612a21565b60ff16905060048110158015610dbd575060128111155b610e1b5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610410565b92915050565b6040516001600160a01b038316602482015260448101829052610e8490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261172b565b505050565b801580610f125750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610ed857600080fd5b505afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906129c7565b155b610f7d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610410565b6040516001600160a01b038316602482015260448101829052610e8490849063095ea7b360e01b90606401610e4d565b6060610fbb83850185612718565b80519091506002811015610fe2576040516360fa33db60e11b815260040160405180910390fd5b826001600160a01b031682600081518110610fff57610fff613035565b60200260200101516001600160a01b031614611059578160008151811061102857611028613035565b602002602001015160405163280d94a560e21b815260040161041091906001600160a01b0391909116815260200190565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168261108f600184612f37565b8151811061109f5761109f613035565b60200260200101516001600160a01b0316146110d157816110c1600183612f37565b8151811061102857611028613035565b509392505050565b828260006110ea6014828486612dbe565b6110f391612f4e565b60601c90506001600160a01b038416811461112c5760405163280d94a560e21b81526001600160a01b0382166004820152602401610410565b8585611139601485612f37565b611144928290612dbe565b61114d91612f4e565b60601c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146111a65760405163280d94a560e21b81526001600160a01b0382166004820152602401610410565b50935093915050565b60006111bd84860186612919565b9050806111dd57604051634bdc2c9560e01b815260040160405180910390fd5b60405163160bf1c960e31b8152600481018290526001600160a01b03838116602483015284919082169063b05f8e489060440160806040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906129e0565b505060405163160bf1c960e31b8152600481018590526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528416925063b05f8e48915060440160806040518083038186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130491906129e0565b5050505050949350505050565b60408051808201909152600080825260208201526113318486018661294f565b805160405163c661065760e01b81526001600160801b03909116600482015290915083906001600160a01b0382169063c66106579060240160206040518083038186803b15801561138157600080fd5b505afa158015611395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b991906125cb565b6001600160a01b0316836001600160a01b0316146113f55760405163d658230160e01b81526001600160a01b0384166004820152602401610410565b602082015160405163c661065760e01b81526001600160801b0390911660048201526001600160a01b0382169063c66106579060240160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b91906125cb565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114f75760405163d658230160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602401610410565b50949350505050565b611509826117fd565b60008290506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261158591908101906127be565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161a91906125cb565b825190915060005b8181101561165e5761164e84828151811061163f5761163f613035565b6020026020010151878561189d565b61165781612fee565b9050611622565b50505050505050565b6001600160a01b0381166116bd5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610410565b806001600160a01b03166116dd6000805160206131b78339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611728816000805160206131b783398151915255565b50565b6000611780826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d489092919063ffffffff16565b805190915015610e84578080602001905181019061179e91906128fc565b610e845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610410565b6001600160a01b03811660009081526001602052604090205460ff1661184157604051630211444960e11b81526001600160a01b0382166004820152602401610410565b6000819050806001600160a01b0316635a063f636040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561188157600080fd5b505af1158015611895573d6000803e3d6000fd5b505050505050565b6001600160a01b03808416600090815260208181526040808320815160c081018352815461ffff8082168352620100008204169482019490945264010000000084049095169185019190915260ff600160c01b830481161515606086015292939290916080840191600160c81b90910416600381111561191f5761191f61301f565b60038111156119305761193061301f565b81526020016001820154815250509050806060015161194f5750505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561199157600080fd5b505afa1580156119a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c991906129c7565b9050806119d7575050505050565b60a0820151156119f2576119ef818360a00151611d61565b90505b6040516315d5220f60e31b81526001600160a01b0386811660048301526000919085169063aea910789060240160206040518083038186803b158015611a3757600080fd5b505afa158015611a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6f91906129c7565b90506000670de0b6b3a7640000612710611adb7f0000000000000000000000000000000000000000000000000000000000000000611aac8b610d32565b88518790611abc90612710612f14565b611aca9061ffff168a612ef5565b611ad49190612ef5565b9190611d77565b611ae59190612de8565b611aef9190612de8565b90506000611b08856080015186604001518a8786611dd9565b905081811015611b35576040516302d96fff60e41b81526004810182905260248101839052604401610410565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b03167fa861903141bc68b536d5048a576afcc645630e1b18a4296ef34cbd4d1407f70987608001518785604051611ba093929190612b40565b60405180910390a36040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b038316906370a082319060240160206040518083038186803b158015611c0c57600080fd5b505afa158015611c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4491906129c7565b905082811015611c715760405163315d50df60e11b81526004810182905260248101849052604401610410565b6020870151600090611c8b90859061ffff16612710611e9d565b90506000611c998284612f37565b600254909150611cb6906001600160a01b03868116911683610e21565b611cca6001600160a01b0385168c84610e21565b604080516001600160a01b038d81168252602082018490529181018490527f0000000000000000000000000000000000000000000000000000000000000000909116907f42e60aae8f000883c46e2f449fa76268e374ce1b962f46ca9360ab98b18f57999060600160405180910390a2505050505050505050505050565b6060611d578484600085611eb6565b90505b9392505050565b6000818310611d705781611d5a565b5090919050565b600081831115611da757611da0611d8e8385612f37565b611d9990600a612e4d565b8590611fde565b9350611dd1565b81831015611dd157611dce611dbc8484612f37565b611dc790600a612e4d565b8590611fea565b93505b509192915050565b600080866003811115611dee57611dee61301f565b1415611e0757611e0085858585611ff6565b9050611e94565b6001866003811115611e1b57611e1b61301f565b1415611e2d57611e0085858585612125565b6002866003811115611e4157611e4161301f565b1415611e5357611e0085858585612270565b6003866003811115611e6757611e6761301f565b1415611e7957611e0085858585612392565b856040516336cb1d2160e01b81526004016104109190612b32565b95945050505050565b600080611eaa8585611fde565b9050611e948184611fea565b606082471015611f175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610410565b843b611f655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610410565b600080866001600160a01b03168587604051611f819190612a84565b60006040518083038185875af1925050503d8060008114611fbe576040519150601f19603f3d011682016040523d82523d6000602084013e611fc3565b606091505b5091509150611fd382828661246b565b979650505050505050565b6000611d5a8284612ef5565b6000611d5a8284612de8565b6001600160a01b03831660009081526003602090815260408083208054825181850281018501909352808352849383018282801561205d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161203f575b505050505090506000866001600160a01b03166338ed173986868530426040518663ffffffff1660e01b815260040161209a959493929190612cf8565b600060405180830381600087803b1580156120b457600080fd5b505af11580156120c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120f09190810190612853565b905080600182516121019190612f37565b8151811061211157612111613035565b602002602001015192505050949350505050565b6001600160a01b0383166000908152600460205260408120805482919061214b90612fb3565b80601f016020809104026020016040519081016040528092919081815260200182805461217790612fb3565b80156121c45780601f10612199576101008083540402835291602001916121c4565b820191906000526020600020905b8154815290600101906020018083116121a757829003601f168201915b50506040805160a0810182528581523060208201524281830152606081018a905260808101899052905163c04b8d5960e01b8152949550936001600160a01b038b16935063c04b8d59925061221e91508490600401612b96565b602060405180830381600087803b15801561223857600080fd5b505af115801561224c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd391906129c7565b6001600160a01b03838116600081815260056020908152604080832054815160c081018352818152808401859052808301959095527f0000000000000000000000000000000000000000000000000000000000000000861660608087019190915260808087018a90528351808601855286815260a0880152835190810184523080825294810186905280840194909452830184905290516352bbbe2960e01b81529294909392908916906352bbbe299061233490859085908a904290600401612bee565b602060405180830381600087803b15801561234e57600080fd5b505af1158015612362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238691906129c7565b98975050505050505050565b6001600160a01b0383811660009081526006602090815260408083208151808301835290546001600160801b03808216808452600160801b909204169382018490529151630b68372160e31b81526004810192909252602482019290925260448101869052606481018590529192909190871690635b41b90890608401602060405180830381600087803b15801561242957600080fd5b505af115801561243d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246191906129c7565b9695505050505050565b6060831561247a575081611d5a565b82511561248a5782518084602001fd5b8160405162461bcd60e51b81526004016104109190612b1f565b8280548282559060005260206000209081019282156124f9579160200282015b828111156124f957825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906124c4565b5061250592915061257d565b5090565b82805461251590612fb3565b90600052602060002090601f01602090048101928261253757600085556124f9565b82601f106125505782800160ff198235161785556124f9565b828001600101855582156124f9579182015b828111156124f9578235825591602001919060010190612562565b5b80821115612505576000815560010161257e565b80356001600160801b03811681146125a957600080fd5b919050565b6000602082840312156125c057600080fd5b8135611d5a81613176565b6000602082840312156125dd57600080fd5b8151611d5a81613176565b600080604083850312156125fb57600080fd5b823561260681613176565b9150602083013561261681613176565b809150509250929050565b6000806040838503121561263457600080fd5b823561263f81613176565b915060208301356126168161318b565b60008060008084860361010081121561266757600080fd5b853561267281613176565b945060c0601f198201121561268657600080fd5b5060208501925060e085013567ffffffffffffffff808211156126a857600080fd5b818701915087601f8301126126bc57600080fd5b8135818111156126cb57600080fd5b8860208285010111156126dd57600080fd5b95989497505060200194505050565b600080604083850312156126ff57600080fd5b823561270a81613176565b946020939093013593505050565b6000602080838503121561272b57600080fd5b823567ffffffffffffffff81111561274257600080fd5b8301601f8101851361275357600080fd5b803561276661276182612d9a565b612d69565b80828252848201915084840188868560051b870101111561278657600080fd5b600094505b838510156127b257803561279e81613176565b83526001949094019391850191850161278b565b50979650505050505050565b600060208083850312156127d157600080fd5b825167ffffffffffffffff8111156127e857600080fd5b8301601f810185136127f957600080fd5b805161280761276182612d9a565b80828252848201915084840188868560051b870101111561282757600080fd5b600094505b838510156127b257805161283f81613176565b83526001949094019391850191850161282c565b6000602080838503121561286657600080fd5b825167ffffffffffffffff81111561287d57600080fd5b8301601f8101851361288e57600080fd5b805161289c61276182612d9a565b80828252848201915084840188868560051b87010111156128bc57600080fd5b600094505b838510156127b25780518352600194909401939185019185016128c1565b6000602082840312156128f157600080fd5b8135611d5a8161318b565b60006020828403121561290e57600080fd5b8151611d5a8161318b565b60006020828403121561292b57600080fd5b5035919050565b60006020828403121561294457600080fd5b8135611d5a81613199565b60006040828403121561296157600080fd5b6040516040810181811067ffffffffffffffff821117156129845761298461304b565b60405261299083612592565b815261299e60208401612592565b60208201529392505050565b6000602082840312156129bc57600080fd5b8135611d5a816131a6565b6000602082840312156129d957600080fd5b5051919050565b600080600080608085870312156129f657600080fd5b8451935060208501519250604085015191506060850151612a1681613176565b939692955090935050565b600060208284031215612a3357600080fd5b815160ff81168114611d5a57600080fd5b60008151808452612a5c816020860160208601612f83565b601f01601f19169290920160200192915050565b60048110612a8057612a8061301f565b9052565b60008251612a96818460208701612f83565b9190910192915050565b6001600160a01b038a8116825261ffff8a811660208401528916604083015260009061010090612ad3606085018b612a70565b8816608084015260a083018190528201859052610120858782850137600083870182015260c08301949094525090151560e0820152601f909201601f1916909101019695505050505050565b602081526000611d5a6020830184612a44565b60208101610e1b8284612a70565b60608101612b4e8286612a70565b602082019390935260400152919050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602081526000825160a06020840152612bb260c0840182612a44565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60e08152845160e08201526000602086015160028110612c1057612c1061301f565b61010083015260408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152612c5e6101a0840182612a44565b915050612c9e602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b61ffff8781168252861660208201526001600160a01b0385166040820152831515606082015260c08101612ce76080830185612a70565b8260a0830152979650505050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612d485784516001600160a01b031683529383019391830191600101612d23565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9257612d9261304b565b604052919050565b600067ffffffffffffffff821115612db457612db461304b565b5060051b60200190565b60008085851115612dce57600080fd5b83861115612ddb57600080fd5b5050820193919092039150565b600082612e0557634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612e45578160001904821115612e2b57612e2b613009565b80851615612e3857918102915b93841c9390800290612e0f565b509250929050565b6000611d5a8383600082612e6357506001610e1b565b81612e7057506000610e1b565b8160018114612e865760028114612e9057612eac565b6001915050610e1b565b60ff841115612ea157612ea1613009565b50506001821b610e1b565b5060208310610133831016604e8410600b8410161715612ecf575081810a610e1b565b612ed98383612e0a565b8060001904821115612eed57612eed613009565b029392505050565b6000816000190483118215151615612f0f57612f0f613009565b500290565b600061ffff83811690831681811015612f2f57612f2f613009565b039392505050565b600082821015612f4957612f49613009565b500390565b6bffffffffffffffffffffffff198135818116916014851015612f7b5780818660140360031b1b83161692505b505092915050565b60005b83811015612f9e578181015183820152602001612f86565b83811115612fad576000848401525b50505050565b600181811c90821680612fc757607f821691505b60208210811415612fe857634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561300257613002613009565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008135610e1b8161318b565b60008135610e1b81613199565b8135613086816131a6565b61ffff8116905081548161ffff19821617835560208401356130a7816131a6565b63ffff00008160101b169050808363ffffffff1984161717845560408501356130cf81613176565b6001600160c01b0319929092169092179190911760209190911b640100000000600160c01b031617815561312661310860608401613061565b82805460ff60c01b191691151560c01b60ff60c01b16919091179055565b61313b6131356080840161306e565b82613149565b60a082013560018201555050565b600482106131595761315961301f565b805460ff60c81b191660c89290921b60ff60c81b16919091179055565b6001600160a01b038116811461172857600080fd5b801515811461172857600080fd5b6004811061172857600080fd5b61ffff8116811461172857600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220c5a01dce54b99c9c89611a168c7e5f6277b6e19a1962c95f5b4baa719e10ad2864736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806382aa1c88116100ad578063d38bfff411610071578063d38bfff414610312578063da70696c14610325578063dac4db4e14610345578063e48d7fc514610358578063ee3be5f5146103ac57600080fd5b806382aa1c881461028c578063a994317f146102c1578063b13dc20a146102d4578063b76e83af146102e7578063c7af3352146102fa57600080fd5b8063548f5ae5116100f4578063548f5ae5146101c5578063587c8440146101d85780635d36b1901461024a57806365f6fa94146102525780637cb374bd1461026557600080fd5b80630c340a24146101315780631072cbea146101565780632579153d1461016b5780632dfbe8311461017e578063430bf08a1461019e575b600080fd5b6101396103cf565b6040516001600160a01b0390911681526020015b60405180910390f35b6101696101643660046126ec565b6103ec565b005b61016961017936600461264f565b610439565b61019161018c3660046125ae565b6108c8565b60405161014d9190612b1f565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6101696101d33660046125ae565b610962565b6102386101e63660046125ae565b6000602081905290815260409020805460019091015461ffff80831692620100008104909116916001600160a01b036401000000008304169160ff600160c01b8204811692600160c81b909204169086565b60405161014d96959493929190612cb0565b6101696109dd565b610169610260366004612621565b610a83565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6102b37f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161014d565b6101696102cf3660046125e8565b610b0a565b6101696102e23660046125ae565b610b86565b600254610139906001600160a01b031681565b610302610c25565b604051901515815260200161014d565b6101696103203660046125ae565b610c56565b6102b36103333660046125ae565b60056020526000908152604090205481565b6101396103533660046126ec565b610cfa565b61038c6103663660046125ae565b6006602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b0393841681529290911660208301520161014d565b6103026103ba3660046125ae565b60016020526000908152604090205460ff1681565b60006103e76000805160206131b78339815191525490565b905090565b6103f4610c25565b6104195760405162461bcd60e51b815260040161041090612b5f565b60405180910390fd5b6104356104246103cf565b6001600160a01b0384169083610e21565b5050565b610441610c25565b61045d5760405162461bcd60e51b815260040161041090612b5f565b6103e861046d60208501856129aa565b61ffff1611156104905760405163faa3445560e01b815260040160405180910390fd5b6103e86104a360408501602086016129aa565b61ffff1611156104c657604051631633c8cd60e31b815260040160405180910390fd5b60006104d860608501604086016125ae565b90506001600160a01b03811661050157604051637138356f60e01b815260040160405180910390fd5b6001600160a01b03808616600090815260208190526040902080546401000000009004909116908590610534828261307b565b9050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c891906125cb565b6040516315d5220f60e31b81526001600160a01b038881166004830152919091169063aea910789060240160206040518083038186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064391906129c7565b50856001600160a01b0382161580159061066f5750826001600160a01b0316826001600160a01b031614155b15610689576106896001600160a01b038216836000610e89565b826001600160a01b0316826001600160a01b0316146106cd576106b76001600160a01b038216846000610e89565b6106cd6001600160a01b03821684600019610e89565b60006106df60a0880160808901612932565b905060008160038111156106f5576106f561301f565b14156107395761070686868a610fad565b6001600160a01b0389166000908152600360209081526040909120825161073393919291909101906124a4565b50610846565b600181600381111561074d5761074d61301f565b14156107815761075e86868a6110d9565b6001600160a01b038a166000908152600460205260409020610733929091612509565b60028160038111156107955761079561301f565b14156107c5576107a78686868b6111af565b6001600160a01b038916600090815260056020526040902055610846565b60038160038111156107d9576107d961301f565b141561082b576107eb8686868b611311565b6001600160a01b0389166000908152600660209081526040909120825192909101516001600160801b03908116600160801b029216919091179055610846565b806040516336cb1d2160e01b81526004016104109190612b32565b7f5eb6073ba3980477f03b1ce0dccba754d48454bbd65a115dcd42db65ca1fefd28861087560208a018a6129aa565b61088560408b0160208c016129aa565b84888b8b8e60a001358f60600160208101906108a191906128df565b6040516108b699989796959493929190612aa0565b60405180910390a15050505050505050565b600460205260009081526040902080546108e190612fb3565b80601f016020809104026020016040519081016040528092919081815260200182805461090d90612fb3565b801561095a5780601f1061092f5761010080835404028352916020019161095a565b820191906000526020600020905b81548152906001019060200180831161093d57829003601f168201915b505050505081565b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535805460028114156109c75760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610410565b600282556109d58333611500565b506001905550565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610a785760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610410565b610a8133611667565b565b610a8b610c25565b610aa75760405162461bcd60e51b815260040161041090612b5f565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f013ed61add17cbfcbbd95bf8543da67c89658c5477d3f3199a1a2d58ecf1913f910160405180910390a15050565b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac453580546002811415610b6f5760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b6044820152606401610410565b60028255610b7d8484611500565b50600190555050565b610b8e610c25565b610baa5760405162461bcd60e51b815260040161041090612b5f565b6001600160a01b038116610bd157604051637138356f60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f50f4ca9002119593802480c412cb5e106ae726647a31dcf8a7e7ed4e6794bf5e9060200160405180910390a150565b6000610c3d6000805160206131b78339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610c5e610c25565b610c7a5760405162461bcd60e51b815260040161041090612b5f565b610ca2817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316610cc26000805160206131b78339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60036020528160005260406000208181548110610d1657600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6e57600080fd5b505afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190612a21565b60ff16905060048110158015610dbd575060128111155b610e1b5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610410565b92915050565b6040516001600160a01b038316602482015260448101829052610e8490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261172b565b505050565b801580610f125750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610ed857600080fd5b505afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906129c7565b155b610f7d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610410565b6040516001600160a01b038316602482015260448101829052610e8490849063095ea7b360e01b90606401610e4d565b6060610fbb83850185612718565b80519091506002811015610fe2576040516360fa33db60e11b815260040160405180910390fd5b826001600160a01b031682600081518110610fff57610fff613035565b60200260200101516001600160a01b031614611059578160008151811061102857611028613035565b602002602001015160405163280d94a560e21b815260040161041091906001600160a01b0391909116815260200190565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168261108f600184612f37565b8151811061109f5761109f613035565b60200260200101516001600160a01b0316146110d157816110c1600183612f37565b8151811061102857611028613035565b509392505050565b828260006110ea6014828486612dbe565b6110f391612f4e565b60601c90506001600160a01b038416811461112c5760405163280d94a560e21b81526001600160a01b0382166004820152602401610410565b8585611139601485612f37565b611144928290612dbe565b61114d91612f4e565b60601c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681146111a65760405163280d94a560e21b81526001600160a01b0382166004820152602401610410565b50935093915050565b60006111bd84860186612919565b9050806111dd57604051634bdc2c9560e01b815260040160405180910390fd5b60405163160bf1c960e31b8152600481018290526001600160a01b03838116602483015284919082169063b05f8e489060440160806040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906129e0565b505060405163160bf1c960e31b8152600481018590526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528416925063b05f8e48915060440160806040518083038186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130491906129e0565b5050505050949350505050565b60408051808201909152600080825260208201526113318486018661294f565b805160405163c661065760e01b81526001600160801b03909116600482015290915083906001600160a01b0382169063c66106579060240160206040518083038186803b15801561138157600080fd5b505afa158015611395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b991906125cb565b6001600160a01b0316836001600160a01b0316146113f55760405163d658230160e01b81526001600160a01b0384166004820152602401610410565b602082015160405163c661065760e01b81526001600160801b0390911660048201526001600160a01b0382169063c66106579060240160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b91906125cb565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114f75760405163d658230160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602401610410565b50949350505050565b611509826117fd565b60008290506000816001600160a01b031663f6ca71b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261158591908101906127be565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161a91906125cb565b825190915060005b8181101561165e5761164e84828151811061163f5761163f613035565b6020026020010151878561189d565b61165781612fee565b9050611622565b50505050505050565b6001600160a01b0381166116bd5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610410565b806001600160a01b03166116dd6000805160206131b78339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611728816000805160206131b783398151915255565b50565b6000611780826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d489092919063ffffffff16565b805190915015610e84578080602001905181019061179e91906128fc565b610e845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610410565b6001600160a01b03811660009081526001602052604090205460ff1661184157604051630211444960e11b81526001600160a01b0382166004820152602401610410565b6000819050806001600160a01b0316635a063f636040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561188157600080fd5b505af1158015611895573d6000803e3d6000fd5b505050505050565b6001600160a01b03808416600090815260208181526040808320815160c081018352815461ffff8082168352620100008204169482019490945264010000000084049095169185019190915260ff600160c01b830481161515606086015292939290916080840191600160c81b90910416600381111561191f5761191f61301f565b60038111156119305761193061301f565b81526020016001820154815250509050806060015161194f5750505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561199157600080fd5b505afa1580156119a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c991906129c7565b9050806119d7575050505050565b60a0820151156119f2576119ef818360a00151611d61565b90505b6040516315d5220f60e31b81526001600160a01b0386811660048301526000919085169063aea910789060240160206040518083038186803b158015611a3757600080fd5b505afa158015611a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6f91906129c7565b90506000670de0b6b3a7640000612710611adb7f0000000000000000000000000000000000000000000000000000000000000000611aac8b610d32565b88518790611abc90612710612f14565b611aca9061ffff168a612ef5565b611ad49190612ef5565b9190611d77565b611ae59190612de8565b611aef9190612de8565b90506000611b08856080015186604001518a8786611dd9565b905081811015611b35576040516302d96fff60e41b81526004810182905260248101839052604401610410565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b03167fa861903141bc68b536d5048a576afcc645630e1b18a4296ef34cbd4d1407f70987608001518785604051611ba093929190612b40565b60405180910390a36040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b038316906370a082319060240160206040518083038186803b158015611c0c57600080fd5b505afa158015611c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4491906129c7565b905082811015611c715760405163315d50df60e11b81526004810182905260248101849052604401610410565b6020870151600090611c8b90859061ffff16612710611e9d565b90506000611c998284612f37565b600254909150611cb6906001600160a01b03868116911683610e21565b611cca6001600160a01b0385168c84610e21565b604080516001600160a01b038d81168252602082018490529181018490527f0000000000000000000000000000000000000000000000000000000000000000909116907f42e60aae8f000883c46e2f449fa76268e374ce1b962f46ca9360ab98b18f57999060600160405180910390a2505050505050505050505050565b6060611d578484600085611eb6565b90505b9392505050565b6000818310611d705781611d5a565b5090919050565b600081831115611da757611da0611d8e8385612f37565b611d9990600a612e4d565b8590611fde565b9350611dd1565b81831015611dd157611dce611dbc8484612f37565b611dc790600a612e4d565b8590611fea565b93505b509192915050565b600080866003811115611dee57611dee61301f565b1415611e0757611e0085858585611ff6565b9050611e94565b6001866003811115611e1b57611e1b61301f565b1415611e2d57611e0085858585612125565b6002866003811115611e4157611e4161301f565b1415611e5357611e0085858585612270565b6003866003811115611e6757611e6761301f565b1415611e7957611e0085858585612392565b856040516336cb1d2160e01b81526004016104109190612b32565b95945050505050565b600080611eaa8585611fde565b9050611e948184611fea565b606082471015611f175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610410565b843b611f655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610410565b600080866001600160a01b03168587604051611f819190612a84565b60006040518083038185875af1925050503d8060008114611fbe576040519150601f19603f3d011682016040523d82523d6000602084013e611fc3565b606091505b5091509150611fd382828661246b565b979650505050505050565b6000611d5a8284612ef5565b6000611d5a8284612de8565b6001600160a01b03831660009081526003602090815260408083208054825181850281018501909352808352849383018282801561205d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161203f575b505050505090506000866001600160a01b03166338ed173986868530426040518663ffffffff1660e01b815260040161209a959493929190612cf8565b600060405180830381600087803b1580156120b457600080fd5b505af11580156120c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120f09190810190612853565b905080600182516121019190612f37565b8151811061211157612111613035565b602002602001015192505050949350505050565b6001600160a01b0383166000908152600460205260408120805482919061214b90612fb3565b80601f016020809104026020016040519081016040528092919081815260200182805461217790612fb3565b80156121c45780601f10612199576101008083540402835291602001916121c4565b820191906000526020600020905b8154815290600101906020018083116121a757829003601f168201915b50506040805160a0810182528581523060208201524281830152606081018a905260808101899052905163c04b8d5960e01b8152949550936001600160a01b038b16935063c04b8d59925061221e91508490600401612b96565b602060405180830381600087803b15801561223857600080fd5b505af115801561224c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd391906129c7565b6001600160a01b03838116600081815260056020908152604080832054815160c081018352818152808401859052808301959095527f0000000000000000000000000000000000000000000000000000000000000000861660608087019190915260808087018a90528351808601855286815260a0880152835190810184523080825294810186905280840194909452830184905290516352bbbe2960e01b81529294909392908916906352bbbe299061233490859085908a904290600401612bee565b602060405180830381600087803b15801561234e57600080fd5b505af1158015612362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238691906129c7565b98975050505050505050565b6001600160a01b0383811660009081526006602090815260408083208151808301835290546001600160801b03808216808452600160801b909204169382018490529151630b68372160e31b81526004810192909252602482019290925260448101869052606481018590529192909190871690635b41b90890608401602060405180830381600087803b15801561242957600080fd5b505af115801561243d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246191906129c7565b9695505050505050565b6060831561247a575081611d5a565b82511561248a5782518084602001fd5b8160405162461bcd60e51b81526004016104109190612b1f565b8280548282559060005260206000209081019282156124f9579160200282015b828111156124f957825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906124c4565b5061250592915061257d565b5090565b82805461251590612fb3565b90600052602060002090601f01602090048101928261253757600085556124f9565b82601f106125505782800160ff198235161785556124f9565b828001600101855582156124f9579182015b828111156124f9578235825591602001919060010190612562565b5b80821115612505576000815560010161257e565b80356001600160801b03811681146125a957600080fd5b919050565b6000602082840312156125c057600080fd5b8135611d5a81613176565b6000602082840312156125dd57600080fd5b8151611d5a81613176565b600080604083850312156125fb57600080fd5b823561260681613176565b9150602083013561261681613176565b809150509250929050565b6000806040838503121561263457600080fd5b823561263f81613176565b915060208301356126168161318b565b60008060008084860361010081121561266757600080fd5b853561267281613176565b945060c0601f198201121561268657600080fd5b5060208501925060e085013567ffffffffffffffff808211156126a857600080fd5b818701915087601f8301126126bc57600080fd5b8135818111156126cb57600080fd5b8860208285010111156126dd57600080fd5b95989497505060200194505050565b600080604083850312156126ff57600080fd5b823561270a81613176565b946020939093013593505050565b6000602080838503121561272b57600080fd5b823567ffffffffffffffff81111561274257600080fd5b8301601f8101851361275357600080fd5b803561276661276182612d9a565b612d69565b80828252848201915084840188868560051b870101111561278657600080fd5b600094505b838510156127b257803561279e81613176565b83526001949094019391850191850161278b565b50979650505050505050565b600060208083850312156127d157600080fd5b825167ffffffffffffffff8111156127e857600080fd5b8301601f810185136127f957600080fd5b805161280761276182612d9a565b80828252848201915084840188868560051b870101111561282757600080fd5b600094505b838510156127b257805161283f81613176565b83526001949094019391850191850161282c565b6000602080838503121561286657600080fd5b825167ffffffffffffffff81111561287d57600080fd5b8301601f8101851361288e57600080fd5b805161289c61276182612d9a565b80828252848201915084840188868560051b87010111156128bc57600080fd5b600094505b838510156127b25780518352600194909401939185019185016128c1565b6000602082840312156128f157600080fd5b8135611d5a8161318b565b60006020828403121561290e57600080fd5b8151611d5a8161318b565b60006020828403121561292b57600080fd5b5035919050565b60006020828403121561294457600080fd5b8135611d5a81613199565b60006040828403121561296157600080fd5b6040516040810181811067ffffffffffffffff821117156129845761298461304b565b60405261299083612592565b815261299e60208401612592565b60208201529392505050565b6000602082840312156129bc57600080fd5b8135611d5a816131a6565b6000602082840312156129d957600080fd5b5051919050565b600080600080608085870312156129f657600080fd5b8451935060208501519250604085015191506060850151612a1681613176565b939692955090935050565b600060208284031215612a3357600080fd5b815160ff81168114611d5a57600080fd5b60008151808452612a5c816020860160208601612f83565b601f01601f19169290920160200192915050565b60048110612a8057612a8061301f565b9052565b60008251612a96818460208701612f83565b9190910192915050565b6001600160a01b038a8116825261ffff8a811660208401528916604083015260009061010090612ad3606085018b612a70565b8816608084015260a083018190528201859052610120858782850137600083870182015260c08301949094525090151560e0820152601f909201601f1916909101019695505050505050565b602081526000611d5a6020830184612a44565b60208101610e1b8284612a70565b60608101612b4e8286612a70565b602082019390935260400152919050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602081526000825160a06020840152612bb260c0840182612a44565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60e08152845160e08201526000602086015160028110612c1057612c1061301f565b61010083015260408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152612c5e6101a0840182612a44565b915050612c9e602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b61ffff8781168252861660208201526001600160a01b0385166040820152831515606082015260c08101612ce76080830185612a70565b8260a0830152979650505050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612d485784516001600160a01b031683529383019391830191600101612d23565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d9257612d9261304b565b604052919050565b600067ffffffffffffffff821115612db457612db461304b565b5060051b60200190565b60008085851115612dce57600080fd5b83861115612ddb57600080fd5b5050820193919092039150565b600082612e0557634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612e45578160001904821115612e2b57612e2b613009565b80851615612e3857918102915b93841c9390800290612e0f565b509250929050565b6000611d5a8383600082612e6357506001610e1b565b81612e7057506000610e1b565b8160018114612e865760028114612e9057612eac565b6001915050610e1b565b60ff841115612ea157612ea1613009565b50506001821b610e1b565b5060208310610133831016604e8410600b8410161715612ecf575081810a610e1b565b612ed98383612e0a565b8060001904821115612eed57612eed613009565b029392505050565b6000816000190483118215151615612f0f57612f0f613009565b500290565b600061ffff83811690831681811015612f2f57612f2f613009565b039392505050565b600082821015612f4957612f49613009565b500390565b6bffffffffffffffffffffffff198135818116916014851015612f7b5780818660140360031b1b83161692505b505092915050565b60005b83811015612f9e578181015183820152602001612f86565b83811115612fad576000848401525b50505050565b600181811c90821680612fc757607f821691505b60208210811415612fe857634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561300257613002613009565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008135610e1b8161318b565b60008135610e1b81613199565b8135613086816131a6565b61ffff8116905081548161ffff19821617835560208401356130a7816131a6565b63ffff00008160101b169050808363ffffffff1984161717845560408501356130cf81613176565b6001600160c01b0319929092169092179190911760209190911b640100000000600160c01b031617815561312661310860608401613061565b82805460ff60c01b191691151560c01b60ff60c01b16919091179055565b61313b6131356080840161306e565b82613149565b60a082013560018201555050565b600482106131595761315961301f565b805460ff60c81b191660c89290921b60ff60c81b16919091179055565b6001600160a01b038116811461172857600080fd5b801515811461172857600080fd5b6004811061172857600080fd5b61ffff8116811461172857600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220c5a01dce54b99c9c89611a168c7e5f6277b6e19a1962c95f5b4baa719e10ad2864736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "harvestAndSwap(address)": {
        "details": "Collect reward tokens from a specific strategy and swap them for      base token on the configured swap platform. Can be called by anyone.      Rewards incentivizing the caller are sent to the caller of this function.",
        "params": {
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "harvestAndSwap(address,address)": {
        "details": "Collect reward tokens from a specific strategy and swap them for      base token on the configured swap platform. Can be called by anyone",
        "params": {
          "_rewardTo": "Address where to send a share of harvest rewards to as an incentive      for executing this function",
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "setRewardProceedsAddress(address)": {
        "params": {
          "_rewardProceedsAddress": "Address of the reward token"
        }
      },
      "setRewardTokenConfig(address,(uint16,uint16,address,bool,uint8,uint256),bytes)": {
        "details": "Add/update a reward token configuration that holds harvesting config variables",
        "params": {
          "_tokenAddress": "Address of the reward token",
          "swapData": "Additional data required for swapping",
          "tokenConfig": ".swapPlatform SwapPlatform to use for Swapping"
        }
      },
      "setSupportedStrategy(address,bool)": {
        "details": "Flags a strategy as supported or not supported one",
        "params": {
          "_isSupported": "Bool marking strategy as supported or not supported",
          "_strategyAddress": "Address of the strategy"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseTokenAddress()": {
        "notice": "All tokens are swapped to this token before it gets transferred to the `rewardProceedsAddress`. USDT for OUSD and WETH for OETH.*"
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "rewardProceedsAddress()": {
        "notice": "Address receiving rewards proceeds. Initially the Vault contract later will possibly be replaced by another contract that eases out rewards distribution.*"
      },
      "setRewardProceedsAddress(address)": {
        "notice": "Set the Address receiving rewards proceeds."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7886,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "rewardTokenConfigs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(RewardTokenConfig)7881_storage)"
      },
      {
        "astId": 7890,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "supportedStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7895,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "rewardProceedsAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7905,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "uniswapV2Path",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 7909,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "uniswapV3Path",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 7913,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "balancerPoolId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 7923,
        "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
        "label": "curvePoolIndices",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(CurvePoolIndices)7918_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(SwapPlatform)7776": {
        "encoding": "inplace",
        "label": "enum BaseHarvester.SwapPlatform",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_struct(CurvePoolIndices)7918_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseHarvester.CurvePoolIndices)",
        "numberOfBytes": "32",
        "value": "t_struct(CurvePoolIndices)7918_storage"
      },
      "t_mapping(t_address,t_struct(RewardTokenConfig)7881_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseHarvester.RewardTokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardTokenConfig)7881_storage"
      },
      "t_struct(CurvePoolIndices)7918_storage": {
        "encoding": "inplace",
        "label": "struct BaseHarvester.CurvePoolIndices",
        "members": [
          {
            "astId": 7915,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "rewardTokenIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7917,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "baseTokenIndex",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RewardTokenConfig)7881_storage": {
        "encoding": "inplace",
        "label": "struct BaseHarvester.RewardTokenConfig",
        "members": [
          {
            "astId": 7869,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "allowedSlippageBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 7871,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "harvestRewardBps",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 7873,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "swapPlatformAddr",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7875,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "doSwapRewardToken",
            "offset": 24,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7878,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "swapPlatform",
            "offset": 25,
            "slot": "0",
            "type": "t_enum(SwapPlatform)7776"
          },
          {
            "astId": 7880,
            "contract": "contracts/harvest/OETHHarvester.sol:OETHHarvester",
            "label": "liquidationLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
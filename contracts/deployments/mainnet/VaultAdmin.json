{
  "address": "0x3EB68D8f4992A0e34aA58cc3dF86A40814078cF6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "AllocateThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "AssetDefaultStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplyDiffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebasePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "RebaseThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebaseUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "SwapTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "SwapTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "TrusteeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "TrusteeFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "UniswapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "VaultBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "YieldDistribution",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addSwapToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetDefaultStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "harvestAndSwap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUSDMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUSDRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyFromAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategyToAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "reallocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "removeSwapToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setAssetDefaultStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setAutoAllocateThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyDiff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setRebaseThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStrategistAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setTrusteeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "setTrusteeFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setUniswapAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "setVaultBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllFromStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "withdrawAllFromStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x340f6ecff6b3c285290cb4c231b5b043a221ac39463a7fc77f29c9e446d02904",
  "receipt": {
    "to": null,
    "from": "0x71F78361537A6f7B6818e7A760c8bC0146D93f50",
    "contractAddress": "0x3EB68D8f4992A0e34aA58cc3dF86A40814078cF6",
    "transactionIndex": 211,
    "gasUsed": "3137670",
    "logsBloom": "0x
    "blockHash": "0xc6cb5559a8379e898c1b19b4698ea6ba0ad45032136dac45ec2b85b8abdd5d79",
    "transactionHash": "0x340f6ecff6b3c285290cb4c231b5b043a221ac39463a7fc77f29c9e446d02904",
    "logs": [
      {
        "transactionIndex": 211,
        "blockNumber": 13369280,
        "transactionHash": "0x340f6ecff6b3c285290cb4c231b5b043a221ac39463a7fc77f29c9e446d02904",
        "address": "0x3EB68D8f4992A0e34aA58cc3dF86A40814078cF6",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071f78361537a6f7b6818e7a760c8bc0146d93f50"
        ],
        "data": "0x",
        "logIndex": 199,
        "blockHash": "0xc6cb5559a8379e898c1b19b4698ea6ba0ad45032136dac45ec2b85b8abdd5d79"
      }
    ],
    "blockNumber": 13369280,
    "cumulativeGasUsed": "12049587",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b6193023c3a28756304ff066bec0ae10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"AllocateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AssetDefaultStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyDiffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"RebaseThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebaseUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SwapTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SwapTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TrusteeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"TrusteeFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UniswapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"VaultBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDefaultStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvestAndSwap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUSDMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUSDRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyFromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyToAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"reallocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setAssetDefaultStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setAutoAllocateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyDiff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRebaseThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"setRedeemFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStrategistAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTrusteeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"setTrusteeFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniswapAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"setVaultBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllFromStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"withdrawAllFromStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addSwapToken(address)\":{\"details\":\"Add a swap token to the tokens that get liquidated for stablecoins      whenever swap is called. The token must have a valid feed registered      with the price provider.\",\"params\":{\"_addr\":\"Address of the token\"}},\"approveStrategy(address)\":{\"details\":\"Add a strategy to the Vault.\",\"params\":{\"_addr\":\"Address of the strategy to add\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"harvest()\":{\"details\":\"Collect reward tokens from all strategies\"},\"harvest(address)\":{\"details\":\"Collect reward tokens for a specific strategy. Called from the vault.\",\"params\":{\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"harvestAndSwap(address)\":{\"details\":\"Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Called from the vault.\",\"params\":{\"_strategyAddr\":\"Address of the strategy to collect rewards from\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"pauseCapital()\":{\"details\":\"Set the deposit paused flag to true to prevent capital movement.\"},\"pauseRebase()\":{\"details\":\"Set the deposit paused flag to true to prevent rebasing.\"},\"priceUSDMint(address)\":{\"details\":\"Returns the total price in 18 digit USD for a given asset.      Never goes above 1, since that is how we price mints\",\"params\":{\"asset\":\"address of the asset\"},\"returns\":{\"_0\":\"uint256 USD price of 1 of the asset, in 18 decimal fixed\"}},\"priceUSDRedeem(address)\":{\"details\":\"Returns the total price in 18 digit USD for a given asset.      Never goes below 1, since that is how we price redeems\",\"params\":{\"asset\":\"Address of the asset\"},\"returns\":{\"_0\":\"uint256 USD price of 1 of the asset, in 18 decimal fixed\"}},\"reallocate(address,address,address[],uint256[])\":{\"params\":{\"_amounts\":\"Array of amounts of each corresponding asset to move.\",\"_assets\":\"Array of asset address that will be moved\",\"_strategyFromAddress\":\"Address of Strategy to move assets from.\",\"_strategyToAddress\":\"Address of Strategy to move assets to.\"}},\"removeStrategy(address)\":{\"details\":\"Remove a strategy from the Vault. Removes all invested assets and returns them to the Vault.\",\"params\":{\"_addr\":\"Address of the strategy to remove\"}},\"removeSwapToken(address)\":{\"details\":\"Remove a swap token from the tokens that get liquidated for stablecoins.\",\"params\":{\"_addr\":\"Address of the token\"}},\"setAdminImpl(address)\":{\"details\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\",\"params\":{\"newImpl\":\"address of the implementation\"}},\"setAssetDefaultStrategy(address,address)\":{\"details\":\"Set the default Strategy for an asset, i.e. the one which the asset will be automatically allocated to and withdrawn from\",\"params\":{\"_asset\":\"Address of the asset\",\"_strategy\":\"Address of the Strategy\"}},\"setAutoAllocateThreshold(uint256)\":{\"details\":\"Sets the minimum amount of OUSD in a mint to trigger an automatic allocation of funds afterwords.\",\"params\":{\"_threshold\":\"OUSD amount with 18 fixed decimals.\"}},\"setMaxSupplyDiff(uint256)\":{\"details\":\"Sets the maximum allowable difference between total supply and backing assets' value.\"},\"setPriceProvider(address)\":{\"details\":\"Set address of price provider.\",\"params\":{\"_priceProvider\":\"Address of price provider\"}},\"setRebaseThreshold(uint256)\":{\"details\":\"Set a minimum amount of OUSD in a mint or redeem that triggers a rebase\",\"params\":{\"_threshold\":\"OUSD amount with 18 fixed decimals.\"}},\"setRedeemFeeBps(uint256)\":{\"details\":\"Set a fee in basis points to be charged for a redeem.\",\"params\":{\"_redeemFeeBps\":\"Basis point fee to be charged\"}},\"setStrategistAddr(address)\":{\"details\":\"Set address of Strategist\",\"params\":{\"_address\":\"Address of Strategist\"}},\"setTrusteeAddress(address)\":{\"details\":\"Sets the trusteeAddress that can receive a portion of yield.      Setting to the zero address disables this feature.\"},\"setTrusteeFeeBps(uint256)\":{\"details\":\"Sets the TrusteeFeeBps to the percentage of yield that should be      received in basis points.\"},\"setUniswapAddr(address)\":{\"details\":\"Set address of Uniswap for performing liquidation of strategy reward tokens\",\"params\":{\"_address\":\"Address of Uniswap\"}},\"setVaultBuffer(uint256)\":{\"details\":\"Set a buffer of assets to keep in the Vault to handle most redemptions without needing to spend gas unwinding assets from a Strategy.\",\"params\":{\"_vaultBuffer\":\"Percentage using 18 decimals. 100% = 1e18.\"}},\"supportAsset(address)\":{\"details\":\"Add a supported asset to the contract, i.e. one that can be         to mint OUSD.\",\"params\":{\"_asset\":\"Address of asset\"}},\"swap()\":{\"details\":\"Swap all supported swap tokens for stablecoins via Uniswap.\"},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"unpauseCapital()\":{\"details\":\"Set the deposit paused flag to false to enable capital movement.\"},\"unpauseRebase()\":{\"details\":\"Set the deposit paused flag to true to allow rebasing.\"},\"withdrawAllFromStrategies()\":{\"details\":\"Withdraws all assets from all the strategies and sends assets to the Vault.\"},\"withdrawAllFromStrategy(address)\":{\"details\":\"Withdraws all assets from the strategy and sends assets to the Vault.\",\"params\":{\"_strategyAddr\":\"Strategy address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"reallocate(address,address,address[],uint256[])\":{\"notice\":\"Move assets from one Strategy to another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultAdmin.sol\":\"VaultAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x29d258134253bdaeeea64c17baaf6108ff50aec65ceddb7216ef3a948a88808c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcabd808c03076fa6fb5838a13210b2b99314d23842e0e3d5e55e0c1466e75212\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x595ee808ea4eb2e36362c0e46e85e4f923e673a6eb17fe7efad1c8d77d41d09d\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardToken() external;\\n\\n    /**\\n     * @dev The address of the reward token for the Strategy.\\n     */\\n    function rewardTokenAddress() external pure returns (address);\\n\\n    /**\\n     * @dev The threshold (denominated in the reward token) over which the\\n     * vault will auto harvest on allocate calls.\\n     */\\n    function rewardLiquidationThreshold() external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x715a3976ef2427302c06679f55cd7efaca179954b5ccd28aabc2dcc1a7c1e136\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router {\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n}\\n\",\"keccak256\":\"0x3c51b4858ea33debc659b6d564e33f457e4fa21e579b799b04ec88ad8a66d34f\",\"license\":\"agpl-3.0\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdated(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 public rebasingCredits;\\n    uint256 public rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        rebasingCreditsPerToken = 1e18;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (_creditBalances[_account], _creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            rebasingCredits = rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            rebasingCredits = rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            rebasingCredits = rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            rebasingCredits = rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                rebasingCredits = rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\n            .mul(rebasingCreditsPerToken)\\n            .div(_creditsPerToken(msg.sender));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\n\\n        _creditBalances[msg.sender] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        rebasingCredits = rebasingCredits.add(_creditBalances[msg.sender]);\\n\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        rebasingCredits = rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdated(\\n                _totalSupply,\\n                rebasingCredits,\\n                rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        rebasingCreditsPerToken = rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = rebasingCredits\\n            .divPrecisely(rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdated(\\n            _totalSupply,\\n            rebasingCredits,\\n            rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb6ce7a9809504eb3c06ce72d0a867416e5c56f9f967d9a52be76e5d30d7ede1a\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce41c7eacd2b6722029bd87759fe6e4d9b48a862277707737be82c94581b855\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xff2a83835ed8984e10338905bc31dbcaeeabdfc0e58d49257389cb1e5a3b9d8a\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x6133477dbb255d0c1d9da440a10cc509fe50ec2e3ae6cafda69477a6ef11eb35\",\"license\":\"agpl-3.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd9c475e374285f00f73351de859ed44b490f9989baee63c2d5db79b41aa9e8\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Vault Admin Contract\\n * @notice The VaultAdmin contract makes configuration and admin calls on the vault.\\n * @author Origin Protocol Inc\\n */\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract VaultAdmin is VaultStorage {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == address(this) ||\\n                msg.sender == strategistAddr ||\\n                isGovernor(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == strategistAddr || isGovernor(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /***************************************\\n                 Configuration\\n    ****************************************/\\n\\n    /**\\n     * @dev Set address of price provider.\\n     * @param _priceProvider Address of price provider\\n     */\\n    function setPriceProvider(address _priceProvider) external onlyGovernor {\\n        priceProvider = _priceProvider;\\n        emit PriceProviderUpdated(_priceProvider);\\n    }\\n\\n    /**\\n     * @dev Set a fee in basis points to be charged for a redeem.\\n     * @param _redeemFeeBps Basis point fee to be charged\\n     */\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external onlyGovernor {\\n        redeemFeeBps = _redeemFeeBps;\\n        emit RedeemFeeUpdated(_redeemFeeBps);\\n    }\\n\\n    /**\\n     * @dev Set a buffer of assets to keep in the Vault to handle most\\n     * redemptions without needing to spend gas unwinding assets from a Strategy.\\n     * @param _vaultBuffer Percentage using 18 decimals. 100% = 1e18.\\n     */\\n    function setVaultBuffer(uint256 _vaultBuffer)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        require(_vaultBuffer <= 1e18, \\\"Invalid value\\\");\\n        vaultBuffer = _vaultBuffer;\\n        emit VaultBufferUpdated(_vaultBuffer);\\n    }\\n\\n    /**\\n     * @dev Sets the minimum amount of OUSD in a mint to trigger an\\n     * automatic allocation of funds afterwords.\\n     * @param _threshold OUSD amount with 18 fixed decimals.\\n     */\\n    function setAutoAllocateThreshold(uint256 _threshold)\\n        external\\n        onlyGovernor\\n    {\\n        autoAllocateThreshold = _threshold;\\n        emit AllocateThresholdUpdated(_threshold);\\n    }\\n\\n    /**\\n     * @dev Set a minimum amount of OUSD in a mint or redeem that triggers a\\n     * rebase\\n     * @param _threshold OUSD amount with 18 fixed decimals.\\n     */\\n    function setRebaseThreshold(uint256 _threshold) external onlyGovernor {\\n        rebaseThreshold = _threshold;\\n        emit RebaseThresholdUpdated(_threshold);\\n    }\\n\\n    /**\\n     * @dev Set address of Uniswap for performing liquidation of strategy reward\\n     * tokens\\n     * @param _address Address of Uniswap\\n     */\\n    function setUniswapAddr(address _address) external onlyGovernor {\\n        for (uint256 i = 0; i < swapTokens.length; i++) {\\n            // Revoke swap token approvals for old address\\n            IERC20(swapTokens[i]).safeApprove(uniswapAddr, 0);\\n        }\\n        uniswapAddr = _address;\\n        for (uint256 i = 0; i < swapTokens.length; i++) {\\n            // Add swap token approvals for new address\\n            IERC20(swapTokens[i]).safeApprove(uniswapAddr, type(uint256).max);\\n        }\\n        emit UniswapUpdated(_address);\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function setStrategistAddr(address _address) external onlyGovernor {\\n        strategistAddr = _address;\\n        emit StrategistUpdated(_address);\\n    }\\n\\n    /**\\n     * @dev Set the default Strategy for an asset, i.e. the one which the asset\\n            will be automatically allocated to and withdrawn from\\n     * @param _asset Address of the asset\\n     * @param _strategy Address of the Strategy\\n     */\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        emit AssetDefaultStrategyUpdated(_asset, _strategy);\\n        // If its a zero address being passed for the strategy we are removing\\n        // the default strategy\\n        if (_strategy != address(0)) {\\n            // Make sure the strategy meets some criteria\\n            require(strategies[_strategy].isSupported, \\\"Strategy not approved\\\");\\n            IStrategy strategy = IStrategy(_strategy);\\n            require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n            require(\\n                strategy.supportsAsset(_asset),\\n                \\\"Asset not supported by Strategy\\\"\\n            );\\n        }\\n        assetDefaultStrategies[_asset] = _strategy;\\n    }\\n\\n    /**\\n     * @dev Add a supported asset to the contract, i.e. one that can be\\n     *         to mint OUSD.\\n     * @param _asset Address of asset\\n     */\\n    function supportAsset(address _asset) external onlyGovernor {\\n        require(!assets[_asset].isSupported, \\\"Asset already supported\\\");\\n\\n        assets[_asset] = Asset({ isSupported: true });\\n        allAssets.push(_asset);\\n\\n        // Verify that our oracle supports the asset\\n        // slither-disable-next-line unused-return\\n        IOracle(priceProvider).price(_asset);\\n\\n        emit AssetSupported(_asset);\\n    }\\n\\n    /**\\n     * @dev Add a strategy to the Vault.\\n     * @param _addr Address of the strategy to add\\n     */\\n    function approveStrategy(address _addr) external onlyGovernor {\\n        require(!strategies[_addr].isSupported, \\\"Strategy already approved\\\");\\n        strategies[_addr] = Strategy({ isSupported: true, _deprecated: 0 });\\n        allStrategies.push(_addr);\\n        emit StrategyApproved(_addr);\\n    }\\n\\n    /**\\n     * @dev Remove a strategy from the Vault. Removes all invested assets and\\n     * returns them to the Vault.\\n     * @param _addr Address of the strategy to remove\\n     */\\n\\n    function removeStrategy(address _addr) external onlyGovernor {\\n        require(strategies[_addr].isSupported, \\\"Strategy not approved\\\");\\n\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            require(\\n                assetDefaultStrategies[allAssets[i]] != _addr,\\n                \\\"Strategy is default for an asset\\\"\\n            );\\n        }\\n\\n        // Initialize strategyIndex with out of bounds result so function will\\n        // revert if no valid index found\\n        uint256 strategyIndex = allStrategies.length;\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            if (allStrategies[i] == _addr) {\\n                strategyIndex = i;\\n                break;\\n            }\\n        }\\n\\n        if (strategyIndex < allStrategies.length) {\\n            allStrategies[strategyIndex] = allStrategies[\\n                allStrategies.length - 1\\n            ];\\n            allStrategies.pop();\\n\\n            // Mark the strategy as not supported\\n            strategies[_addr].isSupported = false;\\n\\n            // Withdraw all assets\\n            IStrategy strategy = IStrategy(_addr);\\n            strategy.withdrawAll();\\n\\n            // Call harvest after withdraw in case withdraw triggers\\n            // distribution of additional reward tokens (true for Compound)\\n            _harvest(_addr);\\n            emit StrategyRemoved(_addr);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a swap token to the tokens that get liquidated for stablecoins\\n     *      whenever swap is called. The token must have a valid feed registered\\n     *      with the price provider.\\n     * @param _addr Address of the token\\n     */\\n    function addSwapToken(address _addr) external onlyGovernor {\\n        for (uint256 i = 0; i < swapTokens.length; i++) {\\n            if (swapTokens[i] == _addr) {\\n                revert(\\\"Swap token already added\\\");\\n            }\\n        }\\n\\n        // Revert if feed does not exist\\n        IOracle(priceProvider).price(_addr);\\n\\n        swapTokens.push(_addr);\\n\\n        // Give Uniswap infinte approval\\n        if (uniswapAddr != address(0)) {\\n            IERC20 token = IERC20(_addr);\\n            token.safeApprove(uniswapAddr, 0);\\n            token.safeApprove(uniswapAddr, type(uint256).max);\\n        }\\n\\n        emit SwapTokenAdded(_addr);\\n    }\\n\\n    /**\\n     * @dev Remove a swap token from the tokens that get liquidated for stablecoins.\\n     * @param _addr Address of the token\\n     */\\n    function removeSwapToken(address _addr) external onlyGovernor {\\n        uint256 swapTokenIndex = swapTokens.length;\\n        for (uint256 i = 0; i < swapTokens.length; i++) {\\n            if (swapTokens[i] == _addr) {\\n                swapTokenIndex = i;\\n                break;\\n            }\\n        }\\n\\n        require(swapTokenIndex != swapTokens.length, \\\"Swap token not added\\\");\\n\\n        // Shift everything after the index element by 1\\n        for (uint256 i = swapTokenIndex; i < swapTokens.length - 1; i++) {\\n            swapTokens[i] = swapTokens[i + 1];\\n        }\\n        swapTokens.pop();\\n\\n        if (uniswapAddr != address(0)) {\\n            IERC20 token = IERC20(_addr);\\n            // Remove Uniswap approval\\n            token.safeApprove(uniswapAddr, 0);\\n        }\\n\\n        emit SwapTokenRemoved(_addr);\\n    }\\n\\n    /**\\n     * @notice Move assets from one Strategy to another\\n     * @param _strategyFromAddress Address of Strategy to move assets from.\\n     * @param _strategyToAddress Address of Strategy to move assets to.\\n     * @param _assets Array of asset address that will be moved\\n     * @param _amounts Array of amounts of each corresponding asset to move.\\n     */\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external onlyGovernorOrStrategist {\\n        require(\\n            strategies[_strategyFromAddress].isSupported,\\n            \\\"Invalid from Strategy\\\"\\n        );\\n        require(\\n            strategies[_strategyToAddress].isSupported,\\n            \\\"Invalid to Strategy\\\"\\n        );\\n        require(_assets.length == _amounts.length, \\\"Parameter length mismatch\\\");\\n\\n        IStrategy strategyFrom = IStrategy(_strategyFromAddress);\\n        IStrategy strategyTo = IStrategy(_strategyToAddress);\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            require(strategyTo.supportsAsset(_assets[i]), \\\"Asset unsupported\\\");\\n            // Withdraw from Strategy and pass other Strategy as recipient\\n            strategyFrom.withdraw(address(strategyTo), _assets[i], _amounts[i]);\\n        }\\n        // Tell new Strategy to deposit into protocol\\n        strategyTo.depositAll();\\n    }\\n\\n    /**\\n     * @dev Sets the maximum allowable difference between\\n     * total supply and backing assets' value.\\n     */\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external onlyGovernor {\\n        maxSupplyDiff = _maxSupplyDiff;\\n        emit MaxSupplyDiffChanged(_maxSupplyDiff);\\n    }\\n\\n    /**\\n     * @dev Sets the trusteeAddress that can receive a portion of yield.\\n     *      Setting to the zero address disables this feature.\\n     */\\n    function setTrusteeAddress(address _address) external onlyGovernor {\\n        trusteeAddress = _address;\\n        emit TrusteeAddressChanged(_address);\\n    }\\n\\n    /**\\n     * @dev Sets the TrusteeFeeBps to the percentage of yield that should be\\n     *      received in basis points.\\n     */\\n    function setTrusteeFeeBps(uint256 _basis) external onlyGovernor {\\n        require(_basis <= 5000, \\\"basis cannot exceed 50%\\\");\\n        trusteeFeeBps = _basis;\\n        emit TrusteeFeeBpsChanged(_basis);\\n    }\\n\\n    /***************************************\\n                    Pause\\n    ****************************************/\\n\\n    /**\\n     * @dev Set the deposit paused flag to true to prevent rebasing.\\n     */\\n    function pauseRebase() external onlyGovernorOrStrategist {\\n        rebasePaused = true;\\n        emit RebasePaused();\\n    }\\n\\n    /**\\n     * @dev Set the deposit paused flag to true to allow rebasing.\\n     */\\n    function unpauseRebase() external onlyGovernor {\\n        rebasePaused = false;\\n        emit RebaseUnpaused();\\n    }\\n\\n    /**\\n     * @dev Set the deposit paused flag to true to prevent capital movement.\\n     */\\n    function pauseCapital() external onlyGovernorOrStrategist {\\n        capitalPaused = true;\\n        emit CapitalPaused();\\n    }\\n\\n    /**\\n     * @dev Set the deposit paused flag to false to enable capital movement.\\n     */\\n    function unpauseCapital() external onlyGovernorOrStrategist {\\n        capitalPaused = false;\\n        emit CapitalUnpaused();\\n    }\\n\\n    /***************************************\\n                    Rewards\\n    ****************************************/\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      contract, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        external\\n        onlyGovernor\\n    {\\n        require(!assets[_asset].isSupported, \\\"Only unsupported assets\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from all strategies\\n     */\\n    function harvest() public onlyGovernorOrStrategist {\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            _harvest(allStrategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Swap all supported swap tokens for stablecoins via Uniswap.\\n     */\\n    function swap() external onlyVaultOrGovernorOrStrategist {\\n        _swap();\\n    }\\n\\n    /*\\n     * @dev Collect reward tokens from all strategies and swap for supported\\n     *      stablecoin via Uniswap\\n     */\\n    function harvestAndSwap() external onlyGovernorOrStrategist {\\n        harvest();\\n        _swap();\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy. Called from the vault.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     */\\n    function harvest(address _strategyAddr)\\n        external\\n        onlyVaultOrGovernorOrStrategist\\n    {\\n        _harvest(_strategyAddr);\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens for a specific strategy and swap for supported\\n     *      stablecoin via Uniswap. Called from the vault.\\n     * @param _strategyAddr Address of the strategy to collect rewards from\\n     */\\n    function harvestAndSwap(address _strategyAddr)\\n        external\\n        onlyVaultOrGovernorOrStrategist\\n        returns (uint256[] memory)\\n    {\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        _harvest(address(strategy));\\n        return _swap(strategy.rewardTokenAddress());\\n    }\\n\\n    /**\\n     * @dev Collect reward tokens from a single strategy and swap them for a\\n     *      supported stablecoin via Uniswap\\n     * @param _strategyAddr Address of the strategy to collect rewards from.\\n     */\\n    function _harvest(address _strategyAddr) internal {\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        address rewardTokenAddress = strategy.rewardTokenAddress();\\n        if (rewardTokenAddress != address(0)) {\\n            strategy.collectRewardToken();\\n        }\\n    }\\n\\n    /**\\n     * @dev Swap all supported swap tokens for stablecoins via Uniswap.\\n     */\\n    function _swap() internal {\\n        for (uint256 i = 0; i < swapTokens.length; i++) {\\n            _swap(swapTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Swap a record token for stablecoins for Uniswap. The token must have\\n     *       a registered price feed with the price provider.\\n     * @param _swapToken Address of the token to swap.\\n     */\\n    function _swap(address _swapToken)\\n        internal\\n        returns (uint256[] memory swapResult)\\n    {\\n        if (uniswapAddr != address(0)) {\\n            IERC20 swapToken = IERC20(_swapToken);\\n            uint256 balance = swapToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                // This'll revert if there is no price feed\\n                uint256 oraclePrice = IOracle(priceProvider).price(_swapToken);\\n                // Oracle price is 1e8, USDT output is 1e6\\n                uint256 minExpected = ((balance * oraclePrice * 97) / 100)\\n                    .scaleBy(6, Helpers.getDecimals(_swapToken) + 8);\\n\\n                // Uniswap redemption path\\n                address[] memory path = new address[](3);\\n                path[0] = _swapToken;\\n                path[1] = IUniswapV2Router(uniswapAddr).WETH();\\n                path[2] = allAssets[1]; // USDT\\n\\n                swapResult = IUniswapV2Router(uniswapAddr)\\n                    .swapExactTokensForTokens(\\n                        balance,\\n                        minExpected,\\n                        path,\\n                        address(this),\\n                        block.timestamp\\n                    );\\n            }\\n        }\\n    }\\n\\n    /***************************************\\n                    Pricing\\n    ****************************************/\\n\\n    /**\\n     * @dev Returns the total price in 18 digit USD for a given asset.\\n     *      Never goes above 1, since that is how we price mints\\n     * @param asset address of the asset\\n     * @return uint256 USD price of 1 of the asset, in 18 decimal fixed\\n     */\\n    function priceUSDMint(address asset) external view returns (uint256) {\\n        uint256 price = IOracle(priceProvider).price(asset);\\n        if (price > 1e8) {\\n            price = 1e8;\\n        }\\n        // Price from Oracle is returned with 8 decimals so scale to 18\\n        return price.scaleBy(18, 8);\\n    }\\n\\n    /**\\n     * @dev Returns the total price in 18 digit USD for a given asset.\\n     *      Never goes below 1, since that is how we price redeems\\n     * @param asset Address of the asset\\n     * @return uint256 USD price of 1 of the asset, in 18 decimal fixed\\n     */\\n    function priceUSDRedeem(address asset) external view returns (uint256) {\\n        uint256 price = IOracle(priceProvider).price(asset);\\n        if (price < 1e8) {\\n            price = 1e8;\\n        }\\n        // Price from Oracle is returned with 8 decimals so scale to 18\\n        return price.scaleBy(18, 8);\\n    }\\n\\n    /***************************************\\n             Strategies Admin\\n    ****************************************/\\n\\n    /**\\n     * @dev Withdraws all assets from the strategy and sends assets to the Vault.\\n     * @param _strategyAddr Strategy address.\\n     */\\n    function withdrawAllFromStrategy(address _strategyAddr)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        require(\\n            strategies[_strategyAddr].isSupported,\\n            \\\"Strategy is not supported\\\"\\n        );\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        strategy.withdrawAll();\\n    }\\n\\n    /**\\n     * @dev Withdraws all assets from all the strategies and sends assets to the Vault.\\n     */\\n    function withdrawAllFromStrategies() external onlyGovernorOrStrategist {\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            strategy.withdrawAll();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4998c094684e674299653a987b9f9a60fc0d19d291abe8435f1ea2288c872cf5\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD VaultStorage Contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n    using SafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event UniswapUpdated(address _address);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapTokenAdded(address _address);\\n    event SwapTokenRemoved(address _address);\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    struct Asset {\\n        bool isSupported;\\n    }\\n    mapping(address => Asset) internal assets;\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    mapping(address => Strategy) internal strategies;\\n    address[] internal allStrategies;\\n\\n    // Address of the Oracle price provider contract\\n    address public priceProvider;\\n    // Pausing bools\\n    bool public rebasePaused = false;\\n    bool public capitalPaused = true;\\n    // Redemption fee in basis points\\n    uint256 public redeemFeeBps;\\n    // Buffer of assets to keep in Vault to handle (most) withdrawals\\n    uint256 public vaultBuffer;\\n    // Mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    // Mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Address of Uniswap\\n    address public uniswapAddr = address(0);\\n\\n    // Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    // Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    uint256 public maxSupplyDiff;\\n\\n    // Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    // Amount of yield collected in basis points\\n    uint256 public trusteeFeeBps;\\n\\n    // Tokens that should be swapped for stablecoins\\n    address[] public swapTokens;\\n\\n    /**\\n     * @dev set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6970f289455f69953ec037ec98760f001c92ae29442932d675a9a980b04639df\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526037805461ffff60a01b1916600160a81b179055603d80546001600160a01b0319908116909155603e805482169055603f805490911690553480156200004957600080fd5b5062000062336000805160206200378483398151915255565b60008051602062003784833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36136ca80620000ba6000396000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c80635d36b19011610182578063b2c9336d116100e9578063c7af3352116100a2578063e6cc54321161007c578063e6cc5432146105f1578063eb03654b14610605578063fc0cfeee14610618578063fe784eaa1461062b57600080fd5b8063c7af3352146105ce578063c9919112146105d6578063d38bfff4146105de57600080fd5b8063b2c9336d14610567578063b888879e1461057a578063b890ebf61461058d578063bc90106b146105a0578063bf550298146105b3578063c5f00841146105c657600080fd5b80638e510b521161013b5780638e510b52146104fe5780638ec489a21461050757806394828ffd1461051a5780639fa1826e14610522578063a403e4d51461052b578063aea173d51461055457600080fd5b80635d36b190146104a2578063663e64ce146104aa578063773540b3146104bd5780637fe2d393146104d05780638119c065146104e35780638c5cbb89146104eb57600080fd5b80632da845a81161024157806349c1d54d116101fa57806353ca9f24116101d457806353ca9f2414610438578063548f5ae51461045c578063570d8e1d1461047c578063597c89101461048f57600080fd5b806349c1d54d146104095780634cd55c2d1461041c57806352d38e5d1461042f57600080fd5b80632da845a8146103ad578063372aa224146103c05780633b8ae397146103d35780633dbc911f146103e65780634641257d146103ee57806347c47ed3146103f657600080fd5b80631072cbea116102935780631072cbea1461034f57806310d3fdac14610362578063128a8b0514610375578063175188e8146103885780631edfe3da1461039b578063207134b0146103a457600080fd5b806309f49bf5146102db57806309f6442c146102e55780630acbda75146103015780630c340a24146103145780630e5c011e146103345780630fbd780814610347575b600080fd5b6102e361063e565b005b6102ee60385481565b6040519081526020015b60405180910390f35b6102e361030f366004613239565b6106a3565b61031c610755565b6040516001600160a01b0390911681526020016102f8565b6102e361034236600461301e565b610772565b6102e36107c0565b6102e361035d366004613126565b61080a565b6102ee61037036600461301e565b6108b7565b603e5461031c906001600160a01b031681565b6102e361039636600461301e565b610961565b6102ee60395481565b6102ee60435481565b6102e36103bb36600461301e565b610c70565b6102e36103ce36600461301e565b610ce2565b6102e36103e136600461301e565b610d54565b6102e3610e91565b6102e3610f07565b6102e361040436600461301e565b610f8e565b60425461031c906001600160a01b031681565b6102e361042a36600461301e565b61119d565b6102ee603b5481565b60375461044c90600160a01b900460ff1681565b60405190151581526020016102f8565b61046f61046a36600461301e565b61134e565b6040516102f891906132aa565b603f5461031c906001600160a01b031681565b6102e361049d36600461301e565b61141a565b6102e3611516565b6102e36104b8366004613239565b6115ba565b6102e36104cb36600461301e565b611613565b6102e36104de366004613091565b611685565b6102e36119ed565b6102ee6104f936600461301e565b611a2f565b6102ee60415481565b6102e3610515366004613239565b611ad1565b6102e3611b86565b6102ee603a5481565b61031c61053936600461301e565b6040602081905260009182529020546001600160a01b031681565b6102e361056236600461301e565b611bf6565b6102e3610575366004613239565b611d1b565b60375461031c906001600160a01b031681565b6102e361059b366004613239565b611d74565b6102e36105ae366004613058565b611dcd565b6102e36105c136600461301e565b61200f565b6102e361221f565b61044c612295565b6102e36122c6565b6102e36105ec36600461301e565b612397565b60375461044c90600160a81b900460ff1681565b6102e3610613366004613239565b61243b565b6102e361062636600461301e565b612494565b61031c610639366004613239565b612536565b610646612295565b61066b5760405162461bcd60e51b815260040161066290613321565b60405180910390fd5b6037805460ff60a01b191690556040517fbc044409505c95b6b851433df96e1beae715c909d8e7c1d6d7ab783300d4e3b990600090a1565b6106ab612295565b6106c75760405162461bcd60e51b815260040161066290613321565b6113888111156107195760405162461bcd60e51b815260206004820152601760248201527f62617369732063616e6e6f7420657863656564203530250000000000000000006044820152606401610662565b60438190556040518181527f56287a45051933ea374811b3d5d165033047be5572cac676f7c28b8be4f746c7906020015b60405180910390a150565b600061076d6000805160206136758339815191525490565b905090565b3330148061078a5750603f546001600160a01b031633145b806107985750610798612295565b6107b45760405162461bcd60e51b8152600401610662906133a0565b6107bd81612560565b50565b603f546001600160a01b03163314806107dc57506107dc612295565b6107f85760405162461bcd60e51b815260040161066290613358565b610800610f07565b610808612642565b565b610812612295565b61082e5760405162461bcd60e51b815260040161066290613321565b6001600160a01b03821660009081526033602052604090205460ff16156108975760405162461bcd60e51b815260206004820152601760248201527f4f6e6c7920756e737570706f72746564206173736574730000000000000000006044820152606401610662565b6108b36108a2610755565b6001600160a01b0384169083612692565b5050565b6037546040516315d5220f60e31b81526001600160a01b038381166004830152600092839291169063aea910789060240160206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109389190613252565b90506305f5e10081111561094d57506305f5e1005b61095a81601260086126f5565b9392505050565b610969612295565b6109855760405162461bcd60e51b815260040161066290613321565b6001600160a01b03811660009081526035602052604090205460ff166109e55760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610662565b60005b603454811015610a9e57816001600160a01b03166040600060348481548110610a1357610a13613633565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054161415610a8c5760405162461bcd60e51b815260206004820181905260248201527f53747261746567792069732064656661756c7420666f7220616e2061737365746044820152606401610662565b80610a96816135ec565b9150506109e8565b5060365460005b603654811015610b0157826001600160a01b031660368281548110610acc57610acc613633565b6000918252602090912001546001600160a01b03161415610aef57809150610b01565b80610af9816135ec565b915050610aa5565b506036548110156108b35760368054610b1c906001906135a5565b81548110610b2c57610b2c613633565b600091825260209091200154603680546001600160a01b039092169183908110610b5857610b58613633565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506036805480610b9757610b9761361d565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03841680835260359091526040808320805460ff19169055805163429c145b60e11b81529051859363853828b6926004808201939182900301818387803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b50505050610c2f83612560565b6040516001600160a01b03841681527f09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea49060200160405180910390a1505050565b610c78612295565b610c945760405162461bcd60e51b815260040161066290613321565b604280546001600160a01b0319166001600160a01b0383169081179091556040519081527f1e4af5ac389e8cde1bdaa6830881b6c987c62a45cfb3b33d27d805cde3b577509060200161074a565b610cea612295565b610d065760405162461bcd60e51b815260040161066290613321565b603780546001600160a01b0319166001600160a01b0383169081179091556040519081527fb266add5f3044b17d27db796af992cecbe413921b4e8aaaee03c719e16b9806a9060200161074a565b610d5c612295565b610d785760405162461bcd60e51b815260040161066290613321565b6001600160a01b03811660009081526035602052604090205460ff1615610de15760405162461bcd60e51b815260206004820152601960248201527f537472617465677920616c726561647920617070726f766564000000000000006044820152606401610662565b6040805180820182526001808252600060208084018281526001600160a01b038716808452603583528684209551865460ff19169015151786559051948401949094556036805493840181559091527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890910180546001600160a01b0319168317905591519081527f960dd94cbb79169f09a4e445d58b895df2d9bffa5b31055d0932d801724a20d1910161074a565b603f546001600160a01b0316331480610ead5750610ead612295565b610ec95760405162461bcd60e51b815260040161066290613358565b6037805460ff60a81b1916600160a81b1790556040517f71f0e5b62f846a22e0b4d159e516e62fa9c2b8eb570be15f83e67d98a2ee51e090600090a1565b603f546001600160a01b0316331480610f235750610f23612295565b610f3f5760405162461bcd60e51b815260040161066290613358565b60005b6036548110156107bd57610f7c60368281548110610f6257610f62613633565b6000918252602090912001546001600160a01b0316612560565b80610f86816135ec565b915050610f42565b610f96612295565b610fb25760405162461bcd60e51b815260040161066290613321565b60005b60445481101561105157816001600160a01b031660448281548110610fdc57610fdc613633565b6000918252602090912001546001600160a01b0316141561103f5760405162461bcd60e51b815260206004820152601860248201527f5377617020746f6b656e20616c726561647920616464656400000000000000006044820152606401610662565b80611049816135ec565b915050610fb5565b506037546040516315d5220f60e31b81526001600160a01b0383811660048301529091169063aea910789060240160206040518083038186803b15801561109757600080fd5b505afa1580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190613252565b50604480546001810182556000919091527f9b22d3d61959b4d3528b1d8ba932c96fbe302b36a1aad1d95cab54f9e0a135ea0180546001600160a01b0319166001600160a01b0383811691909117909155603e54161561116457603e548190611146906001600160a01b0380841691166000612757565b603e54611162906001600160a01b038381169116600019612757565b505b6040516001600160a01b03821681527f4ba01ddccbf6b4d5f02200480ff6f40d2edbdbfcce73acdc5078881fd10e1d589060200161074a565b6111a5612295565b6111c15760405162461bcd60e51b815260040161066290613321565b6001600160a01b03811660009081526033602052604090205460ff161561122a5760405162461bcd60e51b815260206004820152601760248201527f417373657420616c726561647920737570706f727465640000000000000000006044820152606401610662565b604080516020808201835260018083526001600160a01b03858116600081815260339094528584209451855460ff1916901515179094556034805492830181559092527f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c10180546001600160a01b0319168317905560375492516315d5220f60e31b81526004810192909252919091169063aea910789060240160206040518083038186803b1580156112dc57600080fd5b505afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190613252565b506040516001600160a01b03821681527f4f1ac48525e50059cc1cc6e0e1940ece0dd653a4db4841538d6aef036be2fb7b9060200161074a565b6060333014806113685750603f546001600160a01b031633145b806113765750611376612295565b6113925760405162461bcd60e51b8152600401610662906133a0565b8161139c81612560565b61095a816001600160a01b031663125f9e336040518163ffffffff1660e01b815260040160206040518083038186803b1580156113d857600080fd5b505afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611410919061303b565b61287b565b919050565b603f546001600160a01b03163314806114365750611436612295565b6114525760405162461bcd60e51b815260040161066290613358565b6001600160a01b03811660009081526035602052604090205460ff166114ba5760405162461bcd60e51b815260206004820152601960248201527f5374726174656779206973206e6f7420737570706f72746564000000000000006044820152606401610662565b6000819050806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114fa57600080fd5b505af115801561150e573d6000803e3d6000fd5b505050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146115b15760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610662565b61080833612bbd565b6115c2612295565b6115de5760405162461bcd60e51b815260040161066290613321565b60418190556040518181527f95201f9c21f26877223b1ff4073936a6484c35495649e60e55730497aeb60d939060200161074a565b61161b612295565b6116375760405162461bcd60e51b815260040161066290613321565b603f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200161074a565b603f546001600160a01b03163314806116a157506116a1612295565b6116bd5760405162461bcd60e51b815260040161066290613358565b6001600160a01b03861660009081526035602052604090205460ff1661171d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642066726f6d20537472617465677960581b6044820152606401610662565b6001600160a01b03851660009081526035602052604090205460ff1661177b5760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420746f20537472617465677960681b6044820152606401610662565b8281146117ca5760405162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d61746368000000000000006044820152606401610662565b858560005b8581101561198f57816001600160a01b031663aa388af68888848181106117f8576117f8613633565b905060200201602081019061180d919061301e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118849190613217565b6118c45760405162461bcd60e51b8152602060048201526011602482015270105cdcd95d081d5b9cdd5c1c1bdc9d1959607a1b6044820152606401610662565b826001600160a01b031663d9caed12838989858181106118e6576118e6613633565b90506020020160208101906118fb919061301e565b88888681811061190d5761190d613633565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561196457600080fd5b505af1158015611978573d6000803e3d6000fd5b505050508080611987906135ec565b9150506117cf565b50806001600160a01b031663de5f62686040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119cb57600080fd5b505af11580156119df573d6000803e3d6000fd5b505050505050505050505050565b33301480611a055750603f546001600160a01b031633145b80611a135750611a13612295565b6108005760405162461bcd60e51b8152600401610662906133a0565b6037546040516315d5220f60e31b81526001600160a01b038381166004830152600092839291169063aea910789060240160206040518083038186803b158015611a7857600080fd5b505afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab09190613252565b90506305f5e10081101561094d57506305f5e10061095a81601260086126f5565b603f546001600160a01b0316331480611aed5750611aed612295565b611b095760405162461bcd60e51b815260040161066290613358565b670de0b6b3a7640000811115611b515760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642076616c756560981b6044820152606401610662565b60398190556040518181527f41ecb23a0e7865b25f38c268b7c3012220d822929e9edff07326e89d5bb822b59060200161074a565b603f546001600160a01b0316331480611ba25750611ba2612295565b611bbe5760405162461bcd60e51b815260040161066290613358565b6037805460ff60a81b191690556040517f891ebab18da80ebeeea06b1b1cede098329c4c008906a98370c2ac7a80b571cb90600090a1565b611bfe612295565b611c1a5760405162461bcd60e51b815260040161066290613321565b60005b604454811015611c7d57603e5460448054611c6b926001600160a01b03169160009185908110611c4f57611c4f613633565b6000918252602090912001546001600160a01b03169190612757565b80611c75816135ec565b915050611c1d565b50603e80546001600160a01b0319166001600160a01b03831617905560005b604454811015611ce157603e5460448054611ccf926001600160a01b0316916000199185908110611c4f57611c4f613633565b80611cd9816135ec565b915050611c9c565b506040516001600160a01b03821681527fca20db57f4368388dd6766259da48cd22a485cba21ee6ec8c519007cb66dfd039060200161074a565b611d23612295565b611d3f5760405162461bcd60e51b815260040161066290613321565b603a8190556040518181527f2ec5fb5a3d2703edc461252d92ccd2799c3c74f01d97212b20388207fa17ae459060200161074a565b611d7c612295565b611d985760405162461bcd60e51b815260040161066290613321565b603b8190556040518181527f39367850377ac04920a9a670f2180e7a94d83b15ad302e59875ec58fd10bd37d9060200161074a565b603f546001600160a01b0316331480611de95750611de9612295565b611e055760405162461bcd60e51b815260040161066290613358565b604080516001600160a01b038085168252831660208201527fba58ce12801c949fa65f41c46ed108671c219baf945fa48d21026cea99ff252a910160405180910390a16001600160a01b03811615611fe1576001600160a01b03811660009081526035602052604090205460ff16611eb75760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610662565b6001600160a01b038216600090815260336020526040902054819060ff16611f1a5760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b6044820152606401610662565b60405163551c457b60e11b81526001600160a01b03848116600483015282169063aa388af69060240160206040518083038186803b158015611f5b57600080fd5b505afa158015611f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f939190613217565b611fdf5760405162461bcd60e51b815260206004820152601f60248201527f4173736574206e6f7420737570706f72746564206279205374726174656779006044820152606401610662565b505b6001600160a01b03918216600090815260406020819052902080546001600160a01b03191691909216179055565b612017612295565b6120335760405162461bcd60e51b815260040161066290613321565b60445460005b60445481101561209557826001600160a01b03166044828154811061206057612060613633565b6000918252602090912001546001600160a01b0316141561208357809150612095565b8061208d816135ec565b915050612039565b506044548114156120df5760405162461bcd60e51b815260206004820152601460248201527314ddd85c081d1bdad95b881b9bdd08185919195960621b6044820152606401610662565b805b6044546120f0906001906135a5565b81101561217b576044612104826001613461565b8154811061211457612114613633565b600091825260209091200154604480546001600160a01b03909216918390811061214057612140613633565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580612173816135ec565b9150506120e1565b50604480548061218d5761218d61361d565b600082815260209020810160001990810180546001600160a01b0319169055019055603e546001600160a01b0316156121df57603e5482906121dd906001600160a01b0380841691166000612757565b505b6040516001600160a01b03831681527f4391927cd15f9cac8e830ce47413c6548683f1ba75ff8ca58985f6d4bbb21cb69060200160405180910390a15050565b603f546001600160a01b031633148061223b575061223b612295565b6122575760405162461bcd60e51b815260040161066290613358565b6037805460ff60a01b1916600160a01b1790556040517f8cff26a5985614b3d30629cc4ab83824bf115aec971b718d8f2f99562032e97290600090a1565b60006122ad6000805160206136758339815191525490565b6001600160a01b0316336001600160a01b031614905090565b603f546001600160a01b03163314806122e257506122e2612295565b6122fe5760405162461bcd60e51b815260040161066290613358565b60005b6036548110156107bd5760006036828154811061232057612320613633565b60009182526020822001546040805163429c145b60e11b815290516001600160a01b039092169350839263853828b69260048084019382900301818387803b15801561236b57600080fd5b505af115801561237f573d6000803e3d6000fd5b5050505050808061238f906135ec565b915050612301565b61239f612295565b6123bb5760405162461bcd60e51b815260040161066290613321565b6123e3817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166124036000805160206136758339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b612443612295565b61245f5760405162461bcd60e51b815260040161066290613321565b60388190556040518181527fd6c7508d6658ccee36b7b7d7fd72e5cbaeefb40c64eff24e9ae7470e846304ee9060200161074a565b61249c612295565b6124b85760405162461bcd60e51b815260040161066290613321565b803b6125125760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b6064820152608401610662565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b6044818154811061254657600080fd5b6000918252602090912001546001600160a01b0316905081565b60008190506000816001600160a01b031663125f9e336040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a057600080fd5b505afa1580156125b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d8919061303b565b90506001600160a01b0381161561263d57816001600160a01b0316630242241d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561262457600080fd5b505af1158015612638573d6000803e3d6000fd5b505050505b505050565b60005b6044548110156107bd5761267f6044828154811061266557612665613633565b6000918252602090912001546001600160a01b031661287b565b508061268a816135ec565b915050612645565b6040516001600160a01b03831660248201526044810182905261263d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c7e565b6000818311156127255761271e61270c83856135a5565b61271790600a6134de565b8590612d50565b935061274f565b8183101561274f5761274c61273a84846135a5565b61274590600a6134de565b8590612d65565b93505b509192915050565b8015806127e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156127a657600080fd5b505afa1580156127ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127de9190613252565b155b61284b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610662565b6040516001600160a01b03831660248201526044810182905261263d90849063095ea7b360e01b906064016126be565b603e546060906001600160a01b031615611415576040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a082319060240160206040518083038186803b1580156128d357600080fd5b505afa1580156128e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290b9190613252565b90508015612bb6576037546040516315d5220f60e31b81526001600160a01b038681166004830152600092169063aea910789060240160206040518083038186803b15801561295957600080fd5b505afa15801561296d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129919190613252565b905060006129d660066129a388612d71565b6129ae906008613461565b60646129ba8688613586565b6129c5906061613586565b6129cf9190613479565b91906126f5565b6040805160038082526080820190925291925060009190602082016060803683370190505090508681600081518110612a1157612a11613633565b6001600160a01b03928316602091820292909201810191909152603e54604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015612a6557600080fd5b505afa158015612a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9d919061303b565b81600181518110612ab057612ab0613633565b60200260200101906001600160a01b031690816001600160a01b0316815250506034600181548110612ae457612ae4613633565b9060005260206000200160009054906101000a90046001600160a01b031681600281518110612b1557612b15613633565b6001600160a01b039283166020918202929092010152603e546040516338ed173960e01b81529116906338ed173990612b5a90879086908690309042906004016133f0565b600060405180830381600087803b158015612b7457600080fd5b505af1158015612b88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612bb09190810190613152565b95505050505b5050919050565b6001600160a01b038116612c135760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610662565b806001600160a01b0316612c336000805160206136758339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36107bd8160008051602061367583398151915255565b6000612cd3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e5a9092919063ffffffff16565b80519091501561263d5780806020019051810190612cf19190613217565b61263d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610662565b6000612d5c8284613586565b90505b92915050565b6000612d5c8284613479565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612dad57600080fd5b505afa158015612dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de5919061326b565b60ff16905060048110158015612dfc575060128111155b612d5f5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610662565b6060612e698484600085612e71565b949350505050565b606082471015612ed25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610662565b843b612f205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610662565b600080866001600160a01b03168587604051612f3c919061328e565b60006040518083038185875af1925050503d8060008114612f79576040519150601f19603f3d011682016040523d82523d6000602084013e612f7e565b606091505b5091509150612f8e828286612f99565b979650505050505050565b60608315612fa857508161095a565b825115612fb85782518084602001fd5b8160405162461bcd60e51b815260040161066291906132ee565b60008083601f840112612fe457600080fd5b50813567ffffffffffffffff811115612ffc57600080fd5b6020830191508360208260051b850101111561301757600080fd5b9250929050565b60006020828403121561303057600080fd5b813561095a8161365f565b60006020828403121561304d57600080fd5b815161095a8161365f565b6000806040838503121561306b57600080fd5b82356130768161365f565b915060208301356130868161365f565b809150509250929050565b600080600080600080608087890312156130aa57600080fd5b86356130b58161365f565b955060208701356130c58161365f565b9450604087013567ffffffffffffffff808211156130e257600080fd5b6130ee8a838b01612fd2565b9096509450606089013591508082111561310757600080fd5b5061311489828a01612fd2565b979a9699509497509295939492505050565b6000806040838503121561313957600080fd5b82356131448161365f565b946020939093013593505050565b6000602080838503121561316557600080fd5b825167ffffffffffffffff8082111561317d57600080fd5b818501915085601f83011261319157600080fd5b8151818111156131a3576131a3613649565b8060051b604051601f19603f830116810181811085821117156131c8576131c8613649565b604052828152858101935084860182860187018a10156131e757600080fd5b600095505b8386101561320a5780518552600195909501949386019386016131ec565b5098975050505050505050565b60006020828403121561322957600080fd5b8151801515811461095a57600080fd5b60006020828403121561324b57600080fd5b5035919050565b60006020828403121561326457600080fd5b5051919050565b60006020828403121561327d57600080fd5b815160ff8116811461095a57600080fd5b600082516132a08184602087016135bc565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156132e2578351835292840192918401916001016132c6565b50909695505050505050565b602081526000825180602084015261330d8160408501602087016135bc565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60208082526028908201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060408201526723b7bb32b93737b960c11b606082015260800190565b60208082526030908201527f43616c6c6572206973206e6f7420746865205661756c742c20476f7665726e6f60408201526f1c8b081bdc8814dd1c985d1959da5cdd60821b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156134405784516001600160a01b03168352938301939183019160010161341b565b50506001600160a01b03969096166060850152505050608001529392505050565b6000821982111561347457613474613607565b500190565b60008261349657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156134d65781600019048211156134bc576134bc613607565b808516156134c957918102915b93841c93908002906134a0565b509250929050565b6000612d5c83836000826134f457506001612d5f565b8161350157506000612d5f565b816001811461351757600281146135215761353d565b6001915050612d5f565b60ff84111561353257613532613607565b50506001821b612d5f565b5060208310610133831016604e8410600b8410161715613560575081810a612d5f565b61356a838361349b565b806000190482111561357e5761357e613607565b029392505050565b60008160001904831182151516156135a0576135a0613607565b500290565b6000828210156135b7576135b7613607565b500390565b60005b838110156135d75781810151838201526020016135bf565b838111156135e6576000848401525b50505050565b600060001982141561360057613600613607565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107bd57600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212207e791469b5d317c17602f061e08c0b33c83ebda362213f2c0b9188cecd7e31ad64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d65760003560e01c80635d36b19011610182578063b2c9336d116100e9578063c7af3352116100a2578063e6cc54321161007c578063e6cc5432146105f1578063eb03654b14610605578063fc0cfeee14610618578063fe784eaa1461062b57600080fd5b8063c7af3352146105ce578063c9919112146105d6578063d38bfff4146105de57600080fd5b8063b2c9336d14610567578063b888879e1461057a578063b890ebf61461058d578063bc90106b146105a0578063bf550298146105b3578063c5f00841146105c657600080fd5b80638e510b521161013b5780638e510b52146104fe5780638ec489a21461050757806394828ffd1461051a5780639fa1826e14610522578063a403e4d51461052b578063aea173d51461055457600080fd5b80635d36b190146104a2578063663e64ce146104aa578063773540b3146104bd5780637fe2d393146104d05780638119c065146104e35780638c5cbb89146104eb57600080fd5b80632da845a81161024157806349c1d54d116101fa57806353ca9f24116101d457806353ca9f2414610438578063548f5ae51461045c578063570d8e1d1461047c578063597c89101461048f57600080fd5b806349c1d54d146104095780634cd55c2d1461041c57806352d38e5d1461042f57600080fd5b80632da845a8146103ad578063372aa224146103c05780633b8ae397146103d35780633dbc911f146103e65780634641257d146103ee57806347c47ed3146103f657600080fd5b80631072cbea116102935780631072cbea1461034f57806310d3fdac14610362578063128a8b0514610375578063175188e8146103885780631edfe3da1461039b578063207134b0146103a457600080fd5b806309f49bf5146102db57806309f6442c146102e55780630acbda75146103015780630c340a24146103145780630e5c011e146103345780630fbd780814610347575b600080fd5b6102e361063e565b005b6102ee60385481565b6040519081526020015b60405180910390f35b6102e361030f366004613239565b6106a3565b61031c610755565b6040516001600160a01b0390911681526020016102f8565b6102e361034236600461301e565b610772565b6102e36107c0565b6102e361035d366004613126565b61080a565b6102ee61037036600461301e565b6108b7565b603e5461031c906001600160a01b031681565b6102e361039636600461301e565b610961565b6102ee60395481565b6102ee60435481565b6102e36103bb36600461301e565b610c70565b6102e36103ce36600461301e565b610ce2565b6102e36103e136600461301e565b610d54565b6102e3610e91565b6102e3610f07565b6102e361040436600461301e565b610f8e565b60425461031c906001600160a01b031681565b6102e361042a36600461301e565b61119d565b6102ee603b5481565b60375461044c90600160a01b900460ff1681565b60405190151581526020016102f8565b61046f61046a36600461301e565b61134e565b6040516102f891906132aa565b603f5461031c906001600160a01b031681565b6102e361049d36600461301e565b61141a565b6102e3611516565b6102e36104b8366004613239565b6115ba565b6102e36104cb36600461301e565b611613565b6102e36104de366004613091565b611685565b6102e36119ed565b6102ee6104f936600461301e565b611a2f565b6102ee60415481565b6102e3610515366004613239565b611ad1565b6102e3611b86565b6102ee603a5481565b61031c61053936600461301e565b6040602081905260009182529020546001600160a01b031681565b6102e361056236600461301e565b611bf6565b6102e3610575366004613239565b611d1b565b60375461031c906001600160a01b031681565b6102e361059b366004613239565b611d74565b6102e36105ae366004613058565b611dcd565b6102e36105c136600461301e565b61200f565b6102e361221f565b61044c612295565b6102e36122c6565b6102e36105ec36600461301e565b612397565b60375461044c90600160a81b900460ff1681565b6102e3610613366004613239565b61243b565b6102e361062636600461301e565b612494565b61031c610639366004613239565b612536565b610646612295565b61066b5760405162461bcd60e51b815260040161066290613321565b60405180910390fd5b6037805460ff60a01b191690556040517fbc044409505c95b6b851433df96e1beae715c909d8e7c1d6d7ab783300d4e3b990600090a1565b6106ab612295565b6106c75760405162461bcd60e51b815260040161066290613321565b6113888111156107195760405162461bcd60e51b815260206004820152601760248201527f62617369732063616e6e6f7420657863656564203530250000000000000000006044820152606401610662565b60438190556040518181527f56287a45051933ea374811b3d5d165033047be5572cac676f7c28b8be4f746c7906020015b60405180910390a150565b600061076d6000805160206136758339815191525490565b905090565b3330148061078a5750603f546001600160a01b031633145b806107985750610798612295565b6107b45760405162461bcd60e51b8152600401610662906133a0565b6107bd81612560565b50565b603f546001600160a01b03163314806107dc57506107dc612295565b6107f85760405162461bcd60e51b815260040161066290613358565b610800610f07565b610808612642565b565b610812612295565b61082e5760405162461bcd60e51b815260040161066290613321565b6001600160a01b03821660009081526033602052604090205460ff16156108975760405162461bcd60e51b815260206004820152601760248201527f4f6e6c7920756e737570706f72746564206173736574730000000000000000006044820152606401610662565b6108b36108a2610755565b6001600160a01b0384169083612692565b5050565b6037546040516315d5220f60e31b81526001600160a01b038381166004830152600092839291169063aea910789060240160206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109389190613252565b90506305f5e10081111561094d57506305f5e1005b61095a81601260086126f5565b9392505050565b610969612295565b6109855760405162461bcd60e51b815260040161066290613321565b6001600160a01b03811660009081526035602052604090205460ff166109e55760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610662565b60005b603454811015610a9e57816001600160a01b03166040600060348481548110610a1357610a13613633565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054161415610a8c5760405162461bcd60e51b815260206004820181905260248201527f53747261746567792069732064656661756c7420666f7220616e2061737365746044820152606401610662565b80610a96816135ec565b9150506109e8565b5060365460005b603654811015610b0157826001600160a01b031660368281548110610acc57610acc613633565b6000918252602090912001546001600160a01b03161415610aef57809150610b01565b80610af9816135ec565b915050610aa5565b506036548110156108b35760368054610b1c906001906135a5565b81548110610b2c57610b2c613633565b600091825260209091200154603680546001600160a01b039092169183908110610b5857610b58613633565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506036805480610b9757610b9761361d565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03841680835260359091526040808320805460ff19169055805163429c145b60e11b81529051859363853828b6926004808201939182900301818387803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b50505050610c2f83612560565b6040516001600160a01b03841681527f09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea49060200160405180910390a1505050565b610c78612295565b610c945760405162461bcd60e51b815260040161066290613321565b604280546001600160a01b0319166001600160a01b0383169081179091556040519081527f1e4af5ac389e8cde1bdaa6830881b6c987c62a45cfb3b33d27d805cde3b577509060200161074a565b610cea612295565b610d065760405162461bcd60e51b815260040161066290613321565b603780546001600160a01b0319166001600160a01b0383169081179091556040519081527fb266add5f3044b17d27db796af992cecbe413921b4e8aaaee03c719e16b9806a9060200161074a565b610d5c612295565b610d785760405162461bcd60e51b815260040161066290613321565b6001600160a01b03811660009081526035602052604090205460ff1615610de15760405162461bcd60e51b815260206004820152601960248201527f537472617465677920616c726561647920617070726f766564000000000000006044820152606401610662565b6040805180820182526001808252600060208084018281526001600160a01b038716808452603583528684209551865460ff19169015151786559051948401949094556036805493840181559091527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890910180546001600160a01b0319168317905591519081527f960dd94cbb79169f09a4e445d58b895df2d9bffa5b31055d0932d801724a20d1910161074a565b603f546001600160a01b0316331480610ead5750610ead612295565b610ec95760405162461bcd60e51b815260040161066290613358565b6037805460ff60a81b1916600160a81b1790556040517f71f0e5b62f846a22e0b4d159e516e62fa9c2b8eb570be15f83e67d98a2ee51e090600090a1565b603f546001600160a01b0316331480610f235750610f23612295565b610f3f5760405162461bcd60e51b815260040161066290613358565b60005b6036548110156107bd57610f7c60368281548110610f6257610f62613633565b6000918252602090912001546001600160a01b0316612560565b80610f86816135ec565b915050610f42565b610f96612295565b610fb25760405162461bcd60e51b815260040161066290613321565b60005b60445481101561105157816001600160a01b031660448281548110610fdc57610fdc613633565b6000918252602090912001546001600160a01b0316141561103f5760405162461bcd60e51b815260206004820152601860248201527f5377617020746f6b656e20616c726561647920616464656400000000000000006044820152606401610662565b80611049816135ec565b915050610fb5565b506037546040516315d5220f60e31b81526001600160a01b0383811660048301529091169063aea910789060240160206040518083038186803b15801561109757600080fd5b505afa1580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cf9190613252565b50604480546001810182556000919091527f9b22d3d61959b4d3528b1d8ba932c96fbe302b36a1aad1d95cab54f9e0a135ea0180546001600160a01b0319166001600160a01b0383811691909117909155603e54161561116457603e548190611146906001600160a01b0380841691166000612757565b603e54611162906001600160a01b038381169116600019612757565b505b6040516001600160a01b03821681527f4ba01ddccbf6b4d5f02200480ff6f40d2edbdbfcce73acdc5078881fd10e1d589060200161074a565b6111a5612295565b6111c15760405162461bcd60e51b815260040161066290613321565b6001600160a01b03811660009081526033602052604090205460ff161561122a5760405162461bcd60e51b815260206004820152601760248201527f417373657420616c726561647920737570706f727465640000000000000000006044820152606401610662565b604080516020808201835260018083526001600160a01b03858116600081815260339094528584209451855460ff1916901515179094556034805492830181559092527f46bddb1178e94d7f2892ff5f366840eb658911794f2c3a44c450aa2c505186c10180546001600160a01b0319168317905560375492516315d5220f60e31b81526004810192909252919091169063aea910789060240160206040518083038186803b1580156112dc57600080fd5b505afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190613252565b506040516001600160a01b03821681527f4f1ac48525e50059cc1cc6e0e1940ece0dd653a4db4841538d6aef036be2fb7b9060200161074a565b6060333014806113685750603f546001600160a01b031633145b806113765750611376612295565b6113925760405162461bcd60e51b8152600401610662906133a0565b8161139c81612560565b61095a816001600160a01b031663125f9e336040518163ffffffff1660e01b815260040160206040518083038186803b1580156113d857600080fd5b505afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611410919061303b565b61287b565b919050565b603f546001600160a01b03163314806114365750611436612295565b6114525760405162461bcd60e51b815260040161066290613358565b6001600160a01b03811660009081526035602052604090205460ff166114ba5760405162461bcd60e51b815260206004820152601960248201527f5374726174656779206973206e6f7420737570706f72746564000000000000006044820152606401610662565b6000819050806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114fa57600080fd5b505af115801561150e573d6000803e3d6000fd5b505050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146115b15760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610662565b61080833612bbd565b6115c2612295565b6115de5760405162461bcd60e51b815260040161066290613321565b60418190556040518181527f95201f9c21f26877223b1ff4073936a6484c35495649e60e55730497aeb60d939060200161074a565b61161b612295565b6116375760405162461bcd60e51b815260040161066290613321565b603f80546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200161074a565b603f546001600160a01b03163314806116a157506116a1612295565b6116bd5760405162461bcd60e51b815260040161066290613358565b6001600160a01b03861660009081526035602052604090205460ff1661171d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642066726f6d20537472617465677960581b6044820152606401610662565b6001600160a01b03851660009081526035602052604090205460ff1661177b5760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420746f20537472617465677960681b6044820152606401610662565b8281146117ca5760405162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d61746368000000000000006044820152606401610662565b858560005b8581101561198f57816001600160a01b031663aa388af68888848181106117f8576117f8613633565b905060200201602081019061180d919061301e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118849190613217565b6118c45760405162461bcd60e51b8152602060048201526011602482015270105cdcd95d081d5b9cdd5c1c1bdc9d1959607a1b6044820152606401610662565b826001600160a01b031663d9caed12838989858181106118e6576118e6613633565b90506020020160208101906118fb919061301e565b88888681811061190d5761190d613633565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561196457600080fd5b505af1158015611978573d6000803e3d6000fd5b505050508080611987906135ec565b9150506117cf565b50806001600160a01b031663de5f62686040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119cb57600080fd5b505af11580156119df573d6000803e3d6000fd5b505050505050505050505050565b33301480611a055750603f546001600160a01b031633145b80611a135750611a13612295565b6108005760405162461bcd60e51b8152600401610662906133a0565b6037546040516315d5220f60e31b81526001600160a01b038381166004830152600092839291169063aea910789060240160206040518083038186803b158015611a7857600080fd5b505afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab09190613252565b90506305f5e10081101561094d57506305f5e10061095a81601260086126f5565b603f546001600160a01b0316331480611aed5750611aed612295565b611b095760405162461bcd60e51b815260040161066290613358565b670de0b6b3a7640000811115611b515760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642076616c756560981b6044820152606401610662565b60398190556040518181527f41ecb23a0e7865b25f38c268b7c3012220d822929e9edff07326e89d5bb822b59060200161074a565b603f546001600160a01b0316331480611ba25750611ba2612295565b611bbe5760405162461bcd60e51b815260040161066290613358565b6037805460ff60a81b191690556040517f891ebab18da80ebeeea06b1b1cede098329c4c008906a98370c2ac7a80b571cb90600090a1565b611bfe612295565b611c1a5760405162461bcd60e51b815260040161066290613321565b60005b604454811015611c7d57603e5460448054611c6b926001600160a01b03169160009185908110611c4f57611c4f613633565b6000918252602090912001546001600160a01b03169190612757565b80611c75816135ec565b915050611c1d565b50603e80546001600160a01b0319166001600160a01b03831617905560005b604454811015611ce157603e5460448054611ccf926001600160a01b0316916000199185908110611c4f57611c4f613633565b80611cd9816135ec565b915050611c9c565b506040516001600160a01b03821681527fca20db57f4368388dd6766259da48cd22a485cba21ee6ec8c519007cb66dfd039060200161074a565b611d23612295565b611d3f5760405162461bcd60e51b815260040161066290613321565b603a8190556040518181527f2ec5fb5a3d2703edc461252d92ccd2799c3c74f01d97212b20388207fa17ae459060200161074a565b611d7c612295565b611d985760405162461bcd60e51b815260040161066290613321565b603b8190556040518181527f39367850377ac04920a9a670f2180e7a94d83b15ad302e59875ec58fd10bd37d9060200161074a565b603f546001600160a01b0316331480611de95750611de9612295565b611e055760405162461bcd60e51b815260040161066290613358565b604080516001600160a01b038085168252831660208201527fba58ce12801c949fa65f41c46ed108671c219baf945fa48d21026cea99ff252a910160405180910390a16001600160a01b03811615611fe1576001600160a01b03811660009081526035602052604090205460ff16611eb75760405162461bcd60e51b815260206004820152601560248201527414dd1c985d1959de481b9bdd08185c1c1c9bdd9959605a1b6044820152606401610662565b6001600160a01b038216600090815260336020526040902054819060ff16611f1a5760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b6044820152606401610662565b60405163551c457b60e11b81526001600160a01b03848116600483015282169063aa388af69060240160206040518083038186803b158015611f5b57600080fd5b505afa158015611f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f939190613217565b611fdf5760405162461bcd60e51b815260206004820152601f60248201527f4173736574206e6f7420737570706f72746564206279205374726174656779006044820152606401610662565b505b6001600160a01b03918216600090815260406020819052902080546001600160a01b03191691909216179055565b612017612295565b6120335760405162461bcd60e51b815260040161066290613321565b60445460005b60445481101561209557826001600160a01b03166044828154811061206057612060613633565b6000918252602090912001546001600160a01b0316141561208357809150612095565b8061208d816135ec565b915050612039565b506044548114156120df5760405162461bcd60e51b815260206004820152601460248201527314ddd85c081d1bdad95b881b9bdd08185919195960621b6044820152606401610662565b805b6044546120f0906001906135a5565b81101561217b576044612104826001613461565b8154811061211457612114613633565b600091825260209091200154604480546001600160a01b03909216918390811061214057612140613633565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580612173816135ec565b9150506120e1565b50604480548061218d5761218d61361d565b600082815260209020810160001990810180546001600160a01b0319169055019055603e546001600160a01b0316156121df57603e5482906121dd906001600160a01b0380841691166000612757565b505b6040516001600160a01b03831681527f4391927cd15f9cac8e830ce47413c6548683f1ba75ff8ca58985f6d4bbb21cb69060200160405180910390a15050565b603f546001600160a01b031633148061223b575061223b612295565b6122575760405162461bcd60e51b815260040161066290613358565b6037805460ff60a01b1916600160a01b1790556040517f8cff26a5985614b3d30629cc4ab83824bf115aec971b718d8f2f99562032e97290600090a1565b60006122ad6000805160206136758339815191525490565b6001600160a01b0316336001600160a01b031614905090565b603f546001600160a01b03163314806122e257506122e2612295565b6122fe5760405162461bcd60e51b815260040161066290613358565b60005b6036548110156107bd5760006036828154811061232057612320613633565b60009182526020822001546040805163429c145b60e11b815290516001600160a01b039092169350839263853828b69260048084019382900301818387803b15801561236b57600080fd5b505af115801561237f573d6000803e3d6000fd5b5050505050808061238f906135ec565b915050612301565b61239f612295565b6123bb5760405162461bcd60e51b815260040161066290613321565b6123e3817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166124036000805160206136758339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b612443612295565b61245f5760405162461bcd60e51b815260040161066290613321565b60388190556040518181527fd6c7508d6658ccee36b7b7d7fd72e5cbaeefb40c64eff24e9ae7470e846304ee9060200161074a565b61249c612295565b6124b85760405162461bcd60e51b815260040161066290613321565b803b6125125760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b6064820152608401610662565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b6044818154811061254657600080fd5b6000918252602090912001546001600160a01b0316905081565b60008190506000816001600160a01b031663125f9e336040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a057600080fd5b505afa1580156125b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d8919061303b565b90506001600160a01b0381161561263d57816001600160a01b0316630242241d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561262457600080fd5b505af1158015612638573d6000803e3d6000fd5b505050505b505050565b60005b6044548110156107bd5761267f6044828154811061266557612665613633565b6000918252602090912001546001600160a01b031661287b565b508061268a816135ec565b915050612645565b6040516001600160a01b03831660248201526044810182905261263d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c7e565b6000818311156127255761271e61270c83856135a5565b61271790600a6134de565b8590612d50565b935061274f565b8183101561274f5761274c61273a84846135a5565b61274590600a6134de565b8590612d65565b93505b509192915050565b8015806127e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156127a657600080fd5b505afa1580156127ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127de9190613252565b155b61284b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610662565b6040516001600160a01b03831660248201526044810182905261263d90849063095ea7b360e01b906064016126be565b603e546060906001600160a01b031615611415576040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a082319060240160206040518083038186803b1580156128d357600080fd5b505afa1580156128e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290b9190613252565b90508015612bb6576037546040516315d5220f60e31b81526001600160a01b038681166004830152600092169063aea910789060240160206040518083038186803b15801561295957600080fd5b505afa15801561296d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129919190613252565b905060006129d660066129a388612d71565b6129ae906008613461565b60646129ba8688613586565b6129c5906061613586565b6129cf9190613479565b91906126f5565b6040805160038082526080820190925291925060009190602082016060803683370190505090508681600081518110612a1157612a11613633565b6001600160a01b03928316602091820292909201810191909152603e54604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015612a6557600080fd5b505afa158015612a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9d919061303b565b81600181518110612ab057612ab0613633565b60200260200101906001600160a01b031690816001600160a01b0316815250506034600181548110612ae457612ae4613633565b9060005260206000200160009054906101000a90046001600160a01b031681600281518110612b1557612b15613633565b6001600160a01b039283166020918202929092010152603e546040516338ed173960e01b81529116906338ed173990612b5a90879086908690309042906004016133f0565b600060405180830381600087803b158015612b7457600080fd5b505af1158015612b88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612bb09190810190613152565b95505050505b5050919050565b6001600160a01b038116612c135760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610662565b806001600160a01b0316612c336000805160206136758339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36107bd8160008051602061367583398151915255565b6000612cd3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e5a9092919063ffffffff16565b80519091501561263d5780806020019051810190612cf19190613217565b61263d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610662565b6000612d5c8284613586565b90505b92915050565b6000612d5c8284613479565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612dad57600080fd5b505afa158015612dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de5919061326b565b60ff16905060048110158015612dfc575060128111155b612d5f5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b6064820152608401610662565b6060612e698484600085612e71565b949350505050565b606082471015612ed25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610662565b843b612f205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610662565b600080866001600160a01b03168587604051612f3c919061328e565b60006040518083038185875af1925050503d8060008114612f79576040519150601f19603f3d011682016040523d82523d6000602084013e612f7e565b606091505b5091509150612f8e828286612f99565b979650505050505050565b60608315612fa857508161095a565b825115612fb85782518084602001fd5b8160405162461bcd60e51b815260040161066291906132ee565b60008083601f840112612fe457600080fd5b50813567ffffffffffffffff811115612ffc57600080fd5b6020830191508360208260051b850101111561301757600080fd5b9250929050565b60006020828403121561303057600080fd5b813561095a8161365f565b60006020828403121561304d57600080fd5b815161095a8161365f565b6000806040838503121561306b57600080fd5b82356130768161365f565b915060208301356130868161365f565b809150509250929050565b600080600080600080608087890312156130aa57600080fd5b86356130b58161365f565b955060208701356130c58161365f565b9450604087013567ffffffffffffffff808211156130e257600080fd5b6130ee8a838b01612fd2565b9096509450606089013591508082111561310757600080fd5b5061311489828a01612fd2565b979a9699509497509295939492505050565b6000806040838503121561313957600080fd5b82356131448161365f565b946020939093013593505050565b6000602080838503121561316557600080fd5b825167ffffffffffffffff8082111561317d57600080fd5b818501915085601f83011261319157600080fd5b8151818111156131a3576131a3613649565b8060051b604051601f19603f830116810181811085821117156131c8576131c8613649565b604052828152858101935084860182860187018a10156131e757600080fd5b600095505b8386101561320a5780518552600195909501949386019386016131ec565b5098975050505050505050565b60006020828403121561322957600080fd5b8151801515811461095a57600080fd5b60006020828403121561324b57600080fd5b5035919050565b60006020828403121561326457600080fd5b5051919050565b60006020828403121561327d57600080fd5b815160ff8116811461095a57600080fd5b600082516132a08184602087016135bc565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156132e2578351835292840192918401916001016132c6565b50909695505050505050565b602081526000825180602084015261330d8160408501602087016135bc565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60208082526028908201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060408201526723b7bb32b93737b960c11b606082015260800190565b60208082526030908201527f43616c6c6572206973206e6f7420746865205661756c742c20476f7665726e6f60408201526f1c8b081bdc8814dd1c985d1959da5cdd60821b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156134405784516001600160a01b03168352938301939183019160010161341b565b50506001600160a01b03969096166060850152505050608001529392505050565b6000821982111561347457613474613607565b500190565b60008261349657634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156134d65781600019048211156134bc576134bc613607565b808516156134c957918102915b93841c93908002906134a0565b509250929050565b6000612d5c83836000826134f457506001612d5f565b8161350157506000612d5f565b816001811461351757600281146135215761353d565b6001915050612d5f565b60ff84111561353257613532613607565b50506001821b612d5f565b5060208310610133831016604e8410600b8410161715613560575081810a612d5f565b61356a838361349b565b806000190482111561357e5761357e613607565b029392505050565b60008160001904831182151516156135a0576135a0613607565b500290565b6000828210156135b7576135b7613607565b500390565b60005b838110156135d75781810151838201526020016135bf565b838111156135e6576000848401525b50505050565b600060001982141561360057613600613607565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146107bd57600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212207e791469b5d317c17602f061e08c0b33c83ebda362213f2c0b9188cecd7e31ad64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addSwapToken(address)": {
        "details": "Add a swap token to the tokens that get liquidated for stablecoins      whenever swap is called. The token must have a valid feed registered      with the price provider.",
        "params": {
          "_addr": "Address of the token"
        }
      },
      "approveStrategy(address)": {
        "details": "Add a strategy to the Vault.",
        "params": {
          "_addr": "Address of the strategy to add"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "harvest()": {
        "details": "Collect reward tokens from all strategies"
      },
      "harvest(address)": {
        "details": "Collect reward tokens for a specific strategy. Called from the vault.",
        "params": {
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "harvestAndSwap(address)": {
        "details": "Collect reward tokens for a specific strategy and swap for supported      stablecoin via Uniswap. Called from the vault.",
        "params": {
          "_strategyAddr": "Address of the strategy to collect rewards from"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "pauseCapital()": {
        "details": "Set the deposit paused flag to true to prevent capital movement."
      },
      "pauseRebase()": {
        "details": "Set the deposit paused flag to true to prevent rebasing."
      },
      "priceUSDMint(address)": {
        "details": "Returns the total price in 18 digit USD for a given asset.      Never goes above 1, since that is how we price mints",
        "params": {
          "asset": "address of the asset"
        },
        "returns": {
          "_0": "uint256 USD price of 1 of the asset, in 18 decimal fixed"
        }
      },
      "priceUSDRedeem(address)": {
        "details": "Returns the total price in 18 digit USD for a given asset.      Never goes below 1, since that is how we price redeems",
        "params": {
          "asset": "Address of the asset"
        },
        "returns": {
          "_0": "uint256 USD price of 1 of the asset, in 18 decimal fixed"
        }
      },
      "reallocate(address,address,address[],uint256[])": {
        "params": {
          "_amounts": "Array of amounts of each corresponding asset to move.",
          "_assets": "Array of asset address that will be moved",
          "_strategyFromAddress": "Address of Strategy to move assets from.",
          "_strategyToAddress": "Address of Strategy to move assets to."
        }
      },
      "removeStrategy(address)": {
        "details": "Remove a strategy from the Vault. Removes all invested assets and returns them to the Vault.",
        "params": {
          "_addr": "Address of the strategy to remove"
        }
      },
      "removeSwapToken(address)": {
        "details": "Remove a swap token from the tokens that get liquidated for stablecoins.",
        "params": {
          "_addr": "Address of the token"
        }
      },
      "setAdminImpl(address)": {
        "details": "set the implementation for the admin, this needs to be in a base class else we cannot set it",
        "params": {
          "newImpl": "address of the implementation"
        }
      },
      "setAssetDefaultStrategy(address,address)": {
        "details": "Set the default Strategy for an asset, i.e. the one which the asset will be automatically allocated to and withdrawn from",
        "params": {
          "_asset": "Address of the asset",
          "_strategy": "Address of the Strategy"
        }
      },
      "setAutoAllocateThreshold(uint256)": {
        "details": "Sets the minimum amount of OUSD in a mint to trigger an automatic allocation of funds afterwords.",
        "params": {
          "_threshold": "OUSD amount with 18 fixed decimals."
        }
      },
      "setMaxSupplyDiff(uint256)": {
        "details": "Sets the maximum allowable difference between total supply and backing assets' value."
      },
      "setPriceProvider(address)": {
        "details": "Set address of price provider.",
        "params": {
          "_priceProvider": "Address of price provider"
        }
      },
      "setRebaseThreshold(uint256)": {
        "details": "Set a minimum amount of OUSD in a mint or redeem that triggers a rebase",
        "params": {
          "_threshold": "OUSD amount with 18 fixed decimals."
        }
      },
      "setRedeemFeeBps(uint256)": {
        "details": "Set a fee in basis points to be charged for a redeem.",
        "params": {
          "_redeemFeeBps": "Basis point fee to be charged"
        }
      },
      "setStrategistAddr(address)": {
        "details": "Set address of Strategist",
        "params": {
          "_address": "Address of Strategist"
        }
      },
      "setTrusteeAddress(address)": {
        "details": "Sets the trusteeAddress that can receive a portion of yield.      Setting to the zero address disables this feature."
      },
      "setTrusteeFeeBps(uint256)": {
        "details": "Sets the TrusteeFeeBps to the percentage of yield that should be      received in basis points."
      },
      "setUniswapAddr(address)": {
        "details": "Set address of Uniswap for performing liquidation of strategy reward tokens",
        "params": {
          "_address": "Address of Uniswap"
        }
      },
      "setVaultBuffer(uint256)": {
        "details": "Set a buffer of assets to keep in the Vault to handle most redemptions without needing to spend gas unwinding assets from a Strategy.",
        "params": {
          "_vaultBuffer": "Percentage using 18 decimals. 100% = 1e18."
        }
      },
      "supportAsset(address)": {
        "details": "Add a supported asset to the contract, i.e. one that can be         to mint OUSD.",
        "params": {
          "_asset": "Address of asset"
        }
      },
      "swap()": {
        "details": "Swap all supported swap tokens for stablecoins via Uniswap."
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "unpauseCapital()": {
        "details": "Set the deposit paused flag to false to enable capital movement."
      },
      "unpauseRebase()": {
        "details": "Set the deposit paused flag to true to allow rebasing."
      },
      "withdrawAllFromStrategies()": {
        "details": "Withdraws all assets from all the strategies and sends assets to the Vault."
      },
      "withdrawAllFromStrategy(address)": {
        "details": "Withdraws all assets from the strategy and sends assets to the Vault.",
        "params": {
          "_strategyAddr": "Strategy address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "reallocate(address,address,address[],uint256[])": {
        "notice": "Move assets from one Strategy to another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16815,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16818,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16858,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 20916,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Asset)20911_storage)"
      },
      {
        "astId": 20919,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "allAssets",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 20929,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "strategies",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(Strategy)20924_storage)"
      },
      {
        "astId": 20932,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "allStrategies",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 20934,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "priceProvider",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 20937,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "rebasePaused",
        "offset": 20,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 20940,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "capitalPaused",
        "offset": 21,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 20942,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 20944,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "vaultBuffer",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 20946,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "autoAllocateThreshold",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 20948,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "rebaseThreshold",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 20951,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "oUSD",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(OUSD)16756"
      },
      {
        "astId": 20960,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "_deprecated_rebaseHooksAddr",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 20966,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "uniswapAddr",
        "offset": 0,
        "slot": "62",
        "type": "t_address"
      },
      {
        "astId": 20972,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      },
      {
        "astId": 20976,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "assetDefaultStrategies",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20978,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "maxSupplyDiff",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 20980,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "trusteeAddress",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 20982,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "trusteeFeeBps",
        "offset": 0,
        "slot": "67",
        "type": "t_uint256"
      },
      {
        "astId": 20985,
        "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
        "label": "swapTokens",
        "offset": 0,
        "slot": "68",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(OUSD)16756": {
        "encoding": "inplace",
        "label": "contract OUSD",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Asset)20911_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)20911_storage"
      },
      "t_mapping(t_address,t_struct(Strategy)20924_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)20924_storage"
      },
      "t_struct(Asset)20911_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Asset",
        "members": [
          {
            "astId": 20910,
            "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)20924_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Strategy",
        "members": [
          {
            "astId": 20921,
            "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20923,
            "contract": "contracts/vault/VaultAdmin.sol:VaultAdmin",
            "label": "_deprecated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x4F424C6f066ae74784f3595A3A84923ad36d5471",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentivesController",
      "outputs": [
        {
          "internalType": "contract IAaveIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_incentivesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stkAaveAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stkAave",
      "outputs": [
        {
          "internalType": "contract IAaveStakedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdea1a23f6c753e4dd21614d73e2b377ad858af4fe85d35ba2ffc7d672d23718e",
  "receipt": {
    "to": null,
    "from": "0x69e078EBc4631E1947F0c38Ef0357De7ED064644",
    "contractAddress": "0x4F424C6f066ae74784f3595A3A84923ad36d5471",
    "transactionIndex": 14,
    "gasUsed": "2605421",
    "logsBloom": "0x
    "blockHash": "0x476edbf8b8713c18bae104b373ac3b89119eb6194da66c490ccacb677f3e17c9",
    "transactionHash": "0xdea1a23f6c753e4dd21614d73e2b377ad858af4fe85d35ba2ffc7d672d23718e",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 14206832,
        "transactionHash": "0xdea1a23f6c753e4dd21614d73e2b377ad858af4fe85d35ba2ffc7d672d23718e",
        "address": "0x4F424C6f066ae74784f3595A3A84923ad36d5471",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069e078ebc4631e1947f0c38ef0357de7ed064644"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x476edbf8b8713c18bae104b373ac3b89119eb6194da66c490ccacb677f3e17c9"
      }
    ],
    "blockNumber": 14206832,
    "cumulativeGasUsed": "3204746",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0d2296c1822a9318e7d4eca895a31e55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesController\",\"outputs\":[{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_incentivesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stkAaveAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAave\",\"outputs\":[{\"internalType\":\"contract IAaveStakedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"details\":\"Get the total asset value held in the platform\",\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect stkAave, convert it to AAVE send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into Aave\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"}},\"depositAll()\":{\"details\":\"Deposit the entire balance of any supported asset into Aave\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"initialize(address,address,address[],address[],address[],address,address)\":{\"params\":{\"_assets\":\"Addresses of supported assets\",\"_incentivesAddress\":\"Address of the AAVE incentives controller\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Address of the AAVE pool\",\"_rewardTokenAddresses\":\"Address of the AAVE token\",\"_stkAaveAddress\":\"Address of the stkAave contract\",\"_vaultAddress\":\"Address of the vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding aToken,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from Aave\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_asset\":\"Address of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address[],address[],address[],address,address)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as AAVE needs several extra addresses for the rewards program.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AaveStrategy.sol\":\"AaveStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x29d258134253bdaeeea64c17baaf6108ff50aec65ceddb7216ef3a948a88808c\",\"license\":\"agpl-3.0\"},\"contracts/strategies/AaveStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Aave Strategy\\n * @notice Investment strategy for investing stablecoins via Aave\\n * @author Origin Protocol Inc\\n */\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./IAave.sol\\\";\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\n\\nimport { IAaveStakedToken } from \\\"./IAaveStakeToken.sol\\\";\\nimport { IAaveIncentivesController } from \\\"./IAaveIncentivesController.sol\\\";\\n\\ncontract AaveStrategy is InitializableAbstractStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    uint16 constant referralCode = 92;\\n\\n    IAaveIncentivesController public incentivesController;\\n    IAaveStakedToken public stkAave;\\n\\n    /**\\n     * Initializer for setting up strategy internal state. This overrides the\\n     * InitializableAbstractStrategy initializer as AAVE needs several extra\\n     * addresses for the rewards program.\\n     * @param _platformAddress Address of the AAVE pool\\n     * @param _vaultAddress Address of the vault\\n     * @param _rewardTokenAddresses Address of the AAVE token\\n     * @param _assets Addresses of supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     * @param _incentivesAddress Address of the AAVE incentives controller\\n     * @param _stkAaveAddress Address of the stkAave contract\\n     */\\n    function initialize(\\n        address _platformAddress, // AAVE pool\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses, // AAVE\\n        address[] calldata _assets,\\n        address[] calldata _pTokens,\\n        address _incentivesAddress,\\n        address _stkAaveAddress\\n    ) external onlyGovernor initializer {\\n        incentivesController = IAaveIncentivesController(_incentivesAddress);\\n        stkAave = IAaveStakedToken(_stkAaveAddress);\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    /**\\n     * @dev Deposit asset into Aave\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        _deposit(_asset, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposit asset into Aave\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n        // Following line also doubles as a check that we are depositing\\n        // an asset that we support.\\n        emit Deposit(_asset, _getATokenFor(_asset), _amount);\\n        _getLendingPool().deposit(_asset, _amount, address(this), referralCode);\\n    }\\n\\n    /**\\n     * @dev Deposit the entire balance of any supported asset into Aave\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            uint256 balance = IERC20(assetsMapped[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                _deposit(assetsMapped[i], balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw asset from Aave\\n     * @param _recipient Address to receive withdrawn asset\\n     * @param _asset Address of asset to withdraw\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\n\\n        emit Withdrawal(_asset, _getATokenFor(_asset), _amount);\\n        uint256 actual = _getLendingPool().withdraw(\\n            _asset,\\n            _amount,\\n            address(this)\\n        );\\n        require(actual == _amount, \\\"Did not withdraw enough\\\");\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Remove all assets from platform and send them to Vault contract.\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            // Redeem entire balance of aToken\\n            IERC20 asset = IERC20(assetsMapped[i]);\\n            address aToken = _getATokenFor(assetsMapped[i]);\\n            uint256 balance = IERC20(aToken).balanceOf(address(this));\\n            if (balance > 0) {\\n                uint256 actual = _getLendingPool().withdraw(\\n                    address(asset),\\n                    balance,\\n                    address(this)\\n                );\\n                require(actual == balance, \\\"Did not withdraw enough\\\");\\n                // Transfer entire balance to Vault\\n                asset.safeTransfer(\\n                    vaultAddress,\\n                    asset.balanceOf(address(this))\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        // Balance is always with token aToken decimals\\n        address aToken = _getATokenFor(_asset);\\n        balance = IERC20(aToken).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return assetToPToken[_asset] != address(0);\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets by their corresponding aToken,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens()\\n        external\\n        override\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        address lendingPool = address(_getLendingPool());\\n        // approve the pool to spend the Asset\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            address asset = assetsMapped[i];\\n            // Safe approval\\n            IERC20(asset).safeApprove(lendingPool, 0);\\n            IERC20(asset).safeApprove(lendingPool, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal method to respond to the addition of new asset / aTokens\\n            We need to give the AAVE lending pool approval to transfer the\\n            asset.\\n     * @param _asset Address of the asset to approve\\n     * @param _aToken Address of the aToken\\n     */\\n    function _abstractSetPToken(address _asset, address _aToken)\\n        internal\\n        override\\n    {\\n        address lendingPool = address(_getLendingPool());\\n        IERC20(_asset).safeApprove(lendingPool, 0);\\n        IERC20(_asset).safeApprove(lendingPool, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Get the aToken wrapped in the IERC20 interface for this asset.\\n     *      Fails if the pToken doesn't exist in our mappings.\\n     * @param _asset Address of the asset\\n     * @return Corresponding aToken to this asset\\n     */\\n    function _getATokenFor(address _asset) internal view returns (address) {\\n        address aToken = assetToPToken[_asset];\\n        require(aToken != address(0), \\\"aToken does not exist\\\");\\n        return aToken;\\n    }\\n\\n    /**\\n     * @dev Get the current address of the Aave lending pool, which is the gateway to\\n     *      depositing.\\n     * @return Current lending pool implementation\\n     */\\n    function _getLendingPool() internal view returns (IAaveLendingPool) {\\n        address lendingPool = ILendingPoolAddressesProvider(platformAddress)\\n            .getLendingPool();\\n        require(lendingPool != address(0), \\\"Lending pool does not exist\\\");\\n        return IAaveLendingPool(lendingPool);\\n    }\\n\\n    /**\\n     * @dev Collect stkAave, convert it to AAVE send to Vault.\\n     */\\n    function collectRewardTokens()\\n        external\\n        override\\n        onlyHarvester\\n        nonReentrant\\n    {\\n        if (address(stkAave) == address(0)) {\\n            return;\\n        }\\n\\n        // Check staked AAVE cooldown timer\\n        uint256 cooldown = stkAave.stakersCooldowns(address(this));\\n        uint256 windowStart = cooldown + stkAave.COOLDOWN_SECONDS();\\n        uint256 windowEnd = windowStart + stkAave.UNSTAKE_WINDOW();\\n\\n        // If inside the unlock window, then we can redeem stkAave\\n        // for AAVE and send it to the vault.\\n        if (block.timestamp > windowStart && block.timestamp <= windowEnd) {\\n            // Redeem to AAVE\\n            uint256 stkAaveBalance = stkAave.balanceOf(address(this));\\n            stkAave.redeem(address(this), stkAaveBalance);\\n\\n            // Transfer AAVE to harvesterAddress\\n            uint256 aaveBalance = IERC20(rewardTokenAddresses[0]).balanceOf(\\n                address(this)\\n            );\\n            if (aaveBalance > 0) {\\n                IERC20(rewardTokenAddresses[0]).safeTransfer(\\n                    harvesterAddress,\\n                    aaveBalance\\n                );\\n            }\\n        }\\n\\n        // Collect avaiable rewards and restart the cooldown timer, if either of\\n        // those should be run.\\n        if (block.timestamp > windowStart || cooldown == 0) {\\n            // aToken addresses for incentives controller\\n            address[] memory aTokens = new address[](assetsMapped.length);\\n            for (uint256 i = 0; i < assetsMapped.length; i++) {\\n                aTokens[i] = _getATokenFor(assetsMapped[i]);\\n            }\\n\\n            // 1. If we have rewards availabile, collect them\\n            uint256 pendingRewards = incentivesController.getRewardsBalance(\\n                aTokens,\\n                address(this)\\n            );\\n            if (pendingRewards > 0) {\\n                // Because getting more stkAAVE from the incentives controller\\n                // with claimRewards() may push the stkAAVE cooldown time\\n                // forward, it is called after stakedAAVE has been turned into\\n                // AAVE.\\n                uint256 collected = incentivesController.claimRewards(\\n                    aTokens,\\n                    pendingRewards,\\n                    address(this)\\n                );\\n                require(collected == pendingRewards, \\\"AAVE reward difference\\\");\\n            }\\n\\n            // 2. Start cooldown counting down.\\n            if (stkAave.balanceOf(address(this)) > 0) {\\n                // Protected with if since cooldown call would revert\\n                // if no stkAave balance.\\n                stkAave.cooldown();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21abe592b7f1be318544687c4063af7534043506a20c46f4d77ae670e59c96f9\",\"license\":\"agpl-3.0\"},\"contracts/strategies/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for Aaves Lending Pool\\n * Documentation: https://developers.aave.com/#lendingpool\\n */\\ninterface IAaveLendingPool {\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\n/**\\n * @dev Interface for Aaves Lending Pool\\n * Documentation: https://developers.aave.com/#lendingpooladdressesprovider\\n */\\ninterface ILendingPoolAddressesProvider {\\n    /**\\n     * @notice Get the current address for Aave LendingPool\\n     * @dev Lending pool is the core contract on which to call deposit\\n     */\\n    function getLendingPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x098c6d61e55ec6ce0fe91d6ee061ff18e5101a49c9d2ad8c1bad267b533bcbef\",\"license\":\"agpl-3.0\"},\"contracts/strategies/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAaveIncentivesController {\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /*\\n     * @dev Returns the configuration of the distribution for a certain asset\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The asset index, the emission per second and the last updated timestamp\\n     **/\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n     * @param assets The assets to incentivize\\n     * @param emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(\\n        address[] calldata assets,\\n        uint256[] calldata emissionsPerSecond\\n    ) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param asset The address of the user\\n     * @param userBalance The balance of the user of the asset in the lending pool\\n     * @param totalSupply The total supply of the asset in the lending pool\\n     **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool,\\n     * accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the\\n     * lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @param asset The asset to incentivize\\n     * @return the user index for the asset\\n     */\\n    function getUserAssetData(address user, address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function PRECISION() external view returns (uint8);\\n\\n    /**\\n     * @dev Gets the distribution end timestamp of the emissions\\n     */\\n    function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2f605f555daff0dce3844588ee313fa1246086af57a734dbf256fc888b6f7b68\",\"license\":\"agpl-3.0\"},\"contracts/strategies/IAaveStakeToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IAaveStakedToken {\\n    function COOLDOWN_SECONDS() external returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external returns (uint256);\\n\\n    function balanceOf(address addr) external returns (uint256);\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function stakersCooldowns(address addr) external returns (uint256);\\n\\n    function cooldown() external;\\n}\\n\",\"keccak256\":\"0xa62827fb7660101df2e7b49cb23d2eb4fc3e3a8ef0d6750b7b15f11b15ff1911\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xff2a83835ed8984e10338905bc31dbcaeeabdfc0e58d49257389cb1e5a3b9d8a\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    // Core address for the given platform\\n    address public platformAddress;\\n\\n    address public vaultAddress;\\n\\n    // asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    // Full list of all assets supported here\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address public _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\n\\n    // Address of the one address allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    // Reward token addresses\\n    address[] public rewardTokenAddresses;\\n    // Reserved for future expansion\\n    int256[98] private _reserved;\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _platformAddress Generic platform address\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    function _collectRewardTokens() internal {\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            emit RewardTokenCollected(\\n                harvesterAddress,\\n                rewardTokenAddresses[i],\\n                balance\\n            );\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _rewardTokenAddresses Address array of the reward token\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _harvesterAddress Address of the harvester\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        harvesterAddress = _harvesterAddress;\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @dev Deposit an amount of asset into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @dev Deposit balance of all supported assets into the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the platform.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @dev Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xea76d28ab651be15bec88ab73611a54efb38942d98adf36a1d64367fc7418eb6\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506100283360008051602062002e3583398151915255565b60008051602062002e35833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a3612db580620000806000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063853828b611610104578063c2e1e3f4116100a2578063dbe55e5611610071578063dbe55e56146103db578063de5f6268146103ee578063f6ca71b0146103f6578063f817bc631461040b57600080fd5b8063c2e1e3f41461039a578063c7af3352146103ad578063d38bfff4146103b5578063d9caed12146103c857600080fd5b806396d538bb116100de57806396d538bb1461032e578063aa388af614610341578063ad1728cb1461037f578063af1df2551461038757600080fd5b8063853828b6146103005780639136616a146103085780639688d2fc1461031b57600080fd5b806347e7ef24116101715780635f5152261161014b5780635f515226146102a657806367c7066c146102c75780637b2d9b2c146102da5780637e2d3a15146102ed57600080fd5b806347e7ef24146102835780635a063f63146102965780635d36b1901461029e57600080fd5b80631072cbea116101ad5780631072cbea146102375780632e6552011461024a578063430bf08a1461025d578063476062a41461027057600080fd5b80630c340a24146101d45780630ed57b3a146101f95780630fc3b4c41461020e575b600080fd5b6101dc610414565b6040516001600160a01b0390911681526020015b60405180910390f35b61020c6102073660046126fe565b610431565b005b6101dc61021c3660046126c4565b6035602052600090815260409020546001600160a01b031681565b61020c610245366004612917565b61046c565b6037546101dc906001600160a01b031681565b6034546101dc906001600160a01b031681565b609e546101dc906001600160a01b031681565b61020c610291366004612917565b6104ac565b61020c61051f565b61020c610c7c565b6102b96102b43660046126c4565b610d22565b6040519081526020016101f0565b6039546101dc906001600160a01b031681565b6101dc6102e83660046129a7565b610daf565b61020c6102fb3660046127f6565b610dd9565b61020c610f17565b61020c6103163660046129a7565b611240565b61020c610329366004612737565b61140b565b61020c61033c366004612943565b611514565b61036f61034f3660046126c4565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101f0565b61020c61163a565b609d546101dc906001600160a01b031681565b61020c6103a83660046126c4565b611718565b61036f611797565b61020c6103c33660046126c4565b6117c8565b61020c6103d63660046128d6565b61186c565b6033546101dc906001600160a01b031681565b61020c611abe565b6103fe611c10565b6040516101f09190612a39565b6102b960385481565b600061042c600080516020612d608339815191525490565b905090565b610439611797565b61045e5760405162461bcd60e51b815260040161045590612bab565b60405180910390fd5b6104688282611c72565b5050565b610474611797565b6104905760405162461bcd60e51b815260040161045590612bab565b61046861049b610414565b6001600160a01b0384169083611dd7565b6034546001600160a01b031633146104d65760405162461bcd60e51b815260040161045590612b74565b600080516020612d40833981519152805460028114156105085760405162461bcd60e51b815260040161045590612c30565b600282556105168484611e3a565b50600190555050565b6039546001600160a01b031633146105795760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610455565b600080516020612d40833981519152805460028114156105ab5760405162461bcd60e51b815260040161045590612c30565b60028255609e546001600160a01b03166105c457610c75565b609e5460405163091030c360e01b81523060048201526000916001600160a01b03169063091030c390602401602060405180830381600087803b15801561060a57600080fd5b505af115801561061e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064291906129c0565b90506000609e60009054906101000a90046001600160a01b03166001600160a01b03166372b49d636040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce91906129c0565b6106d89083612c58565b90506000609e60009054906101000a90046001600160a01b03166001600160a01b031663359c4a966040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906129c0565b61076e9083612c58565b9050814211801561077f5750804211155b1561094e57609e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381600087803b1580156107ca57600080fd5b505af11580156107de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080291906129c0565b609e546040516301e9a69560e41b8152306004820152602481018390529192506001600160a01b031690631e9a695090604401600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b505050506000603a60008154811061087d5761087d612cfe565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156108c957600080fd5b505afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090191906129c0565b9050801561094b57603954603a805461094b926001600160a01b031691849160009061092f5761092f612cfe565b6000918252602090912001546001600160a01b03169190611dd7565b50505b8142118061095a575082155b15610c715760365460009067ffffffffffffffff81111561097d5761097d612d14565b6040519080825280602002602001820160405280156109a6578160200160208202803683370190505b50905060005b603654811015610a22576109e6603682815481106109cc576109cc612cfe565b6000918252602090912001546001600160a01b0316611f55565b8282815181106109f8576109f8612cfe565b6001600160a01b039092166020928302919091019091015280610a1a81612cb7565b9150506109ac565b50609d546040516345accf9360e11b81526000916001600160a01b031690638b599f2690610a569085903090600401612a4c565b60206040518083038186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa691906129c0565b90508015610b8157609d54604051633111e7b360e01b81526000916001600160a01b031690633111e7b390610ae390869086903090600401612a76565b602060405180830381600087803b158015610afd57600080fd5b505af1158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3591906129c0565b9050818114610b7f5760405162461bcd60e51b8152602060048201526016602482015275414156452072657761726420646966666572656e636560501b6044820152606401610455565b505b609e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381600087803b158015610bc757600080fd5b505af1158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff91906129c0565b1115610c6e57609e60009054906101000a90046001600160a01b03166001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b505050505b50505b5050505b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610d175760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610455565b610d2033611fbd565b565b600080610d2e83611f55565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da891906129c0565b9392505050565b603a8181548110610dbf57600080fd5b6000918252602090912001546001600160a01b0316905081565b610de1611797565b610dfd5760405162461bcd60e51b815260040161045590612bab565b600054610100900460ff1680610e16575060005460ff16155b610e325760405162461bcd60e51b815260040161045590612be2565b600054610100900460ff16158015610e54576000805461ffff19166101011790555b609d80546001600160a01b038086166001600160a01b031992831617909255609e8054928516929091169190911790556040805160208089028281018201909352888252610ef8928e928e928e928e92918e918e9182919085019084908082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061208192505050565b8015610f0a576000805461ff00191690555b5050505050505050505050565b6034546001600160a01b0316331480610f485750610f33610414565b6001600160a01b0316336001600160a01b0316145b610fa05760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610455565b600080516020612d4083398151915280546002811415610fd25760405162461bcd60e51b815260040161045590612c30565b6002825560005b60365481101561123857600060368281548110610ff857610ff8612cfe565b6000918252602082200154603680546001600160a01b03909216935061102891859081106109cc576109cc612cfe565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561106d57600080fd5b505afa158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a591906129c0565b905080156112225760006110b761216a565b604051631a4ca37b60e21b81526001600160a01b0386811660048301526024820185905230604483015291909116906369328dec90606401602060405180830381600087803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114191906129c0565b905081811461118c5760405162461bcd60e51b8152602060048201526017602482015276088d2c840dcdee840eed2e8d0c8e4c2ee40cadcdeeaced604b1b6044820152606401610455565b6034546040516370a0823160e01b8152306004820152611220916001600160a01b0390811691908716906370a082319060240160206040518083038186803b1580156111d757600080fd5b505afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f91906129c0565b6001600160a01b0387169190611dd7565b505b505050808061123090612cb7565b915050610fd9565b505060019055565b611248611797565b6112645760405162461bcd60e51b815260040161045590612bab565b60365481106112a55760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610455565b6000603682815481106112ba576112ba612cfe565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906112f790600190612c70565b831015611379576036805461130e90600190612c70565b8154811061131e5761131e612cfe565b600091825260209091200154603680546001600160a01b03909216918590811061134a5761134a612cfe565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061138a5761138a612ce8565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b611413611797565b61142f5760405162461bcd60e51b815260040161045590612bab565b600054610100900460ff1680611448575060005460ff16155b6114645760405162461bcd60e51b815260040161045590612be2565b600054610100900460ff16158015611486576000805461ffff19166101011790555b6114f78989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061208192505050565b8015611509576000805461ff00191690555b505050505050505050565b61151c611797565b6115385760405162461bcd60e51b815260040161045590612bab565b60005b818110156115ec57600083838381811061155757611557612cfe565b905060200201602081019061156c91906126c4565b6001600160a01b031614156115da5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610455565b806115e481612cb7565b91505061153b565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161162193929190612aa9565b60405180910390a1611635603a83836125f5565b505050565b611642611797565b61165e5760405162461bcd60e51b815260040161045590612bab565b600080516020612d40833981519152805460028114156116905760405162461bcd60e51b815260040161045590612c30565b60028255600061169e61216a565b905060005b60365481101561170e576000603682815481106116c2576116c2612cfe565b60009182526020822001546001600160a01b031691506116e59082908590612250565b6116fb6001600160a01b03821684600019612250565b508061170681612cb7565b9150506116a3565b5050600182555050565b611720611797565b61173c5760405162461bcd60e51b815260040161045590612bab565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60006117af600080516020612d608339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6117d0611797565b6117ec5760405162461bcd60e51b815260040161045590612bab565b611814817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316611834600080516020612d608339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146118965760405162461bcd60e51b815260040161045590612b74565b600080516020612d40833981519152805460028114156118c85760405162461bcd60e51b815260040161045590612c30565b600282556000831161191c5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e670000000000000000006044820152606401610455565b6001600160a01b03851661196b5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b6044820152606401610455565b836001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639861199f86611f55565b604080516001600160a01b039092168252602082018790520160405180910390a260006119ca61216a565b604051631a4ca37b60e21b81526001600160a01b0387811660048301526024820187905230604483015291909116906369328dec90606401602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906129c0565b9050838114611a9f5760405162461bcd60e51b8152602060048201526017602482015276088d2c840dcdee840eed2e8d0c8e4c2ee40cadcdeeaced604b1b6044820152606401610455565b611ab36001600160a01b0386168786611dd7565b505060019055505050565b6034546001600160a01b03163314611ae85760405162461bcd60e51b815260040161045590612b74565b600080516020612d4083398151915280546002811415611b1a5760405162461bcd60e51b815260040161045590612c30565b6002825560005b60365481101561123857600060368281548110611b4057611b40612cfe565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc491906129c0565b90508015611bfd57611bfd60368381548110611be257611be2612cfe565b6000918252602090912001546001600160a01b031682611e3a565b5080611c0881612cb7565b915050611b21565b6060603a805480602002602001604051908101604052809291908181526020018280548015611c6857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c4a575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611ccf5760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610455565b6001600160a01b03821615801590611cef57506001600160a01b03811615155b611d2f5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610455565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26104688282612374565b6040516001600160a01b03831660248201526044810182905261163590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123ab565b60008111611e835760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610455565b816001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62611eb784611f55565b604080516001600160a01b039092168252602082018590520160405180910390a2611ee061216a565b60405163e8eda9df60e01b81526001600160a01b03848116600483015260248201849052306044830152605c6064830152919091169063e8eda9df90608401600060405180830381600087803b158015611f3957600080fd5b505af1158015611f4d573d6000803e3d6000fd5b505050505050565b6001600160a01b0380821660009081526035602052604081205490911680611fb75760405162461bcd60e51b815260206004820152601560248201527418551bdad95b88191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610455565b92915050565b6001600160a01b0381166120135760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610455565b806001600160a01b0316612033600080516020612d608339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361207e81600080516020612d6083398151915255565b50565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556120bd603a85856125f5565b508151815181146121075760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610455565b60005b818110156121605761214e84828151811061212757612127612cfe565b602002602001015184838151811061214157612141612cfe565b6020026020010151611c72565b8061215881612cb7565b91505061210a565b5050505050505050565b600080603360009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121bb57600080fd5b505afa1580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f391906126e1565b90506001600160a01b03811661224b5760405162461bcd60e51b815260206004820152601b60248201527f4c656e64696e6720706f6f6c20646f6573206e6f7420657869737400000000006044820152606401610455565b919050565b8015806122d95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d791906129c0565b155b6123445760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610455565b6040516001600160a01b03831660248201526044810182905261163590849063095ea7b360e01b90606401611e03565b600061237e61216a565b90506123956001600160a01b038416826000612250565b6116356001600160a01b03841682600019612250565b6000612400826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661247d9092919063ffffffff16565b805190915015611635578080602001905181019061241e9190612985565b6116355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610455565b606061248c8484600085612494565b949350505050565b6060824710156124f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610455565b843b6125435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610455565b600080866001600160a01b0316858760405161255f9190612a1d565b60006040518083038185875af1925050503d806000811461259c576040519150601f19603f3d011682016040523d82523d6000602084013e6125a1565b606091505b50915091506125b18282866125bc565b979650505050505050565b606083156125cb575081610da8565b8251156125db5782518084602001fd5b8160405162461bcd60e51b81526004016104559190612b41565b828054828255906000526020600020908101928215612648579160200282015b828111156126485781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612615565b50612654929150612658565b5090565b5b808211156126545760008155600101612659565b803561224b81612d2a565b60008083601f84011261268a57600080fd5b50813567ffffffffffffffff8111156126a257600080fd5b6020830191508360208260051b85010111156126bd57600080fd5b9250929050565b6000602082840312156126d657600080fd5b8135610da881612d2a565b6000602082840312156126f357600080fd5b8151610da881612d2a565b6000806040838503121561271157600080fd5b823561271c81612d2a565b9150602083013561272c81612d2a565b809150509250929050565b60008060008060008060008060a0898b03121561275357600080fd5b883561275e81612d2a565b9750602089013561276e81612d2a565b9650604089013567ffffffffffffffff8082111561278b57600080fd5b6127978c838d01612678565b909850965060608b01359150808211156127b057600080fd5b6127bc8c838d01612678565b909650945060808b01359150808211156127d557600080fd5b506127e28b828c01612678565b999c989b5096995094979396929594505050565b60008060008060008060008060008060e08b8d03121561281557600080fd5b8a3561282081612d2a565b995060208b013561283081612d2a565b985060408b013567ffffffffffffffff8082111561284d57600080fd5b6128598e838f01612678565b909a50985060608d013591508082111561287257600080fd5b61287e8e838f01612678565b909850965060808d013591508082111561289757600080fd5b506128a48d828e01612678565b90955093506128b7905060a08c0161266d565b91506128c560c08c0161266d565b90509295989b9194979a5092959850565b6000806000606084860312156128eb57600080fd5b83356128f681612d2a565b9250602084013561290681612d2a565b929592945050506040919091013590565b6000806040838503121561292a57600080fd5b823561293581612d2a565b946020939093013593505050565b6000806020838503121561295657600080fd5b823567ffffffffffffffff81111561296d57600080fd5b61297985828601612678565b90969095509350505050565b60006020828403121561299757600080fd5b81518015158114610da857600080fd5b6000602082840312156129b957600080fd5b5035919050565b6000602082840312156129d257600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612a125781516001600160a01b0316875295820195908201906001016129ed565b509495945050505050565b60008251612a2f818460208701612c87565b9190910192915050565b602081526000610da860208301846129d9565b604081526000612a5f60408301856129d9565b905060018060a01b03831660208301529392505050565b606081526000612a8960608301866129d9565b6020830194909452506001600160a01b0391909116604090910152919050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612af35781546001600160a01b031684529284019260019182019101612ace565b505050838103828501528481528590820160005b86811015612b35578235612b1a81612d2a565b6001600160a01b031682529183019190830190600101612b07565b50979650505050505050565b6020815260008251806020840152612b60816040850160208701612c87565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60008219821115612c6b57612c6b612cd2565b500190565b600082821015612c8257612c82612cd2565b500390565b60005b83811015612ca2578181015183820152602001612c8a565b83811115612cb1576000848401525b50505050565b6000600019821415612ccb57612ccb612cd2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461207e57600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220ff929214198ce1b60e8f67eb426a61e89bb8935092be305112a315a0b827540e64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063853828b611610104578063c2e1e3f4116100a2578063dbe55e5611610071578063dbe55e56146103db578063de5f6268146103ee578063f6ca71b0146103f6578063f817bc631461040b57600080fd5b8063c2e1e3f41461039a578063c7af3352146103ad578063d38bfff4146103b5578063d9caed12146103c857600080fd5b806396d538bb116100de57806396d538bb1461032e578063aa388af614610341578063ad1728cb1461037f578063af1df2551461038757600080fd5b8063853828b6146103005780639136616a146103085780639688d2fc1461031b57600080fd5b806347e7ef24116101715780635f5152261161014b5780635f515226146102a657806367c7066c146102c75780637b2d9b2c146102da5780637e2d3a15146102ed57600080fd5b806347e7ef24146102835780635a063f63146102965780635d36b1901461029e57600080fd5b80631072cbea116101ad5780631072cbea146102375780632e6552011461024a578063430bf08a1461025d578063476062a41461027057600080fd5b80630c340a24146101d45780630ed57b3a146101f95780630fc3b4c41461020e575b600080fd5b6101dc610414565b6040516001600160a01b0390911681526020015b60405180910390f35b61020c6102073660046126fe565b610431565b005b6101dc61021c3660046126c4565b6035602052600090815260409020546001600160a01b031681565b61020c610245366004612917565b61046c565b6037546101dc906001600160a01b031681565b6034546101dc906001600160a01b031681565b609e546101dc906001600160a01b031681565b61020c610291366004612917565b6104ac565b61020c61051f565b61020c610c7c565b6102b96102b43660046126c4565b610d22565b6040519081526020016101f0565b6039546101dc906001600160a01b031681565b6101dc6102e83660046129a7565b610daf565b61020c6102fb3660046127f6565b610dd9565b61020c610f17565b61020c6103163660046129a7565b611240565b61020c610329366004612737565b61140b565b61020c61033c366004612943565b611514565b61036f61034f3660046126c4565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101f0565b61020c61163a565b609d546101dc906001600160a01b031681565b61020c6103a83660046126c4565b611718565b61036f611797565b61020c6103c33660046126c4565b6117c8565b61020c6103d63660046128d6565b61186c565b6033546101dc906001600160a01b031681565b61020c611abe565b6103fe611c10565b6040516101f09190612a39565b6102b960385481565b600061042c600080516020612d608339815191525490565b905090565b610439611797565b61045e5760405162461bcd60e51b815260040161045590612bab565b60405180910390fd5b6104688282611c72565b5050565b610474611797565b6104905760405162461bcd60e51b815260040161045590612bab565b61046861049b610414565b6001600160a01b0384169083611dd7565b6034546001600160a01b031633146104d65760405162461bcd60e51b815260040161045590612b74565b600080516020612d40833981519152805460028114156105085760405162461bcd60e51b815260040161045590612c30565b600282556105168484611e3a565b50600190555050565b6039546001600160a01b031633146105795760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610455565b600080516020612d40833981519152805460028114156105ab5760405162461bcd60e51b815260040161045590612c30565b60028255609e546001600160a01b03166105c457610c75565b609e5460405163091030c360e01b81523060048201526000916001600160a01b03169063091030c390602401602060405180830381600087803b15801561060a57600080fd5b505af115801561061e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064291906129c0565b90506000609e60009054906101000a90046001600160a01b03166001600160a01b03166372b49d636040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce91906129c0565b6106d89083612c58565b90506000609e60009054906101000a90046001600160a01b03166001600160a01b031663359c4a966040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906129c0565b61076e9083612c58565b9050814211801561077f5750804211155b1561094e57609e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381600087803b1580156107ca57600080fd5b505af11580156107de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080291906129c0565b609e546040516301e9a69560e41b8152306004820152602481018390529192506001600160a01b031690631e9a695090604401600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b505050506000603a60008154811061087d5761087d612cfe565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156108c957600080fd5b505afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090191906129c0565b9050801561094b57603954603a805461094b926001600160a01b031691849160009061092f5761092f612cfe565b6000918252602090912001546001600160a01b03169190611dd7565b50505b8142118061095a575082155b15610c715760365460009067ffffffffffffffff81111561097d5761097d612d14565b6040519080825280602002602001820160405280156109a6578160200160208202803683370190505b50905060005b603654811015610a22576109e6603682815481106109cc576109cc612cfe565b6000918252602090912001546001600160a01b0316611f55565b8282815181106109f8576109f8612cfe565b6001600160a01b039092166020928302919091019091015280610a1a81612cb7565b9150506109ac565b50609d546040516345accf9360e11b81526000916001600160a01b031690638b599f2690610a569085903090600401612a4c565b60206040518083038186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa691906129c0565b90508015610b8157609d54604051633111e7b360e01b81526000916001600160a01b031690633111e7b390610ae390869086903090600401612a76565b602060405180830381600087803b158015610afd57600080fd5b505af1158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3591906129c0565b9050818114610b7f5760405162461bcd60e51b8152602060048201526016602482015275414156452072657761726420646966666572656e636560501b6044820152606401610455565b505b609e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381600087803b158015610bc757600080fd5b505af1158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff91906129c0565b1115610c6e57609e60009054906101000a90046001600160a01b03166001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b505050505b50505b5050505b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610d175760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610455565b610d2033611fbd565b565b600080610d2e83611f55565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da891906129c0565b9392505050565b603a8181548110610dbf57600080fd5b6000918252602090912001546001600160a01b0316905081565b610de1611797565b610dfd5760405162461bcd60e51b815260040161045590612bab565b600054610100900460ff1680610e16575060005460ff16155b610e325760405162461bcd60e51b815260040161045590612be2565b600054610100900460ff16158015610e54576000805461ffff19166101011790555b609d80546001600160a01b038086166001600160a01b031992831617909255609e8054928516929091169190911790556040805160208089028281018201909352888252610ef8928e928e928e928e92918e918e9182919085019084908082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061208192505050565b8015610f0a576000805461ff00191690555b5050505050505050505050565b6034546001600160a01b0316331480610f485750610f33610414565b6001600160a01b0316336001600160a01b0316145b610fa05760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610455565b600080516020612d4083398151915280546002811415610fd25760405162461bcd60e51b815260040161045590612c30565b6002825560005b60365481101561123857600060368281548110610ff857610ff8612cfe565b6000918252602082200154603680546001600160a01b03909216935061102891859081106109cc576109cc612cfe565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561106d57600080fd5b505afa158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a591906129c0565b905080156112225760006110b761216a565b604051631a4ca37b60e21b81526001600160a01b0386811660048301526024820185905230604483015291909116906369328dec90606401602060405180830381600087803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114191906129c0565b905081811461118c5760405162461bcd60e51b8152602060048201526017602482015276088d2c840dcdee840eed2e8d0c8e4c2ee40cadcdeeaced604b1b6044820152606401610455565b6034546040516370a0823160e01b8152306004820152611220916001600160a01b0390811691908716906370a082319060240160206040518083038186803b1580156111d757600080fd5b505afa1580156111eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120f91906129c0565b6001600160a01b0387169190611dd7565b505b505050808061123090612cb7565b915050610fd9565b505060019055565b611248611797565b6112645760405162461bcd60e51b815260040161045590612bab565b60365481106112a55760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610455565b6000603682815481106112ba576112ba612cfe565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906112f790600190612c70565b831015611379576036805461130e90600190612c70565b8154811061131e5761131e612cfe565b600091825260209091200154603680546001600160a01b03909216918590811061134a5761134a612cfe565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061138a5761138a612ce8565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b611413611797565b61142f5760405162461bcd60e51b815260040161045590612bab565b600054610100900460ff1680611448575060005460ff16155b6114645760405162461bcd60e51b815260040161045590612be2565b600054610100900460ff16158015611486576000805461ffff19166101011790555b6114f78989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061208192505050565b8015611509576000805461ff00191690555b505050505050505050565b61151c611797565b6115385760405162461bcd60e51b815260040161045590612bab565b60005b818110156115ec57600083838381811061155757611557612cfe565b905060200201602081019061156c91906126c4565b6001600160a01b031614156115da5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610455565b806115e481612cb7565b91505061153b565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161162193929190612aa9565b60405180910390a1611635603a83836125f5565b505050565b611642611797565b61165e5760405162461bcd60e51b815260040161045590612bab565b600080516020612d40833981519152805460028114156116905760405162461bcd60e51b815260040161045590612c30565b60028255600061169e61216a565b905060005b60365481101561170e576000603682815481106116c2576116c2612cfe565b60009182526020822001546001600160a01b031691506116e59082908590612250565b6116fb6001600160a01b03821684600019612250565b508061170681612cb7565b9150506116a3565b5050600182555050565b611720611797565b61173c5760405162461bcd60e51b815260040161045590612bab565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60006117af600080516020612d608339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6117d0611797565b6117ec5760405162461bcd60e51b815260040161045590612bab565b611814817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316611834600080516020612d608339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146118965760405162461bcd60e51b815260040161045590612b74565b600080516020612d40833981519152805460028114156118c85760405162461bcd60e51b815260040161045590612c30565b600282556000831161191c5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e670000000000000000006044820152606401610455565b6001600160a01b03851661196b5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b6044820152606401610455565b836001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639861199f86611f55565b604080516001600160a01b039092168252602082018790520160405180910390a260006119ca61216a565b604051631a4ca37b60e21b81526001600160a01b0387811660048301526024820187905230604483015291909116906369328dec90606401602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5491906129c0565b9050838114611a9f5760405162461bcd60e51b8152602060048201526017602482015276088d2c840dcdee840eed2e8d0c8e4c2ee40cadcdeeaced604b1b6044820152606401610455565b611ab36001600160a01b0386168786611dd7565b505060019055505050565b6034546001600160a01b03163314611ae85760405162461bcd60e51b815260040161045590612b74565b600080516020612d4083398151915280546002811415611b1a5760405162461bcd60e51b815260040161045590612c30565b6002825560005b60365481101561123857600060368281548110611b4057611b40612cfe565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611b8c57600080fd5b505afa158015611ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc491906129c0565b90508015611bfd57611bfd60368381548110611be257611be2612cfe565b6000918252602090912001546001600160a01b031682611e3a565b5080611c0881612cb7565b915050611b21565b6060603a805480602002602001604051908101604052809291908181526020018280548015611c6857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c4a575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611ccf5760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610455565b6001600160a01b03821615801590611cef57506001600160a01b03811615155b611d2f5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610455565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26104688282612374565b6040516001600160a01b03831660248201526044810182905261163590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123ab565b60008111611e835760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610455565b816001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62611eb784611f55565b604080516001600160a01b039092168252602082018590520160405180910390a2611ee061216a565b60405163e8eda9df60e01b81526001600160a01b03848116600483015260248201849052306044830152605c6064830152919091169063e8eda9df90608401600060405180830381600087803b158015611f3957600080fd5b505af1158015611f4d573d6000803e3d6000fd5b505050505050565b6001600160a01b0380821660009081526035602052604081205490911680611fb75760405162461bcd60e51b815260206004820152601560248201527418551bdad95b88191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610455565b92915050565b6001600160a01b0381166120135760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610455565b806001600160a01b0316612033600080516020612d608339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361207e81600080516020612d6083398151915255565b50565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556120bd603a85856125f5565b508151815181146121075760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610455565b60005b818110156121605761214e84828151811061212757612127612cfe565b602002602001015184838151811061214157612141612cfe565b6020026020010151611c72565b8061215881612cb7565b91505061210a565b5050505050505050565b600080603360009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121bb57600080fd5b505afa1580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f391906126e1565b90506001600160a01b03811661224b5760405162461bcd60e51b815260206004820152601b60248201527f4c656e64696e6720706f6f6c20646f6573206e6f7420657869737400000000006044820152606401610455565b919050565b8015806122d95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561229f57600080fd5b505afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d791906129c0565b155b6123445760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610455565b6040516001600160a01b03831660248201526044810182905261163590849063095ea7b360e01b90606401611e03565b600061237e61216a565b90506123956001600160a01b038416826000612250565b6116356001600160a01b03841682600019612250565b6000612400826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661247d9092919063ffffffff16565b805190915015611635578080602001905181019061241e9190612985565b6116355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610455565b606061248c8484600085612494565b949350505050565b6060824710156124f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610455565b843b6125435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610455565b600080866001600160a01b0316858760405161255f9190612a1d565b60006040518083038185875af1925050503d806000811461259c576040519150601f19603f3d011682016040523d82523d6000602084013e6125a1565b606091505b50915091506125b18282866125bc565b979650505050505050565b606083156125cb575081610da8565b8251156125db5782518084602001fd5b8160405162461bcd60e51b81526004016104559190612b41565b828054828255906000526020600020908101928215612648579160200282015b828111156126485781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612615565b50612654929150612658565b5090565b5b808211156126545760008155600101612659565b803561224b81612d2a565b60008083601f84011261268a57600080fd5b50813567ffffffffffffffff8111156126a257600080fd5b6020830191508360208260051b85010111156126bd57600080fd5b9250929050565b6000602082840312156126d657600080fd5b8135610da881612d2a565b6000602082840312156126f357600080fd5b8151610da881612d2a565b6000806040838503121561271157600080fd5b823561271c81612d2a565b9150602083013561272c81612d2a565b809150509250929050565b60008060008060008060008060a0898b03121561275357600080fd5b883561275e81612d2a565b9750602089013561276e81612d2a565b9650604089013567ffffffffffffffff8082111561278b57600080fd5b6127978c838d01612678565b909850965060608b01359150808211156127b057600080fd5b6127bc8c838d01612678565b909650945060808b01359150808211156127d557600080fd5b506127e28b828c01612678565b999c989b5096995094979396929594505050565b60008060008060008060008060008060e08b8d03121561281557600080fd5b8a3561282081612d2a565b995060208b013561283081612d2a565b985060408b013567ffffffffffffffff8082111561284d57600080fd5b6128598e838f01612678565b909a50985060608d013591508082111561287257600080fd5b61287e8e838f01612678565b909850965060808d013591508082111561289757600080fd5b506128a48d828e01612678565b90955093506128b7905060a08c0161266d565b91506128c560c08c0161266d565b90509295989b9194979a5092959850565b6000806000606084860312156128eb57600080fd5b83356128f681612d2a565b9250602084013561290681612d2a565b929592945050506040919091013590565b6000806040838503121561292a57600080fd5b823561293581612d2a565b946020939093013593505050565b6000806020838503121561295657600080fd5b823567ffffffffffffffff81111561296d57600080fd5b61297985828601612678565b90969095509350505050565b60006020828403121561299757600080fd5b81518015158114610da857600080fd5b6000602082840312156129b957600080fd5b5035919050565b6000602082840312156129d257600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612a125781516001600160a01b0316875295820195908201906001016129ed565b509495945050505050565b60008251612a2f818460208701612c87565b9190910192915050565b602081526000610da860208301846129d9565b604081526000612a5f60408301856129d9565b905060018060a01b03831660208301529392505050565b606081526000612a8960608301866129d9565b6020830194909452506001600160a01b0391909116604090910152919050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612af35781546001600160a01b031684529284019260019182019101612ace565b505050838103828501528481528590820160005b86811015612b35578235612b1a81612d2a565b6001600160a01b031682529183019190830190600101612b07565b50979650505050505050565b6020815260008251806020840152612b60816040850160208701612c87565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60008219821115612c6b57612c6b612cd2565b500190565b600082821015612c8257612c82612cd2565b500390565b60005b83811015612ca2578181015183820152602001612c8a565b83811115612cb1576000848401525b50505050565b6000600019821415612ccb57612ccb612cd2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461207e57600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220ff929214198ce1b60e8f67eb426a61e89bb8935092be305112a315a0b827540e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "details": "Get the total asset value held in the platform",
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect stkAave, convert it to AAVE send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into Aave",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        }
      },
      "depositAll()": {
        "details": "Deposit the entire balance of any supported asset into Aave"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "initialize(address,address,address[],address[],address[],address,address)": {
        "params": {
          "_assets": "Addresses of supported assets",
          "_incentivesAddress": "Address of the AAVE incentives controller",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Address of the AAVE pool",
          "_rewardTokenAddresses": "Address of the AAVE token",
          "_stkAaveAddress": "Address of the stkAave contract",
          "_vaultAddress": "Address of the vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding aToken,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from Aave",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_asset": "Address of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address[],address[],address[],address,address)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as AAVE needs several extra addresses for the rewards program."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18714,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18717,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18757,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18833,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 18835,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 18839,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 18842,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18844,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 18846,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 18848,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 18851,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18855,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 13755,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "incentivesController",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IAaveIncentivesController)16304"
      },
      {
        "astId": 13758,
        "contract": "contracts/strategies/AaveStrategy.sol:AaveStrategy",
        "label": "stkAave",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IAaveStakedToken)16341"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveIncentivesController)16304": {
        "encoding": "inplace",
        "label": "contract IAaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IAaveStakedToken)16341": {
        "encoding": "inplace",
        "label": "contract IAaveStakedToken",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x328d15F6B5Eba1C30CDe1A5F1f5A9E35b07f5424",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "depositPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintMultiple",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "uniswapAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "redeemAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getStrategyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemOutputs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rebaseHooksAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAssetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_strategyAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "StrategyWeightsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DepositsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DepositsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x127a15cbd6fe2f08fec950f0aa6e250c41b7102b5044d634de7008fcc67bd7be",
  "receipt": {
    "to": null,
    "from": "0xAed9fDc9681D61edB5F8B8E421f5cEe8D7F4B04f",
    "contractAddress": "0x328d15F6B5Eba1C30CDe1A5F1f5A9E35b07f5424",
    "transactionIndex": 118,
    "gasUsed": "2926992",
    "logsBloom": "0x
    "blockHash": "0x918fd6b5b490214bca10f18e60e5eaa648145e7dbf87cb4d45f4ca7b6cdcf44c",
    "transactionHash": "0x127a15cbd6fe2f08fec950f0aa6e250c41b7102b5044d634de7008fcc67bd7be",
    "logs": [
      {
        "transactionIndex": 118,
        "blockNumber": 11246268,
        "transactionHash": "0x127a15cbd6fe2f08fec950f0aa6e250c41b7102b5044d634de7008fcc67bd7be",
        "address": "0x328d15F6B5Eba1C30CDe1A5F1f5A9E35b07f5424",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aed9fdc9681d61edb5f8b8e421f5cee8d7f4b04f"
        ],
        "data": "0x",
        "logIndex": 235,
        "blockHash": "0x918fd6b5b490214bca10f18e60e5eaa648145e7dbf87cb4d45f4ca7b6cdcf44c"
      }
    ],
    "blockNumber": 11246268,
    "cumulativeGasUsed": "12441738",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e0a9e0bb392301ddd8a143004a57e0b9",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"depositPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutputs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseHooksAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_strategyAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"StrategyWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allocate()\":{\"details\":\"Allocate unallocated funds on Vault to strategies.*\"},\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of asset\"},\"return\":\"uint256 Balance of asset in decimals of asset\"},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"getAllAssets()\":{\"details\":\"Return all asset addresses in order\"},\"getAssetCount()\":{\"details\":\"Return the number of assets suppported by the Vault.\"},\"getStrategyCount()\":{\"details\":\"Return the number of strategies active on the Vault.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"mint(address,uint256)\":{\"details\":\"Deposit a supported asset and mint OUSD.\",\"params\":{\"_amount\":\"Amount of the asset being deposited\",\"_asset\":\"Address of the asset being deposited\"}},\"mintMultiple(address[],uint256[])\":{\"details\":\"Mint for multiple assets in the same call.\",\"params\":{\"_amounts\":\"Amount of each asset at the same index in the _assets                to deposit.\",\"_assets\":\"Addresses of assets being deposited\"}},\"rebase()\":{\"details\":\"Calculate the total value of assets held by the Vault and all        strategies and update the supply of oUSD\"},\"redeem(uint256)\":{\"details\":\"Withdraw a supported asset and burn OUSD.\",\"params\":{\"_amount\":\"Amount of OUSD to burn\"}},\"setAdminImpl(address)\":{\"details\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\",\"params\":{\"newImpl\":\"address pf the implementation\"}},\"totalValue()\":{\"details\":\"Determine the total value of assets held by the vault and its        strategies.\",\"return\":\"uint256 value Total value in USD (1e18)\"},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}}},\"userdoc\":{\"methods\":{\"allocate()\":{\"notice\":\"Allocate unallocated funds on Vault to strategies.\"},\"calculateRedeemOutputs(uint256)\":{\"notice\":\"Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned\"},\"checkBalance(address)\":{\"notice\":\"Get the balance of an asset held in Vault and all strategies.\"},\"redeemAll()\":{\"notice\":\"Withdraw a supported asset and burn all OUSD.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultCore.sol\":\"VaultCore\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xb15af804e2bc97db51e4e103f13de9fe13f87e6b835d7a88c897966c0e58506e\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/governance/Governable.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    bytes32\\n        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n    //keccak256(\\\"OUSD.governor\\\");\\n\\n    bytes32\\n        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n    //keccak256(\\\"OUSD.pending.governor\\\");\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() internal {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x342fa1b2e2cbe8d2d904c31e5a2b182446d3737db2f6704d3f247c6c733084ec\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x01eab42b6d54fa5389598e0663c24680ecc017e2da848e8ea1c40aeaa8225eef\"},\"contracts/interfaces/IMinMaxOracle.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IMinMaxOracle {\\n    //Assuming 8 decimals\\n    function priceMin(string calldata symbol) external returns (uint256);\\n\\n    function priceMax(string calldata symbol) external returns (uint256);\\n}\\n\\ninterface IViewMinMaxOracle {\\n    function priceMin(string calldata symbol) external view returns (uint256);\\n\\n    function priceMax(string calldata symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4bfced1f800eb386e7ff0becaf9d0cc64cc2774011a32054747e4d1b5687d1af\"},\"contracts/interfaces/IRebaseHooks.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IRebaseHooks {\\n    function postRebase(bool sync) external;\\n}\\n\",\"keccak256\":\"0x657e8d96ec4536df279ef0da4ce58fba2eb99f86a10944f105bbfa26260147e8\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to Lending platform.\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        returns (uint256 amountDeposited);\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external returns (uint256 amountWithdrawn);\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function liquidate() external;\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardToken() external;\\n\\n    /**\\n     * @dev The address of the reward token for the Strategy.\\n     */\\n    function rewardTokenAddress() external pure returns (address);\\n\\n    /**\\n     * @dev The threshold (denominated in the reward token) over which the\\n     * vault will auto harvest on allocate calls.\\n     */\\n    function rewardLiquidationThreshold() external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xd942f08fcc5483617427d7aa4fbace765fac893590b38f7a233f5c1e3f809e96\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event StrategyAdded(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event StrategyWeightsUpdated(\\n        address[] _strategyAddresses,\\n        uint256[] weights\\n    );\\n    event DepositsPaused();\\n    event DepositsUnpaused();\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setRebaseHooksAddr(address _address) external;\\n\\n    function rebaseHooksAddr() external view returns (address);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setUniswapAddr(address _address) external;\\n\\n    function uniswapAddr() external view returns (address);\\n\\n    function supportAsset(address _asset) external;\\n\\n    function addStrategy(address _addr, uint256 _targetWeight) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setStrategyWeights(\\n        address[] calldata _strategyAddresses,\\n        uint256[] calldata _weights\\n    ) external;\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseDeposits() external;\\n\\n    function unpauseDeposits() external;\\n\\n    function depositPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function harvest(address _strategyAddr) external;\\n\\n    function priceUSDMint(string calldata symbol) external returns (uint256);\\n\\n    function priceUSDRedeem(string calldata symbol) external returns (uint256);\\n\\n    // VaultCore.sol\\n    function mint(address _asset, uint256 _amount) external;\\n\\n    function mintMultiple(\\n        address[] calldata _assets,\\n        uint256[] calldata _amount\\n    ) external;\\n\\n    function redeem(uint256 _amount) external;\\n\\n    function redeemAll() external;\\n\\n    function allocate() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function rebase() external returns (uint256);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance() external view returns (uint256);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x670d5ea8f2ab35aacffe5f1e1e7bf6adfe75a9c78a2b349efbdac201adf9aaba\"},\"contracts/token/OUSD.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { InitializableToken } from \\\"../utils/InitializableToken.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\ncontract OUSD is Initializable, InitializableToken, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdated(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n\\n    uint256 private _totalSupply;\\n    uint256 public rebasingCredits;\\n    // Exchange rate between internal credits and OUSD\\n    uint256 public rebasingCreditsPerToken;\\n\\n    mapping(address => uint256) private _creditBalances;\\n\\n    // Allowances denominated in OUSD\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    address public vaultAddress = address(0);\\n\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingCredits;\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    enum RebaseOptions { NotSet, OptOut, OptIn }\\n    mapping(address => RebaseOptions) public rebaseState;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress\\n    ) external onlyGovernor initializer {\\n        InitializableToken._initialize(_nameArg, _symbolArg);\\n\\n        _totalSupply = 0;\\n        rebasingCredits = 0;\\n        rebasingCreditsPerToken = 1e18;\\n\\n        vaultAddress = _vaultAddress;\\n\\n        nonRebasingCredits = 0;\\n        nonRebasingSupply = 0;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Savings Manager contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the _amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (_creditBalances[_account], _creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the _amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The _amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingCredits = nonRebasingCredits.add(creditsCredited);\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            rebasingCredits = rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingCredits = nonRebasingCredits.sub(creditsDeducted);\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            rebasingCredits = rebasingCredits.add(creditsCredited);\\n        } else if (isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer between two non rebasing accounts. They may have\\n            // different exchange rates so update the count of non rebasing\\n            // credits with the difference\\n            nonRebasingCredits =\\n                nonRebasingCredits +\\n                creditsCredited -\\n                creditsDeducted;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the _amount of tokens that an owner has allowed to a _spender.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified _amount of tokens on behalf of\\n     * msg.sender. This method is included for ERC20 compatibility.\\n     * increaseAllowance and decreaseAllowance should be used instead.\\n     * Changing an allowance with this method brings the risk that someone may transfer both\\n     * the old and the new allowance - if they are both greater than zero - if a transfer\\n     * transaction is mined before the later approve() call is mined.\\n     *\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The _amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the _amount of tokens that an owner has allowed to a _spender.\\n     * This method should be used instead of approve() to avoid the double approval vulnerability\\n     * described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The _amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the _amount of tokens that an owner has allowed to a _spender.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The _amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        return _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingCredits = nonRebasingCredits.add(creditAmount);\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            rebasingCredits = rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        return _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingCredits = nonRebasingCredits.sub(creditAmount);\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            rebasingCredits = rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an accounts balance non rebasing, i.e. does not alter with rebases\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        if (Address.isContract(_account)) {\\n            // Contracts by default opt out\\n            if (rebaseState[_account] == RebaseOptions.OptIn) {\\n                // If they've opted in explicitly it is not a non rebasing\\n                // address\\n                return false;\\n            }\\n            // Is a non rebasing account because no explicit opt in\\n            // Make sure the rebasing/non-rebasing supply is updated and\\n            // fixed credits per token is set for this account\\n            _ensureRebasingMigration(_account);\\n            return true;\\n        } else {\\n            // EOAs by default opt in\\n            // Check for explicit opt out\\n            return rebaseState[_account] == RebaseOptions.OptOut;\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            // Set fixed credits per token for this account\\n            nonRebasingCreditsPerToken[_account] = rebasingCreditsPerToken;\\n            // Update non rebasing supply\\n            nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n            // Update credit tallies\\n            rebasingCredits = rebasingCredits.sub(_creditBalances[_account]);\\n            nonRebasingCredits = nonRebasingCredits.add(\\n                _creditBalances[_account]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non rebasing exception list. I.e. the\\n     * address's balance will be part of rebases so the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public {\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\n            .mul(rebasingCreditsPerToken)\\n            .div(_creditsPerToken(msg.sender));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\n        // Decrease non rebasing credits\\n        nonRebasingCredits = nonRebasingCredits.sub(\\n            _creditBalances[msg.sender]\\n        );\\n\\n        _creditBalances[msg.sender] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        rebasingCredits = rebasingCredits.add(_creditBalances[msg.sender]);\\n\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Remove a contract address to the non rebasing exception list.\\n     */\\n    function rebaseOptOut() public {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Increase non rebasing credits\\n        nonRebasingCredits = nonRebasingCredits.add(\\n            _creditBalances[msg.sender]\\n        );\\n\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        rebasingCredits = rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     * @return uint256 representing the new total supply.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        returns (uint256)\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdated(\\n                _totalSupply,\\n                rebasingCredits,\\n                rebasingCreditsPerToken\\n            );\\n            return _totalSupply;\\n        }\\n\\n        _totalSupply = _newTotalSupply;\\n\\n        if (_totalSupply > MAX_SUPPLY) _totalSupply = MAX_SUPPLY;\\n\\n        rebasingCreditsPerToken = rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        emit TotalSupplyUpdated(\\n            _totalSupply,\\n            rebasingCredits,\\n            rebasingCreditsPerToken\\n        );\\n\\n        return _totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xe6e59ba1d8c98177d5cdf2d82d4ffc4e519b43f0059b5f5ad47e6432474d03cb\"},\"contracts/utils/Helpers.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xd2ca92e0af883dc1aec5b22caced274e59829e0e30a9e955dcc48b8d921f5cdc\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n */\\ncontract InitializableERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x03e571fc248ab7adb352342aca77471333fa3ec8937d69493904fd3bedf6aea6\"},\"contracts/utils/InitializableToken.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"./InitializableERC20Detailed.sol\\\";\\n\\ncontract InitializableToken is ERC20, InitializableERC20Detailed {\\n    /**\\n     * @dev Initialization function for implementing contract\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(string memory _nameArg, string memory _symbolArg)\\n        internal\\n    {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n    }\\n}\\n\",\"keccak256\":\"0xab6e1ccb80eab2ce6d7aaebf3e5e44e6d082753e88576f3e5bc3ae3976b84071\"},\"contracts/utils/StableMath.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param adjustment Amount to adjust by e.g. scaleBy(1e18, -1) == 1e17\\n     */\\n    function scaleBy(uint256 x, int8 adjustment)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (adjustment > 0) {\\n            x = x.mul(10**uint256(adjustment));\\n        } else if (adjustment < 0) {\\n            x = x.div(10**uint256(adjustment * -1));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0xa77fccf850feb6d54ba3a6530f92554caef8a67a1ceb573d4f8a5d1bf64ff9d2\"},\"contracts/vault/VaultCore.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Vault Contract\\n * @notice The Vault contract stores assets. On a deposit, OUSD will be minted\\n           and sent to the depositor. On a withdrawal, OUSD will be burned and\\n           assets will be sent to the withdrawer. The Vault accepts deposits of\\n           interest form yield bearing strategies which will modify the supply\\n           of OUSD.\\n * @author Origin Protocol Inc\\n */\\n\\nimport \\\"./VaultStorage.sol\\\";\\nimport { IMinMaxOracle } from \\\"../interfaces/IMinMaxOracle.sol\\\";\\nimport { IRebaseHooks } from \\\"../interfaces/IRebaseHooks.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\ncontract VaultCore is VaultStorage {\\n    uint256 constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @dev Verifies that the rebasing is not paused.\\n     */\\n    modifier whenNotRebasePaused() {\\n        require(!rebasePaused, \\\"Rebasing paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the deposits are not paused.\\n     */\\n    modifier whenNotDepositPaused() {\\n        require(!depositPaused, \\\"Deposits paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Deposit a supported asset and mint OUSD.\\n     * @param _asset Address of the asset being deposited\\n     * @param _amount Amount of the asset being deposited\\n     */\\n    function mint(address _asset, uint256 _amount)\\n        external\\n        whenNotDepositPaused\\n    {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        uint256 price = IMinMaxOracle(priceProvider).priceMin(\\n            Helpers.getSymbol(_asset)\\n        );\\n        if (price > 1e8) {\\n            price = 1e8;\\n        }\\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\\n        uint256 unitAdjustedDeposit = _amount.scaleBy(int8(18 - assetDecimals));\\n        uint256 priceAdjustedDeposit = _amount.mulTruncateScale(\\n            price.scaleBy(int8(10)), // 18-8 because oracles have 8 decimals precision\\n            10**assetDecimals\\n        );\\n\\n        // Rebase must happen before any transfers occur.\\n        if (unitAdjustedDeposit >= rebaseThreshold && !rebasePaused) {\\n            rebase(true);\\n        }\\n\\n        // Transfer the deposited coins to the vault\\n        IERC20 asset = IERC20(_asset);\\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Mint matching OUSD\\n        oUSD.mint(msg.sender, priceAdjustedDeposit);\\n        emit Mint(msg.sender, priceAdjustedDeposit);\\n\\n        if (unitAdjustedDeposit >= autoAllocateThreshold) {\\n            allocate();\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint for multiple assets in the same call.\\n     * @param _assets Addresses of assets being deposited\\n     * @param _amounts Amount of each asset at the same index in the _assets\\n     *                 to deposit.\\n     */\\n    function mintMultiple(\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external whenNotDepositPaused {\\n        require(_assets.length == _amounts.length, \\\"Parameter length mismatch\\\");\\n\\n        uint256 unitAdjustedTotal = 0;\\n        uint256 priceAdjustedTotal = 0;\\n        uint256[] memory assetPrices = _getAssetPrices(false);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            for (uint256 j = 0; j < _assets.length; j++) {\\n                if (_assets[j] == allAssets[i]) {\\n                    if (_amounts[j] > 0) {\\n                        uint256 assetDecimals = Helpers.getDecimals(\\n                            allAssets[i]\\n                        );\\n                        uint256 price = assetPrices[i];\\n                        if (price > 1e18) {\\n                            price = 1e18;\\n                        }\\n                        unitAdjustedTotal += _amounts[j].scaleBy(\\n                            int8(18 - assetDecimals)\\n                        );\\n                        priceAdjustedTotal += _amounts[j].mulTruncateScale(\\n                            price,\\n                            10**assetDecimals\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Rebase must happen before any transfers occur.\\n        if (unitAdjustedTotal >= rebaseThreshold && !rebasePaused) {\\n            rebase(true);\\n        }\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            IERC20 asset = IERC20(_assets[i]);\\n            asset.safeTransferFrom(msg.sender, address(this), _amounts[i]);\\n        }\\n\\n        oUSD.mint(msg.sender, priceAdjustedTotal);\\n        emit Mint(msg.sender, priceAdjustedTotal);\\n\\n        if (unitAdjustedTotal >= autoAllocateThreshold) {\\n            allocate();\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw a supported asset and burn OUSD.\\n     * @param _amount Amount of OUSD to burn\\n     */\\n    function redeem(uint256 _amount) public {\\n        if (_amount > rebaseThreshold && !rebasePaused) {\\n            rebase(false);\\n        }\\n        _redeem(_amount);\\n    }\\n\\n    function _redeem(uint256 _amount) internal {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        // Calculate redemption outputs\\n        uint256[] memory outputs = _calculateRedeemOutputs(_amount);\\n        // Send outputs\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            if (outputs[i] == 0) continue;\\n\\n            IERC20 asset = IERC20(allAssets[i]);\\n\\n            if (asset.balanceOf(address(this)) >= outputs[i]) {\\n                // Use Vault funds first if sufficient\\n                asset.safeTransfer(msg.sender, outputs[i]);\\n            } else {\\n                address strategyAddr = _selectWithdrawStrategyAddr(\\n                    allAssets[i],\\n                    outputs[i]\\n                );\\n\\n                if (strategyAddr != address(0)) {\\n                    // Nothing in Vault, but something in Strategy, send from there\\n                    IStrategy strategy = IStrategy(strategyAddr);\\n                    strategy.withdraw(msg.sender, allAssets[i], outputs[i]);\\n                } else {\\n                    // Cant find funds anywhere\\n                    revert(\\\"Liquidity error\\\");\\n                }\\n            }\\n        }\\n\\n        oUSD.burn(msg.sender, _amount);\\n\\n        // Until we can prove that we won't affect the prices of our assets\\n        // by withdrawing them, this should be here.\\n        // It's possible that a strategy was off on its asset total, perhaps\\n        // a reward token sold for more or for less than anticipated.\\n        if (_amount > rebaseThreshold && !rebasePaused) {\\n            rebase(true);\\n        }\\n\\n        emit Redeem(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn all OUSD.\\n     */\\n    function redeemAll() external {\\n        //unfortunately we have to do balanceOf twice\\n        if (oUSD.balanceOf(msg.sender) > rebaseThreshold && !rebasePaused) {\\n            rebase(false);\\n        }\\n        _redeem(oUSD.balanceOf(msg.sender));\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     * @dev Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function allocate() public {\\n        _allocate();\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     * @dev Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function _allocate() internal {\\n        uint256 vaultValue = _totalValueInVault();\\n        // Nothing in vault to allocate\\n        if (vaultValue == 0) return;\\n        uint256 strategiesValue = _totalValueInStrategies();\\n        // We have a method that does the same as this, gas optimisation\\n        uint256 totalValue = vaultValue + strategiesValue;\\n\\n        // We want to maintain a buffer on the Vault so calculate a percentage\\n        // modifier to multiply each amount being allocated by to enforce the\\n        // vault buffer\\n        uint256 vaultBufferModifier;\\n        if (strategiesValue == 0) {\\n            // Nothing in Strategies, allocate 100% minus the vault buffer to\\n            // strategies\\n            vaultBufferModifier = uint256(1e18).sub(vaultBuffer);\\n        } else {\\n            vaultBufferModifier = vaultBuffer.mul(totalValue).div(vaultValue);\\n            if (1e18 > vaultBufferModifier) {\\n                // E.g. 1e18 - (1e17 * 10e18)/5e18 = 8e17\\n                // (5e18 * 8e17) / 1e18 = 4e18 allocated from Vault\\n                vaultBufferModifier = uint256(1e18).sub(vaultBufferModifier);\\n            } else {\\n                // We need to let the buffer fill\\n                return;\\n            }\\n        }\\n        if (vaultBufferModifier == 0) return;\\n\\n        // Iterate over all assets in the Vault and allocate the the appropriate\\n        // strategy\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            // No balance, nothing to do here\\n            if (assetBalance == 0) continue;\\n\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance.mulTruncate(\\n                vaultBufferModifier\\n            );\\n\\n            // Get the target Strategy to maintain weightings\\n            address depositStrategyAddr = _selectDepositStrategyAddr(\\n                address(asset),\\n                allocateAmount\\n            );\\n\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\n                // Transfer asset to Strategy and call deposit method to\\n                // mint or take required action\\n                asset.safeTransfer(address(strategy), allocateAmount);\\n                strategy.deposit(address(asset), allocateAmount);\\n            }\\n        }\\n\\n        // Harvest for all reward tokens above reward liquidation threshold\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            address rewardTokenAddress = strategy.rewardTokenAddress();\\n            if (rewardTokenAddress != address(0)) {\\n                uint256 liquidationThreshold = strategy\\n                    .rewardLiquidationThreshold();\\n                if (liquidationThreshold == 0) {\\n                    // No threshold set, always harvest from strategy\\n                    IVault(address(this)).harvest(allStrategies[i]);\\n                } else {\\n                    // Check balance against liquidation threshold\\n                    // Note some strategies don't hold the reward token balance\\n                    // on their contract so the liquidation threshold should be\\n                    // set to 0\\n                    IERC20 rewardToken = IERC20(rewardTokenAddress);\\n                    uint256 rewardTokenAmount = rewardToken.balanceOf(\\n                        allStrategies[i]\\n                    );\\n                    if (rewardTokenAmount >= liquidationThreshold) {\\n                        IVault(address(this)).harvest(allStrategies[i]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate the total value of assets held by the Vault and all\\n     *         strategies and update the supply of oUSD\\n     */\\n    function rebase() public whenNotRebasePaused returns (uint256) {\\n        rebase(true);\\n    }\\n\\n    /**\\n     * @dev Calculate the total value of assets held by the Vault and all\\n     *         strategies and update the supply of oUSD\\n     */\\n    function rebase(bool sync) internal whenNotRebasePaused returns (uint256) {\\n        if (oUSD.totalSupply() == 0) return 0;\\n        uint256 oldTotalSupply = oUSD.totalSupply();\\n        uint256 newTotalSupply = _totalValue();\\n        // Only rachet upwards\\n        if (newTotalSupply > oldTotalSupply) {\\n            oUSD.changeSupply(newTotalSupply);\\n            if (rebaseHooksAddr != address(0)) {\\n                IRebaseHooks(rebaseHooksAddr).postRebase(sync);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determine the total value of assets held by the vault and its\\n     *         strategies.\\n     * @return uint256 value Total value in USD (1e18)\\n     */\\n    function totalValue() external view returns (uint256 value) {\\n        value = _totalValue();\\n    }\\n\\n    /**\\n     * @dev Internal Calculate the total value of the assets held by the\\n     *         vault and its strategies.\\n     * @return uint256 value Total value in USD (1e18)\\n     */\\n    function _totalValue() internal view returns (uint256 value) {\\n        return _totalValueInVault() + _totalValueInStrategies();\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Vault.\\n     * @return uint256 Total value in ETH (1e18)\\n     */\\n    function _totalValueInVault() internal view returns (uint256 value) {\\n        value = 0;\\n        for (uint256 y = 0; y < allAssets.length; y++) {\\n            IERC20 asset = IERC20(allAssets[y]);\\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\\n            uint256 balance = asset.balanceOf(address(this));\\n            if (balance > 0) {\\n                value += balance.scaleBy(int8(18 - assetDecimals));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Strategies.\\n     * @return uint256 Total value in ETH (1e18)\\n     */\\n    function _totalValueInStrategies() internal view returns (uint256 value) {\\n        value = 0;\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            value += _totalValueInStrategy(allStrategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held by strategy.\\n     * @param _strategyAddr Address of the strategy\\n     * @return uint256 Total value in ETH (1e18)\\n     */\\n    function _totalValueInStrategy(address _strategyAddr)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        value = 0;\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        for (uint256 y = 0; y < allAssets.length; y++) {\\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\\n            if (strategy.supportsAsset(allAssets[y])) {\\n                uint256 balance = strategy.checkBalance(allAssets[y]);\\n                if (balance > 0) {\\n                    value += balance.scaleBy(int8(18 - assetDecimals));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate difference in percent of asset allocation for a\\n               strategy.\\n     * @param _strategyAddr Address of the strategy\\n     * @return unt256 Difference between current and target. 18 decimals.\\n     *  NOTE: This is relative value! not the actual percentage\\n     */\\n    function _strategyWeightDifference(\\n        address _strategyAddr,\\n        address _asset,\\n        uint256 _modAmount,\\n        bool deposit\\n    ) internal view returns (uint256 difference) {\\n        // Since we are comparing relative weights, we should scale by weight so\\n        // that even small weights will be triggered, ie 1% versus 20%\\n        uint256 weight = strategies[_strategyAddr].targetWeight;\\n        if (weight == 0) return 0;\\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\\n        difference =\\n            MAX_UINT -\\n            (\\n                deposit\\n                    ? _totalValueInStrategy(_strategyAddr).add(\\n                        _modAmount.scaleBy(int8(18 - assetDecimals))\\n                    )\\n                    : _totalValueInStrategy(_strategyAddr).sub(\\n                        _modAmount.scaleBy(int8(18 - assetDecimals))\\n                    )\\n            )\\n                .divPrecisely(weight);\\n    }\\n\\n    /**\\n     * @dev Select a strategy for allocating an asset to.\\n     * @param _asset Address of asset\\n     * @return address Address of the target strategy\\n     */\\n    function _selectDepositStrategyAddr(address _asset, uint256 depositAmount)\\n        internal\\n        view\\n        returns (address depositStrategyAddr)\\n    {\\n        depositStrategyAddr = address(0);\\n        uint256 maxDifference = 0;\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            if (strategy.supportsAsset(_asset)) {\\n                uint256 diff = _strategyWeightDifference(\\n                    allStrategies[i],\\n                    _asset,\\n                    depositAmount,\\n                    true\\n                );\\n                if (diff >= maxDifference) {\\n                    maxDifference = diff;\\n                    depositStrategyAddr = allStrategies[i];\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Select a strategy for withdrawing an asset from.\\n     * @param _asset Address of asset\\n     * @return address Address of the target strategy for withdrawal\\n     */\\n    function _selectWithdrawStrategyAddr(address _asset, uint256 _amount)\\n        internal\\n        view\\n        returns (address withdrawStrategyAddr)\\n    {\\n        withdrawStrategyAddr = address(0);\\n        uint256 minDifference = MAX_UINT;\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            if (\\n                strategy.supportsAsset(_asset) &&\\n                strategy.checkBalance(_asset) > _amount\\n            ) {\\n                uint256 diff = _strategyWeightDifference(\\n                    allStrategies[i],\\n                    _asset,\\n                    _amount,\\n                    false\\n                );\\n                if (diff <= minDifference) {\\n                    minDifference = diff;\\n                    withdrawStrategyAddr = allStrategies[i];\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return uint256 Balance of asset in decimals of asset\\n     */\\n    function checkBalance(address _asset) external view returns (uint256) {\\n        return _checkBalance(_asset);\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return uint256 Balance of asset in decimals of asset\\n     */\\n    function _checkBalance(address _asset)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        IERC20 asset = IERC20(_asset);\\n        balance = asset.balanceOf(address(this));\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            if (strategy.supportsAsset(_asset)) {\\n                balance += strategy.checkBalance(_asset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the balance of all assets held in Vault and all strategies.\\n     * @return uint256 Balance of all assets (1e18)\\n     */\\n    function _checkBalance() internal view returns (uint256 balance) {\\n        balance = 0;\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[i]);\\n            balance += _checkBalance(allAssets[i]).scaleBy(\\n                int8(18 - assetDecimals)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned\\n     */\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        returns (uint256[] memory)\\n    {\\n        return _calculateRedeemOutputs(_amount);\\n    }\\n\\n    /**\\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned.\\n     * @return Array of amounts respective to the supported assets\\n     */\\n    function _calculateRedeemOutputs(uint256 _amount)\\n        internal\\n        returns (uint256[] memory outputs)\\n    {\\n        // We always give out coins in proportion to how many we have,\\n        // Now if all coins were the same value, this math would easy,\\n        // just take the percentage of each coin, and multiply by the\\n        // value to be given out. But if coins are worth more than $1,\\n        // then we would end up handing out too many coins. We need to\\n        // adjust by the total value of coins.\\n        //\\n        // To do this, we total up the value of our coins, by their\\n        // percentages. Then divide what we would otherwise give out by\\n        // this number.\\n        //\\n        // Let say we have 100 DAI at $1.06  and 200 USDT at $1.00.\\n        // So for every 1 DAI we give out, we'll be handing out 2 USDT\\n        // Our total output ratio is: 33% * 1.06 + 66% * 1.00 = 1.02\\n        //\\n        // So when calculating the output, we take the percentage of\\n        // each coin, times the desired output value, divided by the\\n        // totalOutputRatio.\\n        //\\n        // For example, withdrawing: 30 OUSD:\\n        // DAI 33% * 30 / 1.02 = 9.80 DAI\\n        // USDT = 66 % * 30 / 1.02 = 19.60 USDT\\n        //\\n        // Checking these numbers:\\n        // 9.80 DAI * 1.06 = $10.40\\n        // 19.60 USDT * 1.00 = $19.60\\n        //\\n        // And so the user gets $10.40 + $19.60 = $30 worth of value.\\n\\n        uint256 assetCount = getAssetCount();\\n        uint256[] memory assetPrices = _getAssetPrices(true);\\n        uint256[] memory assetBalances = new uint256[](assetCount);\\n        uint256[] memory assetDecimals = new uint256[](assetCount);\\n        uint256 totalBalance = 0;\\n        uint256 totalOutputRatio = 0;\\n        outputs = new uint256[](assetCount);\\n\\n        // Calculate redeem fee\\n        if (redeemFeeBps > 0) {\\n            uint256 redeemFee = _amount.mul(redeemFeeBps).div(10000);\\n            _amount = _amount.sub(redeemFee);\\n        }\\n\\n        // Calculate assets balances and decimals once,\\n        // for a large gas savings.\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            uint256 balance = _checkBalance(allAssets[i]);\\n            uint256 decimals = Helpers.getDecimals(allAssets[i]);\\n            assetBalances[i] = balance;\\n            assetDecimals[i] = decimals;\\n            totalBalance += balance.scaleBy(int8(18 - decimals));\\n        }\\n        // Calculate totalOutputRatio\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            uint256 price = assetPrices[i];\\n            // Never give out more than one\\n            // stablecoin per dollar of OUSD\\n            if (price < 1e18) {\\n                price = 1e18;\\n            }\\n            uint256 ratio = assetBalances[i]\\n                .scaleBy(int8(18 - assetDecimals[i]))\\n                .mul(price)\\n                .div(totalBalance);\\n            totalOutputRatio += ratio;\\n        }\\n        // Calculate final outputs\\n        uint256 factor = _amount.divPrecisely(totalOutputRatio);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            outputs[i] = assetBalances[i].mul(factor).div(totalBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get an array of the supported asset prices in USD.\\n     * @return uint256[] Array of asset prices in USD (1e18)\\n     */\\n    function _getAssetPrices(bool useMax)\\n        internal\\n        returns (uint256[] memory assetPrices)\\n    {\\n        assetPrices = new uint256[](getAssetCount());\\n\\n        IMinMaxOracle oracle = IMinMaxOracle(priceProvider);\\n        // Price from Oracle is returned with 8 decimals\\n        // _amount is in assetDecimals\\n\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            string memory symbol = Helpers.getSymbol(allAssets[i]);\\n            // Get all the USD prices of the asset in 1e18\\n            if (useMax) {\\n                assetPrices[i] = oracle.priceMax(symbol).scaleBy(int8(18 - 8));\\n            } else {\\n                assetPrices[i] = oracle.priceMin(symbol).scaleBy(int8(18 - 8));\\n            }\\n        }\\n    }\\n\\n    /***************************************\\n                    Utils\\n    ****************************************/\\n\\n    /**\\n     * @dev Return the number of assets suppported by the Vault.\\n     */\\n    function getAssetCount() public view returns (uint256) {\\n        return allAssets.length;\\n    }\\n\\n    /**\\n     * @dev Return all asset addresses in order\\n     */\\n    function getAllAssets() external view returns (address[] memory) {\\n        return allAssets;\\n    }\\n\\n    /**\\n     * @dev Return the number of strategies active on the Vault.\\n     */\\n    function getStrategyCount() public view returns (uint256) {\\n        return allStrategies.length;\\n    }\\n\\n    function isSupportedAsset(address _asset) external view returns (bool) {\\n        return assets[_asset].isSupported;\\n    }\\n\\n    /**\\n     * @dev Falldown to the admin implementation\\n     * @notice This is a catch all for all functions not declared in core\\n     */\\n    function() external payable {\\n        bytes32 slot = adminImplPosition;\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize)\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas, sload(slot), 0, calldatasize, 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize)\\n\\n            switch result\\n                // delegatecall returns 0 on error.\\n                case 0 {\\n                    revert(0, returndatasize)\\n                }\\n                default {\\n                    return(0, returndatasize)\\n                }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5399f149abc5e7650e22a3b7a0ed426f4377f304456deb42559cea74d15ced13\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD VaultStorage Contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n    using SafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event StrategyAdded(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event StrategyWeightsUpdated(\\n        address[] _strategyAddresses,\\n        uint256[] weights\\n    );\\n    event DepositsPaused();\\n    event DepositsUnpaused();\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    struct Asset {\\n        bool isSupported;\\n    }\\n    mapping(address => Asset) assets;\\n    address[] allAssets;\\n\\n    // Strategies supported by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 targetWeight; // 18 decimals. 100% = 1e18\\n    }\\n    mapping(address => Strategy) strategies;\\n    address[] allStrategies;\\n\\n    // Address of the Oracle price provider contract\\n    address public priceProvider;\\n    // Pausing bools\\n    bool public rebasePaused = false;\\n    bool public depositPaused = true;\\n    // Redemption fee in basis points\\n    uint256 public redeemFeeBps;\\n    // Buffer of assets to keep in Vault to handle (most) withdrawals\\n    uint256 public vaultBuffer;\\n    // Mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    // Mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    OUSD oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition = 0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address public rebaseHooksAddr = address(0);\\n\\n    // Address of Uniswap\\n    address public uniswapAddr = address(0);\\n\\n    address public strategistAddr = address(0);\\n\\n    /**\\n     * @dev set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address pf the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        bytes32 position = adminImplPosition;\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2de449748eb0c985c68ba1b71548750338314dab7a612fcfc3695f6cde81bd2f\"}},\"version\":1}",
  "bytecode": "0x60806040526037805461ffff60a01b19167501000000000000000000000000000000000000000000179055603d80546001600160a01b0319908116909155603e805482169055603f8054909116905562000062336001600160e01b03620000bb16565b620000756001600160e01b03620000ce16565b6001600160a01b031660006001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3620000e2565b6000805160206200340583398151915255565b600080516020620034058339815191525490565b61331380620000f26000396000f3fe6080604052600436106101b75760003560e01c80635f515226116100ec578063af14052c1161008a578063d38bfff411610064578063d38bfff4146105b8578063d4c3eea0146105eb578063db006a7514610600578063fc0cfeee1461062a576101b7565b8063af14052c14610579578063b888879e1461058e578063c7af3352146105a3576101b7565b80639be918e6116100c65780639be918e6146105075780639fa1826e1461053a578063a0aead4d1461054f578063abaa991614610564576101b7565b80635f5152261461049557806367bd7ba3146104c8578063796be57b146104f2576101b7565b80632f4350c21161015957806352d38e5d1161013357806352d38e5d1461044157806353ca9f2414610456578063570d8e1d1461046b5780635d36b19014610480576101b7565b80632f4350c2146103de57806331e19cfa146103f357806340c10f1914610408576101b7565b80630c340a24116101955780630c340a241461031e578063128a8b051461034f5780631edfe3da146103645780632acada4d14610379576101b7565b806302befd24146101fd57806307ea54771461022657806309f6442c146102f7575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e8080156101f8573d6000f35b3d6000fd5b34801561020957600080fd5b5061021261065d565b604080519115158252519081900360200190f35b34801561023257600080fd5b506102f56004803603604081101561024957600080fd5b81019060208101813564010000000081111561026457600080fd5b82018360208201111561027657600080fd5b8035906020019184602083028401116401000000008311171561029857600080fd5b9193909290916020810190356401000000008111156102b657600080fd5b8201836020820111156102c857600080fd5b803590602001918460208302840111640100000000831117156102ea57600080fd5b50909250905061066d565b005b34801561030357600080fd5b5061030c6109c6565b60408051918252519081900360200190f35b34801561032a57600080fd5b506103336109cc565b604080516001600160a01b039092168252519081900360200190f35b34801561035b57600080fd5b506103336109db565b34801561037057600080fd5b5061030c6109ea565b34801561038557600080fd5b5061038e6109f0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103ca5781810151838201526020016103b2565b505050509050019250505060405180910390f35b3480156103ea57600080fd5b506102f5610a52565b3480156103ff57600080fd5b5061030c610b73565b34801561041457600080fd5b506102f56004803603604081101561042b57600080fd5b506001600160a01b038135169060200135610b79565b34801561044d57600080fd5b5061030c610e66565b34801561046257600080fd5b50610212610e6c565b34801561047757600080fd5b50610333610e7c565b34801561048c57600080fd5b506102f5610e8b565b3480156104a157600080fd5b5061030c600480360360208110156104b857600080fd5b50356001600160a01b0316610eeb565b3480156104d457600080fd5b5061038e600480360360208110156104eb57600080fd5b5035610efe565b3480156104fe57600080fd5b50610333610f09565b34801561051357600080fd5b506102126004803603602081101561052a57600080fd5b50356001600160a01b0316610f18565b34801561054657600080fd5b5061030c610f36565b34801561055b57600080fd5b5061030c610f3c565b34801561057057600080fd5b506102f5610f42565b34801561058557600080fd5b5061030c610f4a565b34801561059a57600080fd5b50610333610fac565b3480156105af57600080fd5b50610212610fbb565b3480156105c457600080fd5b506102f5600480360360208110156105db57600080fd5b50356001600160a01b0316610fde565b3480156105f757600080fd5b5061030c61108a565b34801561060c57600080fd5b506102f56004803603602081101561062357600080fd5b5035611094565b34801561063657600080fd5b506102f56004803603602081101561064d57600080fd5b50356001600160a01b03166110cc565b603754600160a81b900460ff1681565b603754600160a81b900460ff16156106be576040805162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d1cc81c185d5cd959608a1b604482015290519081900360640190fd5b828114610712576040805162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d6174636800000000000000604482015290519081900360640190fd5b600080606061072082611149565b905060005b6034548110156108715760005b87811015610868576034828154811061074757fe5b6000918252602090912001546001600160a01b031689898381811061076857fe5b905060200201356001600160a01b03166001600160a01b0316141561086057600087878381811061079557fe5b9050602002013511156108605760006107ce603484815481106107b457fe5b6000918252602090912001546001600160a01b0316611358565b905060008484815181106107de57fe5b60200260200101519050670de0b6b3a76400008111156108035750670de0b6b3a76400005b61082b826012038a8a8681811061081657fe5b9050602002013561141290919063ffffffff16565b870196506108598183600a0a8b8b8781811061084357fe5b9050602002013561146e9092919063ffffffff16565b8601955050505b600101610732565b50600101610725565b50603b54831015801561088e5750603754600160a01b900460ff16155b1561089f5761089d600161149c565b505b60005b868110156109055760008888838181106108b857fe5b905060200201356001600160a01b031690506108fc33308989868181106108db57fe5b90506020020135846001600160a01b03166116f5909392919063ffffffff16565b506001016108a2565b50603c54604080516340c10f1960e01b81523360048201526024810185905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561095957600080fd5b505af115801561096d573d6000803e3d6000fd5b5050604080513381526020810186905281517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859450908190039091019150a1603a5483106109bd576109bd610f42565b50505050505050565b60385481565b60006109d6611755565b905090565b603e546001600160a01b031681565b60395481565b60606034805480602002602001604051908101604052809291908181526020018280548015610a4857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a2a575b5050505050905090565b603b54603c54604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d6020811015610aca57600080fd5b5051118015610ae35750603754600160a01b900460ff16155b15610af457610af2600061149c565b505b603c54604080516370a0823160e01b81523360048201529051610b71926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610b4057600080fd5b505afa158015610b54573d6000803e3d6000fd5b505050506040513d6020811015610b6a57600080fd5b505161177a565b565b60365490565b603754600160a81b900460ff1615610bca576040805162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d1cc81c185d5cd959608a1b604482015290519081900360640190fd5b6001600160a01b03821660009081526033602052604090205460ff16610c30576040805162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604482015290519081900360640190fd5b60008111610c85576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b6037546000906001600160a01b03166319af6bf0610ca285611b70565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cee578181015183820152602001610cd6565b50505050905090810190601f168015610d1b5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610d3a57600080fd5b505af1158015610d4e573d6000803e3d6000fd5b505050506040513d6020811015610d6457600080fd5b505190506305f5e100811115610d7b57506305f5e1005b6000610d8684611358565b90506000610d9e84601284900363ffffffff61141216565b90506000610dc8610db685600a63ffffffff61141216565b8690600a86900a63ffffffff61146e16565b9050603b548210158015610de65750603754600160a01b900460ff16155b15610df757610df5600161149c565b505b85610e136001600160a01b03821633308963ffffffff6116f516565b603c54604080516340c10f1960e01b81523360048201526024810185905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561095957600080fd5b603b5481565b603754600160a01b900460ff1681565b603f546001600160a01b031681565b610e93611ca1565b6001600160a01b0316336001600160a01b031614610ee25760405162461bcd60e51b81526004018080602001828103825260308152602001806132af6030913960400191505060405180910390fd5b610b7133611cc6565b6000610ef682611d71565b90505b919050565b6060610ef682611f1e565b603d546001600160a01b031681565b6001600160a01b031660009081526033602052604090205460ff1690565b603a5481565b60345490565b610b716121ce565b603754600090600160a01b900460ff1615610f9e576040805162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015290519081900360640190fd5b610fa8600161149c565b5090565b6037546001600160a01b031681565b6000610fc5611755565b6001600160a01b0316336001600160a01b031614905090565b610fe6610fbb565b611037576040805162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015290519081900360640190fd5b611040816126ef565b806001600160a01b0316611052611755565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006109d6612713565b603b54811180156110af5750603754600160a01b900460ff16155b156110c0576110be600061149c565b505b6110c98161177a565b50565b6110d4610fbb565b611125576040805162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015290519081900360640190fd5b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b6060611153610f3c565b60405190808252806020026020018201604052801561117c578160200160208202803883390190505b506037549091506001600160a01b031660005b6034548110156113515760606111c5603483815481106111ab57fe5b6000918252602090912001546001600160a01b0316611b70565b905084156112cf576112b2600a846001600160a01b0316637bf0c215846040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122e578181015183820152602001611216565b50505050905090810190601f16801561125b5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561127a57600080fd5b505af115801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b50519063ffffffff61141216565b8483815181106112be57fe5b602002602001018181525050611348565b60405163019af6bf60e41b815260206004820181815283516024840152835161132f93600a936001600160a01b038916936319af6bf09388939192839260440191908501908083836000831561122e578181015183820152602001611216565b84838151811061133b57fe5b6020026020010181815250505b5060010161118f565b5050919050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561139457600080fd5b505afa1580156113a8573d6000803e3d6000fd5b505050506040513d60208110156113be57600080fd5b505160ff169050600481108015906113d7575060128111155b610ef65760405162461bcd60e51b815260040180806020018281038252602981526020018061323b6029913960400191505060405180910390fd5b6000808260000b131561143d5761143683600084900b600a0a63ffffffff61272b16565b9250611465565b60008260000b121561146557611462836000848103900b600a0a63ffffffff61278b16565b92505b50815b92915050565b600080611481858563ffffffff61272b16565b9050611493818463ffffffff61278b16565b95945050505050565b603754600090600160a01b900460ff16156114f0576040805162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015290519081900360640190fd5b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153e57600080fd5b505afa158015611552573d6000803e3d6000fd5b505050506040513d602081101561156857600080fd5b505161157657506000610ef9565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b5051905060006115f3612713565b90508181111561135157603c54604080516339a7919f60e01b81526004810184905290516001600160a01b03909216916339a7919f916024808201926020929091908290030181600087803b15801561164b57600080fd5b505af115801561165f573d6000803e3d6000fd5b505050506040513d602081101561167557600080fd5b5050603d546001600160a01b03161561135157603d5460408051631dcf530f60e01b8152861515600482015290516001600160a01b0390921691631dcf530f9160248082019260009290919082900301818387803b1580156116d657600080fd5b505af11580156116ea573d6000803e3d6000fd5b505050505050919050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261174f9085906127cd565b50505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b600081116117cf576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b60606117da82611f1e565b905060005b603454811015611a99578181815181106117f557fe5b60200260200101516000141561180a57611a91565b60006034828154811061181957fe5b60009182526020909120015483516001600160a01b03909116915083908390811061184057fe5b6020026020010151816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561189e57600080fd5b505afa1580156118b2573d6000803e3d6000fd5b505050506040513d60208110156118c857600080fd5b50511061190557611900338484815181106118df57fe5b6020026020010151836001600160a01b03166129859092919063ffffffff16565b611a8f565b600061194e6034848154811061191757fe5b9060005260206000200160009054906101000a90046001600160a01b031685858151811061194157fe5b60200260200101516129dc565b90506001600160a01b03811615611a4e576000819050806001600160a01b031663d9caed12336034878154811061198157fe5b9060005260206000200160009054906101000a90046001600160a01b03168888815181106119ab57fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d6020811015611a4557600080fd5b50611a8d915050565b6040805162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015290519081900360640190fd5b505b505b6001016117df565b50603c5460408051632770a7eb60e21b81523360048201526024810185905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b158015611aed57600080fd5b505af1158015611b01573d6000803e3d6000fd5b50505050603b5482118015611b205750603754600160a01b900460ff16155b15611b3157611b2f600161149c565b505b604080513381526020810184905281517f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6929181900390910190a15050565b606080826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611bac57600080fd5b505afa158015611bc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611be957600080fd5b8101908080516040519392919084640100000000821115611c0957600080fd5b908301906020820185811115611c1e57600080fd5b8251640100000000811182820188101715611c3857600080fd5b82525081516020918201929091019080838360005b83811015611c65578181015183820152602001611c4d565b50505050905090810190601f168015611c925780820380516001836020036101000a031916815260200191505b50604052509195945050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b038116611d21576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b0316611d33611755565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36110c981612b83565b604080516370a0823160e01b8152306004820152905160009183916001600160a01b038316916370a08231916024808301926020929190829003018186803b158015611dbc57600080fd5b505afa158015611dd0573d6000803e3d6000fd5b505050506040513d6020811015611de657600080fd5b5051915060005b60365481101561135157600060368281548110611e0657fe5b600091825260209182902001546040805163551c457b60e11b81526001600160a01b0389811660048301529151919092169350839263aa388af69260248082019391829003018186803b158015611e5c57600080fd5b505afa158015611e70573d6000803e3d6000fd5b505050506040513d6020811015611e8657600080fd5b505115611f1557806001600160a01b0316635f515226866040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611ee357600080fd5b505afa158015611ef7573d6000803e3d6000fd5b505050506040513d6020811015611f0d57600080fd5b505193909301925b50600101611ded565b60606000611f2a610f3c565b90506060611f386001611149565b9050606082604051908082528060200260200182016040528015611f66578160200160208202803883390190505b509050606083604051908082528060200260200182016040528015611f95578160200160208202803883390190505b506040805186815260208088028201019091529091506000908190868015611fc7578160200160208202803883390190505b5060385490975015612012576000611ffc612710611ff06038548c61272b90919063ffffffff16565b9063ffffffff61278b16565b905061200e898263ffffffff612ba716565b9850505b60005b6034548110156120b457600061204b6034838154811061203157fe5b6000918252602090912001546001600160a01b0316611d71565b9050600061205f603484815481106107b457fe5b90508187848151811061206e57fe5b6020026020010181815250508086848151811061208757fe5b60209081029190910101526120a682601283900363ffffffff61141216565b909401935050600101612015565b5060005b6034548110156121565760008682815181106120d057fe5b60200260200101519050670de0b6b3a76400008110156120f55750670de0b6b3a76400005b600061214785611ff08461213b8a888151811061210e57fe5b60200260200101516012038c898151811061212557fe5b602002602001015161141290919063ffffffff16565b9063ffffffff61272b16565b939093019250506001016120b8565b506000612169898363ffffffff612be916565b905060005b6034548110156121c1576121a284611ff08489858151811061218c57fe5b602002602001015161272b90919063ffffffff16565b8982815181106121ae57fe5b602090810291909101015260010161216e565b5050505050505050919050565b60006121d8612c1e565b9050806121e55750610b71565b60006121ef612d09565b905081810160008261221e5760395461221790670de0b6b3a76400009063ffffffff612ba716565b905061226a565b61223784611ff08460395461272b90919063ffffffff16565b905080670de0b6b3a7640000111561226157612217670de0b6b3a76400008263ffffffff612ba716565b50505050610b71565b806122785750505050610b71565b60005b6034548110156124165760006034828154811061229457fe5b6000918252602080832090910154604080516370a0823160e01b815230600482015290516001600160a01b03909216945084926370a0823192602480840193829003018186803b1580156122e757600080fd5b505afa1580156122fb573d6000803e3d6000fd5b505050506040513d602081101561231157600080fd5b505190508061232157505061240e565b6000612333828663ffffffff612d4d16565b905060006123418483612d62565b90506001600160a01b0381161580159061235b5750600082115b15612409578061237b6001600160a01b038616828563ffffffff61298516565b806001600160a01b03166347e7ef2486856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156123db57600080fd5b505af11580156123ef573d6000803e3d6000fd5b505050506040513d602081101561240557600080fd5b5050505b505050505b60010161227b565b5060005b6036548110156126e85760006036828154811061243357fe5b60009182526020808320909101546040805163125f9e3360e01b815290516001600160a01b039092169450849263125f9e3392600480840193829003018186803b15801561248057600080fd5b505afa158015612494573d6000803e3d6000fd5b505050506040513d60208110156124aa57600080fd5b505190506001600160a01b038116156126de576000826001600160a01b0316635653b4146040518163ffffffff1660e01b815260040160206040518083038186803b1580156124f857600080fd5b505afa15801561250c573d6000803e3d6000fd5b505050506040513d602081101561252257600080fd5b50519050806125b157306001600160a01b0316630e5c011e6036868154811061254757fe5b6000918252602082200154604080516001600160e01b031960e086901b1681526001600160a01b039092166004830152516024808301939282900301818387803b15801561259457600080fd5b505af11580156125a8573d6000803e3d6000fd5b505050506126dc565b60008290506000816001600160a01b03166370a08231603688815481106125d457fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b15801561262257600080fd5b505afa158015612636573d6000803e3d6000fd5b505050506040513d602081101561264c57600080fd5b505190508281106126d957306001600160a01b0316630e5c011e6036888154811061267357fe5b6000918252602082200154604080516001600160e01b031960e086901b1681526001600160a01b039092166004830152516024808301939282900301818387803b1580156126c057600080fd5b505af11580156126d4573d6000803e3d6000fd5b505050505b50505b505b505060010161241a565b5050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b600061271d612d09565b612725612c1e565b01905090565b60008261273a57506000611468565b8282028284828161274757fe5b04146127845760405162461bcd60e51b81526004018080602001828103825260218152602001806132646021913960400191505060405180910390fd5b9392505050565b600061278483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612e73565b6127df826001600160a01b0316612f15565b612830576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b6020831061286e5780518252601f19909201916020918201910161284f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146128d0576040519150601f19603f3d011682016040523d82523d6000602084013e6128d5565b606091505b50915091508161292c576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561174f5780806020019051602081101561294857600080fd5b505161174f5760405162461bcd60e51b815260040180806020018281038252602a815260200180613285602a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526129d79084906127cd565b505050565b6000600019815b603654811015612b7b576000603682815481106129fc57fe5b600091825260209182902001546040805163551c457b60e11b81526001600160a01b038a811660048301529151919092169350839263aa388af69260248082019391829003018186803b158015612a5257600080fd5b505afa158015612a66573d6000803e3d6000fd5b505050506040513d6020811015612a7c57600080fd5b50518015612b0a575084816001600160a01b0316635f515226886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015612adc57600080fd5b505afa158015612af0573d6000803e3d6000fd5b505050506040513d6020811015612b0657600080fd5b5051115b15612b72576000612b3f60368481548110612b2157fe5b60009182526020822001546001600160a01b03169089908990612f4e565b9050838111612b705780935060368381548110612b5857fe5b6000918252602090912001546001600160a01b031694505b505b506001016129e3565b505092915050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b600061278483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613004565b600080612c0484670de0b6b3a764000063ffffffff61272b16565b9050612c16818463ffffffff61278b16565b949350505050565b6000805b603454811015610fa857600060348281548110612c3b57fe5b6000918252602082200154603480546001600160a01b039092169350612c6591859081106107b457fe5b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015612cb157600080fd5b505afa158015612cc5573d6000803e3d6000fd5b505050506040513d6020811015612cdb57600080fd5b505190508015612cfe57612cf981601284900363ffffffff61141216565b850194505b505050600101612c22565b6000805b603654811015610fa857612d4160368281548110612d2757fe5b6000918252602090912001546001600160a01b031661305e565b90910190600101612d0d565b60006127848383670de0b6b3a764000061146e565b600080805b603654811015612b7b57600060368281548110612d8057fe5b600091825260209182902001546040805163551c457b60e11b81526001600160a01b038a811660048301529151919092169350839263aa388af69260248082019391829003018186803b158015612dd657600080fd5b505afa158015612dea573d6000803e3d6000fd5b505050506040513d6020811015612e0057600080fd5b505115612e6a576000612e3760368481548110612e1957fe5b6000918252602090912001546001600160a01b031688886001612f4e565b9050838110612e685780935060368381548110612e5057fe5b6000918252602090912001546001600160a01b031694505b505b50600101612d67565b60008183612eff5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ec4578181015183820152602001612eac565b50505050905090810190601f168015612ef15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612f0b57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612c16575050151592915050565b6001600160a01b03841660009081526035602052604081206001015480612f79576000915050612c16565b6000612f8486611358565b9050612ff88285612fc057612fbb612fa688601286900363ffffffff61141216565b612faf8b61305e565b9063ffffffff612ba716565b612fec565b612fec612fd788601286900363ffffffff61141216565b612fe08b61305e565b9063ffffffff6131e016565b9063ffffffff612be916565b19979650505050505050565b600081848411156130565760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612ec4578181015183820152602001612eac565b505050900390565b600081815b60345481101561135157600061307f603483815481106107b457fe5b9050826001600160a01b031663aa388af66034848154811061309d57fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d602081101561311557600080fd5b5051156131d7576000836001600160a01b0316635f5152266034858154811061313a57fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b15801561318857600080fd5b505afa15801561319c573d6000803e3d6000fd5b505050506040513d60208110156131b257600080fd5b5051905080156131d5576131d081601284900363ffffffff61141216565b850194505b505b50600101613063565b600082820183811015612784576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe546f6b656e206d75737420686176652073756666696369656e7420646563696d616c20706c61636573536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a723158202c71f94d834ebba418b1ce11b67ec5816b522e3e59aa0527923f5caef3f14cd964736f6c634300050b00327bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80635f515226116100ec578063af14052c1161008a578063d38bfff411610064578063d38bfff4146105b8578063d4c3eea0146105eb578063db006a7514610600578063fc0cfeee1461062a576101b7565b8063af14052c14610579578063b888879e1461058e578063c7af3352146105a3576101b7565b80639be918e6116100c65780639be918e6146105075780639fa1826e1461053a578063a0aead4d1461054f578063abaa991614610564576101b7565b80635f5152261461049557806367bd7ba3146104c8578063796be57b146104f2576101b7565b80632f4350c21161015957806352d38e5d1161013357806352d38e5d1461044157806353ca9f2414610456578063570d8e1d1461046b5780635d36b19014610480576101b7565b80632f4350c2146103de57806331e19cfa146103f357806340c10f1914610408576101b7565b80630c340a24116101955780630c340a241461031e578063128a8b051461034f5780631edfe3da146103645780632acada4d14610379576101b7565b806302befd24146101fd57806307ea54771461022657806309f6442c146102f7575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e8080156101f8573d6000f35b3d6000fd5b34801561020957600080fd5b5061021261065d565b604080519115158252519081900360200190f35b34801561023257600080fd5b506102f56004803603604081101561024957600080fd5b81019060208101813564010000000081111561026457600080fd5b82018360208201111561027657600080fd5b8035906020019184602083028401116401000000008311171561029857600080fd5b9193909290916020810190356401000000008111156102b657600080fd5b8201836020820111156102c857600080fd5b803590602001918460208302840111640100000000831117156102ea57600080fd5b50909250905061066d565b005b34801561030357600080fd5b5061030c6109c6565b60408051918252519081900360200190f35b34801561032a57600080fd5b506103336109cc565b604080516001600160a01b039092168252519081900360200190f35b34801561035b57600080fd5b506103336109db565b34801561037057600080fd5b5061030c6109ea565b34801561038557600080fd5b5061038e6109f0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103ca5781810151838201526020016103b2565b505050509050019250505060405180910390f35b3480156103ea57600080fd5b506102f5610a52565b3480156103ff57600080fd5b5061030c610b73565b34801561041457600080fd5b506102f56004803603604081101561042b57600080fd5b506001600160a01b038135169060200135610b79565b34801561044d57600080fd5b5061030c610e66565b34801561046257600080fd5b50610212610e6c565b34801561047757600080fd5b50610333610e7c565b34801561048c57600080fd5b506102f5610e8b565b3480156104a157600080fd5b5061030c600480360360208110156104b857600080fd5b50356001600160a01b0316610eeb565b3480156104d457600080fd5b5061038e600480360360208110156104eb57600080fd5b5035610efe565b3480156104fe57600080fd5b50610333610f09565b34801561051357600080fd5b506102126004803603602081101561052a57600080fd5b50356001600160a01b0316610f18565b34801561054657600080fd5b5061030c610f36565b34801561055b57600080fd5b5061030c610f3c565b34801561057057600080fd5b506102f5610f42565b34801561058557600080fd5b5061030c610f4a565b34801561059a57600080fd5b50610333610fac565b3480156105af57600080fd5b50610212610fbb565b3480156105c457600080fd5b506102f5600480360360208110156105db57600080fd5b50356001600160a01b0316610fde565b3480156105f757600080fd5b5061030c61108a565b34801561060c57600080fd5b506102f56004803603602081101561062357600080fd5b5035611094565b34801561063657600080fd5b506102f56004803603602081101561064d57600080fd5b50356001600160a01b03166110cc565b603754600160a81b900460ff1681565b603754600160a81b900460ff16156106be576040805162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d1cc81c185d5cd959608a1b604482015290519081900360640190fd5b828114610712576040805162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d6174636800000000000000604482015290519081900360640190fd5b600080606061072082611149565b905060005b6034548110156108715760005b87811015610868576034828154811061074757fe5b6000918252602090912001546001600160a01b031689898381811061076857fe5b905060200201356001600160a01b03166001600160a01b0316141561086057600087878381811061079557fe5b9050602002013511156108605760006107ce603484815481106107b457fe5b6000918252602090912001546001600160a01b0316611358565b905060008484815181106107de57fe5b60200260200101519050670de0b6b3a76400008111156108035750670de0b6b3a76400005b61082b826012038a8a8681811061081657fe5b9050602002013561141290919063ffffffff16565b870196506108598183600a0a8b8b8781811061084357fe5b9050602002013561146e9092919063ffffffff16565b8601955050505b600101610732565b50600101610725565b50603b54831015801561088e5750603754600160a01b900460ff16155b1561089f5761089d600161149c565b505b60005b868110156109055760008888838181106108b857fe5b905060200201356001600160a01b031690506108fc33308989868181106108db57fe5b90506020020135846001600160a01b03166116f5909392919063ffffffff16565b506001016108a2565b50603c54604080516340c10f1960e01b81523360048201526024810185905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561095957600080fd5b505af115801561096d573d6000803e3d6000fd5b5050604080513381526020810186905281517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859450908190039091019150a1603a5483106109bd576109bd610f42565b50505050505050565b60385481565b60006109d6611755565b905090565b603e546001600160a01b031681565b60395481565b60606034805480602002602001604051908101604052809291908181526020018280548015610a4857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a2a575b5050505050905090565b603b54603c54604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610aa057600080fd5b505afa158015610ab4573d6000803e3d6000fd5b505050506040513d6020811015610aca57600080fd5b5051118015610ae35750603754600160a01b900460ff16155b15610af457610af2600061149c565b505b603c54604080516370a0823160e01b81523360048201529051610b71926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610b4057600080fd5b505afa158015610b54573d6000803e3d6000fd5b505050506040513d6020811015610b6a57600080fd5b505161177a565b565b60365490565b603754600160a81b900460ff1615610bca576040805162461bcd60e51b815260206004820152600f60248201526e11195c1bdcda5d1cc81c185d5cd959608a1b604482015290519081900360640190fd5b6001600160a01b03821660009081526033602052604090205460ff16610c30576040805162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604482015290519081900360640190fd5b60008111610c85576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b6037546000906001600160a01b03166319af6bf0610ca285611b70565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cee578181015183820152602001610cd6565b50505050905090810190601f168015610d1b5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610d3a57600080fd5b505af1158015610d4e573d6000803e3d6000fd5b505050506040513d6020811015610d6457600080fd5b505190506305f5e100811115610d7b57506305f5e1005b6000610d8684611358565b90506000610d9e84601284900363ffffffff61141216565b90506000610dc8610db685600a63ffffffff61141216565b8690600a86900a63ffffffff61146e16565b9050603b548210158015610de65750603754600160a01b900460ff16155b15610df757610df5600161149c565b505b85610e136001600160a01b03821633308963ffffffff6116f516565b603c54604080516340c10f1960e01b81523360048201526024810185905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561095957600080fd5b603b5481565b603754600160a01b900460ff1681565b603f546001600160a01b031681565b610e93611ca1565b6001600160a01b0316336001600160a01b031614610ee25760405162461bcd60e51b81526004018080602001828103825260308152602001806132af6030913960400191505060405180910390fd5b610b7133611cc6565b6000610ef682611d71565b90505b919050565b6060610ef682611f1e565b603d546001600160a01b031681565b6001600160a01b031660009081526033602052604090205460ff1690565b603a5481565b60345490565b610b716121ce565b603754600090600160a01b900460ff1615610f9e576040805162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015290519081900360640190fd5b610fa8600161149c565b5090565b6037546001600160a01b031681565b6000610fc5611755565b6001600160a01b0316336001600160a01b031614905090565b610fe6610fbb565b611037576040805162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015290519081900360640190fd5b611040816126ef565b806001600160a01b0316611052611755565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006109d6612713565b603b54811180156110af5750603754600160a01b900460ff16155b156110c0576110be600061149c565b505b6110c98161177a565b50565b6110d4610fbb565b611125576040805162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015290519081900360640190fd5b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b6060611153610f3c565b60405190808252806020026020018201604052801561117c578160200160208202803883390190505b506037549091506001600160a01b031660005b6034548110156113515760606111c5603483815481106111ab57fe5b6000918252602090912001546001600160a01b0316611b70565b905084156112cf576112b2600a846001600160a01b0316637bf0c215846040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122e578181015183820152602001611216565b50505050905090810190601f16801561125b5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561127a57600080fd5b505af115801561128e573d6000803e3d6000fd5b505050506040513d60208110156112a457600080fd5b50519063ffffffff61141216565b8483815181106112be57fe5b602002602001018181525050611348565b60405163019af6bf60e41b815260206004820181815283516024840152835161132f93600a936001600160a01b038916936319af6bf09388939192839260440191908501908083836000831561122e578181015183820152602001611216565b84838151811061133b57fe5b6020026020010181815250505b5060010161118f565b5050919050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561139457600080fd5b505afa1580156113a8573d6000803e3d6000fd5b505050506040513d60208110156113be57600080fd5b505160ff169050600481108015906113d7575060128111155b610ef65760405162461bcd60e51b815260040180806020018281038252602981526020018061323b6029913960400191505060405180910390fd5b6000808260000b131561143d5761143683600084900b600a0a63ffffffff61272b16565b9250611465565b60008260000b121561146557611462836000848103900b600a0a63ffffffff61278b16565b92505b50815b92915050565b600080611481858563ffffffff61272b16565b9050611493818463ffffffff61278b16565b95945050505050565b603754600090600160a01b900460ff16156114f0576040805162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015290519081900360640190fd5b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153e57600080fd5b505afa158015611552573d6000803e3d6000fd5b505050506040513d602081101561156857600080fd5b505161157657506000610ef9565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d60208110156115e557600080fd5b5051905060006115f3612713565b90508181111561135157603c54604080516339a7919f60e01b81526004810184905290516001600160a01b03909216916339a7919f916024808201926020929091908290030181600087803b15801561164b57600080fd5b505af115801561165f573d6000803e3d6000fd5b505050506040513d602081101561167557600080fd5b5050603d546001600160a01b03161561135157603d5460408051631dcf530f60e01b8152861515600482015290516001600160a01b0390921691631dcf530f9160248082019260009290919082900301818387803b1580156116d657600080fd5b505af11580156116ea573d6000803e3d6000fd5b505050505050919050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261174f9085906127cd565b50505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b600081116117cf576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b60606117da82611f1e565b905060005b603454811015611a99578181815181106117f557fe5b60200260200101516000141561180a57611a91565b60006034828154811061181957fe5b60009182526020909120015483516001600160a01b03909116915083908390811061184057fe5b6020026020010151816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561189e57600080fd5b505afa1580156118b2573d6000803e3d6000fd5b505050506040513d60208110156118c857600080fd5b50511061190557611900338484815181106118df57fe5b6020026020010151836001600160a01b03166129859092919063ffffffff16565b611a8f565b600061194e6034848154811061191757fe5b9060005260206000200160009054906101000a90046001600160a01b031685858151811061194157fe5b60200260200101516129dc565b90506001600160a01b03811615611a4e576000819050806001600160a01b031663d9caed12336034878154811061198157fe5b9060005260206000200160009054906101000a90046001600160a01b03168888815181106119ab57fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d6020811015611a4557600080fd5b50611a8d915050565b6040805162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015290519081900360640190fd5b505b505b6001016117df565b50603c5460408051632770a7eb60e21b81523360048201526024810185905290516001600160a01b0390921691639dc29fac9160448082019260009290919082900301818387803b158015611aed57600080fd5b505af1158015611b01573d6000803e3d6000fd5b50505050603b5482118015611b205750603754600160a01b900460ff16155b15611b3157611b2f600161149c565b505b604080513381526020810184905281517f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6929181900390910190a15050565b606080826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611bac57600080fd5b505afa158015611bc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611be957600080fd5b8101908080516040519392919084640100000000821115611c0957600080fd5b908301906020820185811115611c1e57600080fd5b8251640100000000811182820188101715611c3857600080fd5b82525081516020918201929091019080838360005b83811015611c65578181015183820152602001611c4d565b50505050905090810190601f168015611c925780820380516001836020036101000a031916815260200191505b50604052509195945050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b038116611d21576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b0316611d33611755565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36110c981612b83565b604080516370a0823160e01b8152306004820152905160009183916001600160a01b038316916370a08231916024808301926020929190829003018186803b158015611dbc57600080fd5b505afa158015611dd0573d6000803e3d6000fd5b505050506040513d6020811015611de657600080fd5b5051915060005b60365481101561135157600060368281548110611e0657fe5b600091825260209182902001546040805163551c457b60e11b81526001600160a01b0389811660048301529151919092169350839263aa388af69260248082019391829003018186803b158015611e5c57600080fd5b505afa158015611e70573d6000803e3d6000fd5b505050506040513d6020811015611e8657600080fd5b505115611f1557806001600160a01b0316635f515226866040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611ee357600080fd5b505afa158015611ef7573d6000803e3d6000fd5b505050506040513d6020811015611f0d57600080fd5b505193909301925b50600101611ded565b60606000611f2a610f3c565b90506060611f386001611149565b9050606082604051908082528060200260200182016040528015611f66578160200160208202803883390190505b509050606083604051908082528060200260200182016040528015611f95578160200160208202803883390190505b506040805186815260208088028201019091529091506000908190868015611fc7578160200160208202803883390190505b5060385490975015612012576000611ffc612710611ff06038548c61272b90919063ffffffff16565b9063ffffffff61278b16565b905061200e898263ffffffff612ba716565b9850505b60005b6034548110156120b457600061204b6034838154811061203157fe5b6000918252602090912001546001600160a01b0316611d71565b9050600061205f603484815481106107b457fe5b90508187848151811061206e57fe5b6020026020010181815250508086848151811061208757fe5b60209081029190910101526120a682601283900363ffffffff61141216565b909401935050600101612015565b5060005b6034548110156121565760008682815181106120d057fe5b60200260200101519050670de0b6b3a76400008110156120f55750670de0b6b3a76400005b600061214785611ff08461213b8a888151811061210e57fe5b60200260200101516012038c898151811061212557fe5b602002602001015161141290919063ffffffff16565b9063ffffffff61272b16565b939093019250506001016120b8565b506000612169898363ffffffff612be916565b905060005b6034548110156121c1576121a284611ff08489858151811061218c57fe5b602002602001015161272b90919063ffffffff16565b8982815181106121ae57fe5b602090810291909101015260010161216e565b5050505050505050919050565b60006121d8612c1e565b9050806121e55750610b71565b60006121ef612d09565b905081810160008261221e5760395461221790670de0b6b3a76400009063ffffffff612ba716565b905061226a565b61223784611ff08460395461272b90919063ffffffff16565b905080670de0b6b3a7640000111561226157612217670de0b6b3a76400008263ffffffff612ba716565b50505050610b71565b806122785750505050610b71565b60005b6034548110156124165760006034828154811061229457fe5b6000918252602080832090910154604080516370a0823160e01b815230600482015290516001600160a01b03909216945084926370a0823192602480840193829003018186803b1580156122e757600080fd5b505afa1580156122fb573d6000803e3d6000fd5b505050506040513d602081101561231157600080fd5b505190508061232157505061240e565b6000612333828663ffffffff612d4d16565b905060006123418483612d62565b90506001600160a01b0381161580159061235b5750600082115b15612409578061237b6001600160a01b038616828563ffffffff61298516565b806001600160a01b03166347e7ef2486856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156123db57600080fd5b505af11580156123ef573d6000803e3d6000fd5b505050506040513d602081101561240557600080fd5b5050505b505050505b60010161227b565b5060005b6036548110156126e85760006036828154811061243357fe5b60009182526020808320909101546040805163125f9e3360e01b815290516001600160a01b039092169450849263125f9e3392600480840193829003018186803b15801561248057600080fd5b505afa158015612494573d6000803e3d6000fd5b505050506040513d60208110156124aa57600080fd5b505190506001600160a01b038116156126de576000826001600160a01b0316635653b4146040518163ffffffff1660e01b815260040160206040518083038186803b1580156124f857600080fd5b505afa15801561250c573d6000803e3d6000fd5b505050506040513d602081101561252257600080fd5b50519050806125b157306001600160a01b0316630e5c011e6036868154811061254757fe5b6000918252602082200154604080516001600160e01b031960e086901b1681526001600160a01b039092166004830152516024808301939282900301818387803b15801561259457600080fd5b505af11580156125a8573d6000803e3d6000fd5b505050506126dc565b60008290506000816001600160a01b03166370a08231603688815481106125d457fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b15801561262257600080fd5b505afa158015612636573d6000803e3d6000fd5b505050506040513d602081101561264c57600080fd5b505190508281106126d957306001600160a01b0316630e5c011e6036888154811061267357fe5b6000918252602082200154604080516001600160e01b031960e086901b1681526001600160a01b039092166004830152516024808301939282900301818387803b1580156126c057600080fd5b505af11580156126d4573d6000803e3d6000fd5b505050505b50505b505b505060010161241a565b5050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b600061271d612d09565b612725612c1e565b01905090565b60008261273a57506000611468565b8282028284828161274757fe5b04146127845760405162461bcd60e51b81526004018080602001828103825260218152602001806132646021913960400191505060405180910390fd5b9392505050565b600061278483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612e73565b6127df826001600160a01b0316612f15565b612830576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b6020831061286e5780518252601f19909201916020918201910161284f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146128d0576040519150601f19603f3d011682016040523d82523d6000602084013e6128d5565b606091505b50915091508161292c576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561174f5780806020019051602081101561294857600080fd5b505161174f5760405162461bcd60e51b815260040180806020018281038252602a815260200180613285602a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526129d79084906127cd565b505050565b6000600019815b603654811015612b7b576000603682815481106129fc57fe5b600091825260209182902001546040805163551c457b60e11b81526001600160a01b038a811660048301529151919092169350839263aa388af69260248082019391829003018186803b158015612a5257600080fd5b505afa158015612a66573d6000803e3d6000fd5b505050506040513d6020811015612a7c57600080fd5b50518015612b0a575084816001600160a01b0316635f515226886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015612adc57600080fd5b505afa158015612af0573d6000803e3d6000fd5b505050506040513d6020811015612b0657600080fd5b5051115b15612b72576000612b3f60368481548110612b2157fe5b60009182526020822001546001600160a01b03169089908990612f4e565b9050838111612b705780935060368381548110612b5857fe5b6000918252602090912001546001600160a01b031694505b505b506001016129e3565b505092915050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b600061278483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613004565b600080612c0484670de0b6b3a764000063ffffffff61272b16565b9050612c16818463ffffffff61278b16565b949350505050565b6000805b603454811015610fa857600060348281548110612c3b57fe5b6000918252602082200154603480546001600160a01b039092169350612c6591859081106107b457fe5b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015612cb157600080fd5b505afa158015612cc5573d6000803e3d6000fd5b505050506040513d6020811015612cdb57600080fd5b505190508015612cfe57612cf981601284900363ffffffff61141216565b850194505b505050600101612c22565b6000805b603654811015610fa857612d4160368281548110612d2757fe5b6000918252602090912001546001600160a01b031661305e565b90910190600101612d0d565b60006127848383670de0b6b3a764000061146e565b600080805b603654811015612b7b57600060368281548110612d8057fe5b600091825260209182902001546040805163551c457b60e11b81526001600160a01b038a811660048301529151919092169350839263aa388af69260248082019391829003018186803b158015612dd657600080fd5b505afa158015612dea573d6000803e3d6000fd5b505050506040513d6020811015612e0057600080fd5b505115612e6a576000612e3760368481548110612e1957fe5b6000918252602090912001546001600160a01b031688886001612f4e565b9050838110612e685780935060368381548110612e5057fe5b6000918252602090912001546001600160a01b031694505b505b50600101612d67565b60008183612eff5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ec4578181015183820152602001612eac565b50505050905090810190601f168015612ef15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612f0b57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590612c16575050151592915050565b6001600160a01b03841660009081526035602052604081206001015480612f79576000915050612c16565b6000612f8486611358565b9050612ff88285612fc057612fbb612fa688601286900363ffffffff61141216565b612faf8b61305e565b9063ffffffff612ba716565b612fec565b612fec612fd788601286900363ffffffff61141216565b612fe08b61305e565b9063ffffffff6131e016565b9063ffffffff612be916565b19979650505050505050565b600081848411156130565760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612ec4578181015183820152602001612eac565b505050900390565b600081815b60345481101561135157600061307f603483815481106107b457fe5b9050826001600160a01b031663aa388af66034848154811061309d57fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d602081101561311557600080fd5b5051156131d7576000836001600160a01b0316635f5152266034858154811061313a57fe5b60009182526020918290200154604080516001600160e01b031960e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b15801561318857600080fd5b505afa15801561319c573d6000803e3d6000fd5b505050506040513d60208110156131b257600080fd5b5051905080156131d5576131d081601284900363ffffffff61141216565b850194505b505b50600101613063565b600082820183811015612784576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe546f6b656e206d75737420686176652073756666696369656e7420646563696d616c20706c61636573536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a723158202c71f94d834ebba418b1ce11b67ec5816b522e3e59aa0527923f5caef3f14cd964736f6c634300050b0032",
  "devdoc": {
    "methods": {
      "allocate()": {
        "details": "Allocate unallocated funds on Vault to strategies.*"
      },
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of asset"
        },
        "return": "uint256 Balance of asset in decimals of asset"
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "getAllAssets()": {
        "details": "Return all asset addresses in order"
      },
      "getAssetCount()": {
        "details": "Return the number of assets suppported by the Vault."
      },
      "getStrategyCount()": {
        "details": "Return the number of strategies active on the Vault."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "mint(address,uint256)": {
        "details": "Deposit a supported asset and mint OUSD.",
        "params": {
          "_amount": "Amount of the asset being deposited",
          "_asset": "Address of the asset being deposited"
        }
      },
      "mintMultiple(address[],uint256[])": {
        "details": "Mint for multiple assets in the same call.",
        "params": {
          "_amounts": "Amount of each asset at the same index in the _assets                to deposit.",
          "_assets": "Addresses of assets being deposited"
        }
      },
      "rebase()": {
        "details": "Calculate the total value of assets held by the Vault and all        strategies and update the supply of oUSD"
      },
      "redeem(uint256)": {
        "details": "Withdraw a supported asset and burn OUSD.",
        "params": {
          "_amount": "Amount of OUSD to burn"
        }
      },
      "setAdminImpl(address)": {
        "details": "set the implementation for the admin, this needs to be in a base class else we cannot set it",
        "params": {
          "newImpl": "address pf the implementation"
        }
      },
      "totalValue()": {
        "details": "Determine the total value of assets held by the vault and its        strategies.",
        "return": "uint256 value Total value in USD (1e18)"
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "allocate()": {
        "notice": "Allocate unallocated funds on Vault to strategies."
      },
      "calculateRedeemOutputs(uint256)": {
        "notice": "Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned"
      },
      "checkBalance(address)": {
        "notice": "Get the balance of an asset held in Vault and all strategies."
      },
      "redeemAll()": {
        "notice": "Withdraw a supported asset and burn all OUSD."
      }
    }
  }
}
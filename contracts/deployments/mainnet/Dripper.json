{
  "address": "0xc7068A35F9F5b77471BcFfBdf82D9531D52AFCdc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "availableFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectAndRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drip",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "lastCollect",
          "type": "uint64"
        },
        {
          "internalType": "uint192",
          "name": "perBlock",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationSeconds",
          "type": "uint256"
        }
      ],
      "name": "setDripDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe62ecf5a79d8d32691a99c14c7840dab3c882a188004e1f9f73b09e56b63381d",
  "receipt": {
    "to": null,
    "from": "0x69e078EBc4631E1947F0c38Ef0357De7ED064644",
    "contractAddress": "0xc7068A35F9F5b77471BcFfBdf82D9531D52AFCdc",
    "transactionIndex": 36,
    "gasUsed": "814706",
    "logsBloom": "0x
    "blockHash": "0x0e9e38adee2be813a0540f4614d2998f6fc5a5a0f334d1f73079f606732ab444",
    "transactionHash": "0xe62ecf5a79d8d32691a99c14c7840dab3c882a188004e1f9f73b09e56b63381d",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 14250265,
        "transactionHash": "0xe62ecf5a79d8d32691a99c14c7840dab3c882a188004e1f9f73b09e56b63381d",
        "address": "0xc7068A35F9F5b77471BcFfBdf82D9531D52AFCdc",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069e078ebc4631e1947f0c38ef0357de7ed064644"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x0e9e38adee2be813a0540f4614d2998f6fc5a5a0f334d1f73079f606732ab444"
      }
    ],
    "blockNumber": 14250265,
    "cumulativeGasUsed": "2494318",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE75D77B1865Ae93c7eaa3040B038D7aA7BC02F70",
    "0xdAC17F958D2ee523a2206206994597C13D831ec7"
  ],
  "solcInputHash": "e7f64fe30bce5b01e9b7594fafca5759",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAndRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"lastCollect\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"perBlock\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationSeconds\",\"type\":\"uint256\"}],\"name\":\"setDripDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableFunds()\":{\"returns\":{\"_0\":\"The amount that would be sent if a collect was called\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"setDripDuration(uint256)\":{\"details\":\"Change the drip duration. Governor only.\",\"params\":{\"_durationSeconds\":\"the number of seconds to drip out the entire  balance over if no collects were called during that time.\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer out ERC20 tokens held by the contract. Governor only.\",\"params\":{\"_amount\":\"amount to transfer\",\"_asset\":\"ERC20 token address\"}}},\"title\":\"OUSD Dripper The dripper contract smooths out the yield from point-in-time yield events and spreads the yield out over a configurable time period. This ensures a continuous per block yield to makes users happy as their next rebase amount is always moving up. Also, this makes historical day to day yields smooth, rather than going from a near zero day, to a large APY day, then back to a near zero day again. Design notes - USDT has a smaller resolution than the number of seconds in a week, which can make per block payouts have a rounding error. However the total effect is not large - cents per day, and this money is not lost, just distributed in the future. While we could use a higher decimal precision for the drip perBlock, we chose simpler code. - By calculating the changing drip rates on collects only, harvests and yield events don't have to call anything on this contract or pay any extra gas. Collect() is already be paying for a single write, since it has to reset the lastCollect time. - By having a collectAndRebase method, and having our external systems call that, the OUSD vault does not need any changes, not even to know the address of the dripper. - A rejected design was to retro-calculate the drip rate on each collect, based on the balance at the time of the collect. While this would have required less state, and would also have made the contract respond more quickly to new income, it would break the predictability that is this contract's entire purpose. If we did this, the amount of fundsAvailable() would make sharp increases when funds were deposited. - When the dripper recalculates the rate, it targets spending the balance over the duration. This means that every time that collect is is called, if no new funds have been deposited the duration is being pushed back and the rate decreases. This is expected, and ends up following a smoother but longer curve the more collect() is called without incoming yield.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collect()\":{\"notice\":\"Collect all dripped funds and send to vault.  Recalculate new drip rate.\"},\"collectAndRebase()\":{\"notice\":\"Collect all dripped funds, send to vault, recalculate new drip  rate, and rebase OUSD.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/harvest/Dripper.sol\":\"Dripper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x29d258134253bdaeeea64c17baaf6108ff50aec65ceddb7216ef3a948a88808c\",\"license\":\"agpl-3.0\"},\"contracts/harvest/Dripper.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\n/**\\n * @title OUSD Dripper\\n *\\n * The dripper contract smooths out the yield from point-in-time yield events\\n * and spreads the yield out over a configurable time period. This ensures a\\n * continuous per block yield to makes users happy as their next rebase\\n * amount is always moving up. Also, this makes historical day to day yields\\n * smooth, rather than going from a near zero day, to a large APY day, then\\n * back to a near zero day again.\\n *\\n *\\n * Design notes\\n * - USDT has a smaller resolution than the number of seconds\\n * in a week, which can make per block payouts have a rounding error. However\\n * the total effect is not large - cents per day, and this money is\\n * not lost, just distributed in the future. While we could use a higher\\n * decimal precision for the drip perBlock, we chose simpler code.\\n * - By calculating the changing drip rates on collects only, harvests and yield\\n * events don't have to call anything on this contract or pay any extra gas.\\n * Collect() is already be paying for a single write, since it has to reset\\n * the lastCollect time.\\n * - By having a collectAndRebase method, and having our external systems call\\n * that, the OUSD vault does not need any changes, not even to know the address\\n * of the dripper.\\n * - A rejected design was to retro-calculate the drip rate on each collect,\\n * based on the balance at the time of the collect. While this would have\\n * required less state, and would also have made the contract respond more quickly\\n * to new income, it would break the predictability that is this contract's entire\\n * purpose. If we did this, the amount of fundsAvailable() would make sharp increases\\n * when funds were deposited.\\n * - When the dripper recalculates the rate, it targets spending the balance over\\n * the duration. This means that every time that collect is is called, if no\\n * new funds have been deposited the duration is being pushed back and the\\n * rate decreases. This is expected, and ends up following a smoother but\\n * longer curve the more collect() is called without incoming yield.\\n *\\n */\\n\\ncontract Dripper is Governable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Drip {\\n        uint64 lastCollect; // overflows 262 billion years after the sun dies\\n        uint192 perBlock; // drip rate per block\\n    }\\n\\n    address immutable vault; // OUSD vault\\n    address immutable token; // token to drip out\\n    uint256 public dripDuration; // in seconds\\n    Drip public drip; // active drip parameters\\n\\n    constructor(address _vault, address _token) {\\n        vault = _vault;\\n        token = _token;\\n    }\\n\\n    /// @notice How much funds have dripped out already and are currently\\n    //   available to be sent to the vault.\\n    /// @return The amount that would be sent if a collect was called\\n    function availableFunds() external view returns (uint256) {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        return _availableFunds(balance, drip);\\n    }\\n\\n    /// @notice Collect all dripped funds and send to vault.\\n    ///  Recalculate new drip rate.\\n    function collect() external {\\n        _collect();\\n    }\\n\\n    /// @notice Collect all dripped funds, send to vault, recalculate new drip\\n    ///  rate, and rebase OUSD.\\n    function collectAndRebase() external {\\n        _collect();\\n        IVault(vault).rebase();\\n    }\\n\\n    /// @dev Change the drip duration. Governor only.\\n    /// @param _durationSeconds the number of seconds to drip out the entire\\n    ///  balance over if no collects were called during that time.\\n    function setDripDuration(uint256 _durationSeconds) external onlyGovernor {\\n        require(_durationSeconds > 0, \\\"duration must be non-zero\\\");\\n        dripDuration = uint192(_durationSeconds);\\n        Dripper(this).collect(); // duration change take immediate effect\\n    }\\n\\n    /// @dev Transfer out ERC20 tokens held by the contract. Governor only.\\n    /// @param _asset ERC20 token address\\n    /// @param _amount amount to transfer\\n    function transferToken(address _asset, uint256 _amount)\\n        external\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /// @dev Calculate available funds by taking the lower of either the\\n    ///  currently dripped out funds or the balance available.\\n    ///  Uses passed in parameters to calculate with for gas savings.\\n    /// @param _balance current balance in contract\\n    /// @param _drip current drip parameters\\n    function _availableFunds(uint256 _balance, Drip memory _drip)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 elapsed = block.timestamp - _drip.lastCollect;\\n        uint256 allowed = (elapsed * _drip.perBlock);\\n        return (allowed > _balance) ? _balance : allowed;\\n    }\\n\\n    /// @dev Sends the currently dripped funds to be vault, and sets\\n    ///  the new drip rate based on the new balance.\\n    function _collect() internal {\\n        // Calculate send\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        uint256 amountToSend = _availableFunds(balance, drip);\\n        uint256 remaining = balance - amountToSend;\\n        // Calculate new drip perBlock\\n        //   Gas savings by setting entire struct at one time\\n        drip = Drip({\\n            perBlock: uint192(remaining / dripDuration),\\n            lastCollect: uint64(block.timestamp)\\n        });\\n        // Send funds\\n        IERC20(token).safeTransfer(vault, amountToSend);\\n    }\\n}\\n\",\"keccak256\":\"0xeb4baf0e50137150570dc478e9fcd493f64c66cec26e32aa81c4e5a3d0b4cbbb\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function supportAsset(address _asset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUSDMint(address asset) external view returns (uint256);\\n\\n    function priceUSDRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9ff1d8c8ae2b61bf5a01d30394cde2c2c544da9a5e94a7b0a681d4155d0e7852\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610e9f380380610e9f83398101604081905261002f916100c6565b61004533600080516020610e7f83398151915255565b600080516020610e7f833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36001600160601b0319606092831b8116608052911b1660a0526100f9565b80516001600160a01b03811681146100c157600080fd5b919050565b600080604083850312156100d957600080fd5b6100e2836100aa565b91506100f0602084016100aa565b90509250929050565b60805160601c60a05160601c610d466101396000396000818161031101528181610753015261088801526000818161047e01526108aa0152610d466000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063737962971161007157806373796297146101195780639f678cca14610121578063bb7a632e1461016f578063c7af335214610178578063d38bfff414610190578063e5225381146101a357600080fd5b80630493a0fa146100ae5780630c340a24146100c35780631072cbea146100e857806346fcff4c146100fb5780635d36b19014610111575b600080fd5b6100c16100bc366004610b9e565b6101ab565b005b6100cb61028e565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c16100f6366004610b52565b6102ab565b6101036102ef565b6040519081526020016100df565b6100c16103ce565b6100c1610474565b6001546101479067ffffffffffffffff811690600160401b90046001600160c01b031682565b6040805167ffffffffffffffff90931683526001600160c01b039091166020830152016100df565b61010360005481565b6101806104f1565b60405190151581526020016100df565b6100c161019e366004610b37565b610522565b6100c16105c6565b6101b36104f1565b6101d85760405162461bcd60e51b81526004016101cf90610c1f565b60405180910390fd5b600081116102285760405162461bcd60e51b815260206004820152601960248201527f6475726174696f6e206d757374206265206e6f6e2d7a65726f0000000000000060448201526064016101cf565b806001600160c01b0316600081905550306001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b5050505050565b60006102a6600080516020610cf18339815191525490565b905090565b6102b36104f1565b6102cf5760405162461bcd60e51b81526004016101cf90610c1f565b6102eb6102da61028e565b6001600160a01b03841690836105ce565b5050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561035357600080fd5b505afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b9190610bb7565b6040805180820190915260015467ffffffffffffffff81168252600160401b90046001600160c01b031660208201529091506103c8908290610625565b91505090565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146104695760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016101cf565b61047233610677565b565b61047c61073b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b50505050565b6000610509600080516020610cf18339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61052a6104f1565b6105465760405162461bcd60e51b81526004016101cf90610c1f565b61056e817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661058e600080516020610cf18339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b61047261073b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106209084906108cf565b505050565b805160009081906106409067ffffffffffffffff1642610c97565b9050600083602001516001600160c01b03168261065d9190610c78565b905084811161066c578061066e565b845b95945050505050565b6001600160a01b0381166106cd5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016101cf565b806001600160a01b03166106ed600080516020610cf18339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361073881600080516020610cf183398151915255565b50565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561079d57600080fd5b505afa1580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190610bb7565b6040805180820190915260015467ffffffffffffffff81168252600160401b90046001600160c01b03166020820152909150600090610815908390610625565b905060006108238284610c97565b905060405180604001604052804267ffffffffffffffff1681526020016000548361084e9190610c56565b6001600160c01b03908116909152815160209092015116600160401b0267ffffffffffffffff909116176001556106206001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846105ce565b6000610924826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109a19092919063ffffffff16565b80519091501561062057808060200190518101906109429190610b7c565b6106205760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101cf565b60606109b084846000856109ba565b90505b9392505050565b606082471015610a1b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101cf565b843b610a695760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101cf565b600080866001600160a01b03168587604051610a859190610bd0565b60006040518083038185875af1925050503d8060008114610ac2576040519150601f19603f3d011682016040523d82523d6000602084013e610ac7565b606091505b5091509150610ad7828286610ae2565b979650505050505050565b60608315610af15750816109b3565b825115610b015782518084602001fd5b8160405162461bcd60e51b81526004016101cf9190610bec565b80356001600160a01b0381168114610b3257600080fd5b919050565b600060208284031215610b4957600080fd5b6109b382610b1b565b60008060408385031215610b6557600080fd5b610b6e83610b1b565b946020939093013593505050565b600060208284031215610b8e57600080fd5b815180151581146109b357600080fd5b600060208284031215610bb057600080fd5b5035919050565b600060208284031215610bc957600080fd5b5051919050565b60008251610be2818460208701610cae565b9190910192915050565b6020815260008251806020840152610c0b816040850160208701610cae565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b600082610c7357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c9257610c92610cda565b500290565b600082821015610ca957610ca9610cda565b500390565b60005b83811015610cc9578181015183820152602001610cb1565b838111156104eb5750506000910152565b634e487b7160e01b600052601160045260246000fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122010f5dbf52053210a38bfc040ba9b6de7059d0a06224fb21050f632827853efd864736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063737962971161007157806373796297146101195780639f678cca14610121578063bb7a632e1461016f578063c7af335214610178578063d38bfff414610190578063e5225381146101a357600080fd5b80630493a0fa146100ae5780630c340a24146100c35780631072cbea146100e857806346fcff4c146100fb5780635d36b19014610111575b600080fd5b6100c16100bc366004610b9e565b6101ab565b005b6100cb61028e565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c16100f6366004610b52565b6102ab565b6101036102ef565b6040519081526020016100df565b6100c16103ce565b6100c1610474565b6001546101479067ffffffffffffffff811690600160401b90046001600160c01b031682565b6040805167ffffffffffffffff90931683526001600160c01b039091166020830152016100df565b61010360005481565b6101806104f1565b60405190151581526020016100df565b6100c161019e366004610b37565b610522565b6100c16105c6565b6101b36104f1565b6101d85760405162461bcd60e51b81526004016101cf90610c1f565b60405180910390fd5b600081116102285760405162461bcd60e51b815260206004820152601960248201527f6475726174696f6e206d757374206265206e6f6e2d7a65726f0000000000000060448201526064016101cf565b806001600160c01b0316600081905550306001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561027357600080fd5b505af1158015610287573d6000803e3d6000fd5b5050505050565b60006102a6600080516020610cf18339815191525490565b905090565b6102b36104f1565b6102cf5760405162461bcd60e51b81526004016101cf90610c1f565b6102eb6102da61028e565b6001600160a01b03841690836105ce565b5050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561035357600080fd5b505afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b9190610bb7565b6040805180820190915260015467ffffffffffffffff81168252600160401b90046001600160c01b031660208201529091506103c8908290610625565b91505090565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146104695760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016101cf565b61047233610677565b565b61047c61073b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b50505050565b6000610509600080516020610cf18339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61052a6104f1565b6105465760405162461bcd60e51b81526004016101cf90610c1f565b61056e817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661058e600080516020610cf18339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b61047261073b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106209084906108cf565b505050565b805160009081906106409067ffffffffffffffff1642610c97565b9050600083602001516001600160c01b03168261065d9190610c78565b905084811161066c578061066e565b845b95945050505050565b6001600160a01b0381166106cd5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016101cf565b806001600160a01b03166106ed600080516020610cf18339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361073881600080516020610cf183398151915255565b50565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561079d57600080fd5b505afa1580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190610bb7565b6040805180820190915260015467ffffffffffffffff81168252600160401b90046001600160c01b03166020820152909150600090610815908390610625565b905060006108238284610c97565b905060405180604001604052804267ffffffffffffffff1681526020016000548361084e9190610c56565b6001600160c01b03908116909152815160209092015116600160401b0267ffffffffffffffff909116176001556106206001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846105ce565b6000610924826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109a19092919063ffffffff16565b80519091501561062057808060200190518101906109429190610b7c565b6106205760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101cf565b60606109b084846000856109ba565b90505b9392505050565b606082471015610a1b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101cf565b843b610a695760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101cf565b600080866001600160a01b03168587604051610a859190610bd0565b60006040518083038185875af1925050503d8060008114610ac2576040519150601f19603f3d011682016040523d82523d6000602084013e610ac7565b606091505b5091509150610ad7828286610ae2565b979650505050505050565b60608315610af15750816109b3565b825115610b015782518084602001fd5b8160405162461bcd60e51b81526004016101cf9190610bec565b80356001600160a01b0381168114610b3257600080fd5b919050565b600060208284031215610b4957600080fd5b6109b382610b1b565b60008060408385031215610b6557600080fd5b610b6e83610b1b565b946020939093013593505050565b600060208284031215610b8e57600080fd5b815180151581146109b357600080fd5b600060208284031215610bb057600080fd5b5035919050565b600060208284031215610bc957600080fd5b5051919050565b60008251610be2818460208701610cae565b9190910192915050565b6020815260008251806020840152610c0b816040850160208701610cae565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b600082610c7357634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c9257610c92610cda565b500290565b600082821015610ca957610ca9610cda565b500390565b60005b83811015610cc9578181015183820152602001610cb1565b838111156104eb5750506000910152565b634e487b7160e01b600052601160045260246000fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122010f5dbf52053210a38bfc040ba9b6de7059d0a06224fb21050f632827853efd864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableFunds()": {
        "returns": {
          "_0": "The amount that would be sent if a collect was called"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "setDripDuration(uint256)": {
        "details": "Change the drip duration. Governor only.",
        "params": {
          "_durationSeconds": "the number of seconds to drip out the entire  balance over if no collects were called during that time."
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer out ERC20 tokens held by the contract. Governor only.",
        "params": {
          "_amount": "amount to transfer",
          "_asset": "ERC20 token address"
        }
      }
    },
    "title": "OUSD Dripper The dripper contract smooths out the yield from point-in-time yield events and spreads the yield out over a configurable time period. This ensures a continuous per block yield to makes users happy as their next rebase amount is always moving up. Also, this makes historical day to day yields smooth, rather than going from a near zero day, to a large APY day, then back to a near zero day again. Design notes - USDT has a smaller resolution than the number of seconds in a week, which can make per block payouts have a rounding error. However the total effect is not large - cents per day, and this money is not lost, just distributed in the future. While we could use a higher decimal precision for the drip perBlock, we chose simpler code. - By calculating the changing drip rates on collects only, harvests and yield events don't have to call anything on this contract or pay any extra gas. Collect() is already be paying for a single write, since it has to reset the lastCollect time. - By having a collectAndRebase method, and having our external systems call that, the OUSD vault does not need any changes, not even to know the address of the dripper. - A rejected design was to retro-calculate the drip rate on each collect, based on the balance at the time of the collect. While this would have required less state, and would also have made the contract respond more quickly to new income, it would break the predictability that is this contract's entire purpose. If we did this, the amount of fundsAvailable() would make sharp increases when funds were deposited. - When the dripper recalculates the rate, it targets spending the balance over the duration. This means that every time that collect is is called, if no new funds have been deposited the duration is being pushed back and the rate decreases. This is expected, and ends up following a smoother but longer curve the more collect() is called without incoming yield.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collect()": {
        "notice": "Collect all dripped funds and send to vault.  Recalculate new drip rate."
      },
      "collectAndRebase()": {
        "notice": "Collect all dripped funds, send to vault, recalculate new drip  rate, and rebase OUSD."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4209,
        "contract": "contracts/harvest/Dripper.sol:Dripper",
        "label": "dripDuration",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4212,
        "contract": "contracts/harvest/Dripper.sol:Dripper",
        "label": "drip",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Drip)4203_storage"
      }
    ],
    "types": {
      "t_struct(Drip)4203_storage": {
        "encoding": "inplace",
        "label": "struct Dripper.Drip",
        "members": [
          {
            "astId": 4200,
            "contract": "contracts/harvest/Dripper.sol:Dripper",
            "label": "lastCollect",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4202,
            "contract": "contracts/harvest/Dripper.sol:Dripper",
            "label": "perBlock",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
{
  "address": "0x84cb50CA45279397CD03Fb94232D52078790F8e6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rootHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofDepth",
          "type": "uint256"
        }
      ],
      "name": "NewAirDropRootHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "durations",
          "type": "uint256[]"
        }
      ],
      "name": "NewDurations",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        }
      ],
      "name": "NewRates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "yes",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numStakes",
          "type": "uint256"
        }
      ],
      "name": "StakesTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "airDroppedStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        }
      ],
      "name": "airDroppedStakeClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "dropRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "durationRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "durations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDurations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAllStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint240",
              "name": "rate",
              "type": "uint240"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "stakeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct SingleAssetStaking.Stake[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_durations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rates",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_stakeType",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_rootHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_proofDepth",
          "type": "uint256"
        }
      ],
      "name": "setAirDropRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_durations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rates",
          "type": "uint256[]"
        }
      ],
      "name": "setDurationRates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "setTransferAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "stakeWithSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalCurrentHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalExpectedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_frmAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstAccount",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "transferStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint240",
          "name": "rate",
          "type": "uint240"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ba51872f5bbcfebd7efc92b86a33ccd63c3f45979a3f1442028ddbdfe5db087",
  "receipt": {
    "to": null,
    "from": "0x71F78361537A6f7B6818e7A760c8bC0146D93f50",
    "contractAddress": "0x84cb50CA45279397CD03Fb94232D52078790F8e6",
    "transactionIndex": 100,
    "gasUsed": "2511869",
    "logsBloom": "0x
    "blockHash": "0x5a4881d44ddc82ac387b55a3ff1a1ef98efe50c675a4078d5ce2a4bda536c54c",
    "transactionHash": "0x9ba51872f5bbcfebd7efc92b86a33ccd63c3f45979a3f1442028ddbdfe5db087",
    "logs": [
      {
        "transactionIndex": 100,
        "blockNumber": 13369437,
        "transactionHash": "0x9ba51872f5bbcfebd7efc92b86a33ccd63c3f45979a3f1442028ddbdfe5db087",
        "address": "0x84cb50CA45279397CD03Fb94232D52078790F8e6",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071f78361537a6f7b6818e7a760c8bc0146d93f50"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x5a4881d44ddc82ac387b55a3ff1a1ef98efe50c675a4078d5ce2a4bda536c54c"
      }
    ],
    "blockNumber": 13369437,
    "cumulativeGasUsed": "7145299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ccb567132a247a63c1847ffd0d9bdf70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofDepth\",\"type\":\"uint256\"}],\"name\":\"NewAirDropRootHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"durations\",\"type\":\"uint256[]\"}],\"name\":\"NewDurations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"name\":\"NewRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numStakes\",\"type\":\"uint256\"}],\"name\":\"StakesTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"airDroppedStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"}],\"name\":\"airDroppedStakeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"dropRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"durationRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"durations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDurations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint240\",\"name\":\"rate\",\"type\":\"uint240\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"}],\"internalType\":\"struct SingleAssetStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_proofDepth\",\"type\":\"uint256\"}],\"name\":\"setAirDropRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"setDurationRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"stakeWithSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalCurrentHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalExpectedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frmAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"transferStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint240\",\"name\":\"rate\",\"type\":\"uint240\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airDroppedStake(uint256,uint8,uint256,uint256,uint256,bytes32[])\":{\"details\":\"Make a preapproved stake for the user, this is a presigned voucher that the user can redeem either from      an airdrop or a compensation program.      Only 1 of each type is allowed per user. The proof must match the root hash\",\"params\":{\"amount\":\"Number of tokens to stake in 1e18\",\"duration\":\"Number of seconds this stake will be held for\",\"index\":\"Number that is zero base index of the stake in the payout entry\",\"merkleProof\":\"Array of proofs for that amount\",\"rate\":\"Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 to fit the bool and type in struct Stake\",\"stakeType\":\"Number that represent the type of the stake, must not be 0 which is user stake\"}},\"airDroppedStakeClaimed(address,uint8)\":{\"details\":\"Has the airdropped stake already been claimed\"},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"durationRewardRate(uint256)\":{\"details\":\"Find the rate that corresponds to a given duration\",\"params\":{\"_duration\":\"Number of seconds\"}},\"exit()\":{\"details\":\"Exit out of all possible stakes\"},\"getAllStakes(address)\":{\"details\":\"Return all the stakes paid and unpaid for a given user\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,uint256[],uint256[])\":{\"details\":\"Initialize the contracts, sets up durations, rates, and preApprover      for preApproved contracts can only be called once\",\"params\":{\"_durations\":\"Array of allowed durations in seconds\",\"_rates\":\"Array of rates(0.3 is 30%) that correspond to the allowed               durations in 1e18 precision\",\"_stakingToken\":\"Address of the token that we are staking\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"setAirDropRoot(uint8,bytes32,uint256)\":{\"details\":\"Set air drop root for a specific stake type\",\"params\":{\"_proofDepth\":\"Depth of the Merklke Tree\",\"_rootHash\":\"Root hash of the Merkle Tree\",\"_stakeType\":\"Type of staking must be greater than 0\"}},\"setDurationRates(uint256[],uint256[])\":{\"details\":\"Set new durations and rates will not effect existing stakes\",\"params\":{\"_durations\":\"Array of durations in seconds\",\"_rates\":\"Array of rates that corresponds to the durations (0.01 is 1%) in 1e18\"}},\"setTransferAgent(address)\":{\"details\":\"Set the agent that will authorize transfers\",\"params\":{\"_agent\":\"Address of agent\"}},\"stake(uint256,uint256)\":{\"details\":\"Stake an approved amount of staking token into the contract.      User must have already approved the contract for specified amount.\",\"params\":{\"amount\":\"Number of tokens to stake in 1e18\",\"duration\":\"Number of seconds this stake will be held for\"}},\"stakeWithSender(address,uint256,uint256)\":{\"details\":\"Stake an approved amount of staking token into the contract. This function      can only be called by OGN token contract.\",\"params\":{\"amount\":\"Number of tokens to stake in 1e18\",\"duration\":\"Number of seconds this stake will be held for\",\"staker\":\"Address of the account that is creating the stake\"}},\"totalCurrentHoldings(address)\":{\"details\":\"Calculate all current holdings of a user: staked value + prorated rewards\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"totalExpectedRewards(address)\":{\"details\":\"Calculate all the rewards a user can expect to receive.\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"totalStaked(address)\":{\"details\":\"Calculate all the staked value a user has put into the contract,      rewards not included\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferStakes(address,address,bytes32,bytes32,uint8)\":{\"details\":\"Use to transfer all the stakes of an account in the case that the account is compromised      Requires access to both the account itself and the transfer agent\",\"params\":{\"_dstAccount\":\"the address to transfer to(must be a clean address with no stakes)\",\"_frmAccount\":\"the address to transfer from\",\"r\":\"r portion of the signature by the transfer agent\",\"s\":\"s portion of the signature\",\"v\":\"v portion of the signature\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/SingleAssetStaking.sol\":\"SingleAssetStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x29d258134253bdaeeea64c17baaf6108ff50aec65ceddb7216ef3a948a88808c\",\"license\":\"agpl-3.0\"},\"contracts/staking/SingleAssetStaking.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\n\\ncontract SingleAssetStaking is Initializable, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public stakingToken; // this is both the staking and rewards\\n\\n    struct Stake {\\n        uint256 amount; // amount to stake\\n        uint256 end; // when does the staking period end\\n        uint256 duration; // the duration of the stake\\n        uint240 rate; // rate to charge use 248 to reserve 8 bits for the bool\\n        bool paid;\\n        uint8 stakeType;\\n    }\\n\\n    struct DropRoot {\\n        bytes32 hash;\\n        uint256 depth;\\n    }\\n\\n    uint256[] public durations; // allowed durations\\n    uint256[] public rates; // rates that correspond with the allowed durations\\n\\n    uint256 public totalOutstanding;\\n    bool public paused;\\n\\n    mapping(address => Stake[]) public userStakes;\\n\\n    mapping(uint8 => DropRoot) public dropRoots;\\n\\n    // type 0 is reserved for stakes done by the user, all other types will be drop/preApproved stakes\\n    uint8 constant USER_STAKE_TYPE = 0;\\n    uint256 constant MAX_STAKES = 256;\\n\\n    address public transferAgent;\\n\\n    /* ========== Initialize ========== */\\n\\n    /**\\n     * @dev Initialize the contracts, sets up durations, rates, and preApprover\\n     *      for preApproved contracts can only be called once\\n     * @param _stakingToken Address of the token that we are staking\\n     * @param _durations Array of allowed durations in seconds\\n     * @param _rates Array of rates(0.3 is 30%) that correspond to the allowed\\n     *               durations in 1e18 precision\\n     */\\n    function initialize(\\n        address _stakingToken,\\n        uint256[] calldata _durations,\\n        uint256[] calldata _rates\\n    ) external onlyGovernor initializer {\\n        stakingToken = IERC20(_stakingToken);\\n        _setDurationRates(_durations, _rates);\\n    }\\n\\n    /* ========= Internal helper functions ======== */\\n\\n    /**\\n     * @dev Validate and set the duration and corresponding rates, will emit\\n     *      events NewRate and NewDurations\\n     */\\n    function _setDurationRates(\\n        uint256[] memory _durations,\\n        uint256[] memory _rates\\n    ) internal {\\n        require(\\n            _rates.length == _durations.length,\\n            \\\"Mismatch durations and rates\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _rates.length; i++) {\\n            require(_rates[i] < type(uint240).max, \\\"Max rate exceeded\\\");\\n        }\\n\\n        rates = _rates;\\n        durations = _durations;\\n\\n        emit NewRates(msg.sender, rates);\\n        emit NewDurations(msg.sender, durations);\\n    }\\n\\n    function _totalExpectedRewards(Stake[] storage stakes)\\n        internal\\n        view\\n        returns (uint256 total)\\n    {\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            Stake storage stake = stakes[i];\\n            if (!stake.paid) {\\n                total = total.add(stake.amount.mulTruncate(stake.rate));\\n            }\\n        }\\n    }\\n\\n    function _totalExpected(Stake storage _stake)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _stake.amount.add(_stake.amount.mulTruncate(_stake.rate));\\n    }\\n\\n    function _airDroppedStakeClaimed(address account, uint8 stakeType)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Stake[] storage stakes = userStakes[account];\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            if (stakes[i].stakeType == stakeType) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _findDurationRate(uint256 duration)\\n        internal\\n        view\\n        returns (uint240)\\n    {\\n        for (uint256 i = 0; i < durations.length; i++) {\\n            if (duration == durations[i]) {\\n                return uint240(rates[i]);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Internal staking function\\n     *      will insert the stake into the stakes array and verify we have\\n     *      enough to pay off stake + reward\\n     * @param staker Address of the staker\\n     * @param stakeType Number that represent the type of the stake, 0 is user\\n     *                  initiated all else is currently preApproved\\n     * @param duration Number of seconds this stake will be held for\\n     * @param rate Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 =\\n     *             to fit the bool and type in struct Stake\\n     * @param amount Number of tokens to stake in 1e18\\n     */\\n    function _stake(\\n        address staker,\\n        uint8 stakeType,\\n        uint256 duration,\\n        uint240 rate,\\n        uint256 amount\\n    ) internal {\\n        require(!paused, \\\"Staking paused\\\");\\n\\n        Stake[] storage stakes = userStakes[staker];\\n\\n        uint256 end = block.timestamp.add(duration);\\n\\n        uint256 i = stakes.length; // start at the end of the current array\\n\\n        require(i < MAX_STAKES, \\\"Max stakes\\\");\\n\\n        stakes.push(); // grow the array\\n        // find the spot where we can insert the current stake\\n        // this should make an increasing list sorted by end\\n        while (i != 0 && stakes[i - 1].end > end) {\\n            // shift it back one\\n            stakes[i] = stakes[i - 1];\\n            i -= 1;\\n        }\\n\\n        // insert the stake\\n        Stake storage newStake = stakes[i];\\n        newStake.rate = rate;\\n        newStake.stakeType = stakeType;\\n        newStake.end = end;\\n        newStake.duration = duration;\\n        newStake.amount = amount;\\n\\n        totalOutstanding = totalOutstanding.add(_totalExpected(newStake));\\n\\n        emit Staked(staker, amount, duration, rate);\\n    }\\n\\n    function _stakeWithChecks(\\n        address staker,\\n        uint256 amount,\\n        uint256 duration\\n    ) internal {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        uint240 rewardRate = _findDurationRate(duration);\\n        require(rewardRate > 0, \\\"Invalid duration\\\"); // we couldn't find the rate that correspond to the passed duration\\n\\n        _stake(staker, USER_STAKE_TYPE, duration, rewardRate, amount);\\n        // transfer in the token so that we can stake the correct amount\\n        stakingToken.safeTransferFrom(staker, address(this), amount);\\n    }\\n\\n    modifier requireLiquidity() {\\n        // we need to have enough balance to cover the rewards after the operation is complete\\n        _;\\n        require(\\n            stakingToken.balanceOf(address(this)) >= totalOutstanding,\\n            \\\"Insufficient rewards\\\"\\n        );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getAllDurations() external view returns (uint256[] memory) {\\n        return durations;\\n    }\\n\\n    function getAllRates() external view returns (uint256[] memory) {\\n        return rates;\\n    }\\n\\n    /**\\n     * @dev Return all the stakes paid and unpaid for a given user\\n     * @param account Address of the account that we want to look up\\n     */\\n    function getAllStakes(address account)\\n        external\\n        view\\n        returns (Stake[] memory)\\n    {\\n        return userStakes[account];\\n    }\\n\\n    /**\\n     * @dev Find the rate that corresponds to a given duration\\n     * @param _duration Number of seconds\\n     */\\n    function durationRewardRate(uint256 _duration)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _findDurationRate(_duration);\\n    }\\n\\n    /**\\n     * @dev Has the airdropped stake already been claimed\\n     */\\n    function airDroppedStakeClaimed(address account, uint8 stakeType)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _airDroppedStakeClaimed(account, stakeType);\\n    }\\n\\n    /**\\n     * @dev Calculate all the staked value a user has put into the contract,\\n     *      rewards not included\\n     * @param account Address of the account that we want to look up\\n     */\\n    function totalStaked(address account)\\n        external\\n        view\\n        returns (uint256 total)\\n    {\\n        Stake[] storage stakes = userStakes[account];\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            if (!stakes[i].paid) {\\n                total = total.add(stakes[i].amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate all the rewards a user can expect to receive.\\n     * @param account Address of the account that we want to look up\\n     */\\n    function totalExpectedRewards(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _totalExpectedRewards(userStakes[account]);\\n    }\\n\\n    /**\\n     * @dev Calculate all current holdings of a user: staked value + prorated rewards\\n     * @param account Address of the account that we want to look up\\n     */\\n    function totalCurrentHoldings(address account)\\n        external\\n        view\\n        returns (uint256 total)\\n    {\\n        Stake[] storage stakes = userStakes[account];\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            Stake storage stake = stakes[i];\\n            if (stake.paid) {\\n                continue;\\n            } else if (stake.end < block.timestamp) {\\n                total = total.add(_totalExpected(stake));\\n            } else {\\n                //calcualte the precentage accrued in term of rewards\\n                total = total.add(\\n                    stake.amount.add(\\n                        stake.amount.mulTruncate(stake.rate).mulTruncate(\\n                            stake\\n                                .duration\\n                                .sub(stake.end.sub(block.timestamp))\\n                                .divPrecisely(stake.duration)\\n                        )\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Make a preapproved stake for the user, this is a presigned voucher that the user can redeem either from\\n     *      an airdrop or a compensation program.\\n     *      Only 1 of each type is allowed per user. The proof must match the root hash\\n     * @param index Number that is zero base index of the stake in the payout entry\\n     * @param stakeType Number that represent the type of the stake, must not be 0 which is user stake\\n     * @param duration Number of seconds this stake will be held for\\n     * @param rate Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 to fit the bool and type in struct Stake\\n     * @param amount Number of tokens to stake in 1e18\\n     * @param merkleProof Array of proofs for that amount\\n     */\\n    function airDroppedStake(\\n        uint256 index,\\n        uint8 stakeType,\\n        uint256 duration,\\n        uint256 rate,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external requireLiquidity {\\n        require(stakeType != USER_STAKE_TYPE, \\\"Cannot be normal staking\\\");\\n        require(rate < type(uint240).max, \\\"Max rate exceeded\\\");\\n        require(index < 2**merkleProof.length, \\\"Invalid index\\\");\\n        DropRoot storage dropRoot = dropRoots[stakeType];\\n        require(merkleProof.length == dropRoot.depth, \\\"Invalid proof\\\");\\n\\n        // Compute the merkle root\\n        bytes32 node = keccak256(\\n            abi.encodePacked(\\n                index,\\n                stakeType,\\n                address(this),\\n                msg.sender,\\n                duration,\\n                rate,\\n                amount\\n            )\\n        );\\n        uint256 path = index;\\n        for (uint16 i = 0; i < merkleProof.length; i++) {\\n            if ((path & 0x01) == 1) {\\n                node = keccak256(abi.encodePacked(merkleProof[i], node));\\n            } else {\\n                node = keccak256(abi.encodePacked(node, merkleProof[i]));\\n            }\\n            path /= 2;\\n        }\\n\\n        // Check the merkle proof\\n        require(node == dropRoot.hash, \\\"Stake not approved\\\");\\n\\n        // verify that we haven't already staked\\n        require(\\n            !_airDroppedStakeClaimed(msg.sender, stakeType),\\n            \\\"Already staked\\\"\\n        );\\n\\n        _stake(msg.sender, stakeType, duration, uint240(rate), amount);\\n    }\\n\\n    /**\\n     * @dev Stake an approved amount of staking token into the contract.\\n     *      User must have already approved the contract for specified amount.\\n     * @param amount Number of tokens to stake in 1e18\\n     * @param duration Number of seconds this stake will be held for\\n     */\\n    function stake(uint256 amount, uint256 duration) external requireLiquidity {\\n        // no checks are performed in this function since those are already present in _stakeWithChecks\\n        _stakeWithChecks(msg.sender, amount, duration);\\n    }\\n\\n    /**\\n     * @dev Stake an approved amount of staking token into the contract. This function\\n     *      can only be called by OGN token contract.\\n     * @param staker Address of the account that is creating the stake\\n     * @param amount Number of tokens to stake in 1e18\\n     * @param duration Number of seconds this stake will be held for\\n     */\\n    function stakeWithSender(\\n        address staker,\\n        uint256 amount,\\n        uint256 duration\\n    ) external returns (bool) {\\n        require(\\n            msg.sender == address(stakingToken),\\n            \\\"Only token contract can make this call\\\"\\n        );\\n\\n        _stakeWithChecks(staker, amount, duration);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Exit out of all possible stakes\\n     */\\n    function exit() external requireLiquidity {\\n        Stake[] storage stakes = userStakes[msg.sender];\\n        require(stakes.length > 0, \\\"Nothing staked\\\");\\n\\n        uint256 totalWithdraw = 0;\\n        uint256 stakedAmount = 0;\\n        uint256 l = stakes.length;\\n        do {\\n            Stake storage exitStake = stakes[l - 1];\\n            // stop on the first ended stake that's already been paid\\n            if (exitStake.end < block.timestamp && exitStake.paid) {\\n                break;\\n            }\\n            //might not be ended\\n            if (exitStake.end < block.timestamp) {\\n                //we are paying out the stake\\n                exitStake.paid = true;\\n                totalWithdraw = totalWithdraw.add(_totalExpected(exitStake));\\n                stakedAmount = stakedAmount.add(exitStake.amount);\\n            }\\n            l--;\\n        } while (l > 0);\\n        require(totalWithdraw > 0, \\\"All stakes in lock-up\\\");\\n\\n        totalOutstanding = totalOutstanding.sub(totalWithdraw);\\n        emit Withdrawn(msg.sender, totalWithdraw, stakedAmount);\\n        stakingToken.safeTransfer(msg.sender, totalWithdraw);\\n    }\\n\\n    /**\\n     * @dev Use to transfer all the stakes of an account in the case that the account is compromised\\n     *      Requires access to both the account itself and the transfer agent\\n     * @param _frmAccount the address to transfer from\\n     * @param _dstAccount the address to transfer to(must be a clean address with no stakes)\\n     * @param r r portion of the signature by the transfer agent\\n     * @param s s portion of the signature\\n     * @param v v portion of the signature\\n     */\\n    function transferStakes(\\n        address _frmAccount,\\n        address _dstAccount,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external {\\n        require(transferAgent == msg.sender, \\\"must be transfer agent\\\");\\n        Stake[] storage dstStakes = userStakes[_dstAccount];\\n        require(dstStakes.length == 0, \\\"Dest stakes must be empty\\\");\\n        require(_frmAccount != address(0), \\\"from account not set\\\");\\n        Stake[] storage stakes = userStakes[_frmAccount];\\n        require(stakes.length > 0, \\\"Nothing to transfer\\\");\\n\\n        // matches ethers.signMsg(ethers.utils.solidityPack([string(4), address, adddress, address]))\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n64\\\",\\n                abi.encodePacked(\\n                    \\\"tran\\\",\\n                    address(this),\\n                    _frmAccount,\\n                    _dstAccount\\n                )\\n            )\\n        );\\n        require(ecrecover(hash, v, r, s) == _frmAccount, \\\"Transfer not authed\\\");\\n\\n        // copy the stakes into the dstAccount array and delete the old one\\n        userStakes[_dstAccount] = stakes;\\n        delete userStakes[_frmAccount];\\n        emit StakesTransfered(_frmAccount, _dstAccount, stakes.length);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    function setPaused(bool _paused) external onlyGovernor {\\n        paused = _paused;\\n        emit Paused(msg.sender, paused);\\n    }\\n\\n    /**\\n     * @dev Set new durations and rates will not effect existing stakes\\n     * @param _durations Array of durations in seconds\\n     * @param _rates Array of rates that corresponds to the durations (0.01 is 1%) in 1e18\\n     */\\n    function setDurationRates(\\n        uint256[] calldata _durations,\\n        uint256[] calldata _rates\\n    ) external onlyGovernor {\\n        _setDurationRates(_durations, _rates);\\n    }\\n\\n    /**\\n     * @dev Set the agent that will authorize transfers\\n     * @param _agent Address of agent\\n     */\\n    function setTransferAgent(address _agent) external onlyGovernor {\\n        transferAgent = _agent;\\n    }\\n\\n    /**\\n     * @dev Set air drop root for a specific stake type\\n     * @param _stakeType Type of staking must be greater than 0\\n     * @param _rootHash Root hash of the Merkle Tree\\n     * @param _proofDepth Depth of the Merklke Tree\\n     */\\n    function setAirDropRoot(\\n        uint8 _stakeType,\\n        bytes32 _rootHash,\\n        uint256 _proofDepth\\n    ) external onlyGovernor {\\n        require(_stakeType != USER_STAKE_TYPE, \\\"Cannot be normal staking\\\");\\n        dropRoots[_stakeType].hash = _rootHash;\\n        dropRoots[_stakeType].depth = _proofDepth;\\n        emit NewAirDropRootHash(_stakeType, _rootHash, _proofDepth);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 duration,\\n        uint256 rate\\n    );\\n    event Withdrawn(address indexed user, uint256 amount, uint256 stakedAmount);\\n    event Paused(address indexed user, bool yes);\\n    event NewDurations(address indexed user, uint256[] durations);\\n    event NewRates(address indexed user, uint256[] rates);\\n    event NewAirDropRootHash(\\n        uint8 stakeType,\\n        bytes32 rootHash,\\n        uint256 proofDepth\\n    );\\n    event StakesTransfered(\\n        address indexed fromUser,\\n        address toUser,\\n        uint256 numStakes\\n    );\\n}\\n\",\"keccak256\":\"0x55a4da47287ec6cff03cdac930eac95238e14f3addbf8bcba723309bc1ebc047\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xff2a83835ed8984e10338905bc31dbcaeeabdfc0e58d49257389cb1e5a3b9d8a\",\"license\":\"agpl-3.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd9c475e374285f00f73351de859ed44b490f9989baee63c2d5db79b41aa9e8\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506100283360008051602062002c8283398151915255565b60008051602062002c82833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a3612c0280620000806000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806382d7811111610104578063c7af3352116100a2578063e9e518a011610071578063e9e518a014610450578063e9fad8ee14610463578063ea1d81cb1461046b578063ff5a20bf1461047e57600080fd5b8063c7af3352146103e6578063d38bfff4146103ee578063dd418ae214610401578063df962bd61461041457600080fd5b8063a5149d54116100de578063a5149d541461035d578063b5d5b5fa14610370578063bc20a7af146103be578063bc2ee5a6146103d157600080fd5b806382d78111146103245780638c6a244c146103375780639bfd8d611461034a57600080fd5b80635c975abb1161017c57806372f702f31161014b57806372f702f3146102d8578063760cd8e1146102eb5780637b0472f0146102fe578063825e0e801461031157600080fd5b80635c975abb1461028d5780635d36b190146102aa5780635e99cbe9146102b25780636f1eb944146102c557600080fd5b806316c38b3c116101b857806316c38b3c1461023f578063334e7ed214610254578063389b21ce146102675780634f2b529d1461027a57600080fd5b806304238994146101df5780630c340a241461020857806316078d0414610228575b600080fd5b6101f26101ed366004612468565b610486565b6040516101ff91906127fa565b60405180910390f35b610210610547565b6040516001600160a01b0390911681526020016101ff565b61023160365481565b6040519081526020016101ff565b61025261024d366004612657565b610564565b005b6102526102623660046125eb565b6105e0565b61025261027536600461277b565b610677565b6102526102883660046126e5565b610746565b60375461029a9060ff1681565b60405190151581526020016101ff565b610252610b0d565b61029a6102c0366004612585565b610bb3565b6102526102d3366004612483565b610c35565b603354610210906001600160a01b031681565b603a54610210906001600160a01b031681565b61025261030c3660046126c3565b610f5d565b61023161031f366004612691565b611008565b610231610332366004612468565b611022565b610252610345366004612468565b61112d565b610231610358366004612468565b611173565b61029a61036b3660046125b8565b61120d565b61038361037e36600461255b565b611222565b604080519687526020870195909552938501929092526001600160f01b031660608401521515608083015260ff1660a082015260c0016101ff565b6102316103cc366004612691565b611287565b6103d96112a8565b6040516101ff9190612880565b61029a611300565b6102526103fc366004612468565b611331565b61023161040f366004612691565b6113d5565b61043b610422366004612760565b6039602052600090815260409020805460019091015482565b604080519283526020830191909152016101ff565b61025261045e3660046124da565b6113e5565b610252611546565b610231610479366004612468565b611794565b6103d96117b5565b6001600160a01b0381166000908152603860209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561053c5760008481526020908190206040805160c081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160f01b038116606084015260ff600160f01b8204811615156080850152600160f81b9091041660a083015290835290920191016104be565b505050509050919050565b600061055f600080516020612bad8339815191525490565b905090565b61056c611300565b6105915760405162461bcd60e51b815260040161058890612932565b60405180910390fd5b6037805460ff191682151590811790915560405160ff9091161515815233907fe8699cf681560fd07de85543bd994263f4557bdc5179dd702f256d15fd083e1d9060200160405180910390a250565b6105e8611300565b6106045760405162461bcd60e51b815260040161058890612932565b6106718484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061180b92505050565b50505050565b61067f611300565b61069b5760405162461bcd60e51b815260040161058890612932565b60ff83166106e65760405162461bcd60e51b815260206004820152601860248201527743616e6e6f74206265206e6f726d616c207374616b696e6760401b6044820152606401610588565b60ff83166000818152603960209081526040918290208581556001018490558151928352820184905281018290527f1ac9c006454d2d601a481473a37c95bf489c5923bd7c2a701757d4016a0f022d9060600160405180910390a1505050565b60ff86166107915760405162461bcd60e51b815260206004820152601860248201527743616e6e6f74206265206e6f726d616c207374616b696e6760401b6044820152606401610588565b6001600160f01b0384106107db5760405162461bcd60e51b815260206004820152601160248201527013585e081c985d1948195e18d959591959607a1b6044820152606401610588565b6107e6816002612a14565b87106108245760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610588565b60ff86166000908152603960205260409020600181015482146108795760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610588565b6040805160208082018b90526001600160f81b031960f88b901b16828401526bffffffffffffffffffffffff1930606090811b8216604185015233901b166055830152606982018990526089820188905260a98083018890528351808403909101815260c990920190925280519101208860005b61ffff81168511156109ca57816001166001141561095a5785858261ffff1681811061091b5761091b612b88565b905060200201358360405160200161093d929190918252602082015260400190565b6040516020818303038152906040528051906020012092506109ab565b8286868361ffff1681811061097157610971612b88565b90506020020135604051602001610992929190918252602082015260400190565b6040516020818303038152906040528051906020012092505b6109b66002836129af565b9150806109c281612b35565b9150506108ed565b5082548214610a105760405162461bcd60e51b815260206004820152601260248201527114dd185ad9481b9bdd08185c1c1c9bdd995960721b6044820152606401610588565b610a1a338a611990565b15610a585760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481cdd185ad95960921b6044820152606401610588565b610a65338a8a8a8a611a15565b50506036546033546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae691906126aa565b1015610b045760405162461bcd60e51b815260040161058890612969565b50505050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610ba85760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610588565b610bb133611cc5565b565b6033546000906001600160a01b03163314610c1f5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920746f6b656e20636f6e74726163742063616e206d616b65207468696044820152651cc818d85b1b60d21b6064820152608401610588565b610c2a848484611d89565b5060015b9392505050565b603a546001600160a01b03163314610c885760405162461bcd60e51b81526020600482015260166024820152751b5d5cdd081899481d1c985b9cd9995c881859d95b9d60521b6044820152606401610588565b6001600160a01b0384166000908152603860205260409020805415610cef5760405162461bcd60e51b815260206004820152601960248201527f44657374207374616b6573206d75737420626520656d707479000000000000006044820152606401610588565b6001600160a01b038616610d3c5760405162461bcd60e51b8152602060048201526014602482015273199c9bdb481858d8dbdd5b9d081b9bdd081cd95d60621b6044820152606401610588565b6001600160a01b03861660009081526038602052604090208054610d985760405162461bcd60e51b81526020600482015260136024820152722737ba3434b733903a37903a3930b739b332b960691b6044820152606401610588565b604051633a3930b760e11b602082015230606090811b6bffffffffffffffffffffffff19908116602484015289821b8116603884015288821b16604c8301526000910160408051601f1981840301815290829052610df8916020016127b5565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff871691830191909152606082018890526080820187905291506001600160a01b0389169060019060a0016020604051602081039080840390855afa158015610e6b573d6000803e3d6000fd5b505050602060405103516001600160a01b031614610ec15760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd9995c881b9bdd08185d5d1a1959606a1b6044820152606401610588565b6001600160a01b03871660009081526038602052604090208254610ee791908490612272565b506001600160a01b0388166000908152603860205260408120610f0991612349565b8154604080516001600160a01b038a811682526020820193909352918a16917fd0ceb9c39a11711e51ee4b32b97b05d660d6229ecd8be94ce934fa9e77910263910160405180910390a25050505050505050565b610f68338383611d89565b6036546033546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610fae57600080fd5b505afa158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe691906126aa565b10156110045760405162461bcd60e51b815260040161058890612969565b5050565b600061101382611e49565b6001600160f01b031692915050565b6001600160a01b0381166000908152603860205260408120815b815481101561112657600082828154811061105957611059612b88565b9060005260206000209060040201905080600301601e9054906101000a900460ff16156110865750611114565b42816001015410156110ac576110a561109e82611ebd565b8590611edd565b9350611112565b61110f61109e6111076110e884600201546110e26110d7428860010154611ee990919063ffffffff16565b600288015490611ee9565b90611ef5565b60038501548554611101916001600160f01b0316611f1e565b90611f1e565b835490611edd565b93505b505b8061111e81612b57565b91505061103c565b5050919050565b611135611300565b6111515760405162461bcd60e51b815260040161058890612932565b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152603860205260408120815b8154811015611126578181815481106111a8576111a8612b88565b9060005260206000209060040201600301601e9054906101000a900460ff166111fb576111f88282815481106111e0576111e0612b88565b60009182526020909120600490910201548490611edd565b92505b8061120581612b57565b91505061118d565b60006112198383611990565b90505b92915050565b6038602052816000526040600020818154811061123e57600080fd5b6000918252602090912060049091020180546001820154600283015460039093015491945092506001600160f01b0381169060ff600160f01b8204811691600160f81b90041686565b6034818154811061129757600080fd5b600091825260209091200154905081565b606060348054806020026020016040519081016040528092919081815260200182805480156112f657602002820191906000526020600020905b8154815260200190600101908083116112e2575b5050505050905090565b6000611318600080516020612bad8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611339611300565b6113555760405162461bcd60e51b815260040161058890612932565b61137d817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661139d600080516020612bad8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6035818154811061129757600080fd5b6113ed611300565b6114095760405162461bcd60e51b815260040161058890612932565b600054610100900460ff1680611422575060005460ff16155b6114855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610588565b600054610100900460ff161580156114a7576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b038816179055604080516020868102808301820190935286825261152c928891889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061180b92505050565b801561153e576000805461ff00191690555b505050505050565b33600090815260386020526040902080546115945760405162461bcd60e51b815260206004820152600e60248201526d139bdd1a1a5b99c81cdd185ad95960921b6044820152606401610588565b805460009081905b6000846115aa600184612adb565b815481106115ba576115ba612b88565b906000526020600020906004020190504281600101541080156115e857506003810154600160f01b900460ff165b156115f3575061164a565b42816001015410156116335760038101805460ff60f01b1916600160f01b17905561162061109e82611ebd565b8154909450611630908490611edd565b92505b8161163d81612b1e565b925050506000811161159c575b600083116116925760405162461bcd60e51b81526020600482015260156024820152740416c6c207374616b657320696e206c6f636b2d757605c1b6044820152606401610588565b60365461169f9084611ee9565b603655604080518481526020810184905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a26033546116f4906001600160a01b03163385611f33565b50506036546033546040516370a0823160e01b81523060048201529193506001600160a01b031691506370a082319060240160206040518083038186803b15801561173e57600080fd5b505afa158015611752573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177691906126aa565b1015610bb15760405162461bcd60e51b815260040161058890612969565b6001600160a01b038116600090815260386020526040812061121c90611f9b565b606060358054806020026020016040519081016040528092919081815260200182805480156112f657602002820191906000526020600020908154815260200190600101908083116112e2575050505050905090565b815181511461185c5760405162461bcd60e51b815260206004820152601c60248201527f4d69736d61746368206475726174696f6e7320616e64207261746573000000006044820152606401610588565b60005b81518110156118df576001600160f01b03801682828151811061188457611884612b88565b6020026020010151106118cd5760405162461bcd60e51b815260206004820152601160248201527013585e081c985d1948195e18d959591959607a1b6044820152606401610588565b806118d781612b57565b91505061185f565b5080516118f390603590602084019061236a565b50815161190790603490602085019061236a565b50336001600160a01b03167fa804368c7f1a6216d92d17d9753b923dfc3da14ae33d231e8d79e39202e249c3603560405161194291906128c4565b60405180910390a2336001600160a01b03167f180120279c2eb356244609197b5b64c0fbabd60f8d073b75aba771a296bb63d4603460405161198491906128c4565b60405180910390a25050565b6001600160a01b0382166000908152603860205260408120815b8154811015611a0a578360ff168282815481106119c9576119c9612b88565b6000918252602090912060049091020160030154600160f81b900460ff1614156119f85760019250505061121c565b80611a0281612b57565b9150506119aa565b506000949350505050565b60375460ff1615611a595760405162461bcd60e51b815260206004820152600e60248201526d14dd185ada5b99c81c185d5cd95960921b6044820152606401610588565b6001600160a01b038516600090815260386020526040812090611a7c4286611edd565b82549091506101008110611abf5760405162461bcd60e51b815260206004820152600a6024820152694d6178207374616b657360b01b6044820152606401610588565b8254600101835560008390525b8015801590611b0757508183611ae3600184612adb565b81548110611af357611af3612b88565b906000526020600020906004020160010154115b15611bf15782611b18600183612adb565b81548110611b2857611b28612b88565b9060005260206000209060040201838281548110611b4857611b48612b88565b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830180549390920180546001600160f01b039094166001600160f01b031985168117825583546001600160f81b031990951617600160f01b9485900460ff90811615159095021780825592546001600160f81b03909316600160f81b93849004909416909202929092179055611bea9082612adb565b9050611acc565b6000838281548110611c0557611c05612b88565b600091825260209091206004909102016003810180546001600160f01b03891660ff60f01b90911617600160f81b60ff8c160217905560018101849055600281018890558581559050611c63611c5a82611ebd565b60365490611edd565b60365560408051868152602081018990526001600160f01b0388168183015290516001600160a01b038b16917fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed919081900360600190a2505050505050505050565b6001600160a01b038116611d1b5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610588565b806001600160a01b0316611d3b600080516020612bad8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611d8681600080516020612bad83398151915255565b50565b60008211611dca5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610588565b6000611dd582611e49565b90506000816001600160f01b031611611e235760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152606401610588565b611e31846000848487611a15565b603354610671906001600160a01b0316853086612023565b6000805b603454811015611eb45760348181548110611e6a57611e6a612b88565b9060005260206000200154831415611ea25760358181548110611e8f57611e8f612b88565b9060005260206000200154915050919050565b80611eac81612b57565b915050611e4d565b50600092915050565b6003810154815460009161121c91611107916001600160f01b0316611f1e565b60006112198284612997565b60006112198284612adb565b600080611f0a84670de0b6b3a764000061205b565b9050611f168184612067565b949350505050565b60006112198383670de0b6b3a7640000612073565b6040516001600160a01b038316602482015260448101829052611f9690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612095565b505050565b6000805b825481101561201d576000838281548110611fbc57611fbc612b88565b9060005260206000209060040201905080600301601e9054906101000a900460ff1661200a57600381015481546120079161200091906001600160f01b0316611f1e565b8490611edd565b92505b508061201581612b57565b915050611f9f565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526106719085906323b872dd60e01b90608401611f5f565b60006112198284612abc565b600061121982846129af565b600080612080858561205b565b905061208c8184612067565b95945050505050565b60006120ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121679092919063ffffffff16565b805190915015611f9657808060200190518101906121089190612674565b611f965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610588565b6060611f16848460008585843b6121c05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610588565b600080866001600160a01b031685876040516121dc9190612799565b60006040518083038185875af1925050503d8060008114612219576040519150601f19603f3d011682016040523d82523d6000602084013e61221e565b606091505b509150915061222e828286612239565b979650505050505050565b60608315612248575081610c2e565b8251156122585782518084602001fd5b8160405162461bcd60e51b815260040161058891906128ff565b8280548282559060005260206000209060040281019282156123395760005260206000209160040282015b82811115612339578254825560018084015490830155600280840154908301556003808401805491840180546001600160f01b031981166001600160f01b039094169384178255825460ff600160f01b91829004811615159091026001600160f81b0319909216909417178082559154600160f81b908190049093169092026001600160f81b039091161790556004928301929091019061229d565b506123459291506123b1565b5090565b5080546000825560040290600052602060002090810190611d8691906123b1565b8280548282559060005260206000209081019282156123a5579160200282015b828111156123a557825182559160200191906001019061238a565b506123459291506123da565b5b80821115612345576000808255600182018190556002820181905560038201556004016123b2565b5b8082111561234557600081556001016123db565b80356001600160a01b038116811461240657600080fd5b919050565b60008083601f84011261241d57600080fd5b50813567ffffffffffffffff81111561243557600080fd5b6020830191508360208260051b850101111561245057600080fd5b9250929050565b803560ff8116811461240657600080fd5b60006020828403121561247a57600080fd5b611219826123ef565b600080600080600060a0868803121561249b57600080fd5b6124a4866123ef565b94506124b2602087016123ef565b935060408601359250606086013591506124ce60808701612457565b90509295509295909350565b6000806000806000606086880312156124f257600080fd5b6124fb866123ef565b9450602086013567ffffffffffffffff8082111561251857600080fd5b61252489838a0161240b565b9096509450604088013591508082111561253d57600080fd5b5061254a8882890161240b565b969995985093965092949392505050565b6000806040838503121561256e57600080fd5b612577836123ef565b946020939093013593505050565b60008060006060848603121561259a57600080fd5b6125a3846123ef565b95602085013595506040909401359392505050565b600080604083850312156125cb57600080fd5b6125d4836123ef565b91506125e260208401612457565b90509250929050565b6000806000806040858703121561260157600080fd5b843567ffffffffffffffff8082111561261957600080fd5b6126258883890161240b565b9096509450602087013591508082111561263e57600080fd5b5061264b8782880161240b565b95989497509550505050565b60006020828403121561266957600080fd5b8135610c2e81612b9e565b60006020828403121561268657600080fd5b8151610c2e81612b9e565b6000602082840312156126a357600080fd5b5035919050565b6000602082840312156126bc57600080fd5b5051919050565b600080604083850312156126d657600080fd5b50508035926020909101359150565b600080600080600080600060c0888a03121561270057600080fd5b8735965061271060208901612457565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561274157600080fd5b61274d8a828b0161240b565b989b979a50959850939692959293505050565b60006020828403121561277257600080fd5b61121982612457565b60008060006060848603121561279057600080fd5b6125a384612457565b600082516127ab818460208701612af2565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3634000000008152600082516127ed81601c850160208701612af2565b91909101601c0192915050565b602080825282518282018190526000919060409081850190868401855b8281101561287357815180518552868101518786015285810151868601526060808201516001600160f01b03169086015260808082015115159086015260a09081015160ff169085015260c09093019290850190600101612817565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156128b85783518352928401929184019160010161289c565b50909695505050505050565b6020808252825482820181905260008481528281209092916040850190845b818110156128b8578354835260019384019392850192016128e3565b602081526000825180602084015261291e816040850160208701612af2565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602080825260149082015273496e73756666696369656e74207265776172647360601b604082015260600190565b600082198211156129aa576129aa612b72565b500190565b6000826129cc57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612a0c5781600019048211156129f2576129f2612b72565b808516156129ff57918102915b93841c93908002906129d6565b509250929050565b60006112198383600082612a2a5750600161121c565b81612a375750600061121c565b8160018114612a4d5760028114612a5757612a73565b600191505061121c565b60ff841115612a6857612a68612b72565b50506001821b61121c565b5060208310610133831016604e8410600b8410161715612a96575081810a61121c565b612aa083836129d1565b8060001904821115612ab457612ab4612b72565b029392505050565b6000816000190483118215151615612ad657612ad6612b72565b500290565b600082821015612aed57612aed612b72565b500390565b60005b83811015612b0d578181015183820152602001612af5565b838111156106715750506000910152565b600081612b2d57612b2d612b72565b506000190190565b600061ffff80831681811415612b4d57612b4d612b72565b6001019392505050565b6000600019821415612b6b57612b6b612b72565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8015158114611d8657600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212201a45e8dd45a58820b38c33f5e03b58c01c358bd06c87693734bcd9ffbf46d4dd64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806382d7811111610104578063c7af3352116100a2578063e9e518a011610071578063e9e518a014610450578063e9fad8ee14610463578063ea1d81cb1461046b578063ff5a20bf1461047e57600080fd5b8063c7af3352146103e6578063d38bfff4146103ee578063dd418ae214610401578063df962bd61461041457600080fd5b8063a5149d54116100de578063a5149d541461035d578063b5d5b5fa14610370578063bc20a7af146103be578063bc2ee5a6146103d157600080fd5b806382d78111146103245780638c6a244c146103375780639bfd8d611461034a57600080fd5b80635c975abb1161017c57806372f702f31161014b57806372f702f3146102d8578063760cd8e1146102eb5780637b0472f0146102fe578063825e0e801461031157600080fd5b80635c975abb1461028d5780635d36b190146102aa5780635e99cbe9146102b25780636f1eb944146102c557600080fd5b806316c38b3c116101b857806316c38b3c1461023f578063334e7ed214610254578063389b21ce146102675780634f2b529d1461027a57600080fd5b806304238994146101df5780630c340a241461020857806316078d0414610228575b600080fd5b6101f26101ed366004612468565b610486565b6040516101ff91906127fa565b60405180910390f35b610210610547565b6040516001600160a01b0390911681526020016101ff565b61023160365481565b6040519081526020016101ff565b61025261024d366004612657565b610564565b005b6102526102623660046125eb565b6105e0565b61025261027536600461277b565b610677565b6102526102883660046126e5565b610746565b60375461029a9060ff1681565b60405190151581526020016101ff565b610252610b0d565b61029a6102c0366004612585565b610bb3565b6102526102d3366004612483565b610c35565b603354610210906001600160a01b031681565b603a54610210906001600160a01b031681565b61025261030c3660046126c3565b610f5d565b61023161031f366004612691565b611008565b610231610332366004612468565b611022565b610252610345366004612468565b61112d565b610231610358366004612468565b611173565b61029a61036b3660046125b8565b61120d565b61038361037e36600461255b565b611222565b604080519687526020870195909552938501929092526001600160f01b031660608401521515608083015260ff1660a082015260c0016101ff565b6102316103cc366004612691565b611287565b6103d96112a8565b6040516101ff9190612880565b61029a611300565b6102526103fc366004612468565b611331565b61023161040f366004612691565b6113d5565b61043b610422366004612760565b6039602052600090815260409020805460019091015482565b604080519283526020830191909152016101ff565b61025261045e3660046124da565b6113e5565b610252611546565b610231610479366004612468565b611794565b6103d96117b5565b6001600160a01b0381166000908152603860209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561053c5760008481526020908190206040805160c081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160f01b038116606084015260ff600160f01b8204811615156080850152600160f81b9091041660a083015290835290920191016104be565b505050509050919050565b600061055f600080516020612bad8339815191525490565b905090565b61056c611300565b6105915760405162461bcd60e51b815260040161058890612932565b60405180910390fd5b6037805460ff191682151590811790915560405160ff9091161515815233907fe8699cf681560fd07de85543bd994263f4557bdc5179dd702f256d15fd083e1d9060200160405180910390a250565b6105e8611300565b6106045760405162461bcd60e51b815260040161058890612932565b6106718484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061180b92505050565b50505050565b61067f611300565b61069b5760405162461bcd60e51b815260040161058890612932565b60ff83166106e65760405162461bcd60e51b815260206004820152601860248201527743616e6e6f74206265206e6f726d616c207374616b696e6760401b6044820152606401610588565b60ff83166000818152603960209081526040918290208581556001018490558151928352820184905281018290527f1ac9c006454d2d601a481473a37c95bf489c5923bd7c2a701757d4016a0f022d9060600160405180910390a1505050565b60ff86166107915760405162461bcd60e51b815260206004820152601860248201527743616e6e6f74206265206e6f726d616c207374616b696e6760401b6044820152606401610588565b6001600160f01b0384106107db5760405162461bcd60e51b815260206004820152601160248201527013585e081c985d1948195e18d959591959607a1b6044820152606401610588565b6107e6816002612a14565b87106108245760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610588565b60ff86166000908152603960205260409020600181015482146108795760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610588565b6040805160208082018b90526001600160f81b031960f88b901b16828401526bffffffffffffffffffffffff1930606090811b8216604185015233901b166055830152606982018990526089820188905260a98083018890528351808403909101815260c990920190925280519101208860005b61ffff81168511156109ca57816001166001141561095a5785858261ffff1681811061091b5761091b612b88565b905060200201358360405160200161093d929190918252602082015260400190565b6040516020818303038152906040528051906020012092506109ab565b8286868361ffff1681811061097157610971612b88565b90506020020135604051602001610992929190918252602082015260400190565b6040516020818303038152906040528051906020012092505b6109b66002836129af565b9150806109c281612b35565b9150506108ed565b5082548214610a105760405162461bcd60e51b815260206004820152601260248201527114dd185ad9481b9bdd08185c1c1c9bdd995960721b6044820152606401610588565b610a1a338a611990565b15610a585760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481cdd185ad95960921b6044820152606401610588565b610a65338a8a8a8a611a15565b50506036546033546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae691906126aa565b1015610b045760405162461bcd60e51b815260040161058890612969565b50505050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610ba85760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610588565b610bb133611cc5565b565b6033546000906001600160a01b03163314610c1f5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920746f6b656e20636f6e74726163742063616e206d616b65207468696044820152651cc818d85b1b60d21b6064820152608401610588565b610c2a848484611d89565b5060015b9392505050565b603a546001600160a01b03163314610c885760405162461bcd60e51b81526020600482015260166024820152751b5d5cdd081899481d1c985b9cd9995c881859d95b9d60521b6044820152606401610588565b6001600160a01b0384166000908152603860205260409020805415610cef5760405162461bcd60e51b815260206004820152601960248201527f44657374207374616b6573206d75737420626520656d707479000000000000006044820152606401610588565b6001600160a01b038616610d3c5760405162461bcd60e51b8152602060048201526014602482015273199c9bdb481858d8dbdd5b9d081b9bdd081cd95d60621b6044820152606401610588565b6001600160a01b03861660009081526038602052604090208054610d985760405162461bcd60e51b81526020600482015260136024820152722737ba3434b733903a37903a3930b739b332b960691b6044820152606401610588565b604051633a3930b760e11b602082015230606090811b6bffffffffffffffffffffffff19908116602484015289821b8116603884015288821b16604c8301526000910160408051601f1981840301815290829052610df8916020016127b5565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff871691830191909152606082018890526080820187905291506001600160a01b0389169060019060a0016020604051602081039080840390855afa158015610e6b573d6000803e3d6000fd5b505050602060405103516001600160a01b031614610ec15760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd9995c881b9bdd08185d5d1a1959606a1b6044820152606401610588565b6001600160a01b03871660009081526038602052604090208254610ee791908490612272565b506001600160a01b0388166000908152603860205260408120610f0991612349565b8154604080516001600160a01b038a811682526020820193909352918a16917fd0ceb9c39a11711e51ee4b32b97b05d660d6229ecd8be94ce934fa9e77910263910160405180910390a25050505050505050565b610f68338383611d89565b6036546033546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610fae57600080fd5b505afa158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe691906126aa565b10156110045760405162461bcd60e51b815260040161058890612969565b5050565b600061101382611e49565b6001600160f01b031692915050565b6001600160a01b0381166000908152603860205260408120815b815481101561112657600082828154811061105957611059612b88565b9060005260206000209060040201905080600301601e9054906101000a900460ff16156110865750611114565b42816001015410156110ac576110a561109e82611ebd565b8590611edd565b9350611112565b61110f61109e6111076110e884600201546110e26110d7428860010154611ee990919063ffffffff16565b600288015490611ee9565b90611ef5565b60038501548554611101916001600160f01b0316611f1e565b90611f1e565b835490611edd565b93505b505b8061111e81612b57565b91505061103c565b5050919050565b611135611300565b6111515760405162461bcd60e51b815260040161058890612932565b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152603860205260408120815b8154811015611126578181815481106111a8576111a8612b88565b9060005260206000209060040201600301601e9054906101000a900460ff166111fb576111f88282815481106111e0576111e0612b88565b60009182526020909120600490910201548490611edd565b92505b8061120581612b57565b91505061118d565b60006112198383611990565b90505b92915050565b6038602052816000526040600020818154811061123e57600080fd5b6000918252602090912060049091020180546001820154600283015460039093015491945092506001600160f01b0381169060ff600160f01b8204811691600160f81b90041686565b6034818154811061129757600080fd5b600091825260209091200154905081565b606060348054806020026020016040519081016040528092919081815260200182805480156112f657602002820191906000526020600020905b8154815260200190600101908083116112e2575b5050505050905090565b6000611318600080516020612bad8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611339611300565b6113555760405162461bcd60e51b815260040161058890612932565b61137d817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661139d600080516020612bad8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6035818154811061129757600080fd5b6113ed611300565b6114095760405162461bcd60e51b815260040161058890612932565b600054610100900460ff1680611422575060005460ff16155b6114855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610588565b600054610100900460ff161580156114a7576000805461ffff19166101011790555b603380546001600160a01b0319166001600160a01b038816179055604080516020868102808301820190935286825261152c928891889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061180b92505050565b801561153e576000805461ff00191690555b505050505050565b33600090815260386020526040902080546115945760405162461bcd60e51b815260206004820152600e60248201526d139bdd1a1a5b99c81cdd185ad95960921b6044820152606401610588565b805460009081905b6000846115aa600184612adb565b815481106115ba576115ba612b88565b906000526020600020906004020190504281600101541080156115e857506003810154600160f01b900460ff165b156115f3575061164a565b42816001015410156116335760038101805460ff60f01b1916600160f01b17905561162061109e82611ebd565b8154909450611630908490611edd565b92505b8161163d81612b1e565b925050506000811161159c575b600083116116925760405162461bcd60e51b81526020600482015260156024820152740416c6c207374616b657320696e206c6f636b2d757605c1b6044820152606401610588565b60365461169f9084611ee9565b603655604080518481526020810184905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a26033546116f4906001600160a01b03163385611f33565b50506036546033546040516370a0823160e01b81523060048201529193506001600160a01b031691506370a082319060240160206040518083038186803b15801561173e57600080fd5b505afa158015611752573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177691906126aa565b1015610bb15760405162461bcd60e51b815260040161058890612969565b6001600160a01b038116600090815260386020526040812061121c90611f9b565b606060358054806020026020016040519081016040528092919081815260200182805480156112f657602002820191906000526020600020908154815260200190600101908083116112e2575050505050905090565b815181511461185c5760405162461bcd60e51b815260206004820152601c60248201527f4d69736d61746368206475726174696f6e7320616e64207261746573000000006044820152606401610588565b60005b81518110156118df576001600160f01b03801682828151811061188457611884612b88565b6020026020010151106118cd5760405162461bcd60e51b815260206004820152601160248201527013585e081c985d1948195e18d959591959607a1b6044820152606401610588565b806118d781612b57565b91505061185f565b5080516118f390603590602084019061236a565b50815161190790603490602085019061236a565b50336001600160a01b03167fa804368c7f1a6216d92d17d9753b923dfc3da14ae33d231e8d79e39202e249c3603560405161194291906128c4565b60405180910390a2336001600160a01b03167f180120279c2eb356244609197b5b64c0fbabd60f8d073b75aba771a296bb63d4603460405161198491906128c4565b60405180910390a25050565b6001600160a01b0382166000908152603860205260408120815b8154811015611a0a578360ff168282815481106119c9576119c9612b88565b6000918252602090912060049091020160030154600160f81b900460ff1614156119f85760019250505061121c565b80611a0281612b57565b9150506119aa565b506000949350505050565b60375460ff1615611a595760405162461bcd60e51b815260206004820152600e60248201526d14dd185ada5b99c81c185d5cd95960921b6044820152606401610588565b6001600160a01b038516600090815260386020526040812090611a7c4286611edd565b82549091506101008110611abf5760405162461bcd60e51b815260206004820152600a6024820152694d6178207374616b657360b01b6044820152606401610588565b8254600101835560008390525b8015801590611b0757508183611ae3600184612adb565b81548110611af357611af3612b88565b906000526020600020906004020160010154115b15611bf15782611b18600183612adb565b81548110611b2857611b28612b88565b9060005260206000209060040201838281548110611b4857611b48612b88565b6000918252602090912082546004909202019081556001808301548183015560028084015490830155600392830180549390920180546001600160f01b039094166001600160f01b031985168117825583546001600160f81b031990951617600160f01b9485900460ff90811615159095021780825592546001600160f81b03909316600160f81b93849004909416909202929092179055611bea9082612adb565b9050611acc565b6000838281548110611c0557611c05612b88565b600091825260209091206004909102016003810180546001600160f01b03891660ff60f01b90911617600160f81b60ff8c160217905560018101849055600281018890558581559050611c63611c5a82611ebd565b60365490611edd565b60365560408051868152602081018990526001600160f01b0388168183015290516001600160a01b038b16917fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed919081900360600190a2505050505050505050565b6001600160a01b038116611d1b5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610588565b806001600160a01b0316611d3b600080516020612bad8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611d8681600080516020612bad83398151915255565b50565b60008211611dca5760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610588565b6000611dd582611e49565b90506000816001600160f01b031611611e235760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152606401610588565b611e31846000848487611a15565b603354610671906001600160a01b0316853086612023565b6000805b603454811015611eb45760348181548110611e6a57611e6a612b88565b9060005260206000200154831415611ea25760358181548110611e8f57611e8f612b88565b9060005260206000200154915050919050565b80611eac81612b57565b915050611e4d565b50600092915050565b6003810154815460009161121c91611107916001600160f01b0316611f1e565b60006112198284612997565b60006112198284612adb565b600080611f0a84670de0b6b3a764000061205b565b9050611f168184612067565b949350505050565b60006112198383670de0b6b3a7640000612073565b6040516001600160a01b038316602482015260448101829052611f9690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612095565b505050565b6000805b825481101561201d576000838281548110611fbc57611fbc612b88565b9060005260206000209060040201905080600301601e9054906101000a900460ff1661200a57600381015481546120079161200091906001600160f01b0316611f1e565b8490611edd565b92505b508061201581612b57565b915050611f9f565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526106719085906323b872dd60e01b90608401611f5f565b60006112198284612abc565b600061121982846129af565b600080612080858561205b565b905061208c8184612067565b95945050505050565b60006120ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121679092919063ffffffff16565b805190915015611f9657808060200190518101906121089190612674565b611f965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610588565b6060611f16848460008585843b6121c05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610588565b600080866001600160a01b031685876040516121dc9190612799565b60006040518083038185875af1925050503d8060008114612219576040519150601f19603f3d011682016040523d82523d6000602084013e61221e565b606091505b509150915061222e828286612239565b979650505050505050565b60608315612248575081610c2e565b8251156122585782518084602001fd5b8160405162461bcd60e51b815260040161058891906128ff565b8280548282559060005260206000209060040281019282156123395760005260206000209160040282015b82811115612339578254825560018084015490830155600280840154908301556003808401805491840180546001600160f01b031981166001600160f01b039094169384178255825460ff600160f01b91829004811615159091026001600160f81b0319909216909417178082559154600160f81b908190049093169092026001600160f81b039091161790556004928301929091019061229d565b506123459291506123b1565b5090565b5080546000825560040290600052602060002090810190611d8691906123b1565b8280548282559060005260206000209081019282156123a5579160200282015b828111156123a557825182559160200191906001019061238a565b506123459291506123da565b5b80821115612345576000808255600182018190556002820181905560038201556004016123b2565b5b8082111561234557600081556001016123db565b80356001600160a01b038116811461240657600080fd5b919050565b60008083601f84011261241d57600080fd5b50813567ffffffffffffffff81111561243557600080fd5b6020830191508360208260051b850101111561245057600080fd5b9250929050565b803560ff8116811461240657600080fd5b60006020828403121561247a57600080fd5b611219826123ef565b600080600080600060a0868803121561249b57600080fd5b6124a4866123ef565b94506124b2602087016123ef565b935060408601359250606086013591506124ce60808701612457565b90509295509295909350565b6000806000806000606086880312156124f257600080fd5b6124fb866123ef565b9450602086013567ffffffffffffffff8082111561251857600080fd5b61252489838a0161240b565b9096509450604088013591508082111561253d57600080fd5b5061254a8882890161240b565b969995985093965092949392505050565b6000806040838503121561256e57600080fd5b612577836123ef565b946020939093013593505050565b60008060006060848603121561259a57600080fd5b6125a3846123ef565b95602085013595506040909401359392505050565b600080604083850312156125cb57600080fd5b6125d4836123ef565b91506125e260208401612457565b90509250929050565b6000806000806040858703121561260157600080fd5b843567ffffffffffffffff8082111561261957600080fd5b6126258883890161240b565b9096509450602087013591508082111561263e57600080fd5b5061264b8782880161240b565b95989497509550505050565b60006020828403121561266957600080fd5b8135610c2e81612b9e565b60006020828403121561268657600080fd5b8151610c2e81612b9e565b6000602082840312156126a357600080fd5b5035919050565b6000602082840312156126bc57600080fd5b5051919050565b600080604083850312156126d657600080fd5b50508035926020909101359150565b600080600080600080600060c0888a03121561270057600080fd5b8735965061271060208901612457565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561274157600080fd5b61274d8a828b0161240b565b989b979a50959850939692959293505050565b60006020828403121561277257600080fd5b61121982612457565b60008060006060848603121561279057600080fd5b6125a384612457565b600082516127ab818460208701612af2565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3634000000008152600082516127ed81601c850160208701612af2565b91909101601c0192915050565b602080825282518282018190526000919060409081850190868401855b8281101561287357815180518552868101518786015285810151868601526060808201516001600160f01b03169086015260808082015115159086015260a09081015160ff169085015260c09093019290850190600101612817565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156128b85783518352928401929184019160010161289c565b50909695505050505050565b6020808252825482820181905260008481528281209092916040850190845b818110156128b8578354835260019384019392850192016128e3565b602081526000825180602084015261291e816040850160208701612af2565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602080825260149082015273496e73756666696369656e74207265776172647360601b604082015260600190565b600082198211156129aa576129aa612b72565b500190565b6000826129cc57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612a0c5781600019048211156129f2576129f2612b72565b808516156129ff57918102915b93841c93908002906129d6565b509250929050565b60006112198383600082612a2a5750600161121c565b81612a375750600061121c565b8160018114612a4d5760028114612a5757612a73565b600191505061121c565b60ff841115612a6857612a68612b72565b50506001821b61121c565b5060208310610133831016604e8410600b8410161715612a96575081810a61121c565b612aa083836129d1565b8060001904821115612ab457612ab4612b72565b029392505050565b6000816000190483118215151615612ad657612ad6612b72565b500290565b600082821015612aed57612aed612b72565b500390565b60005b83811015612b0d578181015183820152602001612af5565b838111156106715750506000910152565b600081612b2d57612b2d612b72565b506000190190565b600061ffff80831681811415612b4d57612b4d612b72565b6001019392505050565b6000600019821415612b6b57612b6b612b72565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8015158114611d8657600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212201a45e8dd45a58820b38c33f5e03b58c01c358bd06c87693734bcd9ffbf46d4dd64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airDroppedStake(uint256,uint8,uint256,uint256,uint256,bytes32[])": {
        "details": "Make a preapproved stake for the user, this is a presigned voucher that the user can redeem either from      an airdrop or a compensation program.      Only 1 of each type is allowed per user. The proof must match the root hash",
        "params": {
          "amount": "Number of tokens to stake in 1e18",
          "duration": "Number of seconds this stake will be held for",
          "index": "Number that is zero base index of the stake in the payout entry",
          "merkleProof": "Array of proofs for that amount",
          "rate": "Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 to fit the bool and type in struct Stake",
          "stakeType": "Number that represent the type of the stake, must not be 0 which is user stake"
        }
      },
      "airDroppedStakeClaimed(address,uint8)": {
        "details": "Has the airdropped stake already been claimed"
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "durationRewardRate(uint256)": {
        "details": "Find the rate that corresponds to a given duration",
        "params": {
          "_duration": "Number of seconds"
        }
      },
      "exit()": {
        "details": "Exit out of all possible stakes"
      },
      "getAllStakes(address)": {
        "details": "Return all the stakes paid and unpaid for a given user",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,uint256[],uint256[])": {
        "details": "Initialize the contracts, sets up durations, rates, and preApprover      for preApproved contracts can only be called once",
        "params": {
          "_durations": "Array of allowed durations in seconds",
          "_rates": "Array of rates(0.3 is 30%) that correspond to the allowed               durations in 1e18 precision",
          "_stakingToken": "Address of the token that we are staking"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "setAirDropRoot(uint8,bytes32,uint256)": {
        "details": "Set air drop root for a specific stake type",
        "params": {
          "_proofDepth": "Depth of the Merklke Tree",
          "_rootHash": "Root hash of the Merkle Tree",
          "_stakeType": "Type of staking must be greater than 0"
        }
      },
      "setDurationRates(uint256[],uint256[])": {
        "details": "Set new durations and rates will not effect existing stakes",
        "params": {
          "_durations": "Array of durations in seconds",
          "_rates": "Array of rates that corresponds to the durations (0.01 is 1%) in 1e18"
        }
      },
      "setTransferAgent(address)": {
        "details": "Set the agent that will authorize transfers",
        "params": {
          "_agent": "Address of agent"
        }
      },
      "stake(uint256,uint256)": {
        "details": "Stake an approved amount of staking token into the contract.      User must have already approved the contract for specified amount.",
        "params": {
          "amount": "Number of tokens to stake in 1e18",
          "duration": "Number of seconds this stake will be held for"
        }
      },
      "stakeWithSender(address,uint256,uint256)": {
        "details": "Stake an approved amount of staking token into the contract. This function      can only be called by OGN token contract.",
        "params": {
          "amount": "Number of tokens to stake in 1e18",
          "duration": "Number of seconds this stake will be held for",
          "staker": "Address of the account that is creating the stake"
        }
      },
      "totalCurrentHoldings(address)": {
        "details": "Calculate all current holdings of a user: staked value + prorated rewards",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "totalExpectedRewards(address)": {
        "details": "Calculate all the rewards a user can expect to receive.",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "totalStaked(address)": {
        "details": "Calculate all the staked value a user has put into the contract,      rewards not included",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferStakes(address,address,bytes32,bytes32,uint8)": {
        "details": "Use to transfer all the stakes of an account in the case that the account is compromised      Requires access to both the account itself and the transfer agent",
        "params": {
          "_dstAccount": "the address to transfer to(must be a clean address with no stakes)",
          "_frmAccount": "the address to transfer from",
          "r": "r portion of the signature by the transfer agent",
          "s": "s portion of the signature",
          "v": "v portion of the signature"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16819,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16822,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16862,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11097,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 11118,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "durations",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11121,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "rates",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11123,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "totalOutstanding",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 11125,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "paused",
        "offset": 0,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 11131,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "userStakes",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_array(t_struct(Stake)11110_storage)dyn_storage)"
      },
      {
        "astId": 11136,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "dropRoots",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_uint8,t_struct(DropRoot)11115_storage)"
      },
      {
        "astId": 11144,
        "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
        "label": "transferAgent",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)11110_storage)dyn_storage": {
        "base": "t_struct(Stake)11110_storage",
        "encoding": "dynamic_array",
        "label": "struct SingleAssetStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Stake)11110_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SingleAssetStaking.Stake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Stake)11110_storage)dyn_storage"
      },
      "t_mapping(t_uint8,t_struct(DropRoot)11115_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct SingleAssetStaking.DropRoot)",
        "numberOfBytes": "32",
        "value": "t_struct(DropRoot)11115_storage"
      },
      "t_struct(DropRoot)11115_storage": {
        "encoding": "inplace",
        "label": "struct SingleAssetStaking.DropRoot",
        "members": [
          {
            "astId": 11112,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11114,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "depth",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)11110_storage": {
        "encoding": "inplace",
        "label": "struct SingleAssetStaking.Stake",
        "members": [
          {
            "astId": 11099,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11101,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11103,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11105,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "rate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint240"
          },
          {
            "astId": 11107,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "paid",
            "offset": 30,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 11109,
            "contract": "contracts/staking/SingleAssetStaking.sol:SingleAssetStaking",
            "label": "stakeType",
            "offset": 31,
            "slot": "3",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint240": {
        "encoding": "inplace",
        "label": "uint240",
        "numberOfBytes": "30"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
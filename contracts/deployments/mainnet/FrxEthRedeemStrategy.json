{
  "address": "0xEFa87a78157Ccad82E4AE5925fbcB8a1E7fBC5Da",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "platformAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            }
          ],
          "internalType": "struct InitializableAbstractStrategy.BaseStrategyConfig",
          "name": "_stratConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "RedeemNFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemNFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeemTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outstandingRedeems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "expectedAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x76fa19d35e57d0dff7cd002e4428316f6b544d768b366894521aea234556cc5c",
  "receipt": {
    "to": null,
    "from": "0x69e078EBc4631E1947F0c38Ef0357De7ED064644",
    "contractAddress": "0xEFa87a78157Ccad82E4AE5925fbcB8a1E7fBC5Da",
    "transactionIndex": 33,
    "gasUsed": "2603154",
    "logsBloom": "0x
    "blockHash": "0xd1b8e1401ff0b98880e65428fbd77434c26806524b3ade6f0a46bdadc2621e4d",
    "transactionHash": "0x76fa19d35e57d0dff7cd002e4428316f6b544d768b366894521aea234556cc5c",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 19435303,
        "transactionHash": "0x76fa19d35e57d0dff7cd002e4428316f6b544d768b366894521aea234556cc5c",
        "address": "0xEFa87a78157Ccad82E4AE5925fbcB8a1E7fBC5Da",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069e078ebc4631e1947f0c38ef0357de7ed064644"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0xd1b8e1401ff0b98880e65428fbd77434c26806524b3ade6f0a46bdadc2621e4d"
      }
    ],
    "blockNumber": 19435303,
    "cumulativeGasUsed": "5220209",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0x39254033945AA2E4809Cc2977E7087BEE48bd7Ab"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "f11290f11650e276f0068e87d09cae45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct InitializableAbstractStrategy.BaseStrategyConfig\",\"name\":\"_stratConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"RedeemNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RedeemNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeemTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outstandingRedeems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"redeemTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"getRewardTokenAddresses()\":{\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"initialize(address[],address[],address[])\":{\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_rewardTokenAddresses\":\"Address of reward token for platform\"}},\"redeemTickets(uint256[],uint256)\":{\"params\":{\"_nftIds\":\"Array of NFT IDs to redeem\"}},\"removePToken(uint256)\":{\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"setHarvesterAddress(address)\":{\"params\":{\"_harvesterAddress\":\"Address of the harvester contract.\"}},\"setPTokenAddress(address,address)\":{\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"params\":{\"_rewardTokenAddresses\":\"Array of reward token addresses\"}},\"supportsAsset(address)\":{\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"_0\":\"bool     Whether asset is supported\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of assets to withdraw\",\"_asset\":\"Address of the asset to withdraw\",\"_recipient\":\"Address to receive withdrawn assets\"}}},\"title\":\"Frax ETH Redeem Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetToPToken(address)\":{\"notice\":\"asset => pToken (Platform Specific Token Address)\"},\"checkBalance(address)\":{\"notice\":\"Returns the amount of queued FraxEth that will be returned as WETH. We return this as a WETH asset, since that is what it will eventually be returned as. We only return the outstandingRedeems, because the contract itself should never hold any funds.\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"notice\":\"Collect accumulated reward token and send to Vault.\"},\"deposit(address,uint256)\":{\"notice\":\"deposit() function not used for this strategy. Use depositAll() instead.\"},\"depositAll()\":{\"notice\":\"Takes all given frxETH and creates new redeem tickets\"},\"getRewardTokenAddresses()\":{\"notice\":\"Get the reward token addresses.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"harvesterAddress()\":{\"notice\":\"Address of the Harvester contract allowed to collect reward tokens\"},\"initialize(address[],address[],address[])\":{\"notice\":\"initialize function, to set up initial internal state\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"platformAddress()\":{\"notice\":\"Address of the underlying platform\"},\"redeemTickets(uint256[],uint256)\":{\"notice\":\"Redeem specific tickets from the Queue. Called by the strategist.\"},\"removePToken(uint256)\":{\"notice\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\"},\"rewardTokenAddresses(uint256)\":{\"notice\":\"Address of the reward tokens. eg CRV, BAL, CVX, AURA\"},\"safeApproveAllTokens()\":{\"notice\":\"Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"notice\":\"Set the Harvester contract that can collect rewards.\"},\"setPTokenAddress(address,address)\":{\"notice\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\"},\"setRewardTokenAddresses(address[])\":{\"notice\":\"Set the reward token addresses. Any old addresses will be overwritten.\"},\"supportsAsset(address)\":{\"notice\":\"Check if an asset is supported.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\"},\"vaultAddress()\":{\"notice\":\"Address of the OToken vault\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraw an asset from the underlying platform\"},\"withdrawAll()\":{\"notice\":\"Withdraw all assets from this strategy, and transfer to the Vault. In correct operation, this strategy should never hold any assets.\"}},\"notice\":\"This strategy redeems Frax ETH for ETH via the Frax Eth Redemption Queue contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/FrxEthRedeemStrategy.sol\":\"FrxEthRedeemStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n\\n    function weth() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6c277abbadfcf46c401590f23e04c97e0cdf7e55e9afbb4a7c4dd687e46b5a02\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x05b7dce6c24d3cd4e48b5c6346d86e5e40ecc3291bcdf3f3ef091c98fc826519\",\"license\":\"MIT\"},\"contracts/strategies/FrxEthRedeemStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { IWETH9 } from \\\"../interfaces/IWETH9.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\ninterface IFraxEtherRedemptionQueue {\\n    function burnRedemptionTicketNft(uint256 _nftId, address payable _recipient)\\n        external;\\n\\n    function enterRedemptionQueue(address _recipient, uint120 _amountToRedeem)\\n        external\\n        returns (uint256 _nftId);\\n}\\n\\n/**\\n * @title Frax ETH Redeem Strategy\\n * @notice This strategy redeems Frax ETH for ETH via the Frax Eth Redemption Queue contract\\n * @author Origin Protocol Inc\\n */\\ncontract FrxEthRedeemStrategy is InitializableAbstractStrategy {\\n    IWETH9 private constant weth =\\n        IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20 private constant frxETH =\\n        IERC20(0x5E8422345238F34275888049021821E8E08CAa1f);\\n    IFraxEtherRedemptionQueue private constant redemptionQueue =\\n        IFraxEtherRedemptionQueue(0x82bA8da44Cd5261762e629dd5c605b17715727bd);\\n    uint256 public constant maxRedeemTicket = 250e18;\\n    uint256 public outstandingRedeems;\\n\\n    event RedeemNFTMinted(uint256 _nftId, uint256 _amount);\\n    event RedeemNFTBurned(uint256 _nftId);\\n\\n    constructor(BaseStrategyConfig memory _stratConfig)\\n        InitializableAbstractStrategy(_stratConfig)\\n    {\\n        require(maxRedeemTicket < type(uint120).max);\\n    }\\n\\n    /**\\n     * @notice initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n        safeApproveAllTokens();\\n    }\\n\\n    /**\\n     * @notice deposit() function not used for this strategy. Use depositAll() instead.\\n     */\\n    function deposit(address, uint256) public override onlyVault nonReentrant {\\n        // This method no longer used by the VaultAdmin, and we don't want it\\n        // to be used by VaultCore.\\n        require(false, \\\"use depositAll() instead\\\");\\n    }\\n\\n    /**\\n     * @notice Takes all given frxETH and creates new redeem tickets\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        uint256 frxETHStart = frxETH.balanceOf(address(this));\\n        require(frxETHStart > 0, \\\"No frxETH to redeem\\\");\\n        uint256 frxETHRemaining = frxETHStart;\\n\\n        while (frxETHRemaining > 0) {\\n            uint256 amount = frxETHRemaining > maxRedeemTicket\\n                ? maxRedeemTicket\\n                : frxETHRemaining;\\n            uint256 nftId = redemptionQueue.enterRedemptionQueue(\\n                address(this),\\n                uint120(amount)\\n            );\\n            frxETHRemaining -= amount;\\n            emit RedeemNFTMinted(nftId, amount);\\n        }\\n\\n        require(\\n            frxETH.balanceOf(address(this)) == 0,\\n            \\\"Not all FraxEth sent to redemption queue\\\"\\n        );\\n        outstandingRedeems += frxETHStart; // Single set for gas reasons\\n\\n        // This strategy claims to support WETH, so it is posible for\\n        // the vault to transfer WETH to it. This returns any deposited WETH\\n        // to the vault so that it is not lost for balance tracking purposes.\\n        uint256 wethBalance = weth.balanceOf(address(this));\\n        if (wethBalance > 0) {\\n            // slither-disable-next-line unchecked-transfer\\n            weth.transfer(vaultAddress, wethBalance);\\n        }\\n\\n        emit Deposit(address(frxETH), address(redemptionQueue), frxETHStart);\\n    }\\n\\n    /**\\n     * @notice Withdraw an asset from the underlying platform\\n     * @param _recipient Address to receive withdrawn assets\\n     * @param _asset Address of the asset to withdraw\\n     * @param _amount Amount of assets to withdraw\\n     */\\n    function withdraw(\\n        // solhint-disable-next-line no-unused-vars\\n        address _recipient,\\n        // solhint-disable-next-line no-unused-vars\\n        address _asset,\\n        // solhint-disable-next-line no-unused-vars\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        // Does nothing - all redeems need to be called manually by the\\n        // strategist via redeemTickets\\n        require(false, \\\"use redeemTickets() instead\\\");\\n    }\\n\\n    /**\\n     * @notice Redeem specific tickets from the Queue.\\n     * Called by the strategist.\\n     * @param _nftIds Array of NFT IDs to redeem\\n     */\\n    function redeemTickets(uint256[] memory _nftIds, uint256 expectedAmount)\\n        external\\n        nonReentrant\\n    {\\n        require(\\n            msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Strategist\\\"\\n        );\\n        uint256 startingBalance = payable(address(this)).balance;\\n        for (uint256 i = 0; i < _nftIds.length; i++) {\\n            uint256 nftId = _nftIds[i];\\n            redemptionQueue.burnRedemptionTicketNft(\\n                nftId,\\n                payable(address(this))\\n            );\\n            emit RedeemNFTBurned(nftId);\\n        }\\n\\n        uint256 currentBalance = payable(address(this)).balance;\\n        uint256 redeemedAmount = currentBalance - startingBalance;\\n        require(\\n            expectedAmount == redeemedAmount,\\n            \\\"Redeemed amount does not match expected amount\\\"\\n        );\\n        outstandingRedeems -= redeemedAmount;\\n        weth.deposit{ value: currentBalance }();\\n        // slither-disable-next-line unchecked-transfer\\n        weth.transfer(vaultAddress, currentBalance);\\n        emit Withdrawal(\\n            address(weth),\\n            address(redemptionQueue),\\n            currentBalance\\n        );\\n    }\\n\\n    function _abstractSetPToken(address, address)\\n        internal\\n        override\\n    {\\n        revert(\\\"No pTokens are used\\\");\\n    }\\n\\n    /**\\n     * @notice Withdraw all assets from this strategy, and transfer to the Vault.\\n     * In correct operation, this strategy should never hold any assets.\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        if (payable(address(this)).balance > 0) {\\n            weth.deposit{ value: payable(address(this)).balance }();\\n        }\\n        uint256 wethBalance = weth.balanceOf(address(this));\\n        if (wethBalance > 0) {\\n            // slither-disable-next-line unchecked-transfer\\n            weth.transfer(vaultAddress, wethBalance);\\n            emit Withdrawal(address(weth), address(0), wethBalance);\\n        }\\n        uint256 fraxEthBalance = frxETH.balanceOf(address(this));\\n        if (fraxEthBalance > 0) {\\n            // slither-disable-next-line unchecked-transfer\\n            frxETH.transfer(vaultAddress, fraxEthBalance);\\n            emit Withdrawal(address(frxETH), address(0), fraxEthBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the amount of queued FraxEth that will be returned as WETH.\\n     * We return this as a WETH asset, since that is what it will eventually be returned as.\\n     * We only return the outstandingRedeems, because the contract itself should never hold any funds.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        if (_asset == address(weth)) {\\n            return outstandingRedeems;\\n        } else if (_asset == address(frxETH)) {\\n            return 0;\\n        } else {\\n            revert(\\\"Unexpected asset address\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Approve the spending of all assets by their corresponding cToken,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens() public override {\\n        // slither-disable-next-line unused-return\\n        frxETH.approve(address(redemptionQueue), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public pure override returns (bool) {\\n        // frxETH can be deposited by the vault and balances are reported in weth\\n        return _asset == address(frxETH) || _asset == address(weth);\\n    }\\n\\n    function onERC721Received(\\n        // solhint-disable-next-line no-unused-vars\\n        address operator,\\n        // solhint-disable-next-line no-unused-vars\\n        address from,\\n        // solhint-disable-next-line no-unused-vars\\n        uint256 tokenId,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x4f496aa154b8d722d9b9a245634a304c9747e17651ce71290f096076128ee0f6\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    event AccountRebasingEnabled(address account);\\n    event AccountRebasingDisabled(address account);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            emit AccountRebasingDisabled(_account);\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable rebasing for an account.\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account)\\n        public\\n        nonReentrant\\n        onlyGovernor\\n    {\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        require(_isNonRebasingAccount(_account), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[_account]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(_account));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(_account));\\n\\n        _creditBalances[_account] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[_account]);\\n\\n        rebaseState[_account] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[_account];\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n        emit AccountRebasingDisabled(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2dc66b1ba02716d64eb47dd9117fda62650d8b57669e6c351437e0ad29ad5f19\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Vault.\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x54a92d8ffa93ec8d047e95d93e0293f1b528a4a97d6d3c12c04d132ac882004a\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n * @author Origin Protocol Inc\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xe35ac2d813a30d845a3b52bba72588d7e936c2b3f3373d15568c14db46aeed60\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configiration\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n    address public ousdMetaStrategy = address(0);\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy = 0;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold = 0;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19891574f3b33074486f48166879b4cccc88162c392e77192bd54367ec263287\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002f7338038062002f738339810160408190526200003491620000da565b806200004d3360008051602062002f5383398151915255565b60008051602062002f53833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a380516001600160601b0319606091821b8116608052602090920151901b1660a0525062000148565b80516001600160a01b0381168114620000d557600080fd5b919050565b600060408284031215620000ed57600080fd5b604080519081016001600160401b03811182821017156200011e57634e487b7160e01b600052604160045260246000fd5b6040526200012c83620000bd565b81526200013c60208401620000bd565b60208201529392505050565b60805160601c60a05160601c612da0620001b3600039600081816102c8015281816107a201528181610a9f01528181610b9f01528181610e7801528181611080015281816112120152818161183d015281816119030152611d11015260006105360152612da06000f3fe6080604052600436106101bb5760003560e01c80637b2d9b2c116100ec578063c2e1e3f41161008a578063d9caed1211610064578063d9caed1214610504578063dbe55e5614610524578063de5f626814610558578063f6ca71b01461056d57600080fd5b8063c2e1e3f4146104af578063c7af3352146104cf578063d38bfff4146104e457600080fd5b806396d538bb116100c657806396d538bb1461042d578063999de1bf1461044d578063aa388af61461046a578063ad1728cb1461049a57600080fd5b80637b2d9b2c146103d8578063853828b6146103f85780639136616a1461040d57600080fd5b806346552ccb116101595780635d36b190116101335780635d36b1901461035f5780635f5152261461037457806367c7066c146103a2578063761f8353146103c257600080fd5b806346552ccb1461030a57806347e7ef241461032a5780635a063f631461034a57600080fd5b80631072cbea116101955780631072cbea14610251578063150b7a0214610271578063430bf08a146102b6578063435356d1146102ea57600080fd5b80630c340a24146101c75780630ed57b3a146101f95780630fc3b4c41461021b57600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101dc61058f565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b506102196102143660046126db565b6105ac565b005b34801561022757600080fd5b506101dc6102363660046126a1565b6035602052600090815260409020546001600160a01b031681565b34801561025d57600080fd5b5061021961026c3660046127f4565b6105e7565b34801561027d57600080fd5b5061029d61028c366004612755565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101f0565b3480156102c257600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f657600080fd5b50610219610305366004612895565b61067d565b34801561031657600080fd5b5061021961032536600461291d565b61076a565b34801561033657600080fd5b506102196103453660046127f4565b610b94565b34801561035657600080fd5b50610219610c5a565b34801561036b57600080fd5b50610219610cf9565b34801561038057600080fd5b5061039461038f3660046126a1565b610d9f565b6040519081526020016101f0565b3480156103ae57600080fd5b506039546101dc906001600160a01b031681565b3480156103ce57600080fd5b50610394609d5481565b3480156103e457600080fd5b506101dc6103f33660046129dd565b610e43565b34801561040457600080fd5b50610219610e6d565b34801561041957600080fd5b506102196104283660046129dd565b6112f2565b34801561043957600080fd5b50610219610448366004612820565b6114bd565b34801561045957600080fd5b50610394680d8d726b7177a8000081565b34801561047657600080fd5b5061048a6104853660046126a1565b6115dd565b60405190151581526020016101f0565b3480156104a657600080fd5b5061021961162c565b3480156104bb57600080fd5b506102196104ca3660046126a1565b6116d0565b3480156104db57600080fd5b5061048a61175d565b3480156104f057600080fd5b506102196104ff3660046126a1565b61178e565b34801561051057600080fd5b5061021961051f366004612714565b611832565b34801561053057600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056457600080fd5b506102196118f8565b34801561057957600080fd5b50610582611e05565b6040516101f09190612a44565b60006105a7600080516020612d4b8339815191525490565b905090565b6105b461175d565b6105d95760405162461bcd60e51b81526004016105d090612b93565b60405180910390fd5b6105e38282611e67565b5050565b6105ef61175d565b61060b5760405162461bcd60e51b81526004016105d090612b93565b610614826115dd565b156106615760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f727465642061737365740060448201526064016105d0565b6105e361066c61058f565b6001600160a01b0384169083611fcc565b61068561175d565b6106a15760405162461bcd60e51b81526004016105d090612b93565b600054610100900460ff16806106ba575060005460ff16155b61071d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d0565b600054610100900460ff1615801561073f576000805461ffff19166101011790555b61074a848484612027565b61075261162c565b8015610764576000805461ff00191690555b50505050565b600080516020612d2b8339815191528054600281141561079c5760405162461bcd60e51b81526004016105d090612bca565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f957600080fd5b505afa15801561080d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083191906126be565b6001600160a01b0316336001600160a01b0316146108915760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520537472617465676973740000000060448201526064016105d0565b303160005b85518110156109785760008682815181106108b3576108b3612ce9565b6020908102919091010151604051630a5334e560e01b8152600481018290523060248201529091507382ba8da44cd5261762e629dd5c605b17715727bd90630a5334e590604401600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505050507f0db1b3125d483a6145923495d099e989e2d7cf55afc768528736b83582694cfb8160405161095d91815260200190565b60405180910390a1508061097081612ca2565b915050610896565b50303160006109878383612c5f565b90508086146109ef5760405162461bcd60e51b815260206004820152602e60248201527f52656465656d656420616d6f756e7420646f6573206e6f74206d61746368206560448201526d1e1c1958dd195908185b5bdd5b9d60921b60648201526084016105d0565b80609d6000828254610a019190612c5f565b9250508190555073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a5757600080fd5b505af1158015610a6b573d6000803e3d6000fd5b505060405163a9059cbb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2935063a9059cbb9250610ac991507f0000000000000000000000000000000000000000000000000000000000000000908690600401612a2b565b602060405180830381600087803b158015610ae357600080fd5b505af1158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b91906129bb565b5073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63987382ba8da44cd5261762e629dd5c605b17715727bd84604051610b7f929190612a2b565b60405180910390a25050506001825550505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bdc5760405162461bcd60e51b81526004016105d090612b5c565b600080516020612d2b83398151915280546002811415610c0e5760405162461bcd60e51b81526004016105d090612bca565b6002825560405162461bcd60e51b815260206004820152601860248201527f757365206465706f736974416c6c282920696e7374656164000000000000000060448201526064016105d0565b6039546001600160a01b03163314610cb45760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f742074686520486172766573746572000000000060448201526064016105d0565b600080516020612d2b83398151915280546002811415610ce65760405162461bcd60e51b81526004016105d090612bca565b60028255610cf26120e2565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610d945760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016105d0565b610d9d3361220e565b565b60006001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21415610dce575050609d5490565b6001600160a01b038216735e8422345238f34275888049021821e8e08caa1f1415610dfb57506000919050565b60405162461bcd60e51b815260206004820152601860248201527f556e65787065637465642061737365742061646472657373000000000000000060448201526064016105d0565b603a8181548110610e5357600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ebc5750610ea761058f565b6001600160a01b0316336001600160a01b0316145b610f145760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b60648201526084016105d0565b600080516020612d2b83398151915280546002811415610f465760405162461bcd60e51b81526004016105d090612bca565b60028255303115610fc45773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0306001600160a01b0316316040518263ffffffff1660e01b81526004016000604051808303818588803b158015610faa57600080fd5b505af1158015610fbe573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b815230600482015260009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319060240160206040518083038186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104991906129f6565b905080156111565760405163a9059cbb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29063a9059cbb906110aa907f0000000000000000000000000000000000000000000000000000000000000000908590600401612a2b565b602060405180830381600087803b1580156110c457600080fd5b505af11580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc91906129bb565b5073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639860008360405161114d929190612a2b565b60405180910390a25b6040516370a0823160e01b8152306004820152600090735e8422345238f34275888049021821e8e08caa1f906370a082319060240160206040518083038186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db91906129f6565b905080156112e85760405163a9059cbb60e01b8152735e8422345238f34275888049021821e8e08caa1f9063a9059cbb9061123c907f0000000000000000000000000000000000000000000000000000000000000000908590600401612a2b565b602060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e91906129bb565b50735e8422345238f34275888049021821e8e08caa1f6001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63986000836040516112df929190612a2b565b60405180910390a25b5050600182555050565b6112fa61175d565b6113165760405162461bcd60e51b81526004016105d090612b93565b60365481106113575760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016105d0565b60006036828154811061136c5761136c612ce9565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906113a990600190612c5f565b83101561142b57603680546113c090600190612c5f565b815481106113d0576113d0612ce9565b600091825260209091200154603680546001600160a01b0390921691859081106113fc576113fc612ce9565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061143c5761143c612cd3565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b6114c561175d565b6114e15760405162461bcd60e51b81526004016105d090612b93565b8060005b8181101561159457600084848381811061150157611501612ce9565b905060200201602081019061151691906126a1565b6001600160a01b031614156115845760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b60648201526084016105d0565b61158d81612ca2565b90506114e5565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a84846040516115c993929190612a91565b60405180910390a1610764603a8484612559565b60006001600160a01b038216735e8422345238f34275888049021821e8e08caa1f148061162657506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b92915050565b60405163095ea7b360e01b8152735e8422345238f34275888049021821e8e08caa1f9063095ea7b39061167b907382ba8da44cd5261762e629dd5c605b17715727bd9060001990600401612a2b565b602060405180830381600087803b15801561169557600080fd5b505af11580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd91906129bb565b50565b6116d861175d565b6116f45760405162461bcd60e51b81526004016105d090612b93565b603954604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a1603980546001600160a01b0319166001600160a01b0392909216919091179055565b6000611775600080516020612d4b8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61179661175d565b6117b25760405162461bcd60e51b81526004016105d090612b93565b6117da817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166117fa600080516020612d4b8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461187a5760405162461bcd60e51b81526004016105d090612b5c565b600080516020612d2b833981519152805460028114156118ac5760405162461bcd60e51b81526004016105d090612bca565b6002825560405162461bcd60e51b815260206004820152601b60248201527f7573652072656465656d5469636b657473282920696e7374656164000000000060448201526064016105d0565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119405760405162461bcd60e51b81526004016105d090612b5c565b600080516020612d2b833981519152805460028114156119725760405162461bcd60e51b81526004016105d090612bca565b600282556040516370a0823160e01b8152306004820152600090735e8422345238f34275888049021821e8e08caa1f906370a082319060240160206040518083038186803b1580156119c357600080fd5b505afa1580156119d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fb91906129f6565b905060008111611a435760405162461bcd60e51b81526020600482015260136024820152724e6f2066727845544820746f2072656465656d60681b60448201526064016105d0565b805b8015611b5e576000680d8d726b7177a800008211611a635781611a6e565b680d8d726b7177a800005b6040516327a3cc5760e11b81523060048201526effffffffffffffffffffffffffffff821660248201529091506000907382ba8da44cd5261762e629dd5c605b17715727bd90634f4798ae90604401602060405180830381600087803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f91906129f6565b9050611b1b8284612c5f565b60408051838152602081018590529194507f536614cc61a8a2c89cee49f31b1bd84fb4f55b2aea4c1b98a97ea9f77bc860f6910160405180910390a15050611a45565b6040516370a0823160e01b8152306004820152735e8422345238f34275888049021821e8e08caa1f906370a082319060240160206040518083038186803b158015611ba857600080fd5b505afa158015611bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be091906129f6565b15611c3e5760405162461bcd60e51b815260206004820152602860248201527f4e6f7420616c6c20467261784574682073656e7420746f20726564656d7074696044820152676f6e20717565756560c01b60648201526084016105d0565b81609d6000828254611c509190612c47565b90915550506040516370a0823160e01b815230600482015260009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319060240160206040518083038186803b158015611ca257600080fd5b505afa158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda91906129f6565b90508015611d8f5760405163a9059cbb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29063a9059cbb90611d3b907f0000000000000000000000000000000000000000000000000000000000000000908590600401612a2b565b602060405180830381600087803b158015611d5557600080fd5b505af1158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d91906129bb565b505b735e8422345238f34275888049021821e8e08caa1f6001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f627382ba8da44cd5261762e629dd5c605b17715727bd85604051611df2929190612a2b565b60405180910390a2505050600182555050565b6060603a805480602002602001604051908101604052809291908181526020018280548015611e5d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e3f575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611ec45760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b60448201526064016105d0565b6001600160a01b03821615801590611ee457506001600160a01b03811615155b611f245760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b60448201526064016105d0565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26105e382826122cf565b6120228363a9059cbb60e01b8484604051602401611feb929190612a2b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261230d565b505050565b825161203a90603a9060208601906125bc565b508151815181146120845760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b60448201526064016105d0565b60005b818110156120db576120cb8482815181106120a4576120a4612ce9565b60200260200101518483815181106120be576120be612ce9565b6020026020010151611e67565b6120d481612ca2565b9050612087565b5050505050565b603a5460005b818110156105e3576000603a828154811061210557612105612ce9565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561215357600080fd5b505afa158015612167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218b91906129f6565b905080156121fb57603954604080516001600160a01b039283168152918416602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a16039546121fb906001600160a01b03848116911683611fcc565b50508061220790612ca2565b90506120e8565b6001600160a01b0381166122645760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016105d0565b806001600160a01b0316612284600080516020612d4b8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36116cd81600080516020612d4b83398151915255565b60405162461bcd60e51b8152602060048201526013602482015272139bc81c151bdad95b9cc8185c99481d5cd959606a1b60448201526064016105d0565b6000612362826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123df9092919063ffffffff16565b805190915015612022578080602001905181019061238091906129bb565b6120225760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d0565b60606123ee84846000856123f8565b90505b9392505050565b6060824710156124595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105d0565b843b6124a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d0565b600080866001600160a01b031685876040516124c39190612a0f565b60006040518083038185875af1925050503d8060008114612500576040519150601f19603f3d011682016040523d82523d6000602084013e612505565b606091505b5091509150612515828286612520565b979650505050505050565b6060831561252f5750816123f1565b82511561253f5782518084602001fd5b8160405162461bcd60e51b81526004016105d09190612b29565b8280548282559060005260206000209081019282156125ac579160200282015b828111156125ac5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612579565b506125b8929150612611565b5090565b8280548282559060005260206000209081019282156125ac579160200282015b828111156125ac57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906125dc565b5b808211156125b85760008155600101612612565b600082601f83011261263757600080fd5b8135602061264c61264783612c23565b612bf2565b80838252828201915082860187848660051b890101111561266c57600080fd5b60005b8581101561269457813561268281612d15565b8452928401929084019060010161266f565b5090979650505050505050565b6000602082840312156126b357600080fd5b81356123f181612d15565b6000602082840312156126d057600080fd5b81516123f181612d15565b600080604083850312156126ee57600080fd5b82356126f981612d15565b9150602083013561270981612d15565b809150509250929050565b60008060006060848603121561272957600080fd5b833561273481612d15565b9250602084013561274481612d15565b929592945050506040919091013590565b60008060008060006080868803121561276d57600080fd5b853561277881612d15565b9450602086013561278881612d15565b935060408601359250606086013567ffffffffffffffff808211156127ac57600080fd5b818801915088601f8301126127c057600080fd5b8135818111156127cf57600080fd5b8960208285010111156127e157600080fd5b9699959850939650602001949392505050565b6000806040838503121561280757600080fd5b823561281281612d15565b946020939093013593505050565b6000806020838503121561283357600080fd5b823567ffffffffffffffff8082111561284b57600080fd5b818501915085601f83011261285f57600080fd5b81358181111561286e57600080fd5b8660208260051b850101111561288357600080fd5b60209290920196919550909350505050565b6000806000606084860312156128aa57600080fd5b833567ffffffffffffffff808211156128c257600080fd5b6128ce87838801612626565b945060208601359150808211156128e457600080fd5b6128f087838801612626565b9350604086013591508082111561290657600080fd5b5061291386828701612626565b9150509250925092565b6000806040838503121561293057600080fd5b823567ffffffffffffffff81111561294757600080fd5b8301601f8101851361295857600080fd5b8035602061296861264783612c23565b80838252828201915082850189848660051b880101111561298857600080fd5b600095505b848610156129ab57803583526001959095019491830191830161298d565b5098969091013596505050505050565b6000602082840312156129cd57600080fd5b815180151581146123f157600080fd5b6000602082840312156129ef57600080fd5b5035919050565b600060208284031215612a0857600080fd5b5051919050565b60008251612a21818460208701612c76565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612a855783516001600160a01b031683529284019291840191600101612a60565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612adb5781546001600160a01b031684529284019260019182019101612ab6565b505050838103828501528481528590820160005b86811015612b1d578235612b0281612d15565b6001600160a01b031682529183019190830190600101612aef565b50979650505050505050565b6020815260008251806020840152612b48816040850160208701612c76565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c1b57612c1b612cff565b604052919050565b600067ffffffffffffffff821115612c3d57612c3d612cff565b5060051b60200190565b60008219821115612c5a57612c5a612cbd565b500190565b600082821015612c7157612c71612cbd565b500390565b60005b83811015612c91578181015183820152602001612c79565b838111156107645750506000910152565b6000600019821415612cb657612cb6612cbd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146116cd57600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212204cd0ad8384c2df2c2303160425d4e2ed3cba0c3f246affd93ea1e597f13ed10164736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80637b2d9b2c116100ec578063c2e1e3f41161008a578063d9caed1211610064578063d9caed1214610504578063dbe55e5614610524578063de5f626814610558578063f6ca71b01461056d57600080fd5b8063c2e1e3f4146104af578063c7af3352146104cf578063d38bfff4146104e457600080fd5b806396d538bb116100c657806396d538bb1461042d578063999de1bf1461044d578063aa388af61461046a578063ad1728cb1461049a57600080fd5b80637b2d9b2c146103d8578063853828b6146103f85780639136616a1461040d57600080fd5b806346552ccb116101595780635d36b190116101335780635d36b1901461035f5780635f5152261461037457806367c7066c146103a2578063761f8353146103c257600080fd5b806346552ccb1461030a57806347e7ef241461032a5780635a063f631461034a57600080fd5b80631072cbea116101955780631072cbea14610251578063150b7a0214610271578063430bf08a146102b6578063435356d1146102ea57600080fd5b80630c340a24146101c75780630ed57b3a146101f95780630fc3b4c41461021b57600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101dc61058f565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020557600080fd5b506102196102143660046126db565b6105ac565b005b34801561022757600080fd5b506101dc6102363660046126a1565b6035602052600090815260409020546001600160a01b031681565b34801561025d57600080fd5b5061021961026c3660046127f4565b6105e7565b34801561027d57600080fd5b5061029d61028c366004612755565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101f0565b3480156102c257600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f657600080fd5b50610219610305366004612895565b61067d565b34801561031657600080fd5b5061021961032536600461291d565b61076a565b34801561033657600080fd5b506102196103453660046127f4565b610b94565b34801561035657600080fd5b50610219610c5a565b34801561036b57600080fd5b50610219610cf9565b34801561038057600080fd5b5061039461038f3660046126a1565b610d9f565b6040519081526020016101f0565b3480156103ae57600080fd5b506039546101dc906001600160a01b031681565b3480156103ce57600080fd5b50610394609d5481565b3480156103e457600080fd5b506101dc6103f33660046129dd565b610e43565b34801561040457600080fd5b50610219610e6d565b34801561041957600080fd5b506102196104283660046129dd565b6112f2565b34801561043957600080fd5b50610219610448366004612820565b6114bd565b34801561045957600080fd5b50610394680d8d726b7177a8000081565b34801561047657600080fd5b5061048a6104853660046126a1565b6115dd565b60405190151581526020016101f0565b3480156104a657600080fd5b5061021961162c565b3480156104bb57600080fd5b506102196104ca3660046126a1565b6116d0565b3480156104db57600080fd5b5061048a61175d565b3480156104f057600080fd5b506102196104ff3660046126a1565b61178e565b34801561051057600080fd5b5061021961051f366004612714565b611832565b34801561053057600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561056457600080fd5b506102196118f8565b34801561057957600080fd5b50610582611e05565b6040516101f09190612a44565b60006105a7600080516020612d4b8339815191525490565b905090565b6105b461175d565b6105d95760405162461bcd60e51b81526004016105d090612b93565b60405180910390fd5b6105e38282611e67565b5050565b6105ef61175d565b61060b5760405162461bcd60e51b81526004016105d090612b93565b610614826115dd565b156106615760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f727465642061737365740060448201526064016105d0565b6105e361066c61058f565b6001600160a01b0384169083611fcc565b61068561175d565b6106a15760405162461bcd60e51b81526004016105d090612b93565b600054610100900460ff16806106ba575060005460ff16155b61071d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105d0565b600054610100900460ff1615801561073f576000805461ffff19166101011790555b61074a848484612027565b61075261162c565b8015610764576000805461ff00191690555b50505050565b600080516020612d2b8339815191528054600281141561079c5760405162461bcd60e51b81526004016105d090612bca565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f957600080fd5b505afa15801561080d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083191906126be565b6001600160a01b0316336001600160a01b0316146108915760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520537472617465676973740000000060448201526064016105d0565b303160005b85518110156109785760008682815181106108b3576108b3612ce9565b6020908102919091010151604051630a5334e560e01b8152600481018290523060248201529091507382ba8da44cd5261762e629dd5c605b17715727bd90630a5334e590604401600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505050507f0db1b3125d483a6145923495d099e989e2d7cf55afc768528736b83582694cfb8160405161095d91815260200190565b60405180910390a1508061097081612ca2565b915050610896565b50303160006109878383612c5f565b90508086146109ef5760405162461bcd60e51b815260206004820152602e60248201527f52656465656d656420616d6f756e7420646f6573206e6f74206d61746368206560448201526d1e1c1958dd195908185b5bdd5b9d60921b60648201526084016105d0565b80609d6000828254610a019190612c5f565b9250508190555073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a5757600080fd5b505af1158015610a6b573d6000803e3d6000fd5b505060405163a9059cbb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2935063a9059cbb9250610ac991507f0000000000000000000000000000000000000000000000000000000000000000908690600401612a2b565b602060405180830381600087803b158015610ae357600080fd5b505af1158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b91906129bb565b5073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63987382ba8da44cd5261762e629dd5c605b17715727bd84604051610b7f929190612a2b565b60405180910390a25050506001825550505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bdc5760405162461bcd60e51b81526004016105d090612b5c565b600080516020612d2b83398151915280546002811415610c0e5760405162461bcd60e51b81526004016105d090612bca565b6002825560405162461bcd60e51b815260206004820152601860248201527f757365206465706f736974416c6c282920696e7374656164000000000000000060448201526064016105d0565b6039546001600160a01b03163314610cb45760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f742074686520486172766573746572000000000060448201526064016105d0565b600080516020612d2b83398151915280546002811415610ce65760405162461bcd60e51b81526004016105d090612bca565b60028255610cf26120e2565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610d945760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016105d0565b610d9d3361220e565b565b60006001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21415610dce575050609d5490565b6001600160a01b038216735e8422345238f34275888049021821e8e08caa1f1415610dfb57506000919050565b60405162461bcd60e51b815260206004820152601860248201527f556e65787065637465642061737365742061646472657373000000000000000060448201526064016105d0565b603a8181548110610e5357600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ebc5750610ea761058f565b6001600160a01b0316336001600160a01b0316145b610f145760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b60648201526084016105d0565b600080516020612d2b83398151915280546002811415610f465760405162461bcd60e51b81526004016105d090612bca565b60028255303115610fc45773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0306001600160a01b0316316040518263ffffffff1660e01b81526004016000604051808303818588803b158015610faa57600080fd5b505af1158015610fbe573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b815230600482015260009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319060240160206040518083038186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104991906129f6565b905080156111565760405163a9059cbb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29063a9059cbb906110aa907f0000000000000000000000000000000000000000000000000000000000000000908590600401612a2b565b602060405180830381600087803b1580156110c457600080fd5b505af11580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc91906129bb565b5073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639860008360405161114d929190612a2b565b60405180910390a25b6040516370a0823160e01b8152306004820152600090735e8422345238f34275888049021821e8e08caa1f906370a082319060240160206040518083038186803b1580156111a357600080fd5b505afa1580156111b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111db91906129f6565b905080156112e85760405163a9059cbb60e01b8152735e8422345238f34275888049021821e8e08caa1f9063a9059cbb9061123c907f0000000000000000000000000000000000000000000000000000000000000000908590600401612a2b565b602060405180830381600087803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e91906129bb565b50735e8422345238f34275888049021821e8e08caa1f6001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63986000836040516112df929190612a2b565b60405180910390a25b5050600182555050565b6112fa61175d565b6113165760405162461bcd60e51b81526004016105d090612b93565b60365481106113575760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016105d0565b60006036828154811061136c5761136c612ce9565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906113a990600190612c5f565b83101561142b57603680546113c090600190612c5f565b815481106113d0576113d0612ce9565b600091825260209091200154603680546001600160a01b0390921691859081106113fc576113fc612ce9565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061143c5761143c612cd3565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b6114c561175d565b6114e15760405162461bcd60e51b81526004016105d090612b93565b8060005b8181101561159457600084848381811061150157611501612ce9565b905060200201602081019061151691906126a1565b6001600160a01b031614156115845760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b60648201526084016105d0565b61158d81612ca2565b90506114e5565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a84846040516115c993929190612a91565b60405180910390a1610764603a8484612559565b60006001600160a01b038216735e8422345238f34275888049021821e8e08caa1f148061162657506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b92915050565b60405163095ea7b360e01b8152735e8422345238f34275888049021821e8e08caa1f9063095ea7b39061167b907382ba8da44cd5261762e629dd5c605b17715727bd9060001990600401612a2b565b602060405180830381600087803b15801561169557600080fd5b505af11580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd91906129bb565b50565b6116d861175d565b6116f45760405162461bcd60e51b81526004016105d090612b93565b603954604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a1603980546001600160a01b0319166001600160a01b0392909216919091179055565b6000611775600080516020612d4b8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61179661175d565b6117b25760405162461bcd60e51b81526004016105d090612b93565b6117da817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166117fa600080516020612d4b8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461187a5760405162461bcd60e51b81526004016105d090612b5c565b600080516020612d2b833981519152805460028114156118ac5760405162461bcd60e51b81526004016105d090612bca565b6002825560405162461bcd60e51b815260206004820152601b60248201527f7573652072656465656d5469636b657473282920696e7374656164000000000060448201526064016105d0565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119405760405162461bcd60e51b81526004016105d090612b5c565b600080516020612d2b833981519152805460028114156119725760405162461bcd60e51b81526004016105d090612bca565b600282556040516370a0823160e01b8152306004820152600090735e8422345238f34275888049021821e8e08caa1f906370a082319060240160206040518083038186803b1580156119c357600080fd5b505afa1580156119d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fb91906129f6565b905060008111611a435760405162461bcd60e51b81526020600482015260136024820152724e6f2066727845544820746f2072656465656d60681b60448201526064016105d0565b805b8015611b5e576000680d8d726b7177a800008211611a635781611a6e565b680d8d726b7177a800005b6040516327a3cc5760e11b81523060048201526effffffffffffffffffffffffffffff821660248201529091506000907382ba8da44cd5261762e629dd5c605b17715727bd90634f4798ae90604401602060405180830381600087803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f91906129f6565b9050611b1b8284612c5f565b60408051838152602081018590529194507f536614cc61a8a2c89cee49f31b1bd84fb4f55b2aea4c1b98a97ea9f77bc860f6910160405180910390a15050611a45565b6040516370a0823160e01b8152306004820152735e8422345238f34275888049021821e8e08caa1f906370a082319060240160206040518083038186803b158015611ba857600080fd5b505afa158015611bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be091906129f6565b15611c3e5760405162461bcd60e51b815260206004820152602860248201527f4e6f7420616c6c20467261784574682073656e7420746f20726564656d7074696044820152676f6e20717565756560c01b60648201526084016105d0565b81609d6000828254611c509190612c47565b90915550506040516370a0823160e01b815230600482015260009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319060240160206040518083038186803b158015611ca257600080fd5b505afa158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda91906129f6565b90508015611d8f5760405163a9059cbb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29063a9059cbb90611d3b907f0000000000000000000000000000000000000000000000000000000000000000908590600401612a2b565b602060405180830381600087803b158015611d5557600080fd5b505af1158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d91906129bb565b505b735e8422345238f34275888049021821e8e08caa1f6001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f627382ba8da44cd5261762e629dd5c605b17715727bd85604051611df2929190612a2b565b60405180910390a2505050600182555050565b6060603a805480602002602001604051908101604052809291908181526020018280548015611e5d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e3f575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611ec45760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b60448201526064016105d0565b6001600160a01b03821615801590611ee457506001600160a01b03811615155b611f245760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b60448201526064016105d0565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26105e382826122cf565b6120228363a9059cbb60e01b8484604051602401611feb929190612a2b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261230d565b505050565b825161203a90603a9060208601906125bc565b508151815181146120845760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b60448201526064016105d0565b60005b818110156120db576120cb8482815181106120a4576120a4612ce9565b60200260200101518483815181106120be576120be612ce9565b6020026020010151611e67565b6120d481612ca2565b9050612087565b5050505050565b603a5460005b818110156105e3576000603a828154811061210557612105612ce9565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561215357600080fd5b505afa158015612167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218b91906129f6565b905080156121fb57603954604080516001600160a01b039283168152918416602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a16039546121fb906001600160a01b03848116911683611fcc565b50508061220790612ca2565b90506120e8565b6001600160a01b0381166122645760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016105d0565b806001600160a01b0316612284600080516020612d4b8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36116cd81600080516020612d4b83398151915255565b60405162461bcd60e51b8152602060048201526013602482015272139bc81c151bdad95b9cc8185c99481d5cd959606a1b60448201526064016105d0565b6000612362826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123df9092919063ffffffff16565b805190915015612022578080602001905181019061238091906129bb565b6120225760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105d0565b60606123ee84846000856123f8565b90505b9392505050565b6060824710156124595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105d0565b843b6124a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105d0565b600080866001600160a01b031685876040516124c39190612a0f565b60006040518083038185875af1925050503d8060008114612500576040519150601f19603f3d011682016040523d82523d6000602084013e612505565b606091505b5091509150612515828286612520565b979650505050505050565b6060831561252f5750816123f1565b82511561253f5782518084602001fd5b8160405162461bcd60e51b81526004016105d09190612b29565b8280548282559060005260206000209081019282156125ac579160200282015b828111156125ac5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612579565b506125b8929150612611565b5090565b8280548282559060005260206000209081019282156125ac579160200282015b828111156125ac57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906125dc565b5b808211156125b85760008155600101612612565b600082601f83011261263757600080fd5b8135602061264c61264783612c23565b612bf2565b80838252828201915082860187848660051b890101111561266c57600080fd5b60005b8581101561269457813561268281612d15565b8452928401929084019060010161266f565b5090979650505050505050565b6000602082840312156126b357600080fd5b81356123f181612d15565b6000602082840312156126d057600080fd5b81516123f181612d15565b600080604083850312156126ee57600080fd5b82356126f981612d15565b9150602083013561270981612d15565b809150509250929050565b60008060006060848603121561272957600080fd5b833561273481612d15565b9250602084013561274481612d15565b929592945050506040919091013590565b60008060008060006080868803121561276d57600080fd5b853561277881612d15565b9450602086013561278881612d15565b935060408601359250606086013567ffffffffffffffff808211156127ac57600080fd5b818801915088601f8301126127c057600080fd5b8135818111156127cf57600080fd5b8960208285010111156127e157600080fd5b9699959850939650602001949392505050565b6000806040838503121561280757600080fd5b823561281281612d15565b946020939093013593505050565b6000806020838503121561283357600080fd5b823567ffffffffffffffff8082111561284b57600080fd5b818501915085601f83011261285f57600080fd5b81358181111561286e57600080fd5b8660208260051b850101111561288357600080fd5b60209290920196919550909350505050565b6000806000606084860312156128aa57600080fd5b833567ffffffffffffffff808211156128c257600080fd5b6128ce87838801612626565b945060208601359150808211156128e457600080fd5b6128f087838801612626565b9350604086013591508082111561290657600080fd5b5061291386828701612626565b9150509250925092565b6000806040838503121561293057600080fd5b823567ffffffffffffffff81111561294757600080fd5b8301601f8101851361295857600080fd5b8035602061296861264783612c23565b80838252828201915082850189848660051b880101111561298857600080fd5b600095505b848610156129ab57803583526001959095019491830191830161298d565b5098969091013596505050505050565b6000602082840312156129cd57600080fd5b815180151581146123f157600080fd5b6000602082840312156129ef57600080fd5b5035919050565b600060208284031215612a0857600080fd5b5051919050565b60008251612a21818460208701612c76565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612a855783516001600160a01b031683529284019291840191600101612a60565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612adb5781546001600160a01b031684529284019260019182019101612ab6565b505050838103828501528481528590820160005b86811015612b1d578235612b0281612d15565b6001600160a01b031682529183019190830190600101612aef565b50979650505050505050565b6020815260008251806020840152612b48816040850160208701612c76565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c1b57612c1b612cff565b604052919050565b600067ffffffffffffffff821115612c3d57612c3d612cff565b5060051b60200190565b60008219821115612c5a57612c5a612cbd565b500190565b600082821015612c7157612c71612cbd565b500390565b60005b83811015612c91578181015183820152602001612c79565b838111156107645750506000910152565b6000600019821415612cb657612cb6612cbd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146116cd57600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212204cd0ad8384c2df2c2303160425d4e2ed3cba0c3f246affd93ea1e597f13ed10164736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "getRewardTokenAddresses()": {
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "initialize(address[],address[],address[])": {
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_rewardTokenAddresses": "Address of reward token for platform"
        }
      },
      "redeemTickets(uint256[],uint256)": {
        "params": {
          "_nftIds": "Array of NFT IDs to redeem"
        }
      },
      "removePToken(uint256)": {
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "setHarvesterAddress(address)": {
        "params": {
          "_harvesterAddress": "Address of the harvester contract."
        }
      },
      "setPTokenAddress(address,address)": {
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "params": {
          "_rewardTokenAddresses": "Array of reward token addresses"
        }
      },
      "supportsAsset(address)": {
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "_0": "bool     Whether asset is supported"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "Amount of assets to withdraw",
          "_asset": "Address of the asset to withdraw",
          "_recipient": "Address to receive withdrawn assets"
        }
      }
    },
    "title": "Frax ETH Redeem Strategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetToPToken(address)": {
        "notice": "asset => pToken (Platform Specific Token Address)"
      },
      "checkBalance(address)": {
        "notice": "Returns the amount of queued FraxEth that will be returned as WETH. We return this as a WETH asset, since that is what it will eventually be returned as. We only return the outstandingRedeems, because the contract itself should never hold any funds."
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "notice": "Collect accumulated reward token and send to Vault."
      },
      "deposit(address,uint256)": {
        "notice": "deposit() function not used for this strategy. Use depositAll() instead."
      },
      "depositAll()": {
        "notice": "Takes all given frxETH and creates new redeem tickets"
      },
      "getRewardTokenAddresses()": {
        "notice": "Get the reward token addresses."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "harvesterAddress()": {
        "notice": "Address of the Harvester contract allowed to collect reward tokens"
      },
      "initialize(address[],address[],address[])": {
        "notice": "initialize function, to set up initial internal state"
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "platformAddress()": {
        "notice": "Address of the underlying platform"
      },
      "redeemTickets(uint256[],uint256)": {
        "notice": "Redeem specific tickets from the Queue. Called by the strategist."
      },
      "removePToken(uint256)": {
        "notice": "Remove a supported asset by passing its index.      This method can only be called by the system Governor"
      },
      "rewardTokenAddresses(uint256)": {
        "notice": "Address of the reward tokens. eg CRV, BAL, CVX, AURA"
      },
      "safeApproveAllTokens()": {
        "notice": "Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "notice": "Set the Harvester contract that can collect rewards."
      },
      "setPTokenAddress(address,address)": {
        "notice": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor"
      },
      "setRewardTokenAddresses(address[])": {
        "notice": "Set the reward token addresses. Any old addresses will be overwritten."
      },
      "supportsAsset(address)": {
        "notice": "Check if an asset is supported."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends."
      },
      "vaultAddress()": {
        "notice": "Address of the OToken vault"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraw an asset from the underlying platform"
      },
      "withdrawAll()": {
        "notice": "Withdraw all assets from this strategy, and transfer to the Vault. In correct operation, this strategy should never hold any assets."
      }
    },
    "notice": "This strategy redeems Frax ETH for ETH via the Frax Eth Redemption Queue contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38782,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 38785,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 38825,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 38905,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "_deprecated_platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 38908,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "_deprecated_vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 38913,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 38917,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 38919,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 38921,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 38924,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 38928,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 38932,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 29317,
        "contract": "contracts/strategies/FrxEthRedeemStrategy.sol:FrxEthRedeemStrategy",
        "label": "outstandingRedeems",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
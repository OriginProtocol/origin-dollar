{
  "address": "0x60fF8354e9C0E78e032B7daeA8da2c3265287dBd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "cacheDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed2bfca895dd88b4fbbccccb67da585625d20db37aa9539d09285bc6d5f58c5e",
  "receipt": {
    "to": null,
    "from": "0xFD9E6005187F448957a0972a7d0C0A6dA2911236",
    "contractAddress": "0x60fF8354e9C0E78e032B7daeA8da2c3265287dBd",
    "transactionIndex": 41,
    "gasUsed": "554535",
    "logsBloom": "0x
    "blockHash": "0x9aee1f3787b4a6acae3480006717e98e9dccc2df394baedbcb68c5daf8698827",
    "transactionHash": "0xed2bfca895dd88b4fbbccccb67da585625d20db37aa9539d09285bc6d5f58c5e",
    "logs": [],
    "blockNumber": 17067004,
    "cumulativeGasUsed": "4424996",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8564b351f4bb5da3f43a5b9c5739eec4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"cacheDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"price(address)\":{\"params\":{\"asset\":\"address of the asset\"},\"returns\":{\"_0\":\"uint256 unit price for 1 asset unit, in 18 decimal fixed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"price(address)\":{\"notice\":\"Returns the total price in 18 digit units for a given asset.         This implementation does not (!) do range checks as the         parent OracleRouter does.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/OracleRouter.sol\":\"OETHOracleRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x964c39e578ed3668c05e62439786e9bd198380722581e493e5b86d2c7c75d96b\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x18fb68de95136c49f3874fe7795a7bda730339198b2816690ddbdf1eacd4e273\",\"license\":\"MIT\"},\"contracts/oracle/OracleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\n\\nabstract contract OracleRouterBase is IOracle {\\n    using StableMath for uint256;\\n\\n    uint256 constant MIN_DRIFT = 0.7e18;\\n    uint256 constant MAX_DRIFT = 1.3e18;\\n    address constant FIXED_PRICE = 0x0000000000000000000000000000000000000001;\\n    mapping(address => uint8) internal decimalsCache;\\n\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     * @return address address of the price feed for the asset\\n     */\\n    function feed(address asset) internal view virtual returns (address);\\n\\n    /**\\n     * @notice Returns the total price in 18 digit unit for a given asset.\\n     * @param asset address of the asset\\n     * @return uint256 unit price for 1 asset unit, in 18 decimal fixed\\n     */\\n    function price(address asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        address _feed = feed(asset);\\n        require(_feed != address(0), \\\"Asset not available\\\");\\n        require(_feed != FIXED_PRICE, \\\"Fixed price feeds not supported\\\");\\n        (, int256 _iprice, , , ) = AggregatorV3Interface(_feed)\\n            .latestRoundData();\\n        uint8 decimals = getDecimals(asset);\\n\\n        uint256 _price = uint256(_iprice).scaleBy(18, decimals);\\n        if (isStablecoin(asset)) {\\n            require(_price <= MAX_DRIFT, \\\"Oracle: Price exceeds max\\\");\\n            require(_price >= MIN_DRIFT, \\\"Oracle: Price under min\\\");\\n        }\\n        return uint256(_price);\\n    }\\n\\n    function getDecimals(address _asset) internal view virtual returns (uint8) {\\n        uint8 decimals = decimalsCache[_asset];\\n        require(decimals > 0, \\\"Oracle: Decimals not cached\\\");\\n        return decimals;\\n    }\\n\\n    function cacheDecimals(address _asset) external returns (uint8) {\\n        address _feed = feed(_asset);\\n        require(_feed != address(0), \\\"Asset not available\\\");\\n        require(_feed != FIXED_PRICE, \\\"Fixed price feeds not supported\\\");\\n\\n        uint8 decimals = AggregatorV3Interface(_feed).decimals();\\n        decimalsCache[_asset] = decimals;\\n        return decimals;\\n    }\\n\\n    function isStablecoin(address _asset) internal view returns (bool) {\\n        string memory symbol = Helpers.getSymbol(_asset);\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n        return\\n            symbolHash == keccak256(abi.encodePacked(\\\"DAI\\\")) ||\\n            symbolHash == keccak256(abi.encodePacked(\\\"USDC\\\")) ||\\n            symbolHash == keccak256(abi.encodePacked(\\\"USDT\\\"));\\n    }\\n}\\n\\ncontract OracleRouter is OracleRouterBase {\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal pure override returns (address) {\\n        if (asset == 0x6B175474E89094C44Da98b954EedeAC495271d0F) {\\n            // Chainlink: DAI/USD\\n            return 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9;\\n        } else if (asset == 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48) {\\n            // Chainlink: USDC/USD\\n            return 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;\\n        } else if (asset == 0xdAC17F958D2ee523a2206206994597C13D831ec7) {\\n            // Chainlink: USDT/USD\\n            return 0x3E7d1eAB13ad0104d2750B8863b489D65364e32D;\\n        } else if (asset == 0xc00e94Cb662C3520282E6f5717214004A7f26888) {\\n            // Chainlink: COMP/USD\\n            return 0xdbd020CAeF83eFd542f4De03e3cF0C28A4428bd5;\\n        } else if (asset == 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9) {\\n            // Chainlink: AAVE/USD\\n            return 0x547a514d5e3769680Ce22B2361c10Ea13619e8a9;\\n        } else if (asset == 0xD533a949740bb3306d119CC777fa900bA034cd52) {\\n            // Chainlink: CRV/USD\\n            return 0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f;\\n        } else if (asset == 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B) {\\n            // Chainlink: CVX/USD\\n            return 0xd962fC30A72A84cE50161031391756Bf2876Af5D;\\n        } else if (asset == 0xae78736Cd615f374D3085123A210448E74Fc6393) {\\n            // Chainlink: rETH/ETH\\n            return 0x536218f9E9Eb48863970252233c8F271f554C2d0;\\n        } else if (asset == 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704) {\\n            // Chainlink: cbETH/ETH\\n            return 0xF017fcB346A1885194689bA23Eff2fE6fA5C483b;\\n        } else if (asset == 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84) {\\n            // Chainlink: stETH/ETH\\n            return 0x86392dC19c0b719886221c78AB11eb8Cf5c52812;\\n        } else if (asset == 0x5E8422345238F34275888049021821E8E08CAa1f) {\\n            // FIXED_PRICE: frxETH/ETH\\n            return FIXED_PRICE;\\n        } else if (asset == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) {\\n            // FIXED_PRICE: WETH/ETH\\n            return FIXED_PRICE;\\n        } else {\\n            revert(\\\"Asset not available\\\");\\n        }\\n    }\\n}\\n\\ncontract OETHOracleRouter is OracleRouter {\\n    using StableMath for uint256;\\n\\n    /**\\n     * @notice Returns the total price in 18 digit units for a given asset.\\n     *         This implementation does not (!) do range checks as the\\n     *         parent OracleRouter does.\\n     * @param asset address of the asset\\n     * @return uint256 unit price for 1 asset unit, in 18 decimal fixed\\n     */\\n    function price(address asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        address _feed = feed(asset);\\n        if (_feed == FIXED_PRICE) {\\n            return 1e18;\\n        }\\n        require(_feed != address(0), \\\"Asset not available\\\");\\n        (, int256 _iprice, , , ) = AggregatorV3Interface(_feed)\\n            .latestRoundData();\\n\\n        uint8 decimals = getDecimals(asset);\\n        uint256 _price = uint256(_iprice).scaleBy(18, decimals);\\n        return _price;\\n    }\\n}\\n\\ncontract OracleRouterDev is OracleRouterBase {\\n    mapping(address => address) public assetToFeed;\\n\\n    function setFeed(address _asset, address _feed) external {\\n        assetToFeed[_asset] = _feed;\\n    }\\n\\n    /*\\n     * The dev version of the Oracle doesn't need to gas optimize and cache the decimals\\n     */\\n    function getDecimals(address _asset)\\n        internal\\n        view\\n        override\\n        returns (uint8)\\n    {\\n        address _feed = feed(_asset);\\n        require(_feed != address(0), \\\"Asset not available\\\");\\n        require(_feed != FIXED_PRICE, \\\"Fixed price feeds not supported\\\");\\n\\n        return AggregatorV3Interface(_feed).decimals();\\n    }\\n\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal view override returns (address) {\\n        return assetToFeed[asset];\\n    }\\n}\\n\",\"keccak256\":\"0x6ee073c2c7bafd49bdccbd4fb5c4b5838ce0dea17e1c7754d5d818dc16b8a492\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610911806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806336b6d9441461003b578063aea9107814610065575b600080fd5b61004e6100493660046106b9565b610086565b60405160ff90911681526020015b60405180910390f35b6100786100733660046106b9565b6101bf565b60405190815260200161005c565b600080610092836102b6565b90506001600160a01b0381166100c35760405162461bcd60e51b81526004016100ba90610755565b60405180910390fd5b6001600160a01b0381166001141561011d5760405162461bcd60e51b815260206004820152601f60248201527f4669786564207072696365206665656473206e6f7420737570706f727465640060448201526064016100ba565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561015857600080fd5b505afa15801561016c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101909190610732565b6001600160a01b03949094166000908152602081905260409020805460ff191660ff8616179055509192915050565b6000806101cb836102b6565b90506001600160a01b038116600114156101ef5750670de0b6b3a764000092915050565b6001600160a01b0381166102155760405162461bcd60e51b81526004016100ba90610755565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561025057600080fd5b505afa158015610264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028891906106e2565b5050509150506000610299856105af565b905060006102ac83601260ff851661061e565b9695505050505050565b6000736b175474e89094c44da98b954eedeac495271d0f6001600160a01b03831614156102f8575073aed0c38402a5d19df6e4c03f4e2dced6e29c1ee9919050565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b03831614156103385750738fffffd4afb6115b954bd326cbe7b4ba576818f6919050565b73dac17f958d2ee523a2206206994597c13d831ec76001600160a01b03831614156103785750733e7d1eab13ad0104d2750b8863b489d65364e32d919050565b73c00e94cb662c3520282e6f5717214004a7f268886001600160a01b03831614156103b8575073dbd020caef83efd542f4de03e3cf0c28a4428bd5919050565b737fc66500c84a76ad7e9c93437bfc5ac33e2ddae96001600160a01b03831614156103f8575073547a514d5e3769680ce22b2361c10ea13619e8a9919050565b73d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0383161415610438575073cd627aa160a6fa45eb793d19ef54f5062f20f33f919050565b734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0383161415610478575073d962fc30a72a84ce50161031391756bf2876af5d919050565b73ae78736cd615f374d3085123a210448e74fc63936001600160a01b03831614156104b8575073536218f9e9eb48863970252233c8f271f554c2d0919050565b73be9895146f7af43049ca1c1ae358b0541ea497046001600160a01b03831614156104f8575073f017fcb346a1885194689ba23eff2fe6fa5c483b919050565b73ae7ab96520de3a18e5e111b5eaab095312d7fe846001600160a01b038316141561053857507386392dc19c0b719886221c78ab11eb8cf5c52812919050565b735e8422345238f34275888049021821e8e08caa1f6001600160a01b038316141561056557506001919050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b038316141561059257506001919050565b60405162461bcd60e51b81526004016100ba90610755565b919050565b6001600160a01b03811660009081526020819052604081205460ff16806106185760405162461bcd60e51b815260206004820152601b60248201527f4f7261636c653a20446563696d616c73206e6f7420636163686564000000000060448201526064016100ba565b92915050565b60008183111561064e5761064761063583856108ae565b61064090600a6107e7565b8590610680565b9350610678565b818310156106785761067561066384846108ae565b61066e90600a6107e7565b8590610693565b93505b509192915050565b600061068c828461088f565b9392505050565b600061068c8284610782565b805169ffffffffffffffffffff811681146105aa57600080fd5b6000602082840312156106cb57600080fd5b81356001600160a01b038116811461068c57600080fd5b600080600080600060a086880312156106fa57600080fd5b6107038661069f565b94506020860151935060408601519250606086015191506107266080870161069f565b90509295509295909350565b60006020828403121561074457600080fd5b815160ff8116811461068c57600080fd5b6020808252601390820152724173736574206e6f7420617661696c61626c6560681b604082015260600190565b60008261079f57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156107df5781600019048211156107c5576107c56108c5565b808516156107d257918102915b93841c93908002906107a9565b509250929050565b600061068c83836000826107fd57506001610618565b8161080a57506000610618565b8160018114610820576002811461082a57610846565b6001915050610618565b60ff84111561083b5761083b6108c5565b50506001821b610618565b5060208310610133831016604e8410600b8410161715610869575081810a610618565b61087383836107a4565b8060001904821115610887576108876108c5565b029392505050565b60008160001904831182151516156108a9576108a96108c5565b500290565b6000828210156108c0576108c06108c5565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b64106ef00c8120059c28fb362a0c371b5b25b469310cc543062492457705b6a64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806336b6d9441461003b578063aea9107814610065575b600080fd5b61004e6100493660046106b9565b610086565b60405160ff90911681526020015b60405180910390f35b6100786100733660046106b9565b6101bf565b60405190815260200161005c565b600080610092836102b6565b90506001600160a01b0381166100c35760405162461bcd60e51b81526004016100ba90610755565b60405180910390fd5b6001600160a01b0381166001141561011d5760405162461bcd60e51b815260206004820152601f60248201527f4669786564207072696365206665656473206e6f7420737570706f727465640060448201526064016100ba565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561015857600080fd5b505afa15801561016c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101909190610732565b6001600160a01b03949094166000908152602081905260409020805460ff191660ff8616179055509192915050565b6000806101cb836102b6565b90506001600160a01b038116600114156101ef5750670de0b6b3a764000092915050565b6001600160a01b0381166102155760405162461bcd60e51b81526004016100ba90610755565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561025057600080fd5b505afa158015610264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028891906106e2565b5050509150506000610299856105af565b905060006102ac83601260ff851661061e565b9695505050505050565b6000736b175474e89094c44da98b954eedeac495271d0f6001600160a01b03831614156102f8575073aed0c38402a5d19df6e4c03f4e2dced6e29c1ee9919050565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b03831614156103385750738fffffd4afb6115b954bd326cbe7b4ba576818f6919050565b73dac17f958d2ee523a2206206994597c13d831ec76001600160a01b03831614156103785750733e7d1eab13ad0104d2750b8863b489d65364e32d919050565b73c00e94cb662c3520282e6f5717214004a7f268886001600160a01b03831614156103b8575073dbd020caef83efd542f4de03e3cf0c28a4428bd5919050565b737fc66500c84a76ad7e9c93437bfc5ac33e2ddae96001600160a01b03831614156103f8575073547a514d5e3769680ce22b2361c10ea13619e8a9919050565b73d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0383161415610438575073cd627aa160a6fa45eb793d19ef54f5062f20f33f919050565b734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0383161415610478575073d962fc30a72a84ce50161031391756bf2876af5d919050565b73ae78736cd615f374d3085123a210448e74fc63936001600160a01b03831614156104b8575073536218f9e9eb48863970252233c8f271f554c2d0919050565b73be9895146f7af43049ca1c1ae358b0541ea497046001600160a01b03831614156104f8575073f017fcb346a1885194689ba23eff2fe6fa5c483b919050565b73ae7ab96520de3a18e5e111b5eaab095312d7fe846001600160a01b038316141561053857507386392dc19c0b719886221c78ab11eb8cf5c52812919050565b735e8422345238f34275888049021821e8e08caa1f6001600160a01b038316141561056557506001919050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b038316141561059257506001919050565b60405162461bcd60e51b81526004016100ba90610755565b919050565b6001600160a01b03811660009081526020819052604081205460ff16806106185760405162461bcd60e51b815260206004820152601b60248201527f4f7261636c653a20446563696d616c73206e6f7420636163686564000000000060448201526064016100ba565b92915050565b60008183111561064e5761064761063583856108ae565b61064090600a6107e7565b8590610680565b9350610678565b818310156106785761067561066384846108ae565b61066e90600a6107e7565b8590610693565b93505b509192915050565b600061068c828461088f565b9392505050565b600061068c8284610782565b805169ffffffffffffffffffff811681146105aa57600080fd5b6000602082840312156106cb57600080fd5b81356001600160a01b038116811461068c57600080fd5b600080600080600060a086880312156106fa57600080fd5b6107038661069f565b94506020860151935060408601519250606086015191506107266080870161069f565b90509295509295909350565b60006020828403121561074457600080fd5b815160ff8116811461068c57600080fd5b6020808252601390820152724173736574206e6f7420617661696c61626c6560681b604082015260600190565b60008261079f57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156107df5781600019048211156107c5576107c56108c5565b808516156107d257918102915b93841c93908002906107a9565b509250929050565b600061068c83836000826107fd57506001610618565b8161080a57506000610618565b8160018114610820576002811461082a57610846565b6001915050610618565b60ff84111561083b5761083b6108c5565b50506001821b610618565b5060208310610133831016604e8410600b8410161715610869575081810a610618565b61087383836107a4565b8060001904821115610887576108876108c5565b029392505050565b60008160001904831182151516156108a9576108a96108c5565b500290565b6000828210156108c0576108c06108c5565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b64106ef00c8120059c28fb362a0c371b5b25b469310cc543062492457705b6a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "price(address)": {
        "params": {
          "asset": "address of the asset"
        },
        "returns": {
          "_0": "uint256 unit price for 1 asset unit, in 18 decimal fixed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "price(address)": {
        "notice": "Returns the total price in 18 digit units for a given asset.         This implementation does not (!) do range checks as the         parent OracleRouter does."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14118,
        "contract": "contracts/oracle/OracleRouter.sol:OETHOracleRouter",
        "label": "decimalsCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0x9C94df9d594BA1eb94430C006c269C314B1A8281",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_coin",
          "type": "address"
        }
      ],
      "name": "collect",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setClaims",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unlockAdjuster",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seconds",
          "type": "uint256"
        }
      ],
      "name": "start",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isAdjusterLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "adjuster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "lockAdjuster",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_adjuster",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "Start",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "coin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Collect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x5d7954a3b3047f60603bf301da11d5d19006f0c5eb6d8dc5e8d7f36bdc3e1e66",
  "receipt": {
    "to": null,
    "from": "0x71F78361537A6f7B6818e7A760c8bC0146D93f50",
    "contractAddress": "0x9C94df9d594BA1eb94430C006c269C314B1A8281",
    "transactionIndex": 68,
    "gasUsed": "1296483",
    "logsBloom": "0x
    "blockHash": "0xc4d8033fcf85a02b941fb047b42e6c82977639b5b1fc4aae13458ebed1713c5a",
    "transactionHash": "0x5d7954a3b3047f60603bf301da11d5d19006f0c5eb6d8dc5e8d7f36bdc3e1e66",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 11642654,
        "transactionHash": "0x5d7954a3b3047f60603bf301da11d5d19006f0c5eb6d8dc5e8d7f36bdc3e1e66",
        "address": "0x9C94df9d594BA1eb94430C006c269C314B1A8281",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071f78361537a6f7b6818e7a760c8bc0146d93f50"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0xc4d8033fcf85a02b941fb047b42e6c82977639b5b1fc4aae13458ebed1713c5a"
      }
    ],
    "blockNumber": 11642654,
    "cumulativeGasUsed": "7495430",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A8e1E676Ec238d8A992307B495b45B3fEAa5e86",
    "0x71F78361537A6f7B6818e7A760c8bC0146D93f50"
  ],
  "solcInputHash": "c6e8cfbb76bbc7e6d6b3faaa7bf635b9",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setClaims\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAdjuster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdjusterLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adjuster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockAdjuster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adjuster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"details\":\"Airdrop for ERC20 tokens. *   Provides a coin airdrop with a verification period in which everyone  can check that all claims are correct before any actual funds are moved  to the contract. *      - Users can claim funds during the claim period. *      - The adjuster can set the amount of each user's claim,        but only when unlocked, and not during the claim period. *      - The governor can unlock and lock the adjuster, outside the claim period.     - The governor can start the claim period, if it's not started.     - The governor can collect any remaining funds after the claim period is over. *  Intended use sequence: *   1. Governor unlocks the adjuster  2. Adjuster uploads claims  3. Governor locks the adjuster  4. Everyone verifies that the claim amounts and totals are correct  5. Payout funds are moved to the contract  6. The claim period starts  7. Users claim funds  8. The claim period ends  9. Governor can collect any remaing funds \",\"methods\":{\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"title\":\"Compensation Claims\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/compensation/CompensationClaims.sol\":\"CompensationClaims\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/compensation/CompensationClaims.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * @title Compensation Claims\\n * @author Origin Protocol Inc\\n * @dev Airdrop for ERC20 tokens.\\n *\\n *   Provides a coin airdrop with a verification period in which everyone\\n *   can check that all claims are correct before any actual funds are moved\\n *   to the contract.\\n *\\n *      - Users can claim funds during the claim period.\\n *\\n *      - The adjuster can set the amount of each user's claim,\\n *         but only when unlocked, and not during the claim period.\\n *\\n *      - The governor can unlock and lock the adjuster, outside the claim period.\\n *      - The governor can start the claim period, if it's not started.\\n *      - The governor can collect any remaining funds after the claim period is over.\\n *\\n *  Intended use sequence:\\n *\\n *   1. Governor unlocks the adjuster\\n *   2. Adjuster uploads claims\\n *   3. Governor locks the adjuster\\n *   4. Everyone verifies that the claim amounts and totals are correct\\n *   5. Payout funds are moved to the contract\\n *   6. The claim period starts\\n *   7. Users claim funds\\n *   8. The claim period ends\\n *   9. Governor can collect any remaing funds\\n *\\n */\\ncontract CompensationClaims is Governable {\\n    address public adjuster;\\n    address public token;\\n    uint256 public end;\\n    uint256 public totalClaims;\\n    mapping(address => uint256) claims;\\n    bool public isAdjusterLocked;\\n\\n    using SafeMath for uint256;\\n\\n    event Claim(address indexed recipient, uint256 amount);\\n    event ClaimSet(address indexed recipient, uint256 amount);\\n    event Start(uint256 end);\\n    event Lock();\\n    event Unlock();\\n    event Collect(address indexed coin, uint256 amount);\\n\\n    constructor(address _token, address _adjuster) public onlyGovernor {\\n        token = _token;\\n        adjuster = _adjuster;\\n        isAdjusterLocked = true;\\n    }\\n\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return claims[_account];\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return IERC20Decimals(token).decimals();\\n    }\\n\\n    /* -- User -- */\\n\\n    function claim(address _recipient) external onlyInClaimPeriod nonReentrant {\\n        uint256 amount = claims[_recipient];\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        claims[_recipient] = 0;\\n        totalClaims = totalClaims.sub(amount);\\n        SafeERC20.safeTransfer(IERC20(token), _recipient, amount);\\n        emit Claim(_recipient, amount);\\n    }\\n\\n    /* -- Adjustor -- */\\n\\n    function setClaims(\\n        address[] calldata _addresses,\\n        uint256[] calldata _amounts\\n    ) external notInClaimPeriod onlyUnlockedAdjuster {\\n        require(\\n            _addresses.length == _amounts.length,\\n            \\\"Addresses and amounts must match\\\"\\n        );\\n        uint256 len = _addresses.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address recipient = _addresses[i];\\n            uint256 newAmount = _amounts[i];\\n            uint256 oldAmount = claims[recipient];\\n            claims[recipient] = newAmount;\\n            totalClaims = totalClaims.add(newAmount).sub(oldAmount);\\n            emit ClaimSet(recipient, newAmount);\\n        }\\n    }\\n\\n    /* -- Governor -- */\\n\\n    function lockAdjuster() external onlyGovernor notInClaimPeriod {\\n        _lockAdjuster();\\n    }\\n\\n    function _lockAdjuster() internal {\\n        isAdjusterLocked = true;\\n        emit Lock();\\n    }\\n\\n    function unlockAdjuster() external onlyGovernor notInClaimPeriod {\\n        isAdjusterLocked = false;\\n        emit Unlock();\\n    }\\n\\n    function start(uint256 _seconds)\\n        external\\n        onlyGovernor\\n        notInClaimPeriod\\n        nonReentrant\\n    {\\n        require(totalClaims > 0, \\\"No claims\\\");\\n        uint256 funding = IERC20(token).balanceOf(address(this));\\n        require(funding >= totalClaims, \\\"Insufficient funds for all claims\\\");\\n        _lockAdjuster();\\n        end = block.timestamp.add(_seconds);\\n        require(end.sub(block.timestamp) < 31622400, \\\"Duration too long\\\"); // 31622400 = 366*24*60*60\\n        emit Start(end);\\n    }\\n\\n    function collect(address _coin)\\n        external\\n        onlyGovernor\\n        notInClaimPeriod\\n        nonReentrant\\n    {\\n        uint256 amount = IERC20(_coin).balanceOf(address(this));\\n        SafeERC20.safeTransfer(IERC20(_coin), address(governor()), amount);\\n        emit Collect(_coin, amount);\\n    }\\n\\n    /* -- modifiers -- */\\n\\n    modifier onlyInClaimPeriod() {\\n        require(block.timestamp <= end, \\\"Should be in claim period\\\");\\n        _;\\n    }\\n\\n    modifier notInClaimPeriod() {\\n        require(block.timestamp > end, \\\"Should not be in claim period\\\");\\n        _;\\n    }\\n\\n    modifier onlyUnlockedAdjuster() {\\n        require(isAdjusterLocked == false, \\\"Adjuster must be unlocked\\\");\\n        require(msg.sender == adjuster, \\\"Must be adjuster\\\");\\n        _;\\n    }\\n}\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x5f20dd96cc3ca2a5d9716af73685f7854e017a216bf5b8dbe60d96a55d0fea71\"},\"contracts/governance/Governable.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32\\n        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32\\n        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32\\n        private constant reentryStatusPosition = 0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() internal {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x3e51ea48102945bf4b305bf9722a07514a585a29555d92f8c84352d1a4cfcee1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016b9380380620016b9833981810160405260408110156200003757600080fd5b50805160209091015162000054336001600160e01b036200016816565b620000676001600160e01b036200017b16565b6001600160a01b031660006001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3620000ba6001600160e01b036200018f16565b6200012657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015290519081900360640190fd5b600180546001600160a01b039384166001600160a01b031991821617825560008054939094169216919091179091556005805460ff19169091179055620001bd565b6000805160206200169983398151915255565b600080516020620016998339815191525490565b6000620001a46001600160e01b036200017b16565b6001600160a01b0316336001600160a01b031614905090565b6114cc80620001cd6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063c7af335211610071578063c7af3352146102f3578063d38bfff4146102fb578063e96ea84c14610321578063efbe1c1c14610329578063fc0c546a146103315761010b565b806370a082311461028c57806395805dad146102b2578063a99cb75f146102cf578063be989523146102eb5761010b565b80633b650d29116100de5780633b650d29146101a057806341c6138314610262578063524549861461027c5780635d36b190146102845761010b565b806306ec16f8146101105780630c340a24146101385780631e83409a1461015c578063313ce56714610182575b600080fd5b6101366004803603602081101561012657600080fd5b50356001600160a01b0316610339565b005b610140610504565b604080516001600160a01b039092168252519081900360200190f35b6101366004803603602081101561017257600080fd5b50356001600160a01b0316610513565b61018a6106d1565b6040805160ff9092168252519081900360200190f35b610136600480360360408110156101b657600080fd5b8101906020810181356401000000008111156101d157600080fd5b8201836020820111156101e357600080fd5b8035906020019184602083028401116401000000008311171561020557600080fd5b91939092909160208101903564010000000081111561022357600080fd5b82018360208201111561023557600080fd5b8035906020019184602083028401116401000000008311171561025757600080fd5b509092509050610747565b61026a61096b565b60408051918252519081900360200190f35b610136610971565b610136610a31565b61026a600480360360208110156102a257600080fd5b50356001600160a01b0316610a93565b610136600480360360208110156102c857600080fd5b5035610aae565b6102d7610d5c565b604080519115158252519081900360200190f35b610140610d65565b6102d7610d74565b6101366004803603602081101561031157600080fd5b50356001600160a01b0316610d97565b610136610e31565b61026a610ec4565b610140610eca565b610341610d74565b610380576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b60025442116103c4576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45358054600281141561042e576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255604080516370a0823160e01b815230600482015290516000916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d60208110156104a657600080fd5b505190506104bc846104b6610504565b83610ed9565b6040805182815290516001600160a01b038616917f4256a058fa2b123d727576d3d31e3a272db98ee5fe264e229610ce43dc849999919081900360200190a250506001905550565b600061050e610f30565b905090565b60025442111561056a576040805162461bcd60e51b815260206004820152601960248201527f53686f756c6420626520696e20636c61696d20706572696f6400000000000000604482015290519081900360640190fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535805460028114156105d4576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556001600160a01b03831660009081526004602052604090205480610643576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604081205560035461066f908263ffffffff610f5516565b600355600154610689906001600160a01b03168583610ed9565b6040805182815290516001600160a01b038616917f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4919081900360200190a250506001905550565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d602081101561074057600080fd5b5051905090565b600254421161078b576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b60055460ff16156107e3576040805162461bcd60e51b815260206004820152601960248201527f41646a7573746572206d75737420626520756e6c6f636b656400000000000000604482015290519081900360640190fd5b6000546001600160a01b03163314610835576040805162461bcd60e51b815260206004820152601060248201526f26bab9ba1031329030b2353ab9ba32b960811b604482015290519081900360640190fd5b828114610889576040805162461bcd60e51b815260206004820181905260248201527f41646472657373657320616e6420616d6f756e7473206d757374206d61746368604482015290519081900360640190fd5b8260005b818110156109635760008686838181106108a357fe5b905060200201356001600160a01b0316905060008585848181106108c357fe5b6001600160a01b03851660009081526004602090815260409091208054919092029390930135908190556003549093506109169150829061090a908563ffffffff610f9e16565b9063ffffffff610f5516565b6003556040805183815290516001600160a01b038516917f6dafe15ce3b23ddd739e5550df1d961528643f07fca79b88151baadf149a2c73919081900360200190a250505060010161088d565b505050505050565b60035481565b610979610d74565b6109b8576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b60025442116109fc576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b6005805460ff191690556040517f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e90600090a1565b610a39610ff8565b6001600160a01b0316336001600160a01b031614610a885760405162461bcd60e51b81526004018080602001828103825260308152602001806114686030913960400191505060405180910390fd5b610a913361101d565b565b6001600160a01b031660009081526004602052604090205490565b610ab6610d74565b610af5576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b6002544211610b39576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac453580546002811415610ba3576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255600060035411610bea576040805162461bcd60e51b81526020600482015260096024820152684e6f20636c61696d7360b81b604482015290519081900360640190fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d6020811015610c5f57600080fd5b5051600354909150811015610ca55760405162461bcd60e51b81526004018080602001828103825260218152602001806113fd6021913960400191505060405180910390fd5b610cad6110cb565b610cbd428563ffffffff610f9e16565b60028190556301e2850090610cd8904263ffffffff610f5516565b10610d1e576040805162461bcd60e51b81526020600482015260116024820152704475726174696f6e20746f6f206c6f6e6760781b604482015290519081900360640190fd5b60025460408051918252517ff06a29c94c6f4edc1085072972d9441f7603e81c8535a308f214285d0653c8509181900360200190a150506001905550565b60055460ff1681565b6000546001600160a01b031681565b6000610d7e610f30565b6001600160a01b0316336001600160a01b031614905090565b610d9f610d74565b610dde576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b610de781611103565b806001600160a01b0316610df9610f30565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b610e39610d74565b610e78576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b6002544211610ebc576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b610a916110cb565b60025481565b6001546001600160a01b031681565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f2b908490611127565b505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b6000610f9783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112e5565b9392505050565b600082820183811015610f97576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b038116611078576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b031661108a610f30565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36110c88161137c565b50565b6005805460ff191660011790556040517f46620e39f4e119bf05f13544f8ef38338fc06c17f6b731c7f95bee356572db9690600090a1565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b611139826001600160a01b03166113a0565b61118a576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106111c85780518252601f1990920191602091820191016111a9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461122a576040519150601f19603f3d011682016040523d82523d6000602084013e61122f565b606091505b509150915081611286576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156112df578080602001905160208110156112a257600080fd5b50516112df5760405162461bcd60e51b815260040180806020018281038252602a81526020018061141e602a913960400191505060405180910390fd5b50505050565b600081848411156113745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611339578181015183820152602001611321565b50505050905090810190601f1680156113665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906113d457508115155b94935050505056fe43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000496e73756666696369656e742066756e647320666f7220616c6c20636c61696d735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656453686f756c64206e6f7420626520696e20636c61696d20706572696f640000004f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a723158204d165f4d46050bf4b493a480fedccc553f9b06d6b7a69d965a479cafb11a424264736f6c634300050b00327bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063c7af335211610071578063c7af3352146102f3578063d38bfff4146102fb578063e96ea84c14610321578063efbe1c1c14610329578063fc0c546a146103315761010b565b806370a082311461028c57806395805dad146102b2578063a99cb75f146102cf578063be989523146102eb5761010b565b80633b650d29116100de5780633b650d29146101a057806341c6138314610262578063524549861461027c5780635d36b190146102845761010b565b806306ec16f8146101105780630c340a24146101385780631e83409a1461015c578063313ce56714610182575b600080fd5b6101366004803603602081101561012657600080fd5b50356001600160a01b0316610339565b005b610140610504565b604080516001600160a01b039092168252519081900360200190f35b6101366004803603602081101561017257600080fd5b50356001600160a01b0316610513565b61018a6106d1565b6040805160ff9092168252519081900360200190f35b610136600480360360408110156101b657600080fd5b8101906020810181356401000000008111156101d157600080fd5b8201836020820111156101e357600080fd5b8035906020019184602083028401116401000000008311171561020557600080fd5b91939092909160208101903564010000000081111561022357600080fd5b82018360208201111561023557600080fd5b8035906020019184602083028401116401000000008311171561025757600080fd5b509092509050610747565b61026a61096b565b60408051918252519081900360200190f35b610136610971565b610136610a31565b61026a600480360360208110156102a257600080fd5b50356001600160a01b0316610a93565b610136600480360360208110156102c857600080fd5b5035610aae565b6102d7610d5c565b604080519115158252519081900360200190f35b610140610d65565b6102d7610d74565b6101366004803603602081101561031157600080fd5b50356001600160a01b0316610d97565b610136610e31565b61026a610ec4565b610140610eca565b610341610d74565b610380576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b60025442116103c4576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45358054600281141561042e576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255604080516370a0823160e01b815230600482015290516000916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d60208110156104a657600080fd5b505190506104bc846104b6610504565b83610ed9565b6040805182815290516001600160a01b038616917f4256a058fa2b123d727576d3d31e3a272db98ee5fe264e229610ce43dc849999919081900360200190a250506001905550565b600061050e610f30565b905090565b60025442111561056a576040805162461bcd60e51b815260206004820152601960248201527f53686f756c6420626520696e20636c61696d20706572696f6400000000000000604482015290519081900360640190fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535805460028114156105d4576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556001600160a01b03831660009081526004602052604090205480610643576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604081205560035461066f908263ffffffff610f5516565b600355600154610689906001600160a01b03168583610ed9565b6040805182815290516001600160a01b038616917f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4919081900360200190a250506001905550565b6001546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d602081101561074057600080fd5b5051905090565b600254421161078b576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b60055460ff16156107e3576040805162461bcd60e51b815260206004820152601960248201527f41646a7573746572206d75737420626520756e6c6f636b656400000000000000604482015290519081900360640190fd5b6000546001600160a01b03163314610835576040805162461bcd60e51b815260206004820152601060248201526f26bab9ba1031329030b2353ab9ba32b960811b604482015290519081900360640190fd5b828114610889576040805162461bcd60e51b815260206004820181905260248201527f41646472657373657320616e6420616d6f756e7473206d757374206d61746368604482015290519081900360640190fd5b8260005b818110156109635760008686838181106108a357fe5b905060200201356001600160a01b0316905060008585848181106108c357fe5b6001600160a01b03851660009081526004602090815260409091208054919092029390930135908190556003549093506109169150829061090a908563ffffffff610f9e16565b9063ffffffff610f5516565b6003556040805183815290516001600160a01b038516917f6dafe15ce3b23ddd739e5550df1d961528643f07fca79b88151baadf149a2c73919081900360200190a250505060010161088d565b505050505050565b60035481565b610979610d74565b6109b8576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b60025442116109fc576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b6005805460ff191690556040517f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e90600090a1565b610a39610ff8565b6001600160a01b0316336001600160a01b031614610a885760405162461bcd60e51b81526004018080602001828103825260308152602001806114686030913960400191505060405180910390fd5b610a913361101d565b565b6001600160a01b031660009081526004602052604090205490565b610ab6610d74565b610af5576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b6002544211610b39576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b7f53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac453580546002811415610ba3576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255600060035411610bea576040805162461bcd60e51b81526020600482015260096024820152684e6f20636c61696d7360b81b604482015290519081900360640190fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d6020811015610c5f57600080fd5b5051600354909150811015610ca55760405162461bcd60e51b81526004018080602001828103825260218152602001806113fd6021913960400191505060405180910390fd5b610cad6110cb565b610cbd428563ffffffff610f9e16565b60028190556301e2850090610cd8904263ffffffff610f5516565b10610d1e576040805162461bcd60e51b81526020600482015260116024820152704475726174696f6e20746f6f206c6f6e6760781b604482015290519081900360640190fd5b60025460408051918252517ff06a29c94c6f4edc1085072972d9441f7603e81c8535a308f214285d0653c8509181900360200190a150506001905550565b60055460ff1681565b6000546001600160a01b031681565b6000610d7e610f30565b6001600160a01b0316336001600160a01b031614905090565b610d9f610d74565b610dde576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b610de781611103565b806001600160a01b0316610df9610f30565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b610e39610d74565b610e78576040805162461bcd60e51b815260206004820152601a60248201526000805160206113dd833981519152604482015290519081900360640190fd5b6002544211610ebc576040805162461bcd60e51b815260206004820152601d6024820152600080516020611448833981519152604482015290519081900360640190fd5b610a916110cb565b60025481565b6001546001600160a01b031681565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f2b908490611127565b505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b6000610f9783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112e5565b9392505050565b600082820183811015610f97576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b038116611078576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b031661108a610f30565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36110c88161137c565b50565b6005805460ff191660011790556040517f46620e39f4e119bf05f13544f8ef38338fc06c17f6b731c7f95bee356572db9690600090a1565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b611139826001600160a01b03166113a0565b61118a576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106111c85780518252601f1990920191602091820191016111a9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461122a576040519150601f19603f3d011682016040523d82523d6000602084013e61122f565b606091505b509150915081611286576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156112df578080602001905160208110156112a257600080fd5b50516112df5760405162461bcd60e51b815260040180806020018281038252602a81526020018061141e602a913960400191505060405180910390fd5b50505050565b600081848411156113745760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611339578181015183820152602001611321565b50505050905090810190601f1680156113665780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906113d457508115155b94935050505056fe43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000496e73756666696369656e742066756e647320666f7220616c6c20636c61696d735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656453686f756c64206e6f7420626520696e20636c61696d20706572696f640000004f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a723158204d165f4d46050bf4b493a480fedccc553f9b06d6b7a69d965a479cafb11a424264736f6c634300050b0032",
  "devdoc": {
    "author": "Origin Protocol Inc",
    "details": "Airdrop for ERC20 tokens. *   Provides a coin airdrop with a verification period in which everyone  can check that all claims are correct before any actual funds are moved  to the contract. *      - Users can claim funds during the claim period. *      - The adjuster can set the amount of each user's claim,        but only when unlocked, and not during the claim period. *      - The governor can unlock and lock the adjuster, outside the claim period.     - The governor can start the claim period, if it's not started.     - The governor can collect any remaining funds after the claim period is over. *  Intended use sequence: *   1. Governor unlocks the adjuster  2. Adjuster uploads claims  3. Governor locks the adjuster  4. Everyone verifies that the claim amounts and totals are correct  5. Payout funds are moved to the contract  6. The claim period starts  7. Users claim funds  8. The claim period ends  9. Governor can collect any remaing funds ",
    "methods": {
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "title": "Compensation Claims"
  },
  "userdoc": {
    "methods": {}
  }
}
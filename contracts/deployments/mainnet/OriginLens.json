{
  "address": "0x9F802B1199037D7f9F7297537cDbE3b64dc46333",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategyAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum OriginLens.StrategyKinds",
          "name": "kind",
          "type": "uint8"
        }
      ],
      "name": "StrategyTypeChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cacheStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "curvePoolCoinCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategyAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getStrategyAssetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategyAddr",
          "type": "address"
        }
      ],
      "name": "getStrategyBalances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "supportedAssets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "assetBalances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategistAddr",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "strategyKinds",
          "type": "uint8[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oToken",
      "outputs": [
        {
          "internalType": "contract IOUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouter",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStrategistAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "enum OriginLens.StrategyKinds",
          "name": "kind",
          "type": "uint8"
        }
      ],
      "name": "setStrategyKind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyConfig",
      "outputs": [
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        },
        {
          "internalType": "enum OriginLens.StrategyKinds",
          "name": "kind",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9eea030e7fd367e951a935465845e2413a2780ae9486d38fcec65c59ea8e99a0",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0x9F802B1199037D7f9F7297537cDbE3b64dc46333",
    "transactionIndex": 5,
    "gasUsed": "2341503",
    "logsBloom": "0x
    "blockHash": "0xc5e051fe04c94ec6ebb4fba27ccd3fcb41e7402c21d4e347654accff6463029d",
    "transactionHash": "0x9eea030e7fd367e951a935465845e2413a2780ae9486d38fcec65c59ea8e99a0",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 18292402,
        "transactionHash": "0x9eea030e7fd367e951a935465845e2413a2780ae9486d38fcec65c59ea8e99a0",
        "address": "0x9F802B1199037D7f9F7297537cDbE3b64dc46333",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xc5e051fe04c94ec6ebb4fba27ccd3fcb41e7402c21d4e347654accff6463029d"
      }
    ],
    "blockNumber": 18292402,
    "cumulativeGasUsed": "3069922",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x856c4Efb76C1D1AE02e20CEB03A2A6a08b0b8dC3"
  ],
  "numDeployments": 1,
  "solcInputHash": "6b58876f1411779f09706d8243519c5b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategyAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OriginLens.StrategyKinds\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"StrategyTypeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cacheStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curvePoolCoinCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getStrategyAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddr\",\"type\":\"address\"}],\"name\":\"getStrategyBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"supportedAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategistAddr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"strategyKinds\",\"type\":\"uint8[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oToken\",\"outputs\":[{\"internalType\":\"contract IOUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouter\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStrategistAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"enum OriginLens.StrategyKinds\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"setStrategyKind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"},{\"internalType\":\"enum OriginLens.StrategyKinds\",\"name\":\"kind\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setStrategistAddr(address)\":{\"details\":\"Set address of Strategist\",\"params\":{\"_address\":\"Address of Strategist\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/OriginLens.sol\":\"OriginLens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/governance/Strategizable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Governable } from \\\"./Governable.sol\\\";\\n\\ncontract Strategizable is Governable {\\n    event StrategistUpdated(address _address);\\n\\n    // Address of strategist\\n    address public strategistAddr;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Verifies that the caller is either Governor or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == strategistAddr || isGovernor(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function setStrategistAddr(address _address) external onlyGovernor {\\n        _setStrategistAddr(_address);\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function _setStrategistAddr(address _address) internal {\\n        strategistAddr = _address;\\n        emit StrategistUpdated(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x7fd5473fd8d117575500c6b8fc1bb94e39a68082143d99da9946aed020a41619\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IOUSD.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IOUSD {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function _totalSupply() external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function changeSupply(uint256 _newTotalSupply) external;\\n\\n    function claimGovernance() external;\\n\\n    function creditsBalanceOf(address _account)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function creditsBalanceOfHighres(address _account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function governor() external view returns (address);\\n\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        external\\n        returns (bool);\\n\\n    function initialize(\\n        string memory _nameArg,\\n        string memory _symbolArg,\\n        address _vaultAddress\\n    ) external;\\n\\n    function isGovernor() external view returns (bool);\\n\\n    function isUpgraded(address) external view returns (uint256);\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function nonRebasingCreditsPerToken(address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function nonRebasingSupply() external view returns (uint256);\\n\\n    function rebaseOptIn() external;\\n\\n    function rebaseOptOut() external;\\n\\n    function rebaseState(address) external view returns (uint8);\\n\\n    function rebasingCredits() external view returns (uint256);\\n\\n    function rebasingCreditsHighres() external view returns (uint256);\\n\\n    function rebasingCreditsPerToken() external view returns (uint256);\\n\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function vaultAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x91291805f1caa4206bf5df018eccfebba8b37af1fbfa16f7b7e5ab308ebe4415\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eabf152389f145c9c23ed71972af73fb1708cbc4b26e524a9ba29a557b7cfe5\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the sum of balance of all supported assets.\\n     */\\n    function checkBalance() external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Address of the underlying platform\\n     */\\n    function platformAddress() external view returns (address);\\n\\n    // Balancer strategy specific methods:\\n    function balancerPoolId() external view returns (bytes32);\\n\\n    function balancerVault() external view returns (address);\\n\\n    // Curve strategy specific methods:\\n    function cvxRewardStaker() external view returns (address);\\n\\n    function assetToPToken(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd7fd8ad70c1c846eabbf1c67f5d05d7b7ed3fee5802fb9ba3e0c8ab5b5e67e01\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5f1379ac8f9bcd296931622147ae3bdb2f610dc855870124a5c59d746d3765a4\",\"license\":\"MIT\"},\"contracts/interfaces/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWstETH {\\n    /**\\n     * @notice Get amount of wstETH for a given amount of stETH\\n     * @param _stETHAmount amount of stETH\\n     * @return Amount of wstETH for a given stETH amount\\n     */\\n    function getWstETHByStETH(uint256 _stETHAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a given amount of wstETH\\n     * @param _wstETHAmount amount of wstETH\\n     * @return Amount of stETH for a given wstETH amount\\n     */\\n    function getStETHByWstETH(uint256 _wstETHAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a one wstETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for a one stETH\\n     * @return Amount of wstETH for a 1 stETH\\n     */\\n    function tokensPerStEth() external view returns (uint256);\\n\\n    /**\\n     * @notice Exchanges stETH to wstETH\\n     * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\\n     * @dev Requirements:\\n     *  - `_stETHAmount` must be non-zero\\n     *  - msg.sender must approve at least `_stETHAmount` stETH to this\\n     *    contract.\\n     *  - msg.sender must have at least `_stETHAmount` of stETH.\\n     * User should first approve _stETHAmount to the WstETH contract\\n     * @return Amount of wstETH user receives after wrap\\n     */\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Exchanges wstETH to stETH\\n     * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\\n     * @dev Requirements:\\n     *  - `_wstETHAmount` must be non-zero\\n     *  - msg.sender must have at least `_wstETHAmount` wstETH.\\n     * @return Amount of stETH user receives after unwrap\\n     */\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x11879192b6174afd0454642993ae452090d39b4c9891bbda6b8efd76d03b2388\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IBalancerVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"../../utils/InitializableAbstractStrategy.sol\\\";\\n\\ninterface IBalancerVault {\\n    enum WeightedPoolJoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\\n        ADD_TOKEN\\n    }\\n\\n    enum WeightedPoolExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\n        REMOVE_TOKEN\\n    }\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        address[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        address asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    enum UserBalanceOpKind {\\n        DEPOSIT_INTERNAL,\\n        WITHDRAW_INTERNAL,\\n        TRANSFER_INTERNAL,\\n        TRANSFER_EXTERNAL\\n    }\\n}\\n\",\"keccak256\":\"0x1aad51e5f184169c61eeae9f96f36dffed53186cadb57d90c4823a7ae762b251\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IMetaStablePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IRateProvider } from \\\"./IRateProvider.sol\\\";\\n\\ninterface IMetaStablePool {\\n    function getRateProviders()\\n        external\\n        view\\n        returns (IRateProvider[] memory providers);\\n}\\n\",\"keccak256\":\"0x2097844bbfab7f8dd30844c07915b04d45e20b104bf592ff92ed047b08ec2614\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IRateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x17aed1881094f3756380e1d634fd3490acc3f55a12f67bd3fd9a4644ef82a9a6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function get_balances() external view returns (uint256[] memory);\\n\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _deposit)\\n        external\\n        returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _amount,\\n        int128 _index,\\n        uint256 _minAmount\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] calldata _minWithdrawAmounts\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _amount, int128 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function coins(uint256 _index) external view returns (address);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata _amounts,\\n        uint256 maxBurnAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x309a03c9323f7977caef36ecd2c5adc00da2c5e23fb5c24eae97d3a3d857ab87\",\"license\":\"MIT\"},\"contracts/strategies/IRewardStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardStaking {\\n    function stakeFor(address, uint256) external;\\n\\n    function stake(uint256) external;\\n\\n    function withdraw(uint256 amount, bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function extraRewardsLength() external returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external returns (address);\\n\\n    function rewardToken() external returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf9eea30160579cc46f5255db068cf7bfd4a29008b19827b63038d5fbe6994c99\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(msg.sender));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\n\\n        _creditBalances[msg.sender] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\n\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x14a6bcf58e3622e475941619b0491b5e486bc7f6a3568ac179630bd4d725b85b\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Vault.\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        harvesterAddress = _harvesterAddress;\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x6cccf3941a29b98176732e43a5a6250cc6a02c449135439391ec28caae374ee5\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n * @author Origin Protocol Inc\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xe35ac2d813a30d845a3b52bba72588d7e936c2b3f3373d15568c14db46aeed60\",\"license\":\"MIT\"},\"contracts/utils/OriginLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Strategizable } from \\\"../governance/Strategizable.sol\\\";\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\nimport { IERC20 } from \\\"./InitializableAbstractStrategy.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IOUSD } from \\\"../interfaces/IOUSD.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IRewardStaking } from \\\"../strategies/IRewardStaking.sol\\\";\\nimport { ICurvePool } from \\\"../strategies/ICurvePool.sol\\\";\\nimport { IBalancerVault } from \\\"../interfaces/balancer/IBalancerVault.sol\\\";\\nimport { IRateProvider } from \\\"../interfaces/balancer/IRateProvider.sol\\\";\\nimport { IWstETH } from \\\"../interfaces/IWstETH.sol\\\";\\nimport { IERC4626 } from \\\"../../lib/openzeppelin/interfaces/IERC4626.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IMetaStablePool } from \\\"../interfaces/balancer/IMetaStablePool.sol\\\";\\nimport { StableMath } from \\\"./StableMath.sol\\\";\\n\\n// import { console } from \\\"hardhat/console.sol\\\";\\n\\ncontract OriginLens is Initializable, Strategizable {\\n    using StableMath for uint256;\\n\\n    enum StrategyKinds {\\n        Generic,\\n        CurveAMO,\\n        BalancerMetaStablePool,\\n        BalancerComposableStablePool\\n    }\\n\\n    struct StrategyConfig {\\n        bool supported;\\n        StrategyKinds kind;\\n    }\\n\\n    event StrategyTypeChanged(address indexed strategyAddr, StrategyKinds kind);\\n\\n    address[] public strategies;\\n    address[] public assets;\\n\\n    mapping(address => StrategyConfig) public strategyConfig;\\n    mapping(address => uint256) public curvePoolCoinCount;\\n\\n    IVault public immutable vault;\\n    IOUSD public immutable oToken;\\n    uint256 public immutable assetCount;\\n    IOracle public immutable oracleRouter;\\n\\n    address public constant ETH_ADDR =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant WETH_ADDR =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    constructor(address _oToken) {\\n        require(_oToken != address(0), \\\"Invalid OToken address\\\");\\n        oToken = IOUSD(_oToken);\\n        IVault _vault = IVault(IOUSD(_oToken).vaultAddress());\\n        vault = _vault;\\n\\n        assetCount = _vault.getAssetCount();\\n        oracleRouter = IOracle(_vault.priceProvider());\\n\\n        // Nobody owns the Implementation contract\\n        _setGovernor(address(0));\\n    }\\n\\n    function initialize(\\n        address _strategistAddr,\\n        address[] calldata _strategies,\\n        uint8[] calldata strategyKinds\\n    ) external onlyGovernor initializer {\\n        require(_strategistAddr != address(0), \\\"Invalid strategist address\\\");\\n        _setStrategistAddr(_strategistAddr);\\n\\n        // Cache assets and strategies\\n        assets = vault.getAllAssets();\\n        cacheStrategies();\\n\\n        for (uint256 i = 0; i < _strategies.length; ++i) {\\n            _setStrategyKind(_strategies[i], StrategyKinds(strategyKinds[i]));\\n        }\\n    }\\n\\n    function setStrategyKind(address strategy, StrategyKinds kind)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        _setStrategyKind(strategy, kind);\\n    }\\n\\n    function _setStrategyKind(address strategy, StrategyKinds kind) internal {\\n        StrategyConfig storage config = strategyConfig[strategy];\\n        require(config.supported, \\\"Unsupported strategy\\\");\\n\\n        config.kind = kind;\\n\\n        if (kind == StrategyKinds.CurveAMO) {\\n            _cacheCurvePoolCoinCount(IStrategy(strategy).platformAddress());\\n        }\\n\\n        emit StrategyTypeChanged(strategy, kind);\\n    }\\n\\n    function cacheStrategies() public {\\n        address[] memory vaultStrategies = vault.getAllStrategies();\\n\\n        // Mark all existing strategies as unsupported.\\n        // Takes care of any strategies removed from the Vault\\n        for (uint256 i = 0; i < strategies.length; ++i) {\\n            strategyConfig[strategies[i]].supported = false;\\n        }\\n\\n        // Mark everything on Vault as supported\\n        for (uint256 i = 0; i < vaultStrategies.length; ++i) {\\n            StrategyConfig storage config = strategyConfig[vaultStrategies[i]];\\n            config.supported = true;\\n            // Either retains the `kind` from previous configuration or\\n            // is set to `0` (or `Generic`) as the fallback value.\\n        }\\n\\n        // Reset the strategies array\\n        strategies = vaultStrategies;\\n    }\\n\\n    function getStrategyBalances(address strategyAddr)\\n        public\\n        view\\n        returns (\\n            address[] memory supportedAssets,\\n            uint256[] memory assetBalances\\n        )\\n    {\\n        StrategyConfig memory config = strategyConfig[strategyAddr];\\n        require(config.supported, \\\"Unsupported strategy\\\");\\n\\n        IStrategy strategy = IStrategy(strategyAddr);\\n\\n        if (config.kind == StrategyKinds.CurveAMO) {\\n            return _getCurveAMOPoolBalance(strategy);\\n        } else if (config.kind == StrategyKinds.BalancerMetaStablePool) {\\n            return _getBalancerMetaStablePoolBalance(strategy);\\n        }\\n\\n        address[] memory _supportedAssets = new address[](assetCount);\\n\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            address asset = assets[i];\\n            if (strategy.supportsAsset(asset)) {\\n                _supportedAssets[j] = asset;\\n                ++j;\\n            }\\n        }\\n\\n        supportedAssets = new address[](j);\\n        assetBalances = new uint256[](j);\\n        for (uint256 i = 0; i < j; ++i) {\\n            address asset = _supportedAssets[i];\\n            supportedAssets[i] = asset;\\n            assetBalances[i] = _getStrategyAssetBalance(\\n                strategy,\\n                asset,\\n                config\\n            );\\n        }\\n    }\\n\\n    function getStrategyAssetBalance(address strategyAddr, address asset)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        StrategyConfig memory config = strategyConfig[strategyAddr];\\n        require(config.supported, \\\"Unsupported strategy\\\");\\n\\n        IStrategy strategy = IStrategy(strategyAddr);\\n        // require(strategy.supportsAsset(asset), \\\"Unsupported asset\\\");\\n\\n        return _getStrategyAssetBalance(strategy, asset, config);\\n    }\\n\\n    function _getStrategyAssetBalance(\\n        IStrategy strategy,\\n        address asset,\\n        StrategyConfig memory config\\n    ) internal view returns (uint256 balance) {\\n        if (config.kind == StrategyKinds.CurveAMO) {\\n            return _getCurveAMOPoolAssetBalance(strategy, asset);\\n        } else if (config.kind == StrategyKinds.BalancerMetaStablePool) {\\n            return _getBalancerMetaStablePoolAssetBalance(strategy, asset);\\n        } else if (config.kind == StrategyKinds.BalancerComposableStablePool) {\\n            return\\n                _getBalancerComposableStablePoolAssetBalance(strategy, asset);\\n        }\\n\\n        return strategy.checkBalance(asset);\\n    }\\n\\n    function _getCurveAMOPoolBalance(IStrategy strategy)\\n        internal\\n        view\\n        returns (\\n            address[] memory supportedAssets,\\n            uint256[] memory assetBalances\\n        )\\n    {\\n        ICurvePool pool = ICurvePool(strategy.platformAddress());\\n        uint256 coinCount = curvePoolCoinCount[address(pool)];\\n\\n        supportedAssets = new address[](coinCount);\\n        assetBalances = new uint256[](coinCount);\\n\\n        // Staked LP tokens balance\\n        uint256 strategyBalance = IRewardStaking(strategy.cvxRewardStaker())\\n            .balanceOf(address(strategy));\\n\\n        uint256 totalPoolValue;\\n        for (uint256 i = 0; i < coinCount; ++i) {\\n            address asset = pool.coins(i);\\n            uint256 balance = pool.balances(i);\\n\\n            supportedAssets[i] = asset;\\n            assetBalances[i] = balance;\\n            // TODO: Assuming 18 decimals always, which might not be true for OUSD\\n            totalPoolValue += balance;\\n\\n            // Unstaked LP tokens balance\\n            if (asset != address(oToken)) {\\n                address pToken = strategy.assetToPToken(asset);\\n\\n                if (asset == ETH_ADDR) {\\n                    // Always return as WETH\\n                    supportedAssets[i] = WETH_ADDR;\\n                    strategyBalance += IERC20(WETH_ADDR).balanceOf(\\n                        address(strategy)\\n                    );\\n                } else if (pToken != address(0)) {\\n                    strategyBalance += IERC20(pToken).balanceOf(\\n                        address(strategy)\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Total LP tokens * Virtual price\\n        strategyBalance = strategyBalance.mulTruncateScale(\\n            pool.get_virtual_price(),\\n            1 ether // 18 decimals assumption\\n        );\\n\\n        // Compute split owned by strategy\\n        for (uint256 i = 0; i < supportedAssets.length; ++i) {\\n            assetBalances[i] = strategyBalance.mulTruncateScale(\\n                (1e8 * assetBalances[i]) / totalPoolValue, // Split of asset scaled to 1e8 for accuracy\\n                1e8\\n            );\\n        }\\n    }\\n\\n    function _getCurveAMOPoolAssetBalance(IStrategy strategy, address asset)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        (\\n            address[] memory coins,\\n            uint256[] memory balances\\n        ) = _getCurveAMOPoolBalance(strategy);\\n        for (uint256 i = 0; i < coins.length; ++i) {\\n            if (coins[i] == asset) {\\n                return balances[i];\\n            }\\n        }\\n\\n        require(false, \\\"Unsupported asset\\\");\\n    }\\n\\n    function _getBalancerMetaStablePoolBalance(IStrategy strategy)\\n        internal\\n        view\\n        returns (\\n            address[] memory supportedAssets,\\n            uint256[] memory assetBalances\\n        )\\n    {\\n        // Get the entire balance in base token (WETH)\\n        uint256 totalValueInStrategy = strategy.checkBalance();\\n\\n        (IERC20[] memory tokens, uint256[] memory balances, ) = IBalancerVault(\\n            strategy.balancerVault()\\n        ).getPoolTokens(strategy.balancerPoolId());\\n        IRateProvider[] memory providers = IMetaStablePool(\\n            strategy.platformAddress()\\n        ).getRateProviders();\\n\\n        supportedAssets = new address[](tokens.length);\\n        assetBalances = new uint256[](tokens.length);\\n\\n        uint256[] memory assetRates = new uint256[](tokens.length);\\n\\n        uint256 totalPoolValue;\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            uint256 tokenBalance = balances[i];\\n            uint256 _rate = 1 ether;\\n\\n            supportedAssets[i] = address(tokens[i]);\\n\\n            if (address(providers[i]) != address(0)) {\\n                _rate = providers[i].getRate();\\n                tokenBalance = tokenBalance.divPrecisely(_rate);\\n            }\\n\\n            assetRates[i] = _rate;\\n            assetBalances[i] = tokenBalance; // Value of token in ETH\\n            totalPoolValue += tokenBalance;\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            // Value of `tokens[i]` in strategy\\n            assetBalances[i] = totalValueInStrategy\\n                .mulTruncateScale(\\n                    // Split of asset scaled to 1e8 for accuracy\\n                    ((1e8 * assetBalances[i]) / totalPoolValue),\\n                    1e8\\n                )\\n                .divPrecisely(\\n                    // WETH to `tokens[i]` Rate conversion\\n                    assetRates[i]\\n                );\\n        }\\n    }\\n\\n    function _getBalancerMetaStablePoolAssetBalance(\\n        IStrategy strategy,\\n        address asset\\n    ) internal view returns (uint256 balance) {\\n        (\\n            address[] memory tokens,\\n            uint256[] memory balances\\n        ) = _getBalancerMetaStablePoolBalance(strategy);\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            if (tokens[i] == asset) {\\n                return balances[i];\\n            }\\n        }\\n\\n        require(false, \\\"Unsupported asset\\\");\\n    }\\n\\n    function _getBalancerComposableStablePoolAssetBalance(IStrategy, address)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // TODO: After that strategy is deployed\\n        require(false, \\\"Not implemented\\\");\\n    }\\n\\n    function _cacheCurvePoolCoinCount(address pool) internal {\\n        // Assuming Curve pools will have only 2 to 4 coins\\n        for (uint256 i = 1; i < 4; ++i) {\\n            (bool success, ) = address(pool).staticcall(\\n                abi.encodeWithSelector(ICurvePool.coins.selector, i)\\n            );\\n\\n            if (success == false) {\\n                curvePoolCoinCount[address(pool)] = i;\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73a5cc6134a2f539e8d926501ee1e5a65ad4fe9aa1b2780c6bf02eeba35af61b\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configiration\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n    address public ousdMetaStrategy = address(0);\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy = 0;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold = 0;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19891574f3b33074486f48166879b4cccc88162c392e77192bd54367ec263287\",\"license\":\"MIT\"},\"lib/openzeppelin/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\",\"keccak256\":\"0xd1abd028496aacc3eef98e585a744e1a449dcf9b2e818c59d15d5c0091c3f293\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002c4438038062002c448339810160408190526200003591620002c5565b6200004d3360008051602062002c2483398151915255565b60008051602062002c24833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36001600160a01b038116620000f05760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964204f546f6b656e206164647265737300000000000000000000604482015260640160405180910390fd5b806001600160a01b031660a0816001600160a01b031660601b815250506000816001600160a01b031663430bf08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200014957600080fd5b505afa1580156200015e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001849190620002c5565b9050806001600160a01b03166080816001600160a01b031660601b81525050806001600160a01b031663a0aead4d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001dd57600080fd5b505afa158015620001f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002189190620002f7565b60c08181525050806001600160a01b031663b888879e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025957600080fd5b505afa1580156200026e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002949190620002c5565b60601b6001600160601b03191660e052620002bd600060008051602062002c2483398151915255565b505062000311565b600060208284031215620002d857600080fd5b81516001600160a01b0381168114620002f057600080fd5b9392505050565b6000602082840312156200030a57600080fd5b5051919050565b60805160601c60a05160601c60c05160e05160601c6128ad6200037760003960006101b801526000818161033501528181610b7a0152610be201526000818161016601526114dc01526000818161035c0152818161043e015261094401526128ad6000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806391450e63116100b8578063d574ea3d1161007c578063d574ea3d146102c9578063dd6640c3146102dc578063e336f8c5146102fc578063e50bf68f1461030f578063eafe7a7414610330578063fbfa77cf1461035757600080fd5b806391450e631461023e578063aefc61e014610278578063c7af33521461028b578063cf35bdd0146102a3578063d38bfff4146102b657600080fd5b8063570d8e1d116100ff578063570d8e1d146101da5780635d36b190146101ed578063773540b3146101f55780637753f47b1461020857806382dfc5f71461022357600080fd5b80630c340a241461013c5780631a32aad6146101615780633a1d532b1461018857806344f98829146101a957806355a29e91146101b3575b600080fd5b61014461037e565b6040516001600160a01b0390911681526020015b60405180910390f35b6101447f000000000000000000000000000000000000000000000000000000000000000081565b61019b61019636600461225a565b61039b565b604051908152602001610158565b6101b161043a565b005b6101447f000000000000000000000000000000000000000000000000000000000000000081565b603354610144906001600160a01b031681565b6101b16105b9565b6101b1610203366004612220565b61065f565b61014473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61014473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61026a61024c366004612220565b60686020526000908152604090205460ff8082169161010090041682565b60405161015892919061269a565b6101b1610286366004612315565b61068f565b610293610712565b6040519015158152602001610158565b6101446102b136600461258a565b610743565b6101b16102c4366004612220565b61076d565b6101446102d736600461258a565b610811565b61019b6102ea366004612220565b60696020526000908152604090205481565b6101b161030a366004612293565b610821565b61032261031d366004612220565b610a94565b604051610158929190612623565b61019b7f000000000000000000000000000000000000000000000000000000000000000081565b6101447f000000000000000000000000000000000000000000000000000000000000000081565b60006103966000805160206128588339815191525490565b905090565b6001600160a01b03821660009081526068602090815260408083208151808301909252805460ff80821615158452859484019161010090041660038111156103e5576103e5612800565b60038111156103f6576103f6612800565b90525080519091506104235760405162461bcd60e51b815260040161041a906126f5565b60405180910390fd5b8361042f818584610e1c565b925050505b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d19190810190612347565b905060005b60665481101561053d57600060686000606684815481106104f9576104f9612816565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055610536816127cf565b90506104d6565b5060005b81518110156105a15760006068600084848151811061056257610562612816565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191660011790555061059a816127cf565b9050610541565b5080516105b59060669060208401906120e9565b5050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146106545760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161041a565b61065d33610f20565b565b610667610712565b6106835760405162461bcd60e51b815260040161041a906126be565b61068c81610fe1565b50565b6033546001600160a01b03163314806106ab57506106ab610712565b6107085760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060448201526723b7bb32b93737b960c11b606482015260840161041a565b6105b58282611035565b600061072a6000805160206128588339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6067818154811061075357600080fd5b6000918252602090912001546001600160a01b0316905081565b610775610712565b6107915760405162461bcd60e51b815260040161041a906126be565b6107b9817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166107d96000805160206128588339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6066818154811061075357600080fd5b610829610712565b6108455760405162461bcd60e51b815260040161041a906126be565b600054610100900460ff168061085e575060005460ff16155b6108c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161041a565b600054610100900460ff161580156108e3576000805461ffff19166101011790555b6001600160a01b0386166109395760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420737472617465676973742061646472657373000000000000604482015260640161041a565b61094286610fe1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d79190810190612347565b80516109eb916067916020909101906120e9565b506109f461043a565b60005b84811015610a7957610a69868683818110610a1457610a14612816565b9050602002016020810190610a299190612220565b858584818110610a3b57610a3b612816565b9050602002016020810190610a5091906125a3565b60ff166003811115610a6457610a64612800565b611035565b610a72816127cf565b90506109f7565b508015610a8c576000805461ff00191690555b505050505050565b6001600160a01b03811660009081526068602090815260408083208151808301909252805460ff8082161515845260609586959094939290840191610100909104166003811115610ae757610ae7612800565b6003811115610af857610af8612800565b9052508051909150610b1c5760405162461bcd60e51b815260040161041a906126f5565b83600182602001516003811115610b3557610b35612800565b1415610b4f57610b448161116c565b935093505050915091565b600282602001516003811115610b6757610b67612800565b1415610b7657610b4481611836565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160401b03811115610bb057610bb061282c565b604051908082528060200260200182016040528015610bd9578160200160208202803683370190505b5090506000805b7f0000000000000000000000000000000000000000000000000000000000000000811015610cf457600060678281548110610c1d57610c1d612816565b60009182526020909120015460405163551c457b60e11b81526001600160a01b039182166004820181905292509086169063aa388af69060240160206040518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca7919061254f565b15610ce35780848481518110610cbf57610cbf612816565b6001600160a01b0390921660209283029190910190910152610ce0836127cf565b92505b50610ced816127cf565b9050610be0565b50806001600160401b03811115610d0d57610d0d61282c565b604051908082528060200260200182016040528015610d36578160200160208202803683370190505b509550806001600160401b03811115610d5157610d5161282c565b604051908082528060200260200182016040528015610d7a578160200160208202803683370190505b50945060005b81811015610e12576000838281518110610d9c57610d9c612816565b6020026020010151905080888381518110610db957610db9612816565b60200260200101906001600160a01b031690816001600160a01b031681525050610de4858288610e1c565b878381518110610df657610df6612816565b602090810291909101015250610e0b816127cf565b9050610d80565b5050505050915091565b6000600182602001516003811115610e3657610e36612800565b1415610e4d57610e468484611e2a565b9050610f19565b600282602001516003811115610e6557610e65612800565b1415610e7557610e468484611eec565b600382602001516003811115610e8d57610e8d612800565b1415610e9d57610e468484611f5f565b604051632fa8a91360e11b81526001600160a01b038481166004830152851690635f5152269060240160206040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190612571565b90505b9392505050565b6001600160a01b038116610f765760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161041a565b806001600160a01b0316610f966000805160206128588339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361068c8160008051602061285883398151915255565b603380546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200160405180910390a150565b6001600160a01b0382166000908152606860205260409020805460ff1661106e5760405162461bcd60e51b815260040161041a906126f5565b80548290829061ff00191661010083600381111561108e5761108e612800565b021790555060018260038111156110a7576110a7612800565b141561112657611126836001600160a01b031663dbe55e566040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611121919061223d565b611f9c565b826001600160a01b03167f7fab7e3127613cf3a72eafc4bfcb3e179d35d1c69e1d0217c1dd029dc23690bd8360405161115f91906126b0565b60405180910390a2505050565b6060806000836001600160a01b031663dbe55e566040518163ffffffff1660e01b815260040160206040518083038186803b1580156111aa57600080fd5b505afa1580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e2919061223d565b6001600160a01b038116600090815260696020526040902054909150806001600160401b038111156112165761121661282c565b60405190808252806020026020018201604052801561123f578160200160208202803683370190505b509350806001600160401b0381111561125a5761125a61282c565b604051908082528060200260200182016040528015611283578160200160208202803683370190505b5092506000856001600160a01b031663046832b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f9919061223d565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a082319060240160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612571565b90506000805b838110156117335760405163c661065760e01b8152600481018290526000906001600160a01b0387169063c66106579060240160206040518083038186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd919061223d565b604051634903b0d160e01b8152600481018490529091506000906001600160a01b03881690634903b0d19060240160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b9190612571565b90508189848151811061149057611490612816565b60200260200101906001600160a01b031690816001600160a01b031681525050808884815181106114c3576114c3612816565b60209081029190910101526114d88185612776565b93507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614611720576040516303f0ed3160e21b81526001600160a01b038381166004830152600091908c1690630fc3b4c49060240160206040518083038186803b15801561155857600080fd5b505afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611590919061223d565b90506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156116895773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28a85815181106115de576115de612816565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b8152908c16600482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319060240160206040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116789190612571565b6116829087612776565b955061171e565b6001600160a01b0381161561171e576040516370a0823160e01b81526001600160a01b038c811660048301528216906370a082319060240160206040518083038186803b1580156116d957600080fd5b505afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117119190612571565b61171b9087612776565b95505b505b50508061172c906127cf565b905061137a565b506117b8846001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190612571565b8390670de0b6b3a7640000612086565b915060005b8651811015610e1257611809828783815181106117dc576117dc612816565b60200260200101516305f5e1006117f391906127b0565b6117fd919061278e565b84906305f5e100612086565b86828151811061181b5761181b612816565b602090810291909101015261182f816127cf565b90506117bd565b6060806000836001600160a01b031663c71daccb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561187457600080fd5b505afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac9190612571565b9050600080856001600160a01b031663158274a56040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ea57600080fd5b505afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611922919061223d565b6001600160a01b031663f94d4668876001600160a01b031663dbbb64b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561196957600080fd5b505afa15801561197d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a19190612571565b6040518263ffffffff1660e01b81526004016119bf91815260200190565b60006040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a1391908101906123e7565b50915091506000866001600160a01b031663dbe55e566040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5357600080fd5b505afa158015611a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8b919061223d565b6001600160a01b031663238a2d596040518163ffffffff1660e01b815260040160006040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aff91908101906124bb565b905082516001600160401b03811115611b1a57611b1a61282c565b604051908082528060200260200182016040528015611b43578160200160208202803683370190505b50955082516001600160401b03811115611b5f57611b5f61282c565b604051908082528060200260200182016040528015611b88578160200160208202803683370190505b509450600083516001600160401b03811115611ba657611ba661282c565b604051908082528060200260200182016040528015611bcf578160200160208202803683370190505b5090506000805b8551811015611d7e576000858281518110611bf357611bf3612816565b602002602001015190506000670de0b6b3a76400009050878381518110611c1c57611c1c612816565b60200260200101518b8481518110611c3657611c36612816565b60200260200101906001600160a01b031690816001600160a01b03168152505060006001600160a01b0316868481518110611c7357611c73612816565b60200260200101516001600160a01b031614611d2257858381518110611c9b57611c9b612816565b60200260200101516001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cdb57600080fd5b505afa158015611cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d139190612571565b9050611d1f82826120a8565b91505b80858481518110611d3557611d35612816565b602002602001018181525050818a8481518110611d5457611d54612816565b6020908102919091010152611d698285612776565b9350505080611d77906127cf565b9050611bd6565b5060005b8551811015611e1e57611df1838281518110611da057611da0612816565b6020026020010151611deb848b8581518110611dbe57611dbe612816565b60200260200101516305f5e100611dd591906127b0565b611ddf919061278e565b8a906305f5e100612086565b906120a8565b888281518110611e0357611e03612816565b6020908102919091010152611e17816127cf565b9050611d82565b50505050505050915091565b6000806000611e388561116c565b9150915060005b8251811015611eaf57846001600160a01b0316838281518110611e6457611e64612816565b60200260200101516001600160a01b03161415611e9f57818181518110611e8d57611e8d612816565b60200260200101519350505050610434565b611ea8816127cf565b9050611e3f565b5060405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015260640161041a565b6000806000611efa85611836565b9150915060005b8251811015611eaf57846001600160a01b0316838281518110611f2657611f26612816565b60200260200101516001600160a01b03161415611f4f57818181518110611e8d57611e8d612816565b611f58816127cf565b9050611f01565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b604482015260009060640161041a565b60015b60048110156105b5576000826001600160a01b031663c661065760e01b83604051602401611fcf91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161200d91906125e8565b600060405180830381855afa9150503d8060008114612048576040519150601f19603f3d011682016040523d82523d6000602084013e61204d565b606091505b50909150508061207557506001600160a01b0391909116600090815260696020526040902055565b5061207f816127cf565b9050611f9f565b60008061209385856120d1565b905061209f81846120dd565b95945050505050565b6000806120bd84670de0b6b3a76400006120d1565b90506120c981846120dd565b949350505050565b6000610f1982846127b0565b6000610f19828461278e565b82805482825590600052602060002090810192821561213e579160200282015b8281111561213e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612109565b5061214a92915061214e565b5090565b5b8082111561214a576000815560010161214f565b60008083601f84011261217557600080fd5b5081356001600160401b0381111561218c57600080fd5b6020830191508360208260051b85010111156121a757600080fd5b9250929050565b600082601f8301126121bf57600080fd5b815160206121d46121cf83612753565b612723565b80838252828201915082860187848660051b89010111156121f457600080fd5b60005b85811015612213578151845292840192908401906001016121f7565b5090979650505050505050565b60006020828403121561223257600080fd5b8135610f1981612842565b60006020828403121561224f57600080fd5b8151610f1981612842565b6000806040838503121561226d57600080fd5b823561227881612842565b9150602083013561228881612842565b809150509250929050565b6000806000806000606086880312156122ab57600080fd5b85356122b681612842565b945060208601356001600160401b03808211156122d257600080fd5b6122de89838a01612163565b909650945060408801359150808211156122f757600080fd5b5061230488828901612163565b969995985093965092949392505050565b6000806040838503121561232857600080fd5b823561233381612842565b915060208301356004811061228857600080fd5b6000602080838503121561235a57600080fd5b82516001600160401b0381111561237057600080fd5b8301601f8101851361238157600080fd5b805161238f6121cf82612753565b80828252848201915084840188868560051b87010111156123af57600080fd5b600094505b838510156123db5780516123c781612842565b8352600194909401939185019185016123b4565b50979650505050505050565b6000806000606084860312156123fc57600080fd5b83516001600160401b038082111561241357600080fd5b818601915086601f83011261242757600080fd5b815160206124376121cf83612753565b8083825282820191508286018b848660051b890101111561245757600080fd5b600096505b8487101561248357805161246f81612842565b83526001969096019591830191830161245c565b509189015191975090935050508082111561249d57600080fd5b506124aa868287016121ae565b925050604084015190509250925092565b600060208083850312156124ce57600080fd5b82516001600160401b038111156124e457600080fd5b8301601f810185136124f557600080fd5b80516125036121cf82612753565b80828252848201915084840188868560051b870101111561252357600080fd5b600094505b838510156123db57805161253b81612842565b835260019490940193918501918501612528565b60006020828403121561256157600080fd5b81518015158114610f1957600080fd5b60006020828403121561258357600080fd5b5051919050565b60006020828403121561259c57600080fd5b5035919050565b6000602082840312156125b557600080fd5b813560ff81168114610f1957600080fd5b600481106125e457634e487b7160e01b600052602160045260246000fd5b9052565b6000825160005b8181101561260957602081860181015185830152016125ef565b81811115612618576000828501525b509190910192915050565b604080825283519082018190526000906020906060840190828701845b828110156126655781516001600160a01b031684529284019290840190600101612640565b5050508381038285015284518082528583019183019060005b818110156122135783518352928401929184019160010161267e565b821515815260408101610f1960208301846125c6565b6020810161043482846125c6565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602080825260149082015273556e737570706f7274656420737472617465677960601b604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561274b5761274b61282c565b604052919050565b60006001600160401b0382111561276c5761276c61282c565b5060051b60200190565b60008219821115612789576127896127ea565b500190565b6000826127ab57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156127ca576127ca6127ea565b500290565b60006000198214156127e3576127e36127ea565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461068c57600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220ab9be56c30da0d6bbaa230de6b0384c28cf376caa56798b43a14dac274e0459d64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806391450e63116100b8578063d574ea3d1161007c578063d574ea3d146102c9578063dd6640c3146102dc578063e336f8c5146102fc578063e50bf68f1461030f578063eafe7a7414610330578063fbfa77cf1461035757600080fd5b806391450e631461023e578063aefc61e014610278578063c7af33521461028b578063cf35bdd0146102a3578063d38bfff4146102b657600080fd5b8063570d8e1d116100ff578063570d8e1d146101da5780635d36b190146101ed578063773540b3146101f55780637753f47b1461020857806382dfc5f71461022357600080fd5b80630c340a241461013c5780631a32aad6146101615780633a1d532b1461018857806344f98829146101a957806355a29e91146101b3575b600080fd5b61014461037e565b6040516001600160a01b0390911681526020015b60405180910390f35b6101447f000000000000000000000000000000000000000000000000000000000000000081565b61019b61019636600461225a565b61039b565b604051908152602001610158565b6101b161043a565b005b6101447f000000000000000000000000000000000000000000000000000000000000000081565b603354610144906001600160a01b031681565b6101b16105b9565b6101b1610203366004612220565b61065f565b61014473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61014473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61026a61024c366004612220565b60686020526000908152604090205460ff8082169161010090041682565b60405161015892919061269a565b6101b1610286366004612315565b61068f565b610293610712565b6040519015158152602001610158565b6101446102b136600461258a565b610743565b6101b16102c4366004612220565b61076d565b6101446102d736600461258a565b610811565b61019b6102ea366004612220565b60696020526000908152604090205481565b6101b161030a366004612293565b610821565b61032261031d366004612220565b610a94565b604051610158929190612623565b61019b7f000000000000000000000000000000000000000000000000000000000000000081565b6101447f000000000000000000000000000000000000000000000000000000000000000081565b60006103966000805160206128588339815191525490565b905090565b6001600160a01b03821660009081526068602090815260408083208151808301909252805460ff80821615158452859484019161010090041660038111156103e5576103e5612800565b60038111156103f6576103f6612800565b90525080519091506104235760405162461bcd60e51b815260040161041a906126f5565b60405180910390fd5b8361042f818584610e1c565b925050505b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3b288646040518163ffffffff1660e01b815260040160006040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d19190810190612347565b905060005b60665481101561053d57600060686000606684815481106104f9576104f9612816565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055610536816127cf565b90506104d6565b5060005b81518110156105a15760006068600084848151811061056257610562612816565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191660011790555061059a816127cf565b9050610541565b5080516105b59060669060208401906120e9565b5050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146106545760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161041a565b61065d33610f20565b565b610667610712565b6106835760405162461bcd60e51b815260040161041a906126be565b61068c81610fe1565b50565b6033546001600160a01b03163314806106ab57506106ab610712565b6107085760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060448201526723b7bb32b93737b960c11b606482015260840161041a565b6105b58282611035565b600061072a6000805160206128588339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6067818154811061075357600080fd5b6000918252602090912001546001600160a01b0316905081565b610775610712565b6107915760405162461bcd60e51b815260040161041a906126be565b6107b9817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166107d96000805160206128588339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6066818154811061075357600080fd5b610829610712565b6108455760405162461bcd60e51b815260040161041a906126be565b600054610100900460ff168061085e575060005460ff16155b6108c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161041a565b600054610100900460ff161580156108e3576000805461ffff19166101011790555b6001600160a01b0386166109395760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420737472617465676973742061646472657373000000000000604482015260640161041a565b61094286610fe1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d79190810190612347565b80516109eb916067916020909101906120e9565b506109f461043a565b60005b84811015610a7957610a69868683818110610a1457610a14612816565b9050602002016020810190610a299190612220565b858584818110610a3b57610a3b612816565b9050602002016020810190610a5091906125a3565b60ff166003811115610a6457610a64612800565b611035565b610a72816127cf565b90506109f7565b508015610a8c576000805461ff00191690555b505050505050565b6001600160a01b03811660009081526068602090815260408083208151808301909252805460ff8082161515845260609586959094939290840191610100909104166003811115610ae757610ae7612800565b6003811115610af857610af8612800565b9052508051909150610b1c5760405162461bcd60e51b815260040161041a906126f5565b83600182602001516003811115610b3557610b35612800565b1415610b4f57610b448161116c565b935093505050915091565b600282602001516003811115610b6757610b67612800565b1415610b7657610b4481611836565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160401b03811115610bb057610bb061282c565b604051908082528060200260200182016040528015610bd9578160200160208202803683370190505b5090506000805b7f0000000000000000000000000000000000000000000000000000000000000000811015610cf457600060678281548110610c1d57610c1d612816565b60009182526020909120015460405163551c457b60e11b81526001600160a01b039182166004820181905292509086169063aa388af69060240160206040518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca7919061254f565b15610ce35780848481518110610cbf57610cbf612816565b6001600160a01b0390921660209283029190910190910152610ce0836127cf565b92505b50610ced816127cf565b9050610be0565b50806001600160401b03811115610d0d57610d0d61282c565b604051908082528060200260200182016040528015610d36578160200160208202803683370190505b509550806001600160401b03811115610d5157610d5161282c565b604051908082528060200260200182016040528015610d7a578160200160208202803683370190505b50945060005b81811015610e12576000838281518110610d9c57610d9c612816565b6020026020010151905080888381518110610db957610db9612816565b60200260200101906001600160a01b031690816001600160a01b031681525050610de4858288610e1c565b878381518110610df657610df6612816565b602090810291909101015250610e0b816127cf565b9050610d80565b5050505050915091565b6000600182602001516003811115610e3657610e36612800565b1415610e4d57610e468484611e2a565b9050610f19565b600282602001516003811115610e6557610e65612800565b1415610e7557610e468484611eec565b600382602001516003811115610e8d57610e8d612800565b1415610e9d57610e468484611f5f565b604051632fa8a91360e11b81526001600160a01b038481166004830152851690635f5152269060240160206040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190612571565b90505b9392505050565b6001600160a01b038116610f765760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161041a565b806001600160a01b0316610f966000805160206128588339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361068c8160008051602061285883398151915255565b603380546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee9060200160405180910390a150565b6001600160a01b0382166000908152606860205260409020805460ff1661106e5760405162461bcd60e51b815260040161041a906126f5565b80548290829061ff00191661010083600381111561108e5761108e612800565b021790555060018260038111156110a7576110a7612800565b141561112657611126836001600160a01b031663dbe55e566040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611121919061223d565b611f9c565b826001600160a01b03167f7fab7e3127613cf3a72eafc4bfcb3e179d35d1c69e1d0217c1dd029dc23690bd8360405161115f91906126b0565b60405180910390a2505050565b6060806000836001600160a01b031663dbe55e566040518163ffffffff1660e01b815260040160206040518083038186803b1580156111aa57600080fd5b505afa1580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e2919061223d565b6001600160a01b038116600090815260696020526040902054909150806001600160401b038111156112165761121661282c565b60405190808252806020026020018201604052801561123f578160200160208202803683370190505b509350806001600160401b0381111561125a5761125a61282c565b604051908082528060200260200182016040528015611283578160200160208202803683370190505b5092506000856001600160a01b031663046832b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c157600080fd5b505afa1580156112d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f9919061223d565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a082319060240160206040518083038186803b15801561133c57600080fd5b505afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612571565b90506000805b838110156117335760405163c661065760e01b8152600481018290526000906001600160a01b0387169063c66106579060240160206040518083038186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd919061223d565b604051634903b0d160e01b8152600481018490529091506000906001600160a01b03881690634903b0d19060240160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b9190612571565b90508189848151811061149057611490612816565b60200260200101906001600160a01b031690816001600160a01b031681525050808884815181106114c3576114c3612816565b60209081029190910101526114d88185612776565b93507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614611720576040516303f0ed3160e21b81526001600160a01b038381166004830152600091908c1690630fc3b4c49060240160206040518083038186803b15801561155857600080fd5b505afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611590919061223d565b90506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156116895773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28a85815181106115de576115de612816565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b8152908c16600482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319060240160206040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116789190612571565b6116829087612776565b955061171e565b6001600160a01b0381161561171e576040516370a0823160e01b81526001600160a01b038c811660048301528216906370a082319060240160206040518083038186803b1580156116d957600080fd5b505afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117119190612571565b61171b9087612776565b95505b505b50508061172c906127cf565b905061137a565b506117b8846001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190612571565b8390670de0b6b3a7640000612086565b915060005b8651811015610e1257611809828783815181106117dc576117dc612816565b60200260200101516305f5e1006117f391906127b0565b6117fd919061278e565b84906305f5e100612086565b86828151811061181b5761181b612816565b602090810291909101015261182f816127cf565b90506117bd565b6060806000836001600160a01b031663c71daccb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561187457600080fd5b505afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac9190612571565b9050600080856001600160a01b031663158274a56040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ea57600080fd5b505afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611922919061223d565b6001600160a01b031663f94d4668876001600160a01b031663dbbb64b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561196957600080fd5b505afa15801561197d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a19190612571565b6040518263ffffffff1660e01b81526004016119bf91815260200190565b60006040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a1391908101906123e7565b50915091506000866001600160a01b031663dbe55e566040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5357600080fd5b505afa158015611a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8b919061223d565b6001600160a01b031663238a2d596040518163ffffffff1660e01b815260040160006040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aff91908101906124bb565b905082516001600160401b03811115611b1a57611b1a61282c565b604051908082528060200260200182016040528015611b43578160200160208202803683370190505b50955082516001600160401b03811115611b5f57611b5f61282c565b604051908082528060200260200182016040528015611b88578160200160208202803683370190505b509450600083516001600160401b03811115611ba657611ba661282c565b604051908082528060200260200182016040528015611bcf578160200160208202803683370190505b5090506000805b8551811015611d7e576000858281518110611bf357611bf3612816565b602002602001015190506000670de0b6b3a76400009050878381518110611c1c57611c1c612816565b60200260200101518b8481518110611c3657611c36612816565b60200260200101906001600160a01b031690816001600160a01b03168152505060006001600160a01b0316868481518110611c7357611c73612816565b60200260200101516001600160a01b031614611d2257858381518110611c9b57611c9b612816565b60200260200101516001600160a01b031663679aefce6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cdb57600080fd5b505afa158015611cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d139190612571565b9050611d1f82826120a8565b91505b80858481518110611d3557611d35612816565b602002602001018181525050818a8481518110611d5457611d54612816565b6020908102919091010152611d698285612776565b9350505080611d77906127cf565b9050611bd6565b5060005b8551811015611e1e57611df1838281518110611da057611da0612816565b6020026020010151611deb848b8581518110611dbe57611dbe612816565b60200260200101516305f5e100611dd591906127b0565b611ddf919061278e565b8a906305f5e100612086565b906120a8565b888281518110611e0357611e03612816565b6020908102919091010152611e17816127cf565b9050611d82565b50505050505050915091565b6000806000611e388561116c565b9150915060005b8251811015611eaf57846001600160a01b0316838281518110611e6457611e64612816565b60200260200101516001600160a01b03161415611e9f57818181518110611e8d57611e8d612816565b60200260200101519350505050610434565b611ea8816127cf565b9050611e3f565b5060405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015260640161041a565b6000806000611efa85611836565b9150915060005b8251811015611eaf57846001600160a01b0316838281518110611f2657611f26612816565b60200260200101516001600160a01b03161415611f4f57818181518110611e8d57611e8d612816565b611f58816127cf565b9050611f01565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b604482015260009060640161041a565b60015b60048110156105b5576000826001600160a01b031663c661065760e01b83604051602401611fcf91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161200d91906125e8565b600060405180830381855afa9150503d8060008114612048576040519150601f19603f3d011682016040523d82523d6000602084013e61204d565b606091505b50909150508061207557506001600160a01b0391909116600090815260696020526040902055565b5061207f816127cf565b9050611f9f565b60008061209385856120d1565b905061209f81846120dd565b95945050505050565b6000806120bd84670de0b6b3a76400006120d1565b90506120c981846120dd565b949350505050565b6000610f1982846127b0565b6000610f19828461278e565b82805482825590600052602060002090810192821561213e579160200282015b8281111561213e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612109565b5061214a92915061214e565b5090565b5b8082111561214a576000815560010161214f565b60008083601f84011261217557600080fd5b5081356001600160401b0381111561218c57600080fd5b6020830191508360208260051b85010111156121a757600080fd5b9250929050565b600082601f8301126121bf57600080fd5b815160206121d46121cf83612753565b612723565b80838252828201915082860187848660051b89010111156121f457600080fd5b60005b85811015612213578151845292840192908401906001016121f7565b5090979650505050505050565b60006020828403121561223257600080fd5b8135610f1981612842565b60006020828403121561224f57600080fd5b8151610f1981612842565b6000806040838503121561226d57600080fd5b823561227881612842565b9150602083013561228881612842565b809150509250929050565b6000806000806000606086880312156122ab57600080fd5b85356122b681612842565b945060208601356001600160401b03808211156122d257600080fd5b6122de89838a01612163565b909650945060408801359150808211156122f757600080fd5b5061230488828901612163565b969995985093965092949392505050565b6000806040838503121561232857600080fd5b823561233381612842565b915060208301356004811061228857600080fd5b6000602080838503121561235a57600080fd5b82516001600160401b0381111561237057600080fd5b8301601f8101851361238157600080fd5b805161238f6121cf82612753565b80828252848201915084840188868560051b87010111156123af57600080fd5b600094505b838510156123db5780516123c781612842565b8352600194909401939185019185016123b4565b50979650505050505050565b6000806000606084860312156123fc57600080fd5b83516001600160401b038082111561241357600080fd5b818601915086601f83011261242757600080fd5b815160206124376121cf83612753565b8083825282820191508286018b848660051b890101111561245757600080fd5b600096505b8487101561248357805161246f81612842565b83526001969096019591830191830161245c565b509189015191975090935050508082111561249d57600080fd5b506124aa868287016121ae565b925050604084015190509250925092565b600060208083850312156124ce57600080fd5b82516001600160401b038111156124e457600080fd5b8301601f810185136124f557600080fd5b80516125036121cf82612753565b80828252848201915084840188868560051b870101111561252357600080fd5b600094505b838510156123db57805161253b81612842565b835260019490940193918501918501612528565b60006020828403121561256157600080fd5b81518015158114610f1957600080fd5b60006020828403121561258357600080fd5b5051919050565b60006020828403121561259c57600080fd5b5035919050565b6000602082840312156125b557600080fd5b813560ff81168114610f1957600080fd5b600481106125e457634e487b7160e01b600052602160045260246000fd5b9052565b6000825160005b8181101561260957602081860181015185830152016125ef565b81811115612618576000828501525b509190910192915050565b604080825283519082018190526000906020906060840190828701845b828110156126655781516001600160a01b031684529284019290840190600101612640565b5050508381038285015284518082528583019183019060005b818110156122135783518352928401929184019160010161267e565b821515815260408101610f1960208301846125c6565b6020810161043482846125c6565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b602080825260149082015273556e737570706f7274656420737472617465677960601b604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561274b5761274b61282c565b604052919050565b60006001600160401b0382111561276c5761276c61282c565b5060051b60200190565b60008219821115612789576127896127ea565b500190565b6000826127ab57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156127ca576127ca6127ea565b500290565b60006000198214156127e3576127e36127ea565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461068c57600080fdfe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220ab9be56c30da0d6bbaa230de6b0384c28cf376caa56798b43a14dac274e0459d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setStrategistAddr(address)": {
        "details": "Set address of Strategist",
        "params": {
          "_address": "Address of Strategist"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3642,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3645,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3685,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1164,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1168,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4434,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "strategies",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4437,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "assets",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4442,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "strategyConfig",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_struct(StrategyConfig)4424_storage)"
      },
      {
        "astId": 4446,
        "contract": "contracts/utils/OriginLens.sol:OriginLens",
        "label": "curvePoolCoinCount",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(StrategyKinds)4418": {
        "encoding": "inplace",
        "label": "enum OriginLens.StrategyKinds",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(StrategyConfig)4424_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OriginLens.StrategyConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyConfig)4424_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StrategyConfig)4424_storage": {
        "encoding": "inplace",
        "label": "struct OriginLens.StrategyConfig",
        "members": [
          {
            "astId": 4420,
            "contract": "contracts/utils/OriginLens.sol:OriginLens",
            "label": "supported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4423,
            "contract": "contracts/utils/OriginLens.sol:OriginLens",
            "label": "kind",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(StrategyKinds)4418"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xEA24e9Bac006DE9635Ac7fA4D767fFb64FB5645c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "AllocateThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "AssetDefaultStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplyDiffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "NetOusdMintForStrategyThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_ousdMetaStrategy",
          "type": "address"
        }
      ],
      "name": "OusdMetaStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebasePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "RebaseThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebaseUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "SwapAllowedUndervalueChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "SwapSlippageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "SwapperChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "TrusteeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "TrusteeFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "VaultBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "YieldDistribution",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetDefaultStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemOutputs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAssetConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSupported",
              "type": "bool"
            },
            {
              "internalType": "enum VaultStorage.UnitConversion",
              "name": "unitConversion",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "allowedOracleSlippageBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct VaultStorage.Asset",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumOusdAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netOusdMintForStrategyThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netOusdMintedForStrategy",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ousdMetaStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUnitMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUnitRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x585aef8279519a6b0a7110fff46be5b70f22f0f626753adc1d5f2166a8f6a191",
  "receipt": {
    "to": null,
    "from": "0x3Ba227D87c2A7aB89EAaCEFbeD9bfa0D15Ad249A",
    "contractAddress": "0xEA24e9Bac006DE9635Ac7fA4D767fFb64FB5645c",
    "transactionIndex": 9,
    "gasUsed": "3080783",
    "logsBloom": "0x
    "blockHash": "0xd2231c81365b5cd83fcc5bfd75e430b296f3dfd441def80642d9f1229e75f0cd",
    "transactionHash": "0x585aef8279519a6b0a7110fff46be5b70f22f0f626753adc1d5f2166a8f6a191",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 17560503,
        "transactionHash": "0x585aef8279519a6b0a7110fff46be5b70f22f0f626753adc1d5f2166a8f6a191",
        "address": "0xEA24e9Bac006DE9635Ac7fA4D767fFb64FB5645c",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003ba227d87c2a7ab89eaacefbed9bfa0d15ad249a"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0xd2231c81365b5cd83fcc5bfd75e430b296f3dfd441def80642d9f1229e75f0cd"
      }
    ],
    "blockNumber": 17560503,
    "cumulativeGasUsed": "4098546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e08d4b98ef0bf7a625aa1659b6c5e4fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"AllocateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AssetDefaultStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyDiffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"NetOusdMintForStrategyThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ousdMetaStrategy\",\"type\":\"address\"}],\"name\":\"OusdMetaStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"RebaseThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebaseUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"SwapAllowedUndervalueChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"SwapSlippageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toAssetAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SwapperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TrusteeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"TrusteeFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"VaultBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDefaultStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutputs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"enum VaultStorage.UnitConversion\",\"name\":\"unitConversion\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"allowedOracleSlippageBps\",\"type\":\"uint16\"}],\"internalType\":\"struct VaultStorage.Asset\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOusdAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netOusdMintForStrategyThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netOusdMintedForStrategy\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ousdMetaStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUnitMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUnitRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"burnForStrategy(uint256)\":{\"details\":\"Notice: can't use `nonReentrant` modifier since the `redeem` function could require withdrawal on `ConvexOUSDMetaStrategy` and that one can call `burnForStrategy` while the execution of the `redeem` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function.\",\"params\":{\"_amount\":\"Amount of OUSD to burn\"}},\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of asset\"},\"returns\":{\"_0\":\"uint256 Balance of asset in decimals of asset\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"address of the asset\"},\"returns\":{\"_0\":\"true if supported\"}},\"mint(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset being deposited\",\"_asset\":\"Address of the asset being deposited\",\"_minimumOusdAmount\":\"Minimum OTokens to mint\"}},\"mintForStrategy(uint256)\":{\"params\":{\"_amount\":\"Amount of the asset being deposited Notice: can't use `nonReentrant` modifier since the `mint` function can call `allocate`, and that can trigger `ConvexOUSDMetaStrategy` to call this function while the execution of the `mint` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function.\"}},\"priceUnitMint(address)\":{\"params\":{\"asset\":\"address of the asset\"},\"returns\":{\"price\":\"uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\"}},\"priceUnitRedeem(address)\":{\"params\":{\"asset\":\"Address of the asset\"},\"returns\":{\"price\":\"uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\"}},\"redeem(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of OTokens to burn\",\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"redeemAll(uint256)\":{\"params\":{\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"setAdminImpl(address)\":{\"params\":{\"newImpl\":\"address of the implementation\"}},\"totalValue()\":{\"returns\":{\"value\":\"Total value in USD (1e18)\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"title\":\"OETH VaultCore Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocate()\":{\"notice\":\"Allocate unallocated funds on Vault to strategies.*\"},\"assetDefaultStrategies(address)\":{\"notice\":\"Mapping of asset address to the Strategy that they should automatically\"},\"autoAllocateThreshold()\":{\"notice\":\"OToken mints over this amount automatically allocate funds. 18 decimals.\"},\"burnForStrategy(uint256)\":{\"notice\":\"Burn OTokens for Metapool Strategy\"},\"calculateRedeemOutputs(uint256)\":{\"notice\":\"Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned\"},\"capitalPaused()\":{\"notice\":\"pause operations that change the OToken supply. eg mint, redeem, allocate, mint/burn for strategy\"},\"checkBalance(address)\":{\"notice\":\"Get the balance of an asset held in Vault and all strategies.\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"getAllAssets()\":{\"notice\":\"Return all vault asset addresses in order\"},\"getAllStrategies()\":{\"notice\":\"Return the array of all strategies\"},\"getAssetConfig(address)\":{\"notice\":\"Gets the vault configuration of a supported asset.\"},\"getAssetCount()\":{\"notice\":\"Return the number of assets supported by the Vault.\"},\"getStrategyCount()\":{\"notice\":\"Return the number of strategies active on the Vault.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"isSupportedAsset(address)\":{\"notice\":\"Returns whether the vault supports the asset\"},\"maxSupplyDiff()\":{\"notice\":\"Max difference between total supply and total value of assets. 18 decimals.\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Deposit a supported asset and mint OTokens.\"},\"mintForStrategy(uint256)\":{\"notice\":\"Mint OTokens for a Metapool Strategy\"},\"netOusdMintForStrategyThreshold()\":{\"notice\":\"How much net total OTokens are allowed to be minted by all strategies\"},\"netOusdMintedForStrategy()\":{\"notice\":\"How much OTokens are currently minted by the strategy\"},\"ousdMetaStrategy()\":{\"notice\":\"Metapool strategy that is allowed to mint/burn OTokens without changing collateral\"},\"priceProvider()\":{\"notice\":\"Address of the Oracle price provider contract\"},\"priceUnitMint(address)\":{\"notice\":\"Returns the total price in 18 digit units for a given asset.      Never goes above 1, since that is how we price mints.\"},\"priceUnitRedeem(address)\":{\"notice\":\"Returns the total price in 18 digit unit for a given asset.      Never goes below 1, since that is how we price redeems\"},\"rebase()\":{\"notice\":\"Calculate the total value of assets held by the Vault and all      strategies and update the supply of OTokens.\"},\"rebasePaused()\":{\"notice\":\"pause rebasing if true\"},\"rebaseThreshold()\":{\"notice\":\"OToken mints over this amount automatically rebase. 18 decimals.\"},\"redeem(uint256,uint256)\":{\"notice\":\"Withdraw a supported asset and burn OTokens.\"},\"redeemAll(uint256)\":{\"notice\":\"Withdraw a supported asset and burn all OTokens.\"},\"redeemFeeBps()\":{\"notice\":\"Redemption fee in basis points. eg 50 = 0.5%\"},\"setAdminImpl(address)\":{\"notice\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\"},\"strategistAddr()\":{\"notice\":\"Address of the Strategist\"},\"totalValue()\":{\"notice\":\"Determine the total value of assets held by the vault and its         strategies.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"trusteeAddress()\":{\"notice\":\"Trustee contract that can collect a percentage of yield\"},\"trusteeFeeBps()\":{\"notice\":\"Amount of yield collected in basis points. eg 2000 = 20%\"},\"vaultBuffer()\":{\"notice\":\"Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/OETHVaultCore.sol\":\"OETHVaultCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xf5e76834bd232ca3efe29300d38ded1b98bcb30de367211ee66c648765e40a53\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IGetExchangeRateToken.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IGetExchangeRateToken {\\n    function getExchangeRate() external view returns (uint256 _exchangeRate);\\n}\\n\",\"keccak256\":\"0x641d5892d570f3f9e256d39a9571e58b02c39368726b01c4cdf7d91f45e349d8\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eabf152389f145c9c23ed71972af73fb1708cbc4b26e524a9ba29a557b7cfe5\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(msg.sender));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\n\\n        _creditBalances[msg.sender] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\n\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x14a6bcf58e3622e475941619b0491b5e486bc7f6a3568ac179630bd4d725b85b\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xed91beae8c271cd70d80a9fce9306f1c46b8437cdd1d78ed9b75c067961e5259\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x9ffba86e00ab24fab65da197f3c44f4b672dafbc63926584bdf42c47425dba51\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/OETHVaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultCore } from \\\"./VaultCore.sol\\\";\\n\\n/**\\n * @title OETH VaultCore Contract\\n * @author Origin Protocol Inc\\n */\\ncontract OETHVaultCore is VaultCore {\\n\\n}\\n\",\"keccak256\":\"0xe2ecd925365080e39953b042a322908f93378b5b72beb8e6d6dcbc5319df2d9f\",\"license\":\"MIT\"},\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultCore contract\\n * @notice The Vault contract stores assets. On a deposit, OTokens will be minted\\n           and sent to the depositor. On a withdrawal, OTokens will be burned and\\n           assets will be sent to the withdrawer. The Vault accepts deposits of\\n           interest from yield bearing strategies which will modify the supply\\n           of OTokens.\\n * @author Origin Protocol Inc\\n */\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IGetExchangeRateToken } from \\\"../interfaces/IGetExchangeRateToken.sol\\\";\\n\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract VaultCore is VaultStorage {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n    // max signed int\\n    uint256 internal constant MAX_INT = 2**255 - 1;\\n    // max un-signed int\\n    uint256 internal constant MAX_UINT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @dev Verifies that the rebasing is not paused.\\n     */\\n    modifier whenNotRebasePaused() {\\n        require(!rebasePaused, \\\"Rebasing paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the deposits are not paused.\\n     */\\n    modifier whenNotCapitalPaused() {\\n        require(!capitalPaused, \\\"Capital paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyOusdMetaStrategy() {\\n        require(\\n            msg.sender == ousdMetaStrategy,\\n            \\\"Caller is not the OUSD meta strategy\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit a supported asset and mint OTokens.\\n     * @param _asset Address of the asset being deposited\\n     * @param _amount Amount of the asset being deposited\\n     * @param _minimumOusdAmount Minimum OTokens to mint\\n     */\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external whenNotCapitalPaused nonReentrant {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        uint256 units = _toUnits(_amount, _asset);\\n        uint256 unitPrice = _toUnitPrice(_asset, true);\\n        uint256 priceAdjustedDeposit = (units * unitPrice) / 1e18;\\n\\n        if (_minimumOusdAmount > 0) {\\n            require(\\n                priceAdjustedDeposit >= _minimumOusdAmount,\\n                \\\"Mint amount lower than minimum\\\"\\n            );\\n        }\\n\\n        emit Mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Rebase must happen before any transfers occur.\\n        if (priceAdjustedDeposit >= rebaseThreshold && !rebasePaused) {\\n            _rebase();\\n        }\\n\\n        // Mint matching amount of OTokens\\n        oUSD.mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Transfer the deposited coins to the vault\\n        IERC20 asset = IERC20(_asset);\\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (priceAdjustedDeposit >= autoAllocateThreshold) {\\n            _allocate();\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint OTokens for a Metapool Strategy\\n     * @param _amount Amount of the asset being deposited\\n     *\\n     * Notice: can't use `nonReentrant` modifier since the `mint` function can\\n     * call `allocate`, and that can trigger `ConvexOUSDMetaStrategy` to call this function\\n     * while the execution of the `mint` has not yet completed -> causing a `nonReentrant` collision.\\n     *\\n     * Also important to understand is that this is a limitation imposed by the test suite.\\n     * Production / mainnet contracts should never be configured in a way where mint/redeem functions\\n     * that are moving funds between the Vault and end user wallets can influence strategies\\n     * utilizing this function.\\n     */\\n    function mintForStrategy(uint256 _amount)\\n        external\\n        whenNotCapitalPaused\\n        onlyOusdMetaStrategy\\n    {\\n        require(_amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Mint(msg.sender, _amount);\\n\\n        // Rebase must happen before any transfers occur.\\n        // TODO: double check the relevance of this\\n        if (_amount >= rebaseThreshold && !rebasePaused) {\\n            _rebase();\\n        }\\n\\n        // safe to cast because of the require check at the beginning of the function\\n        netOusdMintedForStrategy += int256(_amount);\\n\\n        require(\\n            abs(netOusdMintedForStrategy) < netOusdMintForStrategyThreshold,\\n            \\\"Minted ousd surpassed netOusdMintForStrategyThreshold.\\\"\\n        );\\n\\n        // Mint matching amount of OTokens\\n        oUSD.mint(msg.sender, _amount);\\n    }\\n\\n    // In memoriam\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn OTokens.\\n     * @param _amount Amount of OTokens to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        external\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(_amount, _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn OTokens.\\n     * @param _amount Amount of OTokens to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function _redeem(uint256 _amount, uint256 _minimumUnitAmount) internal {\\n        // Calculate redemption outputs\\n        uint256[] memory outputs = _calculateRedeemOutputs(_amount);\\n\\n        emit Redeem(msg.sender, _amount);\\n\\n        // Send outputs\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            if (outputs[i] == 0) continue;\\n\\n            address assetAddr = allAssets[i];\\n\\n            if (IERC20(assetAddr).balanceOf(address(this)) >= outputs[i]) {\\n                // Use Vault funds first if sufficient\\n                IERC20(assetAddr).safeTransfer(msg.sender, outputs[i]);\\n            } else {\\n                address strategyAddr = assetDefaultStrategies[assetAddr];\\n                if (strategyAddr != address(0)) {\\n                    // Nothing in Vault, but something in Strategy, send from there\\n                    IStrategy strategy = IStrategy(strategyAddr);\\n                    strategy.withdraw(msg.sender, assetAddr, outputs[i]);\\n                } else {\\n                    // Cant find funds anywhere\\n                    revert(\\\"Liquidity error\\\");\\n                }\\n            }\\n        }\\n\\n        if (_minimumUnitAmount > 0) {\\n            uint256 unitTotal = 0;\\n            for (uint256 i = 0; i < outputs.length; ++i) {\\n                unitTotal += _toUnits(outputs[i], allAssets[i]);\\n            }\\n            require(\\n                unitTotal >= _minimumUnitAmount,\\n                \\\"Redeem amount lower than minimum\\\"\\n            );\\n        }\\n\\n        oUSD.burn(msg.sender, _amount);\\n\\n        // Until we can prove that we won't affect the prices of our assets\\n        // by withdrawing them, this should be here.\\n        // It's possible that a strategy was off on its asset total, perhaps\\n        // a reward token sold for more or for less than anticipated.\\n        uint256 totalUnits = 0;\\n        if (_amount >= rebaseThreshold && !rebasePaused) {\\n            totalUnits = _rebase();\\n        } else {\\n            totalUnits = _totalValue();\\n        }\\n\\n        // Check that the OTokens are backed by enough assets\\n        if (maxSupplyDiff > 0) {\\n            // Allow a max difference of maxSupplyDiff% between\\n            // backing assets value and OUSD total supply\\n            uint256 diff = oUSD.totalSupply().divPrecisely(totalUnits);\\n            require(\\n                (diff > 1e18 ? diff - 1e18 : 1e18 - diff) <= maxSupplyDiff,\\n                \\\"Backing supply liquidity error\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn OTokens for Metapool Strategy\\n     * @param _amount Amount of OUSD to burn\\n     *\\n     * @dev Notice: can't use `nonReentrant` modifier since the `redeem` function could\\n     * require withdrawal on `ConvexOUSDMetaStrategy` and that one can call `burnForStrategy`\\n     * while the execution of the `redeem` has not yet completed -> causing a `nonReentrant` collision.\\n     *\\n     * Also important to understand is that this is a limitation imposed by the test suite.\\n     * Production / mainnet contracts should never be configured in a way where mint/redeem functions\\n     * that are moving funds between the Vault and end user wallets can influence strategies\\n     * utilizing this function.\\n     */\\n    function burnForStrategy(uint256 _amount)\\n        external\\n        whenNotCapitalPaused\\n        onlyOusdMetaStrategy\\n    {\\n        require(_amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Redeem(msg.sender, _amount);\\n\\n        // safe to cast because of the require check at the beginning of the function\\n        netOusdMintedForStrategy -= int256(_amount);\\n\\n        require(\\n            abs(netOusdMintedForStrategy) < netOusdMintForStrategyThreshold,\\n            \\\"Attempting to burn too much OUSD.\\\"\\n        );\\n\\n        // Burn OTokens\\n        oUSD.burn(msg.sender, _amount);\\n\\n        // Until we can prove that we won't affect the prices of our assets\\n        // by withdrawing them, this should be here.\\n        // It's possible that a strategy was off on its asset total, perhaps\\n        // a reward token sold for more or for less than anticipated.\\n        if (_amount >= rebaseThreshold && !rebasePaused) {\\n            _rebase();\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn all OTokens.\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeemAll(uint256 _minimumUnitAmount)\\n        external\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(oUSD.balanceOf(msg.sender), _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function allocate() external whenNotCapitalPaused nonReentrant {\\n        _allocate();\\n    }\\n\\n    /**\\n     * @dev Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function _allocate() internal {\\n        uint256 vaultValue = _totalValueInVault();\\n        // Nothing in vault to allocate\\n        if (vaultValue == 0) return;\\n        uint256 strategiesValue = _totalValueInStrategies();\\n        // We have a method that does the same as this, gas optimisation\\n        uint256 calculatedTotalValue = vaultValue + strategiesValue;\\n\\n        // We want to maintain a buffer on the Vault so calculate a percentage\\n        // modifier to multiply each amount being allocated by to enforce the\\n        // vault buffer\\n        uint256 vaultBufferModifier;\\n        if (strategiesValue == 0) {\\n            // Nothing in Strategies, allocate 100% minus the vault buffer to\\n            // strategies\\n            vaultBufferModifier = uint256(1e18) - vaultBuffer;\\n        } else {\\n            vaultBufferModifier =\\n                (vaultBuffer * calculatedTotalValue) /\\n                vaultValue;\\n            if (1e18 > vaultBufferModifier) {\\n                // E.g. 1e18 - (1e17 * 10e18)/5e18 = 8e17\\n                // (5e18 * 8e17) / 1e18 = 4e18 allocated from Vault\\n                vaultBufferModifier = uint256(1e18) - vaultBufferModifier;\\n            } else {\\n                // We need to let the buffer fill\\n                return;\\n            }\\n        }\\n        if (vaultBufferModifier == 0) return;\\n\\n        // Iterate over all assets in the Vault and allocate to the appropriate\\n        // strategy\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            // No balance, nothing to do here\\n            if (assetBalance == 0) continue;\\n\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance.mulTruncate(\\n                vaultBufferModifier\\n            );\\n\\n            address depositStrategyAddr = assetDefaultStrategies[\\n                address(asset)\\n            ];\\n\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\n                // Transfer asset to Strategy and call deposit method to\\n                // mint or take required action\\n                asset.safeTransfer(address(strategy), allocateAmount);\\n                strategy.deposit(address(asset), allocateAmount);\\n                emit AssetAllocated(\\n                    address(asset),\\n                    depositStrategyAddr,\\n                    allocateAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of OTokens.\\n     */\\n    function rebase() external virtual nonReentrant {\\n        _rebase();\\n    }\\n\\n    /**\\n     * @dev Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of OTokens, optionally sending a\\n     *      portion of the yield to the trustee.\\n     * @return totalUnits Total balance of Vault in units\\n     */\\n    function _rebase() internal whenNotRebasePaused returns (uint256) {\\n        uint256 ousdSupply = oUSD.totalSupply();\\n        uint256 vaultValue = _totalValue();\\n        if (ousdSupply == 0) {\\n            return vaultValue;\\n        }\\n\\n        // Yield fee collection\\n        address _trusteeAddress = trusteeAddress; // gas savings\\n        if (_trusteeAddress != address(0) && (vaultValue > ousdSupply)) {\\n            uint256 yield = vaultValue - ousdSupply;\\n            uint256 fee = yield.mulTruncateScale(trusteeFeeBps, 1e4);\\n            require(yield > fee, \\\"Fee must not be greater than yield\\\");\\n            if (fee > 0) {\\n                oUSD.mint(_trusteeAddress, fee);\\n            }\\n            emit YieldDistribution(_trusteeAddress, yield, fee);\\n        }\\n\\n        // Only rachet OToken supply upwards\\n        ousdSupply = oUSD.totalSupply(); // Final check should use latest value\\n        if (vaultValue > ousdSupply) {\\n            oUSD.changeSupply(vaultValue);\\n        }\\n        return vaultValue;\\n    }\\n\\n    /**\\n     * @notice Determine the total value of assets held by the vault and its\\n     *         strategies.\\n     * @return value Total value in USD (1e18)\\n     */\\n    function totalValue() external view virtual returns (uint256 value) {\\n        value = _totalValue();\\n    }\\n\\n    /**\\n     * @dev Internal Calculate the total value of the assets held by the\\n     *         vault and its strategies.\\n     * @return value Total value in USD (1e18)\\n     */\\n    function _totalValue() internal view virtual returns (uint256 value) {\\n        return _totalValueInVault() + _totalValueInStrategies();\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Vault.\\n     * @return value Total value in ETH (1e18)\\n     */\\n    function _totalValueInVault() internal view returns (uint256 value) {\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 y = 0; y < assetCount; ++y) {\\n            address assetAddr = allAssets[y];\\n            uint256 balance = IERC20(assetAddr).balanceOf(address(this));\\n            if (balance > 0) {\\n                value += _toUnits(balance, assetAddr);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Strategies.\\n     * @return value Total value in ETH (1e18)\\n     */\\n    function _totalValueInStrategies() internal view returns (uint256 value) {\\n        uint256 stratCount = allStrategies.length;\\n        for (uint256 i = 0; i < stratCount; ++i) {\\n            value = value + _totalValueInStrategy(allStrategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held by strategy.\\n     * @param _strategyAddr Address of the strategy\\n     * @return value Total value in ETH (1e18)\\n     */\\n    function _totalValueInStrategy(address _strategyAddr)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 y = 0; y < assetCount; ++y) {\\n            address assetAddr = allAssets[y];\\n            if (strategy.supportsAsset(assetAddr)) {\\n                uint256 balance = strategy.checkBalance(assetAddr);\\n                if (balance > 0) {\\n                    value += _toUnits(balance, assetAddr);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return uint256 Balance of asset in decimals of asset\\n     */\\n    function checkBalance(address _asset) external view returns (uint256) {\\n        return _checkBalance(_asset);\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return balance Balance of asset in decimals of asset\\n     */\\n    function _checkBalance(address _asset)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 balance)\\n    {\\n        IERC20 asset = IERC20(_asset);\\n        balance = asset.balanceOf(address(this));\\n        uint256 stratCount = allStrategies.length;\\n        for (uint256 i = 0; i < stratCount; ++i) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            if (strategy.supportsAsset(_asset)) {\\n                balance = balance + strategy.checkBalance(_asset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned\\n     */\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _calculateRedeemOutputs(_amount);\\n    }\\n\\n    /**\\n     * @dev Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned.\\n     * @return outputs Array of amounts respective to the supported assets\\n     */\\n    function _calculateRedeemOutputs(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256[] memory outputs)\\n    {\\n        // We always give out coins in proportion to how many we have,\\n        // Now if all coins were the same value, this math would easy,\\n        // just take the percentage of each coin, and multiply by the\\n        // value to be given out. But if coins are worth more than $1,\\n        // then we would end up handing out too many coins. We need to\\n        // adjust by the total value of coins.\\n        //\\n        // To do this, we total up the value of our coins, by their\\n        // percentages. Then divide what we would otherwise give out by\\n        // this number.\\n        //\\n        // Let say we have 100 DAI at $1.06  and 200 USDT at $1.00.\\n        // So for every 1 DAI we give out, we'll be handing out 2 USDT\\n        // Our total output ratio is: 33% * 1.06 + 66% * 1.00 = 1.02\\n        //\\n        // So when calculating the output, we take the percentage of\\n        // each coin, times the desired output value, divided by the\\n        // totalOutputRatio.\\n        //\\n        // For example, withdrawing: 30 OUSD:\\n        // DAI 33% * 30 / 1.02 = 9.80 DAI\\n        // USDT = 66 % * 30 / 1.02 = 19.60 USDT\\n        //\\n        // Checking these numbers:\\n        // 9.80 DAI * 1.06 = $10.40\\n        // 19.60 USDT * 1.00 = $19.60\\n        //\\n        // And so the user gets $10.40 + $19.60 = $30 worth of value.\\n\\n        uint256 assetCount = allAssets.length;\\n        uint256[] memory assetUnits = new uint256[](assetCount);\\n        uint256[] memory assetBalances = new uint256[](assetCount);\\n        outputs = new uint256[](assetCount);\\n\\n        // Calculate redeem fee\\n        if (redeemFeeBps > 0) {\\n            uint256 redeemFee = _amount.mulTruncateScale(redeemFeeBps, 1e4);\\n            _amount = _amount - redeemFee;\\n        }\\n\\n        // Calculate assets balances and decimals once,\\n        // for a large gas savings.\\n        uint256 totalUnits = 0;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            address assetAddr = allAssets[i];\\n            uint256 balance = _checkBalance(assetAddr);\\n            assetBalances[i] = balance;\\n            assetUnits[i] = _toUnits(balance, assetAddr);\\n            totalUnits = totalUnits + assetUnits[i];\\n        }\\n        // Calculate totalOutputRatio\\n        uint256 totalOutputRatio = 0;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            uint256 unitPrice = _toUnitPrice(allAssets[i], false);\\n            uint256 ratio = (assetUnits[i] * unitPrice) / totalUnits;\\n            totalOutputRatio = totalOutputRatio + ratio;\\n        }\\n        // Calculate final outputs\\n        uint256 factor = _amount.divPrecisely(totalOutputRatio);\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            outputs[i] = (assetBalances[i] * factor) / totalUnits;\\n        }\\n    }\\n\\n    /***************************************\\n                    Pricing\\n    ****************************************/\\n\\n    /**\\n     * @notice Returns the total price in 18 digit units for a given asset.\\n     *      Never goes above 1, since that is how we price mints.\\n     * @param asset address of the asset\\n     * @return price uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\\n     */\\n    function priceUnitMint(address asset)\\n        external\\n        view\\n        returns (uint256 price)\\n    {\\n        /* need to supply 1 asset unit in asset's decimals and can not just hard-code\\n         * to 1e18 and ignore calling `_toUnits` since we need to consider assets\\n         * with the exchange rate\\n         */\\n        uint256 units = _toUnits(\\n            uint256(1e18).scaleBy(_getDecimals(asset), 18),\\n            asset\\n        );\\n        price = (_toUnitPrice(asset, true) * units) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Returns the total price in 18 digit unit for a given asset.\\n     *      Never goes below 1, since that is how we price redeems\\n     * @param asset Address of the asset\\n     * @return price uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\\n     */\\n    function priceUnitRedeem(address asset)\\n        external\\n        view\\n        returns (uint256 price)\\n    {\\n        /* need to supply 1 asset unit in asset's decimals and can not just hard-code\\n         * to 1e18 and ignore calling `_toUnits` since we need to consider assets\\n         * with the exchange rate\\n         */\\n        uint256 units = _toUnits(\\n            uint256(1e18).scaleBy(_getDecimals(asset), 18),\\n            asset\\n        );\\n        price = (_toUnitPrice(asset, false) * units) / 1e18;\\n    }\\n\\n    /***************************************\\n                    Utils\\n    ****************************************/\\n\\n    /**\\n     * @dev Convert a quantity of a token into 1e18 fixed decimal \\\"units\\\"\\n     * in the underlying base (USD/ETH) used by the vault.\\n     * Price is not taken into account, only quantity.\\n     *\\n     * Examples of this conversion:\\n     *\\n     * - 1e18 DAI becomes 1e18 units (same decimals)\\n     * - 1e6 USDC becomes 1e18 units (decimal conversion)\\n     * - 1e18 rETH becomes 1.2e18 units (exchange rate conversion)\\n     *\\n     * @param _raw Quantity of asset\\n     * @param _asset Core Asset address\\n     * @return value 1e18 normalized quantity of units\\n     */\\n    function _toUnits(uint256 _raw, address _asset)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        UnitConversion conversion = assets[_asset].unitConversion;\\n        if (conversion == UnitConversion.DECIMALS) {\\n            return _raw.scaleBy(18, _getDecimals(_asset));\\n        } else if (conversion == UnitConversion.GETEXCHANGERATE) {\\n            uint256 exchangeRate = IGetExchangeRateToken(_asset)\\n                .getExchangeRate();\\n            return (_raw * exchangeRate) / 1e18;\\n        } else {\\n            revert(\\\"Unsupported conversion type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns asset's unit price accounting for different asset types\\n     *      and takes into account the context in which that price exists -\\n     *      - mint or redeem.\\n     *\\n     * Note: since we are returning the price of the unit and not the one of the\\n     * asset (see comment above how 1 rETH exchanges for 1.2 units) we need\\n     * to make the Oracle price adjustment as well since we are pricing the\\n     * units and not the assets.\\n     *\\n     * The price also snaps to a \\\"full unit price\\\" in case a mint or redeem\\n     * action would be unfavourable to the protocol.\\n     *\\n     */\\n    function _toUnitPrice(address _asset, bool isMint)\\n        internal\\n        view\\n        returns (uint256 price)\\n    {\\n        UnitConversion conversion = assets[_asset].unitConversion;\\n        price = IOracle(priceProvider).price(_asset);\\n\\n        if (conversion == UnitConversion.GETEXCHANGERATE) {\\n            uint256 exchangeRate = IGetExchangeRateToken(_asset)\\n                .getExchangeRate();\\n            price = (price * 1e18) / exchangeRate;\\n        } else if (conversion != UnitConversion.DECIMALS) {\\n            revert(\\\"Unsupported conversion type\\\");\\n        }\\n\\n        /* At this stage the price is already adjusted to the unit\\n         * so the price checks are agnostic to underlying asset being\\n         * pegged to a USD or to an ETH or having a custom exchange rate.\\n         */\\n        require(price <= MAX_UNIT_PRICE_DRIFT, \\\"Vault: Price exceeds max\\\");\\n        require(price >= MIN_UNIT_PRICE_DRIFT, \\\"Vault: Price under min\\\");\\n\\n        if (isMint) {\\n            /* Never price a normalized unit price for more than one\\n             * unit of OETH/OUSD when minting.\\n             */\\n            if (price > 1e18) {\\n                price = 1e18;\\n            }\\n            require(price >= MINT_MINIMUM_UNIT_PRICE, \\\"Asset price below peg\\\");\\n        } else {\\n            /* Never give out more than 1 normalized unit amount of assets\\n             * for one unit of OETH/OUSD when redeeming.\\n             */\\n            if (price < 1e18) {\\n                price = 1e18;\\n            }\\n        }\\n    }\\n\\n    function _getDecimals(address _asset)\\n        internal\\n        view\\n        returns (uint256 decimals)\\n    {\\n        decimals = assets[_asset].decimals;\\n        require(decimals > 0, \\\"Decimals not cached\\\");\\n    }\\n\\n    /**\\n     * @notice Return the number of assets supported by the Vault.\\n     */\\n    function getAssetCount() public view returns (uint256) {\\n        return allAssets.length;\\n    }\\n\\n    /**\\n     * @notice Gets the vault configuration of a supported asset.\\n     */\\n    function getAssetConfig(address _asset)\\n        public\\n        view\\n        returns (Asset memory config)\\n    {\\n        config = assets[_asset];\\n    }\\n\\n    /**\\n     * @notice Return all vault asset addresses in order\\n     */\\n    function getAllAssets() external view returns (address[] memory) {\\n        return allAssets;\\n    }\\n\\n    /**\\n     * @notice Return the number of strategies active on the Vault.\\n     */\\n    function getStrategyCount() external view returns (uint256) {\\n        return allStrategies.length;\\n    }\\n\\n    /**\\n     * @notice Return the array of all strategies\\n     */\\n    function getAllStrategies() external view returns (address[] memory) {\\n        return allStrategies;\\n    }\\n\\n    /**\\n     * @notice Returns whether the vault supports the asset\\n     * @param _asset address of the asset\\n     * @return true if supported\\n     */\\n    function isSupportedAsset(address _asset) external view returns (bool) {\\n        return assets[_asset].isSupported;\\n    }\\n\\n    /**\\n     * @dev Falldown to the admin implementation\\n     * @notice This is a catch all for all functions not declared in core\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback() external payable {\\n        bytes32 slot = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                sload(slot),\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function abs(int256 x) private pure returns (uint256) {\\n        require(x < int256(MAX_INT), \\\"Amount too high\\\");\\n        return x >= 0 ? uint256(x) : uint256(-x);\\n    }\\n}\\n\",\"keccak256\":\"0x8bf26c8618abb7128e41f7c53cc3207835241512f7310931253cd476699315b2\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configiration\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n    address public ousdMetaStrategy = address(0);\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy = 0;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold = 0;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19891574f3b33074486f48166879b4cccc88162c392e77192bd54367ec263287\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6037805461ffff60a01b1916600160a81b179055603d80546001600160a01b0319908116909155603e805482169055603f80548216905560458054909116905560006046819055604781905560c0604052608081905260a052604880546001600160b01b03191690553480156200007557600080fd5b506200008e336000805160206200367c83398151915255565b6000805160206200367c833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a361359680620000e66000396000f3fe6080604052600436106102255760003560e01c80637136a7a611610123578063abaa9916116100ab578063d38bfff41161006f578063d38bfff414610676578063d4c3eea014610696578063e45cc9f0146106ab578063e6cc5432146106c1578063fc0cfeee146106e257610225565b8063abaa991614610602578063af14052c14610617578063b888879e1461062c578063c3b288641461064c578063c7af33521461066157610225565b80639be918e6116100f25780639be918e6146105485780639fa1826e14610581578063a0aead4d14610597578063a403e4d5146105ac578063ab80dafb146105e257610225565b80637136a7a6146104dc5780637a2202f3146104fc5780637cbc2373146105125780638e510b521461053257610225565b806349c1d54d116101b15780635d36b190116101755780635d36b1901461042d5780635f515226146104425780636217f3ea1461046257806367bd7ba3146104825780636ec3ab67146104af57610225565b806349c1d54d1461038657806352d38e5d146103a657806353ca9f24146103bc578063570d8e1d146103ed5780635b60f9fc1461040d57610225565b80631edfe3da116101f85780631edfe3da14610303578063207134b0146103195780632acada4d1461032f57806331e19cfa146103515780633b8fe28d1461036657610225565b806309f6442c1461026b5780630c340a2414610294578063156e29f6146102c157806318ce56bd146102e3575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e808015610266573d6000f35b3d6000fd5b34801561027757600080fd5b5061028160385481565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b506102a9610702565b6040516001600160a01b03909116815260200161028b565b3480156102cd57600080fd5b506102e16102dc366004612fe0565b61071f565b005b3480156102ef57600080fd5b506045546102a9906001600160a01b031681565b34801561030f57600080fd5b5061028160395481565b34801561032557600080fd5b5061028160435481565b34801561033b57600080fd5b506103446109cd565b60405161028b91906130be565b34801561035d57600080fd5b50603654610281565b34801561037257600080fd5b50610281610381366004612fc5565b610a2f565b34801561039257600080fd5b506042546102a9906001600160a01b031681565b3480156103b257600080fd5b50610281603b5481565b3480156103c857600080fd5b506037546103dd90600160a01b900460ff1681565b604051901515815260200161028b565b3480156103f957600080fd5b50603f546102a9906001600160a01b031681565b34801561041957600080fd5b50610281610428366004612fc5565b610a8a565b34801561043957600080fd5b506102e1610ab3565b34801561044e57600080fd5b5061028161045d366004612fc5565b610b59565b34801561046e57600080fd5b506102e161047d366004613035565b610b6a565b34801561048e57600080fd5b506104a261049d366004613035565b610d2c565b60405161028b919061310b565b3480156104bb57600080fd5b506104cf6104ca366004612fc5565b610d37565b60405161028b9190613233565b3480156104e857600080fd5b506102e16104f7366004613035565b610ddd565b34801561050857600080fd5b5061028160475481565b34801561051e57600080fd5b506102e161052d366004613067565b610ec8565b34801561053e57600080fd5b5061028160415481565b34801561055457600080fd5b506103dd610563366004612fc5565b6001600160a01b031660009081526033602052604090205460ff1690565b34801561058d57600080fd5b50610281603a5481565b3480156105a357600080fd5b50603454610281565b3480156105b857600080fd5b506102a96105c7366004612fc5565b6040602081905260009182529020546001600160a01b031681565b3480156105ee57600080fd5b506102e16105fd366004613035565b610f3b565b34801561060e57600080fd5b506102e1611112565b34801561062357600080fd5b506102e1611181565b34801561063857600080fd5b506037546102a9906001600160a01b031681565b34801561065857600080fd5b506103446111c7565b34801561066d57600080fd5b506103dd611227565b34801561068257600080fd5b506102e1610691366004612fc5565b611258565b3480156106a257600080fd5b5061028161132c565b3480156106b757600080fd5b5061028160465481565b3480156106cd57600080fd5b506037546103dd90600160a81b900460ff1681565b3480156106ee57600080fd5b506102e16106fd366004612fc5565b611336565b600061071a6000805160206135418339815191525490565b905090565b603754600160a81b900460ff16156107525760405162461bcd60e51b8152600401610749906131e3565b60405180910390fd5b600080516020613521833981519152805460028114156107845760405162461bcd60e51b81526004016107499061320b565b600282556001600160a01b03851660009081526033602052604090205460ff166107e95760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b6044820152606401610749565b600084116108395760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610749565b60006108458587611408565b90506000610854876001611564565b90506000670de0b6b3a764000061086b83856133ef565b61087591906132e2565b905085156108cd57858110156108cd5760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d00006044820152606401610749565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688533826040516108fe9291906130a5565b60405180910390a1603b5481101580156109225750603754600160a01b900460ff16155b156109315761092f611856565b505b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061096390339085906004016130a5565b600060405180830381600087803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b508a92506109ad9150506001600160a01b03821633308b611b91565b603a5482106109be576109be611c02565b50505050600182555050505050565b60606034805480602002602001604051908101604052809291908181526020018280548015610a2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a07575b5050505050905090565b600080610a58610a52610a4185611e70565b670de0b6b3a7640000906012611eda565b84611408565b9050670de0b6b3a764000081610a6f856001611564565b610a7991906133ef565b610a8391906132e2565b9392505050565b600080610a9c610a52610a4185611e70565b9050670de0b6b3a764000081610a6f856000611564565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610b4e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610749565b610b5733611f3c565b565b6000610b6482611ffd565b92915050565b603754600160a81b900460ff1615610b945760405162461bcd60e51b8152600401610749906131e3565b6045546001600160a01b03163314610bbe5760405162461bcd60e51b815260040161074990613176565b6001600160ff1b038110610be45760405162461bcd60e51b8152600401610749906131ba565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63382604051610c159291906130a5565b60405180910390a18060466000828254610c2f919061340e565b9091555050604754604654610c43906121cc565b10610c9a5760405162461bcd60e51b815260206004820152602160248201527f417474656d7074696e6720746f206275726e20746f6f206d756368204f5553446044820152601760f91b6064820152608401610749565b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90610ccc90339085906004016130a5565b600060405180830381600087803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b50505050603b548110158015610d1a5750603754600160a01b900460ff16155b15610d2957610d27611856565b505b50565b6060610b648261220f565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160a01b038616825260338152908490208451928301909452835460ff808216151584529394929391840191610100909104166001811115610da357610da36134de565b6001811115610db457610db46134de565b8152905462010000810460ff1660208301526301000000900461ffff1660409091015292915050565b603754600160a81b900460ff1615610e075760405162461bcd60e51b8152600401610749906131e3565b60008051602061352183398151915280546002811415610e395760405162461bcd60e51b81526004016107499061320b565b60028255603c546040516370a0823160e01b8152336004820152610ec0916001600160a01b0316906370a082319060240160206040518083038186803b158015610e8257600080fd5b505afa158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba919061304e565b846124ef565b506001905550565b603754600160a81b900460ff1615610ef25760405162461bcd60e51b8152600401610749906131e3565b60008051602061352183398151915280546002811415610f245760405162461bcd60e51b81526004016107499061320b565b60028255610f3284846124ef565b50600190555050565b603754600160a81b900460ff1615610f655760405162461bcd60e51b8152600401610749906131e3565b6045546001600160a01b03163314610f8f5760405162461bcd60e51b815260040161074990613176565b6001600160ff1b038110610fb55760405162461bcd60e51b8152600401610749906131ba565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853382604051610fe69291906130a5565b60405180910390a1603b54811015801561100a5750603754600160a01b900460ff16155b1561101957611017611856565b505b806046600082825461102b9190613289565b909155505060475460465461103f906121cc565b106110ab5760405162461bcd60e51b815260206004820152603660248201527f4d696e746564206f75736420737572706173736564206e65744f7573644d696e6044820152753a2337b929ba3930ba32b3bcaa343932b9b437b6321760511b6064820152608401610749565b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906110dd90339085906004016130a5565b600060405180830381600087803b1580156110f757600080fd5b505af115801561110b573d6000803e3d6000fd5b5050505050565b603754600160a81b900460ff161561113c5760405162461bcd60e51b8152600401610749906131e3565b6000805160206135218339815191528054600281141561116e5760405162461bcd60e51b81526004016107499061320b565b6002825561117a611c02565b5060019055565b600080516020613521833981519152805460028114156111b35760405162461bcd60e51b81526004016107499061320b565b600282556111bf611856565b505060019055565b60606036805480602002602001604051908101604052809291908181526020018280548015610a25576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a07575050505050905090565b600061123f6000805160206135418339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611260611227565b6112ac5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f720000000000006044820152606401610749565b6112d4817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166112f46000805160206135418339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b600061071a612a11565b61133e611227565b61138a5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f720000000000006044820152606401610749565b803b6113e45760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b6064820152608401610749565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b6001600160a01b038116600090815260336020526040812054610100900460ff168181600181111561143c5761143c6134de565b141561146057611458601261145085611e70565b869190611eda565b915050610b64565b6001816001811115611474576114746134de565b1415611515576000836001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed919061304e565b9050670de0b6b3a764000061150282876133ef565b61150c91906132e2565b92505050610b64565b60405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e207479706500000000006044820152606401610749565b5092915050565b6001600160a01b038281166000818152603360205260408082205460375491516315d5220f60e31b81526004810194909452919361010090920460ff169291169063aea910789060240160206040518083038186803b1580156115c657600080fd5b505afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe919061304e565b91506001816001811115611614576116146134de565b14156116b4576000846001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165557600080fd5b505afa158015611669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168d919061304e565b9050806116a284670de0b6b3a76400006133ef565b6116ac91906132e2565b925050611715565b60008160018111156116c8576116c86134de565b146117155760405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e207479706500000000006044820152606401610749565b67120a871cc002000082111561176d5760405162461bcd60e51b815260206004820152601860248201527f5661756c743a2050726963652065786365656473206d617800000000000000006044820152606401610749565b6709b6e64a8ec600008210156117be5760405162461bcd60e51b81526020600482015260166024820152752b30bab63a1d10283934b1b2903ab73232b91036b4b760511b6044820152606401610749565b821561183557670de0b6b3a76400008211156117e057670de0b6b3a764000091505b670dd99bb65dd700008210156118305760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b6044820152606401610749565b61155d565b670de0b6b3a764000082101561155d5750670de0b6b3a76400009392505050565b603754600090600160a01b900460ff16156118a55760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b6044820152606401610749565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156118ea57600080fd5b505afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611922919061304e565b9050600061192e612a11565b90508161193e579150611b8e9050565b6042546001600160a01b0316801580159061195857508282115b15611a9a576000611969848461344d565b9050600061198660435461271084612a2d9092919063ffffffff16565b90508082116119e25760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b6064820152608401610749565b8015611a4d57603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611a1a90869085906004016130a5565b600060405180830381600087803b158015611a3457600080fd5b505af1158015611a48573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae857600080fd5b505afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b20919061304e565b925082821115611b8957603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050505b509150505b90565b6040516001600160a01b0380851660248301528316604482015260648101829052611bfc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a4f565b50505050565b6000611c0c612b26565b905080611c165750565b6000611c20612c08565b90506000611c2e82846132ca565b9050600082611c5357603954611c4c90670de0b6b3a764000061344d565b9050611c90565b8382603954611c6291906133ef565b611c6c91906132e2565b905080670de0b6b3a76400001115611bfc57611c4c81670de0b6b3a764000061344d565b80611c9b5750505050565b60345460005b81811015611e6857600060348281548110611cbe57611cbe6134f4565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015611d0c57600080fd5b505afa158015611d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d44919061304e565b905080611d52575050611e58565b6000611d5e8287612c64565b6001600160a01b03808516600090815260406020819052902054919250168015801590611d8b5750600082115b15611e535780611da56001600160a01b0386168285612c79565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef2490611dd390889087906004016130a5565b600060405180830381600087803b158015611ded57600080fd5b505af1158015611e01573d6000803e3d6000fd5b5050604080516001600160a01b03808a168252861660208201529081018690527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505b505050505b611e6181613490565b9050611ca1565b505050505050565b6001600160a01b03811660009081526033602052604090205462010000900460ff1680611ed55760405162461bcd60e51b8152602060048201526013602482015272111958da5b585b1cc81b9bdd0818d858da1959606a1b6044820152606401610749565b919050565b600081831115611f0a57611f03611ef1838561344d565b611efc90600a613347565b8590612c98565b9350611f34565b81831015611f3457611f31611f1f848461344d565b611f2a90600a613347565b8590612ca4565b93505b509192915050565b6001600160a01b038116611f925760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610749565b806001600160a01b0316611fb26000805160206135418339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610d298160008051602061354183398151915255565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a082319060240160206040518083038186803b15801561204157600080fd5b505afa158015612055573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612079919061304e565b60365490925060005b818110156121c45760006036828154811061209f5761209f6134f4565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0388811660048301529091169150819063aa388af69060240160206040518083038186803b1580156120f057600080fd5b505afa158015612104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121289190613013565b156121b357604051632fa8a91360e11b81526001600160a01b038781166004830152821690635f5152269060240160206040518083038186803b15801561216e57600080fd5b505afa158015612182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a6919061304e565b6121b090866132ca565b94505b506121bd81613490565b9050612082565b505050919050565b60006001600160ff1b0382126121f45760405162461bcd60e51b8152600401610749906131ba565b600082121561220b57612206826134ab565b610b64565b5090565b60345460609060008167ffffffffffffffff8111156122305761223061350a565b604051908082528060200260200182016040528015612259578160200160208202803683370190505b50905060008267ffffffffffffffff8111156122775761227761350a565b6040519080825280602002602001820160405280156122a0578160200160208202803683370190505b5090508267ffffffffffffffff8111156122bc576122bc61350a565b6040519080825280602002602001820160405280156122e5578160200160208202803683370190505b506038549094501561231557603854600090612305908790612710612a2d565b9050612311818761344d565b9550505b6000805b848110156123d857600060348281548110612336576123366134f4565b60009182526020822001546001600160a01b0316915061235582611ffd565b90508085848151811061236a5761236a6134f4565b6020026020010181815250506123808183611408565b868481518110612392576123926134f4565b6020026020010181815250508583815181106123b0576123b06134f4565b6020026020010151846123c391906132ca565b93505050806123d190613490565b9050612319565b506000805b8581101561246c576000612417603483815481106123fd576123fd6134f4565b60009182526020822001546001600160a01b031690611564565b90506000848288858151811061242f5761242f6134f4565b602002602001015161244191906133ef565b61244b91906132e2565b905061245781856132ca565b935050508061246590613490565b90506123dd565b5060006124798883612cb0565b905060005b868110156124e357838286838151811061249a5761249a6134f4565b60200260200101516124ac91906133ef565b6124b691906132e2565b8882815181106124c8576124c86134f4565b60209081029190910101526124dc81613490565b905061247e565b50505050505050919050565b60006124fa8361220f565b90507f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6338460405161252d9291906130a5565b60405180910390a160345460005b8181101561277e57828181518110612555576125556134f4565b60200260200101516000141561256a5761276e565b60006034828154811061257f5761257f6134f4565b60009182526020909120015484516001600160a01b0390911691508490839081106125ac576125ac6134f4565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156125f657600080fd5b505afa15801561260a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262e919061304e565b1061266f5761266a33858481518110612649576126496134f4565b6020026020010151836001600160a01b0316612c799092919063ffffffff16565b61276c565b6001600160a01b03808216600090815260406020819052902054168015612730576000819050806001600160a01b031663d9caed1233858988815181106126b8576126b86134f4565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561271257600080fd5b505af1158015612726573d6000803e3d6000fd5b505050505061276a565b60405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b6044820152606401610749565b505b505b61277781613490565b905061253b565b50821561284b576000805b83518110156127f8576127dc8482815181106127a7576127a76134f4565b6020026020010151603483815481106127c2576127c26134f4565b6000918252602090912001546001600160a01b0316611408565b6127e690836132ca565b91506127f181613490565b9050612789565b50838110156128495760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d6044820152606401610749565b505b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061287d90339088906004016130a5565b600060405180830381600087803b15801561289757600080fd5b505af11580156128ab573d6000803e3d6000fd5b505050506000603b5485101580156128cd5750603754600160a01b900460ff16155b156128e1576128da611856565b90506128ec565b6128e9612a11565b90505b6041541561110b57600061298682603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294857600080fd5b505afa15801561295c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612980919061304e565b90612cb0565b9050604154670de0b6b3a764000082116129b1576129ac82670de0b6b3a764000061344d565b6129c3565b6129c3670de0b6b3a76400008361344d565b1115611e685760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f7200006044820152606401610749565b6000612a1b612c08565b612a23612b26565b61071a91906132ca565b600080612a3a8585612c98565b9050612a468184612ca4565b95945050505050565b6000612aa4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612cd99092919063ffffffff16565b805190915015612b215780806020019051810190612ac29190613013565b612b215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610749565b505050565b603454600090815b81811015612c0357600060348281548110612b4b57612b4b6134f4565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015612b9957600080fd5b505afa158015612bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd1919061304e565b90508015612bf057612be38183611408565b612bed90866132ca565b94505b505080612bfc90613490565b9050612b2e565b505090565b603654600090815b81811015612c0357612c4860368281548110612c2e57612c2e6134f4565b6000918252602090912001546001600160a01b0316612ce8565b612c5290846132ca565b9250612c5d81613490565b9050612c10565b6000610a838383670de0b6b3a7640000612a2d565b612b218363a9059cbb60e01b8484604051602401611bc59291906130a5565b6000610a8382846133ef565b6000610a8382846132e2565b600080612cc584670de0b6b3a7640000612c98565b9050612cd18184612ca4565b949350505050565b6060612cd18484600085612e4d565b6034546000908290825b818110156121c457600060348281548110612d0f57612d0f6134f4565b60009182526020909120015460405163551c457b60e11b81526001600160a01b039182166004820181905292509085169063aa388af69060240160206040518083038186803b158015612d6157600080fd5b505afa158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d999190613013565b15612e3c57604051632fa8a91360e11b81526001600160a01b03828116600483015260009190861690635f5152269060240160206040518083038186803b158015612de357600080fd5b505afa158015612df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1b919061304e565b90508015612e3a57612e2d8183611408565b612e3790876132ca565b95505b505b50612e4681613490565b9050612cf2565b606082471015612eae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610749565b843b612efc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610749565b600080866001600160a01b03168587604051612f189190613089565b60006040518083038185875af1925050503d8060008114612f55576040519150601f19603f3d011682016040523d82523d6000602084013e612f5a565b606091505b5091509150612f6a828286612f75565b979650505050505050565b60608315612f84575081610a83565b825115612f945782518084602001fd5b8160405162461bcd60e51b81526004016107499190613143565b80356001600160a01b0381168114611ed557600080fd5b600060208284031215612fd757600080fd5b610a8382612fae565b600080600060608486031215612ff557600080fd5b612ffe84612fae565b95602085013595506040909401359392505050565b60006020828403121561302557600080fd5b81518015158114610a8357600080fd5b60006020828403121561304757600080fd5b5035919050565b60006020828403121561306057600080fd5b5051919050565b6000806040838503121561307a57600080fd5b50508035926020909101359150565b6000825161309b818460208701613464565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156130ff5783516001600160a01b0316835292840192918401916001016130da565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156130ff57835183529284019291840191600101613127565b6020815260008251806020840152613162816040850160208701613464565b601f01601f19169190910160400192915050565b60208082526024908201527f43616c6c6572206973206e6f7420746865204f555344206d65746120737472616040820152637465677960e01b606082015260800190565b6020808252600f908201526e082dadeeadce840e8dede40d0d2ced608b1b604082015260600190565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b815115158152602082015160808201906002811061326157634e487b7160e01b600052602160045260246000fd5b8060208401525060ff604084015116604083015261ffff606084015116606083015292915050565b600080821280156001600160ff1b03849003851316156132ab576132ab6134c8565b600160ff1b83900384128116156132c4576132c46134c8565b50500190565b600082198211156132dd576132dd6134c8565b500190565b6000826132ff57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561333f578160001904821115613325576133256134c8565b8085161561333257918102915b93841c9390800290613309565b509250929050565b6000610a83838360008261335d57506001610b64565b8161336a57506000610b64565b8160018114613380576002811461338a576133a6565b6001915050610b64565b60ff84111561339b5761339b6134c8565b50506001821b610b64565b5060208310610133831016604e8410600b84101617156133c9575081810a610b64565b6133d38383613304565b80600019048211156133e7576133e76134c8565b029392505050565b6000816000190483118215151615613409576134096134c8565b500290565b60008083128015600160ff1b85018412161561342c5761342c6134c8565b6001600160ff1b0384018313811615613447576134476134c8565b50500390565b60008282101561345f5761345f6134c8565b500390565b60005b8381101561347f578181015183820152602001613467565b83811115611bfc5750506000910152565b60006000198214156134a4576134a46134c8565b5060010190565b6000600160ff1b8214156134c1576134c16134c8565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212209ccb2610ebb083fc75ce814c82a613e7297aace4c5f2584f58077676a165f3da64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c80637136a7a611610123578063abaa9916116100ab578063d38bfff41161006f578063d38bfff414610676578063d4c3eea014610696578063e45cc9f0146106ab578063e6cc5432146106c1578063fc0cfeee146106e257610225565b8063abaa991614610602578063af14052c14610617578063b888879e1461062c578063c3b288641461064c578063c7af33521461066157610225565b80639be918e6116100f25780639be918e6146105485780639fa1826e14610581578063a0aead4d14610597578063a403e4d5146105ac578063ab80dafb146105e257610225565b80637136a7a6146104dc5780637a2202f3146104fc5780637cbc2373146105125780638e510b521461053257610225565b806349c1d54d116101b15780635d36b190116101755780635d36b1901461042d5780635f515226146104425780636217f3ea1461046257806367bd7ba3146104825780636ec3ab67146104af57610225565b806349c1d54d1461038657806352d38e5d146103a657806353ca9f24146103bc578063570d8e1d146103ed5780635b60f9fc1461040d57610225565b80631edfe3da116101f85780631edfe3da14610303578063207134b0146103195780632acada4d1461032f57806331e19cfa146103515780633b8fe28d1461036657610225565b806309f6442c1461026b5780630c340a2414610294578063156e29f6146102c157806318ce56bd146102e3575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e808015610266573d6000f35b3d6000fd5b34801561027757600080fd5b5061028160385481565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b506102a9610702565b6040516001600160a01b03909116815260200161028b565b3480156102cd57600080fd5b506102e16102dc366004612fe0565b61071f565b005b3480156102ef57600080fd5b506045546102a9906001600160a01b031681565b34801561030f57600080fd5b5061028160395481565b34801561032557600080fd5b5061028160435481565b34801561033b57600080fd5b506103446109cd565b60405161028b91906130be565b34801561035d57600080fd5b50603654610281565b34801561037257600080fd5b50610281610381366004612fc5565b610a2f565b34801561039257600080fd5b506042546102a9906001600160a01b031681565b3480156103b257600080fd5b50610281603b5481565b3480156103c857600080fd5b506037546103dd90600160a01b900460ff1681565b604051901515815260200161028b565b3480156103f957600080fd5b50603f546102a9906001600160a01b031681565b34801561041957600080fd5b50610281610428366004612fc5565b610a8a565b34801561043957600080fd5b506102e1610ab3565b34801561044e57600080fd5b5061028161045d366004612fc5565b610b59565b34801561046e57600080fd5b506102e161047d366004613035565b610b6a565b34801561048e57600080fd5b506104a261049d366004613035565b610d2c565b60405161028b919061310b565b3480156104bb57600080fd5b506104cf6104ca366004612fc5565b610d37565b60405161028b9190613233565b3480156104e857600080fd5b506102e16104f7366004613035565b610ddd565b34801561050857600080fd5b5061028160475481565b34801561051e57600080fd5b506102e161052d366004613067565b610ec8565b34801561053e57600080fd5b5061028160415481565b34801561055457600080fd5b506103dd610563366004612fc5565b6001600160a01b031660009081526033602052604090205460ff1690565b34801561058d57600080fd5b50610281603a5481565b3480156105a357600080fd5b50603454610281565b3480156105b857600080fd5b506102a96105c7366004612fc5565b6040602081905260009182529020546001600160a01b031681565b3480156105ee57600080fd5b506102e16105fd366004613035565b610f3b565b34801561060e57600080fd5b506102e1611112565b34801561062357600080fd5b506102e1611181565b34801561063857600080fd5b506037546102a9906001600160a01b031681565b34801561065857600080fd5b506103446111c7565b34801561066d57600080fd5b506103dd611227565b34801561068257600080fd5b506102e1610691366004612fc5565b611258565b3480156106a257600080fd5b5061028161132c565b3480156106b757600080fd5b5061028160465481565b3480156106cd57600080fd5b506037546103dd90600160a81b900460ff1681565b3480156106ee57600080fd5b506102e16106fd366004612fc5565b611336565b600061071a6000805160206135418339815191525490565b905090565b603754600160a81b900460ff16156107525760405162461bcd60e51b8152600401610749906131e3565b60405180910390fd5b600080516020613521833981519152805460028114156107845760405162461bcd60e51b81526004016107499061320b565b600282556001600160a01b03851660009081526033602052604090205460ff166107e95760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b6044820152606401610749565b600084116108395760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610749565b60006108458587611408565b90506000610854876001611564565b90506000670de0b6b3a764000061086b83856133ef565b61087591906132e2565b905085156108cd57858110156108cd5760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d00006044820152606401610749565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688533826040516108fe9291906130a5565b60405180910390a1603b5481101580156109225750603754600160a01b900460ff16155b156109315761092f611856565b505b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061096390339085906004016130a5565b600060405180830381600087803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b508a92506109ad9150506001600160a01b03821633308b611b91565b603a5482106109be576109be611c02565b50505050600182555050505050565b60606034805480602002602001604051908101604052809291908181526020018280548015610a2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a07575b5050505050905090565b600080610a58610a52610a4185611e70565b670de0b6b3a7640000906012611eda565b84611408565b9050670de0b6b3a764000081610a6f856001611564565b610a7991906133ef565b610a8391906132e2565b9392505050565b600080610a9c610a52610a4185611e70565b9050670de0b6b3a764000081610a6f856000611564565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610b4e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610749565b610b5733611f3c565b565b6000610b6482611ffd565b92915050565b603754600160a81b900460ff1615610b945760405162461bcd60e51b8152600401610749906131e3565b6045546001600160a01b03163314610bbe5760405162461bcd60e51b815260040161074990613176565b6001600160ff1b038110610be45760405162461bcd60e51b8152600401610749906131ba565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63382604051610c159291906130a5565b60405180910390a18060466000828254610c2f919061340e565b9091555050604754604654610c43906121cc565b10610c9a5760405162461bcd60e51b815260206004820152602160248201527f417474656d7074696e6720746f206275726e20746f6f206d756368204f5553446044820152601760f91b6064820152608401610749565b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90610ccc90339085906004016130a5565b600060405180830381600087803b158015610ce657600080fd5b505af1158015610cfa573d6000803e3d6000fd5b50505050603b548110158015610d1a5750603754600160a01b900460ff16155b15610d2957610d27611856565b505b50565b6060610b648261220f565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160a01b038616825260338152908490208451928301909452835460ff808216151584529394929391840191610100909104166001811115610da357610da36134de565b6001811115610db457610db46134de565b8152905462010000810460ff1660208301526301000000900461ffff1660409091015292915050565b603754600160a81b900460ff1615610e075760405162461bcd60e51b8152600401610749906131e3565b60008051602061352183398151915280546002811415610e395760405162461bcd60e51b81526004016107499061320b565b60028255603c546040516370a0823160e01b8152336004820152610ec0916001600160a01b0316906370a082319060240160206040518083038186803b158015610e8257600080fd5b505afa158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba919061304e565b846124ef565b506001905550565b603754600160a81b900460ff1615610ef25760405162461bcd60e51b8152600401610749906131e3565b60008051602061352183398151915280546002811415610f245760405162461bcd60e51b81526004016107499061320b565b60028255610f3284846124ef565b50600190555050565b603754600160a81b900460ff1615610f655760405162461bcd60e51b8152600401610749906131e3565b6045546001600160a01b03163314610f8f5760405162461bcd60e51b815260040161074990613176565b6001600160ff1b038110610fb55760405162461bcd60e51b8152600401610749906131ba565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853382604051610fe69291906130a5565b60405180910390a1603b54811015801561100a5750603754600160a01b900460ff16155b1561101957611017611856565b505b806046600082825461102b9190613289565b909155505060475460465461103f906121cc565b106110ab5760405162461bcd60e51b815260206004820152603660248201527f4d696e746564206f75736420737572706173736564206e65744f7573644d696e6044820152753a2337b929ba3930ba32b3bcaa343932b9b437b6321760511b6064820152608401610749565b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906110dd90339085906004016130a5565b600060405180830381600087803b1580156110f757600080fd5b505af115801561110b573d6000803e3d6000fd5b5050505050565b603754600160a81b900460ff161561113c5760405162461bcd60e51b8152600401610749906131e3565b6000805160206135218339815191528054600281141561116e5760405162461bcd60e51b81526004016107499061320b565b6002825561117a611c02565b5060019055565b600080516020613521833981519152805460028114156111b35760405162461bcd60e51b81526004016107499061320b565b600282556111bf611856565b505060019055565b60606036805480602002602001604051908101604052809291908181526020018280548015610a25576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610a07575050505050905090565b600061123f6000805160206135418339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611260611227565b6112ac5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f720000000000006044820152606401610749565b6112d4817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166112f46000805160206135418339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b600061071a612a11565b61133e611227565b61138a5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f720000000000006044820152606401610749565b803b6113e45760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b6064820152608401610749565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b6001600160a01b038116600090815260336020526040812054610100900460ff168181600181111561143c5761143c6134de565b141561146057611458601261145085611e70565b869190611eda565b915050610b64565b6001816001811115611474576114746134de565b1415611515576000836001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed919061304e565b9050670de0b6b3a764000061150282876133ef565b61150c91906132e2565b92505050610b64565b60405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e207479706500000000006044820152606401610749565b5092915050565b6001600160a01b038281166000818152603360205260408082205460375491516315d5220f60e31b81526004810194909452919361010090920460ff169291169063aea910789060240160206040518083038186803b1580156115c657600080fd5b505afa1580156115da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fe919061304e565b91506001816001811115611614576116146134de565b14156116b4576000846001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165557600080fd5b505afa158015611669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168d919061304e565b9050806116a284670de0b6b3a76400006133ef565b6116ac91906132e2565b925050611715565b60008160018111156116c8576116c86134de565b146117155760405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e207479706500000000006044820152606401610749565b67120a871cc002000082111561176d5760405162461bcd60e51b815260206004820152601860248201527f5661756c743a2050726963652065786365656473206d617800000000000000006044820152606401610749565b6709b6e64a8ec600008210156117be5760405162461bcd60e51b81526020600482015260166024820152752b30bab63a1d10283934b1b2903ab73232b91036b4b760511b6044820152606401610749565b821561183557670de0b6b3a76400008211156117e057670de0b6b3a764000091505b670dd99bb65dd700008210156118305760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b6044820152606401610749565b61155d565b670de0b6b3a764000082101561155d5750670de0b6b3a76400009392505050565b603754600090600160a01b900460ff16156118a55760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b6044820152606401610749565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156118ea57600080fd5b505afa1580156118fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611922919061304e565b9050600061192e612a11565b90508161193e579150611b8e9050565b6042546001600160a01b0316801580159061195857508282115b15611a9a576000611969848461344d565b9050600061198660435461271084612a2d9092919063ffffffff16565b90508082116119e25760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b6064820152608401610749565b8015611a4d57603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611a1a90869085906004016130a5565b600060405180830381600087803b158015611a3457600080fd5b505af1158015611a48573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae857600080fd5b505afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b20919061304e565b925082821115611b8957603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050505b509150505b90565b6040516001600160a01b0380851660248301528316604482015260648101829052611bfc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a4f565b50505050565b6000611c0c612b26565b905080611c165750565b6000611c20612c08565b90506000611c2e82846132ca565b9050600082611c5357603954611c4c90670de0b6b3a764000061344d565b9050611c90565b8382603954611c6291906133ef565b611c6c91906132e2565b905080670de0b6b3a76400001115611bfc57611c4c81670de0b6b3a764000061344d565b80611c9b5750505050565b60345460005b81811015611e6857600060348281548110611cbe57611cbe6134f4565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015611d0c57600080fd5b505afa158015611d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d44919061304e565b905080611d52575050611e58565b6000611d5e8287612c64565b6001600160a01b03808516600090815260406020819052902054919250168015801590611d8b5750600082115b15611e535780611da56001600160a01b0386168285612c79565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef2490611dd390889087906004016130a5565b600060405180830381600087803b158015611ded57600080fd5b505af1158015611e01573d6000803e3d6000fd5b5050604080516001600160a01b03808a168252861660208201529081018690527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505b505050505b611e6181613490565b9050611ca1565b505050505050565b6001600160a01b03811660009081526033602052604090205462010000900460ff1680611ed55760405162461bcd60e51b8152602060048201526013602482015272111958da5b585b1cc81b9bdd0818d858da1959606a1b6044820152606401610749565b919050565b600081831115611f0a57611f03611ef1838561344d565b611efc90600a613347565b8590612c98565b9350611f34565b81831015611f3457611f31611f1f848461344d565b611f2a90600a613347565b8590612ca4565b93505b509192915050565b6001600160a01b038116611f925760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610749565b806001600160a01b0316611fb26000805160206135418339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610d298160008051602061354183398151915255565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a082319060240160206040518083038186803b15801561204157600080fd5b505afa158015612055573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612079919061304e565b60365490925060005b818110156121c45760006036828154811061209f5761209f6134f4565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0388811660048301529091169150819063aa388af69060240160206040518083038186803b1580156120f057600080fd5b505afa158015612104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121289190613013565b156121b357604051632fa8a91360e11b81526001600160a01b038781166004830152821690635f5152269060240160206040518083038186803b15801561216e57600080fd5b505afa158015612182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a6919061304e565b6121b090866132ca565b94505b506121bd81613490565b9050612082565b505050919050565b60006001600160ff1b0382126121f45760405162461bcd60e51b8152600401610749906131ba565b600082121561220b57612206826134ab565b610b64565b5090565b60345460609060008167ffffffffffffffff8111156122305761223061350a565b604051908082528060200260200182016040528015612259578160200160208202803683370190505b50905060008267ffffffffffffffff8111156122775761227761350a565b6040519080825280602002602001820160405280156122a0578160200160208202803683370190505b5090508267ffffffffffffffff8111156122bc576122bc61350a565b6040519080825280602002602001820160405280156122e5578160200160208202803683370190505b506038549094501561231557603854600090612305908790612710612a2d565b9050612311818761344d565b9550505b6000805b848110156123d857600060348281548110612336576123366134f4565b60009182526020822001546001600160a01b0316915061235582611ffd565b90508085848151811061236a5761236a6134f4565b6020026020010181815250506123808183611408565b868481518110612392576123926134f4565b6020026020010181815250508583815181106123b0576123b06134f4565b6020026020010151846123c391906132ca565b93505050806123d190613490565b9050612319565b506000805b8581101561246c576000612417603483815481106123fd576123fd6134f4565b60009182526020822001546001600160a01b031690611564565b90506000848288858151811061242f5761242f6134f4565b602002602001015161244191906133ef565b61244b91906132e2565b905061245781856132ca565b935050508061246590613490565b90506123dd565b5060006124798883612cb0565b905060005b868110156124e357838286838151811061249a5761249a6134f4565b60200260200101516124ac91906133ef565b6124b691906132e2565b8882815181106124c8576124c86134f4565b60209081029190910101526124dc81613490565b905061247e565b50505050505050919050565b60006124fa8361220f565b90507f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6338460405161252d9291906130a5565b60405180910390a160345460005b8181101561277e57828181518110612555576125556134f4565b60200260200101516000141561256a5761276e565b60006034828154811061257f5761257f6134f4565b60009182526020909120015484516001600160a01b0390911691508490839081106125ac576125ac6134f4565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156125f657600080fd5b505afa15801561260a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262e919061304e565b1061266f5761266a33858481518110612649576126496134f4565b6020026020010151836001600160a01b0316612c799092919063ffffffff16565b61276c565b6001600160a01b03808216600090815260406020819052902054168015612730576000819050806001600160a01b031663d9caed1233858988815181106126b8576126b86134f4565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561271257600080fd5b505af1158015612726573d6000803e3d6000fd5b505050505061276a565b60405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b6044820152606401610749565b505b505b61277781613490565b905061253b565b50821561284b576000805b83518110156127f8576127dc8482815181106127a7576127a76134f4565b6020026020010151603483815481106127c2576127c26134f4565b6000918252602090912001546001600160a01b0316611408565b6127e690836132ca565b91506127f181613490565b9050612789565b50838110156128495760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d6044820152606401610749565b505b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061287d90339088906004016130a5565b600060405180830381600087803b15801561289757600080fd5b505af11580156128ab573d6000803e3d6000fd5b505050506000603b5485101580156128cd5750603754600160a01b900460ff16155b156128e1576128da611856565b90506128ec565b6128e9612a11565b90505b6041541561110b57600061298682603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294857600080fd5b505afa15801561295c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612980919061304e565b90612cb0565b9050604154670de0b6b3a764000082116129b1576129ac82670de0b6b3a764000061344d565b6129c3565b6129c3670de0b6b3a76400008361344d565b1115611e685760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f7200006044820152606401610749565b6000612a1b612c08565b612a23612b26565b61071a91906132ca565b600080612a3a8585612c98565b9050612a468184612ca4565b95945050505050565b6000612aa4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612cd99092919063ffffffff16565b805190915015612b215780806020019051810190612ac29190613013565b612b215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610749565b505050565b603454600090815b81811015612c0357600060348281548110612b4b57612b4b6134f4565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015612b9957600080fd5b505afa158015612bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd1919061304e565b90508015612bf057612be38183611408565b612bed90866132ca565b94505b505080612bfc90613490565b9050612b2e565b505090565b603654600090815b81811015612c0357612c4860368281548110612c2e57612c2e6134f4565b6000918252602090912001546001600160a01b0316612ce8565b612c5290846132ca565b9250612c5d81613490565b9050612c10565b6000610a838383670de0b6b3a7640000612a2d565b612b218363a9059cbb60e01b8484604051602401611bc59291906130a5565b6000610a8382846133ef565b6000610a8382846132e2565b600080612cc584670de0b6b3a7640000612c98565b9050612cd18184612ca4565b949350505050565b6060612cd18484600085612e4d565b6034546000908290825b818110156121c457600060348281548110612d0f57612d0f6134f4565b60009182526020909120015460405163551c457b60e11b81526001600160a01b039182166004820181905292509085169063aa388af69060240160206040518083038186803b158015612d6157600080fd5b505afa158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d999190613013565b15612e3c57604051632fa8a91360e11b81526001600160a01b03828116600483015260009190861690635f5152269060240160206040518083038186803b158015612de357600080fd5b505afa158015612df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1b919061304e565b90508015612e3a57612e2d8183611408565b612e3790876132ca565b95505b505b50612e4681613490565b9050612cf2565b606082471015612eae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610749565b843b612efc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610749565b600080866001600160a01b03168587604051612f189190613089565b60006040518083038185875af1925050503d8060008114612f55576040519150601f19603f3d011682016040523d82523d6000602084013e612f5a565b606091505b5091509150612f6a828286612f75565b979650505050505050565b60608315612f84575081610a83565b825115612f945782518084602001fd5b8160405162461bcd60e51b81526004016107499190613143565b80356001600160a01b0381168114611ed557600080fd5b600060208284031215612fd757600080fd5b610a8382612fae565b600080600060608486031215612ff557600080fd5b612ffe84612fae565b95602085013595506040909401359392505050565b60006020828403121561302557600080fd5b81518015158114610a8357600080fd5b60006020828403121561304757600080fd5b5035919050565b60006020828403121561306057600080fd5b5051919050565b6000806040838503121561307a57600080fd5b50508035926020909101359150565b6000825161309b818460208701613464565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156130ff5783516001600160a01b0316835292840192918401916001016130da565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156130ff57835183529284019291840191600101613127565b6020815260008251806020840152613162816040850160208701613464565b601f01601f19169190910160400192915050565b60208082526024908201527f43616c6c6572206973206e6f7420746865204f555344206d65746120737472616040820152637465677960e01b606082015260800190565b6020808252600f908201526e082dadeeadce840e8dede40d0d2ced608b1b604082015260600190565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b815115158152602082015160808201906002811061326157634e487b7160e01b600052602160045260246000fd5b8060208401525060ff604084015116604083015261ffff606084015116606083015292915050565b600080821280156001600160ff1b03849003851316156132ab576132ab6134c8565b600160ff1b83900384128116156132c4576132c46134c8565b50500190565b600082198211156132dd576132dd6134c8565b500190565b6000826132ff57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561333f578160001904821115613325576133256134c8565b8085161561333257918102915b93841c9390800290613309565b509250929050565b6000610a83838360008261335d57506001610b64565b8161336a57506000610b64565b8160018114613380576002811461338a576133a6565b6001915050610b64565b60ff84111561339b5761339b6134c8565b50506001821b610b64565b5060208310610133831016604e8410600b84101617156133c9575081810a610b64565b6133d38383613304565b80600019048211156133e7576133e76134c8565b029392505050565b6000816000190483118215151615613409576134096134c8565b500290565b60008083128015600160ff1b85018412161561342c5761342c6134c8565b6001600160ff1b0384018313811615613447576134476134c8565b50500390565b60008282101561345f5761345f6134c8565b500390565b60005b8381101561347f578181015183820152602001613467565b83811115611bfc5750506000910152565b60006000198214156134a4576134a46134c8565b5060010190565b6000600160ff1b8214156134c1576134c16134c8565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212209ccb2610ebb083fc75ce814c82a613e7297aace4c5f2584f58077676a165f3da64736f6c63430008070033",
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "burnForStrategy(uint256)": {
        "details": "Notice: can't use `nonReentrant` modifier since the `redeem` function could require withdrawal on `ConvexOUSDMetaStrategy` and that one can call `burnForStrategy` while the execution of the `redeem` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function.",
        "params": {
          "_amount": "Amount of OUSD to burn"
        }
      },
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of asset"
        },
        "returns": {
          "_0": "uint256 Balance of asset in decimals of asset"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "address of the asset"
        },
        "returns": {
          "_0": "true if supported"
        }
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of the asset being deposited",
          "_asset": "Address of the asset being deposited",
          "_minimumOusdAmount": "Minimum OTokens to mint"
        }
      },
      "mintForStrategy(uint256)": {
        "params": {
          "_amount": "Amount of the asset being deposited Notice: can't use `nonReentrant` modifier since the `mint` function can call `allocate`, and that can trigger `ConvexOUSDMetaStrategy` to call this function while the execution of the `mint` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function."
        }
      },
      "priceUnitMint(address)": {
        "params": {
          "asset": "address of the asset"
        },
        "returns": {
          "price": "uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed"
        }
      },
      "priceUnitRedeem(address)": {
        "params": {
          "asset": "Address of the asset"
        },
        "returns": {
          "price": "uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed"
        }
      },
      "redeem(uint256,uint256)": {
        "params": {
          "_amount": "Amount of OTokens to burn",
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "redeemAll(uint256)": {
        "params": {
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "setAdminImpl(address)": {
        "params": {
          "newImpl": "address of the implementation"
        }
      },
      "totalValue()": {
        "returns": {
          "value": "Total value in USD (1e18)"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "title": "OETH VaultCore Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocate()": {
        "notice": "Allocate unallocated funds on Vault to strategies.*"
      },
      "assetDefaultStrategies(address)": {
        "notice": "Mapping of asset address to the Strategy that they should automatically"
      },
      "autoAllocateThreshold()": {
        "notice": "OToken mints over this amount automatically allocate funds. 18 decimals."
      },
      "burnForStrategy(uint256)": {
        "notice": "Burn OTokens for Metapool Strategy"
      },
      "calculateRedeemOutputs(uint256)": {
        "notice": "Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned"
      },
      "capitalPaused()": {
        "notice": "pause operations that change the OToken supply. eg mint, redeem, allocate, mint/burn for strategy"
      },
      "checkBalance(address)": {
        "notice": "Get the balance of an asset held in Vault and all strategies."
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "getAllAssets()": {
        "notice": "Return all vault asset addresses in order"
      },
      "getAllStrategies()": {
        "notice": "Return the array of all strategies"
      },
      "getAssetConfig(address)": {
        "notice": "Gets the vault configuration of a supported asset."
      },
      "getAssetCount()": {
        "notice": "Return the number of assets supported by the Vault."
      },
      "getStrategyCount()": {
        "notice": "Return the number of strategies active on the Vault."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "isSupportedAsset(address)": {
        "notice": "Returns whether the vault supports the asset"
      },
      "maxSupplyDiff()": {
        "notice": "Max difference between total supply and total value of assets. 18 decimals."
      },
      "mint(address,uint256,uint256)": {
        "notice": "Deposit a supported asset and mint OTokens."
      },
      "mintForStrategy(uint256)": {
        "notice": "Mint OTokens for a Metapool Strategy"
      },
      "netOusdMintForStrategyThreshold()": {
        "notice": "How much net total OTokens are allowed to be minted by all strategies"
      },
      "netOusdMintedForStrategy()": {
        "notice": "How much OTokens are currently minted by the strategy"
      },
      "ousdMetaStrategy()": {
        "notice": "Metapool strategy that is allowed to mint/burn OTokens without changing collateral"
      },
      "priceProvider()": {
        "notice": "Address of the Oracle price provider contract"
      },
      "priceUnitMint(address)": {
        "notice": "Returns the total price in 18 digit units for a given asset.      Never goes above 1, since that is how we price mints."
      },
      "priceUnitRedeem(address)": {
        "notice": "Returns the total price in 18 digit unit for a given asset.      Never goes below 1, since that is how we price redeems"
      },
      "rebase()": {
        "notice": "Calculate the total value of assets held by the Vault and all      strategies and update the supply of OTokens."
      },
      "rebasePaused()": {
        "notice": "pause rebasing if true"
      },
      "rebaseThreshold()": {
        "notice": "OToken mints over this amount automatically rebase. 18 decimals."
      },
      "redeem(uint256,uint256)": {
        "notice": "Withdraw a supported asset and burn OTokens."
      },
      "redeemAll(uint256)": {
        "notice": "Withdraw a supported asset and burn all OTokens."
      },
      "redeemFeeBps()": {
        "notice": "Redemption fee in basis points. eg 50 = 0.5%"
      },
      "setAdminImpl(address)": {
        "notice": "set the implementation for the admin, this needs to be in a base class else we cannot set it"
      },
      "strategistAddr()": {
        "notice": "Address of the Strategist"
      },
      "totalValue()": {
        "notice": "Determine the total value of assets held by the vault and its         strategies."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "trusteeAddress()": {
        "notice": "Trustee contract that can collect a percentage of yield"
      },
      "trusteeFeeBps()": {
        "notice": "Amount of yield collected in basis points. eg 2000 = 20%"
      },
      "vaultBuffer()": {
        "notice": "Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28178,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 28181,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 28221,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 32478,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Asset)32472_storage)"
      },
      {
        "astId": 32482,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "allAssets",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 32493,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "strategies",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(Strategy)32487_storage)"
      },
      {
        "astId": 32497,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "allStrategies",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 32500,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "priceProvider",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 32504,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "rebasePaused",
        "offset": 20,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 32508,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "capitalPaused",
        "offset": 21,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 32511,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 32514,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "vaultBuffer",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 32517,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "autoAllocateThreshold",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 32520,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "rebaseThreshold",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 32524,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "oUSD",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(OUSD)27579"
      },
      {
        "astId": 32533,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "_deprecated_rebaseHooksAddr",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 32539,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "_deprecated_uniswapAddr",
        "offset": 0,
        "slot": "62",
        "type": "t_address"
      },
      {
        "astId": 32546,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      },
      {
        "astId": 32551,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "assetDefaultStrategies",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 32554,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "maxSupplyDiff",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 32557,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "trusteeAddress",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 32560,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "trusteeFeeBps",
        "offset": 0,
        "slot": "67",
        "type": "t_uint256"
      },
      {
        "astId": 32564,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "_deprecated_swapTokens",
        "offset": 0,
        "slot": "68",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 32574,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "ousdMetaStrategy",
        "offset": 0,
        "slot": "69",
        "type": "t_address"
      },
      {
        "astId": 32578,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "netOusdMintedForStrategy",
        "offset": 0,
        "slot": "70",
        "type": "t_int256"
      },
      {
        "astId": 32582,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "netOusdMintForStrategyThreshold",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 32603,
        "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
        "label": "swapConfig",
        "offset": 0,
        "slot": "72",
        "type": "t_struct(SwapConfig)32593_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(OUSD)27579": {
        "encoding": "inplace",
        "label": "contract OUSD",
        "numberOfBytes": "20"
      },
      "t_enum(UnitConversion)32462": {
        "encoding": "inplace",
        "label": "enum VaultStorage.UnitConversion",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Asset)32472_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)32472_storage"
      },
      "t_mapping(t_address,t_struct(Strategy)32487_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)32487_storage"
      },
      "t_struct(Asset)32472_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Asset",
        "members": [
          {
            "astId": 32464,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 32467,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "unitConversion",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(UnitConversion)32462"
          },
          {
            "astId": 32469,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "decimals",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 32471,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "allowedOracleSlippageBps",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)32487_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Strategy",
        "members": [
          {
            "astId": 32484,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 32486,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "_deprecated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SwapConfig)32593_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.SwapConfig",
        "members": [
          {
            "astId": 32590,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "swapper",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 32592,
            "contract": "contracts/vault/OETHVaultCore.sol:OETHVaultCore",
            "label": "allowedUndervalueBps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
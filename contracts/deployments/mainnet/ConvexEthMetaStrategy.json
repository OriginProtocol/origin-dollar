{
  "address": "0xA52C14701f7ad3E7B70D05078AE2ebE3Fd283449",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvxRewardStaker",
      "outputs": [
        {
          "internalType": "contract IRewardStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "curvePoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cvxDepositorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oethAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wethAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cvxRewardStakerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "curvePoolLpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cvxDepositorPTokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ConvexEthMetaStrategy.InitialiseConfig",
          "name": "initConfig",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x32879eeba2e11c4d48ee673bf564215dd5012a2339f55f0ed7bade5ec6c9c1a1",
  "receipt": {
    "to": null,
    "from": "0xFD9E6005187F448957a0972a7d0C0A6dA2911236",
    "contractAddress": "0xA52C14701f7ad3E7B70D05078AE2ebE3Fd283449",
    "transactionIndex": 71,
    "gasUsed": "3164240",
    "logsBloom": "0x
    "blockHash": "0x17ae49f5ba9b1a9839781fe069f6f54dadd6f675e2db4972c731f676f91b4eba",
    "transactionHash": "0x32879eeba2e11c4d48ee673bf564215dd5012a2339f55f0ed7bade5ec6c9c1a1",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 17249893,
        "transactionHash": "0x32879eeba2e11c4d48ee673bf564215dd5012a2339f55f0ed7bade5ec6c9c1a1",
        "address": "0xA52C14701f7ad3E7B70D05078AE2ebE3Fd283449",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd9e6005187f448957a0972a7d0c0a6da2911236"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x17ae49f5ba9b1a9839781fe069f6f54dadd6f675e2db4972c731f676f91b4eba"
      }
    ],
    "blockNumber": 17249893,
    "cumulativeGasUsed": "14384602",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3180b890bce877902c7cf982bc7b2dda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxRewardStaker\",\"outputs\":[{\"internalType\":\"contract IRewardStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"curvePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cvxDepositorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cvxRewardStakerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePoolLpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cvxDepositorPTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct ConvexEthMetaStrategy.InitialiseConfig\",\"name\":\"initConfig\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"details\":\"Get the total asset value held in the platform\",\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated CRV and CVX and send to Harvester.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into the Curve ETH pool\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_weth\":\"Address of WETH\"}},\"depositAll()\":{\"details\":\"Deposit the entire balance of any supported asset into the Curve 3pool\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"initialize(address[],address[],address[],(address,address,address,address,address,address,address,uint256))\":{\"params\":{\"_assets\":\"Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                WETH\",\"_rewardTokenAddresses\":\"Address of CRV & CVX\",\"initConfig\":\"Various addresses and info for initialization state\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from Curve ETH pool\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\",\"_weth\":\"Address of asset to withdraw\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address[],address[],address[],(address,address,address,address,address,address,address,uint256))\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/ConvexEthMetaStrategy.sol\":\"ConvexEthMetaStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x1b2af4d111ebd49acdbdfb4817b90bff752a453576d4e0b03dd5e5954f236c1b\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xb05bdc712c2661e92e351ae0823f0c8fca4249e6cbb43e78b96fafc290bee198\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x05b7dce6c24d3cd4e48b5c6346d86e5e40ecc3291bcdf3f3ef091c98fc826519\",\"license\":\"MIT\"},\"contracts/strategies/ConvexEthMetaStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Curve 3Pool Strategy\\n * @notice Investment strategy for investing stablecoins via Curve 3Pool\\n * @author Origin Protocol Inc\\n */\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { ICurveETHPoolV1 } from \\\"./ICurveETHPoolV1.sol\\\";\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IWETH9 } from \\\"../interfaces/IWETH9.sol\\\";\\nimport { IConvexDeposits } from \\\"./IConvexDeposits.sol\\\";\\nimport { IRewardStaking } from \\\"./IRewardStaking.sol\\\";\\n\\ncontract ConvexEthMetaStrategy is InitializableAbstractStrategy {\\n    using StableMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant MAX_SLIPPAGE = 1e16; // 1%, same as the Curve UI\\n    address internal constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal cvxDepositorAddress;\\n    IRewardStaking public cvxRewardStaker;\\n    uint256 internal cvxDepositorPTokenId;\\n    ICurveETHPoolV1 internal curvePool;\\n    IERC20 internal lpToken;\\n    IERC20 internal oeth;\\n    IWETH9 internal weth;\\n    // Ordered list of pool assets\\n    uint128 internal oethCoinIndex;\\n    uint128 internal ethCoinIndex;\\n\\n    // used to circumvent the stack too deep issue\\n    struct InitialiseConfig {\\n        address curvePoolAddress; //Address of the Curve pool\\n        address vaultAddress; //Address of the vault\\n        address cvxDepositorAddress; //Address of the Convex depositor(AKA booster) for this pool\\n        address oethAddress; //Address of OETH token\\n        address wethAddress; //Address of WETH token\\n        address cvxRewardStakerAddress; //Address of the CVX rewards staker\\n        address curvePoolLpToken; //Address of metapool LP token\\n        uint256 cvxDepositorPTokenId; //Pid of the pool referred to by Depositor and staker\\n    }\\n\\n    /**\\n     * Initializer for setting up strategy internal state. This overrides the\\n     * InitializableAbstractStrategy initializer as Curve strategies don't fit\\n     * well within that abstraction.\\n     * @param _rewardTokenAddresses Address of CRV & CVX\\n     * @param _assets Addresses of supported assets. MUST be passed in the same\\n     *                order as returned by coins on the pool contract, i.e.\\n     *                WETH\\n     * @param initConfig Various addresses and info for initialization state\\n     */\\n    function initialize(\\n        address[] calldata _rewardTokenAddresses, // CRV + CVX\\n        address[] calldata _assets,\\n        address[] calldata _pTokens,\\n        InitialiseConfig calldata initConfig\\n    ) external onlyGovernor initializer {\\n        require(_assets.length == 1, \\\"Must have exactly one asset\\\");\\n        // Should be set prior to abstract initialize call otherwise\\n        // abstractSetPToken calls will fail\\n        cvxDepositorAddress = initConfig.cvxDepositorAddress;\\n        cvxRewardStaker = IRewardStaking(initConfig.cvxRewardStakerAddress);\\n        cvxDepositorPTokenId = initConfig.cvxDepositorPTokenId;\\n        lpToken = IERC20(initConfig.curvePoolLpToken);\\n        curvePool = ICurveETHPoolV1(initConfig.curvePoolAddress);\\n        oeth = IERC20(initConfig.oethAddress);\\n        weth = IWETH9(initConfig.wethAddress);\\n        ethCoinIndex = uint128(_getCoinIndex(ETH_ADDRESS));\\n        oethCoinIndex = uint128(_getCoinIndex(initConfig.oethAddress));\\n\\n        super._initialize(\\n            initConfig.curvePoolAddress,\\n            initConfig.vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n\\n        /* needs to be called after super._initialize so that the platformAddress\\n         * is correctly set\\n         */\\n        _approveBase();\\n    }\\n\\n    /**\\n     * @dev Deposit asset into the Curve ETH pool\\n     * @param _weth Address of WETH\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _weth, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        _deposit(_weth, _amount);\\n    }\\n\\n    // slither-disable-next-line arbitrary-send-eth\\n    function _deposit(address _weth, uint256 _wethAmount) internal {\\n        require(_wethAmount > 0, \\\"Must deposit something\\\");\\n        require(_weth == address(weth), \\\"Can only deposit WETH\\\");\\n        weth.withdraw(_wethAmount);\\n\\n        emit Deposit(_weth, address(lpToken), _wethAmount);\\n\\n        // safe to cast since min value is at least 0\\n        uint256 oethToAdd = uint256(\\n            _max(\\n                0,\\n                int256(curvePool.balances(ethCoinIndex)) +\\n                    int256(_wethAmount) -\\n                    int256(curvePool.balances(oethCoinIndex))\\n            )\\n        );\\n\\n        /* Add so much OETH so that the pool ends up being balanced. And at minimum\\n         * add as much OETH as WETH and at maximum twice as much OETH.\\n         */\\n        oethToAdd = Math.max(oethToAdd, _wethAmount);\\n        oethToAdd = Math.min(oethToAdd, _wethAmount * 2);\\n\\n        /* Mint OETH with a strategy that attempts to contribute to stability of OETH/WETH pool. Try\\n         * to mint so much OETH that after deployment of liquidity pool ends up being balanced.\\n         *\\n         * To manage unpredictability minimal OETH minted will always be at least equal or greater\\n         * to WETH amount deployed. And never larger than twice the WETH amount deployed even if\\n         * it would have a further beneficial effect on pool stability.\\n         */\\n        IVault(vaultAddress).mintForStrategy(oethToAdd);\\n\\n        uint256[2] memory _amounts;\\n        _amounts[ethCoinIndex] = _wethAmount;\\n        _amounts[oethCoinIndex] = oethToAdd;\\n\\n        uint256 valueInLpTokens = (_wethAmount + oethToAdd).divPrecisely(\\n            curvePool.get_virtual_price()\\n        );\\n        uint256 minMintAmount = valueInLpTokens.mulTruncate(\\n            uint256(1e18) - MAX_SLIPPAGE\\n        );\\n\\n        // Do the deposit to Curve ETH pool\\n        // slither-disable-next-line arbitrary-send-eth\\n        uint256 lpDeposited = curvePool.add_liquidity{ value: _wethAmount }(\\n            _amounts,\\n            minMintAmount\\n        );\\n\\n        require(\\n            // slither-disable-next-line arbitrary-send-eth\\n            IConvexDeposits(cvxDepositorAddress).deposit(\\n                cvxDepositorPTokenId,\\n                lpDeposited,\\n                true // Deposit with staking\\n            ),\\n            \\\"Depositing LP to Convex not successful\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Deposit the entire balance of any supported asset into the Curve 3pool\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        uint256 balance = weth.balanceOf(address(this));\\n        if (balance > 0) {\\n            _deposit(address(weth), balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw asset from Curve ETH pool\\n     * @param _recipient Address to receive withdrawn asset\\n     * @param _weth Address of asset to withdraw\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _weth,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        require(_weth == address(weth), \\\"Can only withdraw WETH\\\");\\n\\n        emit Withdrawal(_weth, address(lpToken), _amount);\\n\\n        uint256 requiredLpTokens = calcTokenToBurn(_amount);\\n\\n        _lpWithdraw(requiredLpTokens);\\n\\n        /* math in requiredLpTokens should correctly calculate the amount of LP to remove\\n         * in that the strategy receives enough WETH on balanced removal\\n         */\\n        uint256[2] memory _minWithdrawalAmounts = [uint256(0), uint256(0)];\\n        _minWithdrawalAmounts[ethCoinIndex] = _amount;\\n        // slither-disable-next-line unused-return\\n        curvePool.remove_liquidity(requiredLpTokens, _minWithdrawalAmounts);\\n\\n        // Burn OETH\\n        IVault(vaultAddress).burnForStrategy(oeth.balanceOf(address(this)));\\n        // Transfer WETH\\n        weth.deposit{ value: _amount }();\\n        require(\\n            weth.transfer(_recipient, _amount),\\n            \\\"Transfer of WETH not successful\\\"\\n        );\\n    }\\n\\n    function calcTokenToBurn(uint256 _wethAmount)\\n        internal\\n        view\\n        returns (uint256 lpToBurn)\\n    {\\n        /* The rate between coins in the pool determines the rate at which pool returns\\n         * tokens when doing balanced removal (remove_liquidity call). And by knowing how much WETH\\n         * we want we can determine how much of OETH we receive by removing liquidity.\\n         *\\n         * Because we are doing balanced removal we should be making profit when removing liquidity in a\\n         * pool tilted to either side.\\n         *\\n         * Important: A downside is that the Strategist / Governor needs to be\\n         * cognisant of not removing too much liquidity. And while the proposal to remove liquidity\\n         * is being voted on the pool tilt might change so much that the proposal that has been valid while\\n         * created is no longer valid.\\n         */\\n\\n        uint256 poolWETHBalance = curvePool.balances(ethCoinIndex);\\n        /* K is multiplied by 1e36 which is used for higher precision calculation of required\\n         * pool LP tokens. Without it the end value can have rounding errors up to precision of\\n         * 10 digits. This way we move the decimal point by 36 places when doing the calculation\\n         * and again by 36 places when we are done with it.\\n         */\\n        uint256 k = (1e36 * lpToken.totalSupply()) / poolWETHBalance;\\n        // prettier-ignore\\n        // slither-disable-next-line divide-before-multiply\\n        uint256 diff = (_wethAmount + 1) * k;\\n        lpToBurn = diff / 1e36;\\n    }\\n\\n    /**\\n     * @dev Remove all assets from platform and send them to Vault contract.\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        uint256 gaugeTokens = cvxRewardStaker.balanceOf(address(this));\\n        _lpWithdraw(gaugeTokens);\\n\\n        // Withdraws are proportional to assets held by 3Pool\\n        uint256[2] memory minWithdrawAmounts = [uint256(0), uint256(0)];\\n\\n        // Remove liquidity\\n        // slither-disable-next-line unused-return\\n        curvePool.remove_liquidity(\\n            lpToken.balanceOf(address(this)),\\n            minWithdrawAmounts\\n        );\\n\\n        // Burn all OETH\\n        uint256 oethBalance = oeth.balanceOf(address(this));\\n        IVault(vaultAddress).burnForStrategy(oethBalance);\\n\\n        // Send all ETH and WETH on the contract, including extra\\n        weth.deposit{ value: address(this).balance }();\\n        require(\\n            weth.transfer(vaultAddress, weth.balanceOf(address(this))),\\n            \\\"Transfer of WETH not successful\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Collect accumulated CRV and CVX and send to Harvester.\\n     */\\n    function collectRewardTokens()\\n        external\\n        override\\n        onlyHarvester\\n        nonReentrant\\n    {\\n        // Collect CRV and CVX\\n        cvxRewardStaker.getReward();\\n        _collectRewardTokens();\\n    }\\n\\n    function _lpWithdraw(uint256 _wethAmount) internal {\\n        // withdraw and unwrap with claim takes back the lpTokens\\n        // and also collects the rewards for deposit\\n        cvxRewardStaker.withdrawAndUnwrap(_wethAmount, true);\\n    }\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        public\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        require(_asset == address(weth), \\\"Unsupported asset\\\");\\n\\n        // Eth balance needed here for the balance check that happens from vault during depositing.\\n        balance += address(this).balance;\\n        uint256 lpTokens = cvxRewardStaker.balanceOf(address(this));\\n        if (lpTokens > 0) {\\n            balance += (lpTokens * curvePool.get_virtual_price()) / 1e18;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _asset == address(weth);\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets by their corresponding pool tokens,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens()\\n        external\\n        override\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        _approveAsset(address(weth));\\n        _approveAsset(address(oeth));\\n    }\\n\\n    /**\\n     * @dev Accept unwrapped WETH\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Call the necessary approvals for the Curve pool and gauge\\n     * @param _asset Address of the asset\\n     */\\n    // solhint-disable-next-line no-unused-vars\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        override\\n    {\\n        _approveAsset(_asset);\\n    }\\n\\n    function _approveAsset(address _asset) internal {\\n        // approve curve pool for asset (required for adding liquidity)\\n        IERC20(_asset).safeApprove(platformAddress, type(uint256).max);\\n    }\\n\\n    function _approveBase() internal {\\n        // WETH was approved as a supported asset,\\n        // so we need seperate OETH approve\\n        _approveAsset(address(oeth));\\n        lpToken.safeApprove(cvxDepositorAddress, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Get the index of the coin\\n     */\\n    function _getCoinIndex(address _asset) internal view returns (uint256) {\\n        for (uint256 i = 0; i < 2; i++) {\\n            if (curvePool.coins(i) == _asset) return i;\\n        }\\n        revert(\\\"Invalid curve pool asset\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers int256 version\\n     */\\n    function _max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x7635f76a93bc2249c12e5fae968e36b9d8fa4df5e6463a29a4fdb3af5c650e68\",\"license\":\"MIT\"},\"contracts/strategies/IConvexDeposits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IConvexDeposits {\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function deposit(\\n        uint256 _amount,\\n        bool _lock,\\n        address _stakeAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0x64aea0c4523e4d34b6e62dba72e160d07247a41874faf1479344e7c6728059d9\",\"license\":\"MIT\"},\"contracts/strategies/ICurveETHPoolV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurveETHPoolV1 {\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event ApplyNewFee(uint256 fee);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event CommitNewFee(uint256 new_fee);\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] token_amounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 token_amount,\\n        uint256 coin_amount,\\n        uint256 token_supply\\n    );\\n    event StopRampA(uint256 A, uint256 t);\\n    event TokenExchange(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event Transfer(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 value\\n    );\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory _amounts,\\n        uint256 _min_mint_amount,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function admin_action_deadline() external view returns (uint256);\\n\\n    function admin_balances(uint256 i) external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function allowance(address arg0, address arg1)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function apply_new_fee() external;\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function balances(uint256 arg0) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function commit_new_fee(uint256 _new_fee) external;\\n\\n    function decimals() external view returns (uint256);\\n\\n    function ema_price() external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function future_A() external view returns (uint256);\\n\\n    function future_A_time() external view returns (uint256);\\n\\n    function future_fee() external view returns (uint256);\\n\\n    function get_balances() external view returns (uint256[2] memory);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_p() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function initial_A() external view returns (uint256);\\n\\n    function initial_A_time() external view returns (uint256);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address[4] memory _coins,\\n        uint256[4] memory _rate_multipliers,\\n        uint256 _A,\\n        uint256 _fee\\n    ) external;\\n\\n    function last_price() external view returns (uint256);\\n\\n    function ma_exp_time() external view returns (uint256);\\n\\n    function ma_last_time() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address arg0) external view returns (uint256);\\n\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (bool);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function ramp_A(uint256 _future_A, uint256 _future_time) external;\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts,\\n        address _receiver\\n    ) external returns (uint256[2] memory);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function set_ma_exp_time(uint256 _ma_exp_time) external;\\n\\n    function stop_ramp_A() external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function withdraw_admin_fees() external;\\n}\\n\",\"keccak256\":\"0xa26bdc77c97b91c9fb2272200f83de0220dd8bb7c25deef2586ba062503ab794\",\"license\":\"MIT\"},\"contracts/strategies/IRewardStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardStaking {\\n    function stakeFor(address, uint256) external;\\n\\n    function stake(uint256) external;\\n\\n    function withdraw(uint256 amount, bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function extraRewardsLength() external returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external returns (address);\\n\\n    function rewardToken() external returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf9eea30160579cc46f5255db068cf7bfd4a29008b19827b63038d5fbe6994c99\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xed91beae8c271cd70d80a9fce9306f1c46b8437cdd1d78ed9b75c067961e5259\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    // Core address for the given platform\\n    address public platformAddress;\\n\\n    address public vaultAddress;\\n\\n    // asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    // Full list of all assets supported here\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address public _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\n\\n    // Address of the one address allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    // Reward token addresses\\n    address[] public rewardTokenAddresses;\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _platformAddress Generic platform address\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    function _collectRewardTokens() internal {\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            emit RewardTokenCollected(\\n                harvesterAddress,\\n                rewardTokenAddresses[i],\\n                balance\\n            );\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _rewardTokenAddresses Address array of the reward token\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _harvesterAddress Address of the harvester\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        harvesterAddress = _harvesterAddress;\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @dev Deposit an amount of asset into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @dev Deposit balance of all supported assets into the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the platform.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @dev Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x8cfd066b698f802b7cd26efe762047471e5297f37fb4983f8bda6da5b211782c\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80639136616a116100ec578063d38bfff41161008a578063de5f626811610064578063de5f6268146104e7578063f6ca71b0146104fc578063f817bc631461051e578063fa05f8181461053457600080fd5b8063d38bfff414610487578063d9caed12146104a7578063dbe55e56146104c757600080fd5b8063aa388af6116100c6578063aa388af6146103fe578063ad1728cb1461043d578063c2e1e3f414610452578063c7af33521461047257600080fd5b80639136616a1461039e5780639688d2fc146103be57806396d538bb146103de57600080fd5b806347e7ef24116101595780635f515226116101335780635f5152261461031b57806367c7066c146103495780637b2d9b2c14610369578063853828b61461038957600080fd5b806347e7ef24146102d15780635a063f63146102f15780635d36b1901461030657600080fd5b80630fc3b4c4116101955780630fc3b4c41461023b5780631072cbea146102715780632e65520114610291578063430bf08a146102b157600080fd5b8063046832b4146101c75780630c340a24146102045780630ed57b3a1461021957600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b50609e546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021057600080fd5b506101e7610554565b34801561022557600080fd5b50610239610234366004613009565b610571565b005b34801561024757600080fd5b506101e7610256366004612fcf565b6035602052600090815260409020546001600160a01b031681565b34801561027d57600080fd5b5061023961028c366004613142565b6105ac565b34801561029d57600080fd5b506037546101e7906001600160a01b031681565b3480156102bd57600080fd5b506034546101e7906001600160a01b031681565b3480156102dd57600080fd5b506102396102ec366004613142565b6105ec565b3480156102fd57600080fd5b5061023961065f565b34801561031257600080fd5b50610239610766565b34801561032757600080fd5b5061033b610336366004612fcf565b61080c565b6040519081526020016101fb565b34801561035557600080fd5b506039546101e7906001600160a01b031681565b34801561037557600080fd5b506101e7610384366004613312565b61099e565b34801561039557600080fd5b506102396109c8565b3480156103aa57600080fd5b506102396103b9366004613312565b610ebc565b3480156103ca57600080fd5b506102396103d9366004613042565b611087565b3480156103ea57600080fd5b506102396103f936600461316e565b611190565b34801561040a57600080fd5b5061042d610419366004612fcf565b60a3546001600160a01b0391821691161490565b60405190151581526020016101fb565b34801561044957600080fd5b506102396112b6565b34801561045e57600080fd5b5061023961046d366004612fcf565b61133a565b34801561047e57600080fd5b5061042d6113b9565b34801561049357600080fd5b506102396104a2366004612fcf565b6113ea565b3480156104b357600080fd5b506102396104c2366004613101565b61148e565b3480156104d357600080fd5b506033546101e7906001600160a01b031681565b3480156104f357600080fd5b506102396118c8565b34801561050857600080fd5b506105116119ca565b6040516101fb9190613389565b34801561052a57600080fd5b5061033b60385481565b34801561054057600080fd5b5061023961054f3660046131b0565b611a2c565b600061056c6000805160206137798339815191525490565b905090565b6105796113b9565b61059e5760405162461bcd60e51b8152600401610595906134f3565b60405180910390fd5b6105a88282611d45565b5050565b6105b46113b9565b6105d05760405162461bcd60e51b8152600401610595906134f3565b6105a86105db610554565b6001600160a01b0384169083611eaa565b6034546001600160a01b031633146106165760405162461bcd60e51b8152600401610595906134bc565b600080516020613759833981519152805460028114156106485760405162461bcd60e51b815260040161059590613578565b600282556106568484611f0d565b50600190555050565b6039546001600160a01b031633146106b95760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610595565b600080516020613759833981519152805460028114156106eb5760405162461bcd60e51b815260040161059590613578565b60028255609e60009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561073f57600080fd5b505af1158015610753573d6000803e3d6000fd5b5050505061075f6124aa565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146108015760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610595565b61080a33612605565b565b60a3546000906001600160a01b038381169116146108605760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b6044820152606401610595565b61086a47826135f5565b609e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156108b357600080fd5b505afa1580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb919061332b565b905080156109985760a05460408051630176f71760e71b81529051670de0b6b3a7640000926001600160a01b03169163bb7b8b80916004808301926020929190829003018186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610977919061332b565b610981908361362f565b61098b919061360d565b61099590836135f5565b91505b50919050565b603a81815481106109ae57600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b03163314806109f957506109e4610554565b6001600160a01b0316336001600160a01b0316145b610a515760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610595565b60008051602061375983398151915280546002811415610a835760405162461bcd60e51b815260040161059590613578565b60028255609e546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610acb57600080fd5b505afa158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b03919061332b565b9050610b0e816126c6565b6040805180820182526000808252602082015260a05460a15492516370a0823160e01b815230600482015291926001600160a01b0391821692635b36389c92909116906370a082319060240160206040518083038186803b158015610b7257600080fd5b505afa158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa919061332b565b836040518363ffffffff1660e01b8152600401610bc89291906135a0565b6040805180830381600087803b158015610be157600080fd5b505af1158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190613268565b5060a2546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610c5e57600080fd5b505afa158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c96919061332b565b60345460405163310bf9f560e11b8152600481018390529192506001600160a01b031690636217f3ea90602401600060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b5050505060a360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505060a3546034546040516370a0823160e01b81523060048201526001600160a01b03928316955063a9059cbb94509116915083906370a082319060240160206040518083038186803b158015610daf57600080fd5b505afa158015610dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de7919061332b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6591906132f0565b610eb15760405162461bcd60e51b815260206004820152601f60248201527f5472616e73666572206f662057455448206e6f74207375636365737366756c006044820152606401610595565b505050600182555050565b610ec46113b9565b610ee05760405162461bcd60e51b8152600401610595906134f3565b6036548110610f215760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610595565b600060368281548110610f3657610f36613717565b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690610f739060019061368d565b831015610ff55760368054610f8a9060019061368d565b81548110610f9a57610f9a613717565b600091825260209091200154603680546001600160a01b039092169185908110610fc657610fc6613717565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061100657611006613701565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b61108f6113b9565b6110ab5760405162461bcd60e51b8152600401610595906134f3565b600054610100900460ff16806110c4575060005460ff16155b6110e05760405162461bcd60e51b81526004016105959061352a565b600054610100900460ff16158015611102576000805461ffff19166101011790555b6111738989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061272e92505050565b8015611185576000805461ff00191690555b505050505050505050565b6111986113b9565b6111b45760405162461bcd60e51b8152600401610595906134f3565b60005b818110156112685760008383838181106111d3576111d3613717565b90506020020160208101906111e89190612fcf565b6001600160a01b031614156112565760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610595565b80611260816136d0565b9150506111b7565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161129d939291906133d6565b60405180910390a16112b1603a8383612eed565b505050565b6112be6113b9565b6112da5760405162461bcd60e51b8152600401610595906134f3565b6000805160206137598339815191528054600281141561130c5760405162461bcd60e51b815260040161059590613578565b6002825560a354611325906001600160a01b031661280d565b60a25461075f906001600160a01b031661280d565b6113426113b9565b61135e5760405162461bcd60e51b8152600401610595906134f3565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60006113d16000805160206137798339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6113f26113b9565b61140e5760405162461bcd60e51b8152600401610595906134f3565b611436817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166114566000805160206137798339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146114b85760405162461bcd60e51b8152600401610595906134bc565b600080516020613759833981519152805460028114156114ea5760405162461bcd60e51b815260040161059590613578565b600282556000831161152f5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610595565b60a3546001600160a01b038581169116146115855760405162461bcd60e51b8152602060048201526016602482015275086c2dc40dedcd8f240eed2e8d0c8e4c2ee40ae8aa8960531b6044820152606401610595565b60a154604080516001600160a01b03928316815260208101869052918616917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a260006115da84612829565b90506115e5816126c6565b604080518082019091526000808252602082015260a45485908290600160801b90046001600160801b03166002811061162057611620613717565b602002015260a0546040516316cd8e2760e21b81526001600160a01b0390911690635b36389c9061165790859085906004016135a0565b6040805180830381600087803b15801561167057600080fd5b505af1158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a89190613268565b5060345460a2546040516370a0823160e01b81523060048201526001600160a01b0392831692636217f3ea9216906370a082319060240160206040518083038186803b1580156116f757600080fd5b505afa15801561170b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172f919061332b565b6040518263ffffffff1660e01b815260040161174d91815260200190565b600060405180830381600087803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b5050505060a360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117cf57600080fd5b505af11580156117e3573d6000803e3d6000fd5b505060a35460405163a9059cbb60e01b81526001600160a01b038c81166004830152602482018b9052909116935063a9059cbb92506044019050602060405180830381600087803b15801561183757600080fd5b505af115801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f91906132f0565b6118bb5760405162461bcd60e51b815260206004820152601f60248201527f5472616e73666572206f662057455448206e6f74207375636365737366756c006044820152606401610595565b5050600182555050505050565b6034546001600160a01b031633146118f25760405162461bcd60e51b8152600401610595906134bc565b600080516020613759833981519152805460028114156119245760405162461bcd60e51b815260040161059590613578565b6002825560a3546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561196c57600080fd5b505afa158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a4919061332b565b905080156119c25760a3546119c2906001600160a01b031682611f0d565b505060019055565b6060603a805480602002602001604051908101604052809291908181526020018280548015611a2257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a04575b5050505050905090565b611a346113b9565b611a505760405162461bcd60e51b8152600401610595906134f3565b600054610100900460ff1680611a69575060005460ff16155b611a855760405162461bcd60e51b81526004016105959061352a565b600054610100900460ff16158015611aa7576000805461ffff19166101011790555b60018514611af75760405162461bcd60e51b815260206004820152601b60248201527f4d75737420686176652065786163746c79206f6e6520617373657400000000006044820152606401610595565b611b076060830160408401612fcf565b609d80546001600160a01b0319166001600160a01b0392909216919091179055611b3760c0830160a08401612fcf565b609e80546001600160a01b0319166001600160a01b039290921691909117905560e082018035609f55611b6d9060c08401612fcf565b60a180546001600160a01b0319166001600160a01b0392909216919091179055611b9a6020830183612fcf565b60a080546001600160a01b0319166001600160a01b0392909216919091179055611bca6080830160608401612fcf565b60a280546001600160a01b0319166001600160a01b0392909216919091179055611bfa60a0830160808401612fcf565b60a380546001600160a01b0319166001600160a01b0392909216919091179055611c3773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6129a8565b60a480546001600160801b03928316600160801b029216919091179055611c6c611c676080840160608501612fcf565b6129a8565b60a480546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055611d21611ca56020840184612fcf565b611cb56040850160208601612fcf565b8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525061272e92505050565b611d29612aa3565b8015611d3b576000805461ff00191690555b5050505050505050565b6001600160a01b038281166000908152603560205260409020541615611da25760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610595565b6001600160a01b03821615801590611dc257506001600160a01b03811615155b611e025760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610595565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26105a88282612ad7565b6040516001600160a01b0383166024820152604481018290526112b190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ae0565b60008111611f565760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610595565b60a3546001600160a01b03838116911614611fab5760405162461bcd60e51b8152602060048201526015602482015274086c2dc40dedcd8f240c8cae0dee6d2e840ae8aa89605b1b6044820152606401610595565b60a354604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015611ff157600080fd5b505af1158015612005573d6000803e3d6000fd5b505060a154604080516001600160a01b0392831681526020810186905291861693507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6292500160405180910390a260a05460a454604051634903b0d160e01b81526001600160801b0390911660048201526000916121899183916001600160a01b031690634903b0d19060240160206040518083038186803b1580156120aa57600080fd5b505afa1580156120be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e2919061332b565b60a05460a454604051634903b0d160e01b8152600160801b9091046001600160801b0316600482015286916001600160a01b031690634903b0d19060240160206040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612170919061332b565b61217a91906135b4565b612184919061364e565b612bb2565b90506121958183612bcb565b90506121ab816121a684600261362f565b612bdb565b60345460405163ab80dafb60e01b8152600481018390529192506001600160a01b03169063ab80dafb90602401600060405180830381600087803b1580156121f257600080fd5b505af1158015612206573d6000803e3d6000fd5b50505050612212612f50565b60a45483908290600160801b90046001600160801b03166002811061223957612239613717565b602002015260a454829082906001600160801b03166002811061225e5761225e613717565b602002018181525050600061230260a060009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ba57600080fd5b505afa1580156122ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f2919061332b565b6122fc85876135f5565b90612bea565b90506000612329612322662386f26fc10000670de0b6b3a764000061368d565b8390612c13565b60a054604051630b4c7e4d60e01b81529192506000916001600160a01b0390911690630b4c7e4d908890612363908890879060040161346e565b6020604051808303818588803b15801561237c57600080fd5b505af1158015612390573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123b5919061332b565b609d54609f546040516321d0683360e11b8152600481019190915260248101839052600160448201529192506001600160a01b0316906343a0d06690606401602060405180830381600087803b15801561240e57600080fd5b505af1158015612422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244691906132f0565b6124a15760405162461bcd60e51b815260206004820152602660248201527f4465706f736974696e67204c5020746f20436f6e766578206e6f742073756363604482015265195cdcd99d5b60d21b6064820152608401610595565b50505050505050565b60005b603a54811015612602576000603a82815481106124cc576124cc613717565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561251a57600080fd5b505afa15801561252e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612552919061332b565b603954603a80549293507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353926001600160a01b03909216918690811061259a5761259a613717565b60009182526020918290200154604080516001600160a01b0394851681529390911691830191909152810183905260600160405180910390a16039546125ed906001600160a01b03848116911683611eaa565b505080806125fa906136d0565b9150506124ad565b50565b6001600160a01b03811661265b5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610595565b806001600160a01b031661267b6000805160206137798339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36126028160008051602061377983398151915255565b609e54604051636197390160e11b815260048101839052600160248201526001600160a01b039091169063c32e720290604401600060405180830381600087803b15801561271357600080fd5b505af1158015612727573d6000803e3d6000fd5b5050505050565b603380546001600160a01b038089166001600160a01b031992831617909255603480549288169290911691909117905561276a603a8585612eed565b508151815181146127b45760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610595565b60005b81811015611d3b576127fb8482815181106127d4576127d4613717565b60200260200101518483815181106127ee576127ee613717565b6020026020010151611d45565b80612805816136d0565b9150506127b7565b603354612602906001600160a01b038381169116600019612c28565b60a05460a454604051634903b0d160e01b8152600160801b9091046001600160801b0316600482015260009182916001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561288457600080fd5b505afa158015612898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bc919061332b565b905060008160a160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561290f57600080fd5b505afa158015612923573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612947919061332b565b612960906ec097ce7bc90715b34b9f100000000061362f565b61296a919061360d565b905060008161297a8660016135f5565b612984919061362f565b905061299f6ec097ce7bc90715b34b9f10000000008261360d565b95945050505050565b6000805b6002811015612a5a5760a05460405163c661065760e01b8152600481018390526001600160a01b0385811692169063c66106579060240160206040518083038186803b1580156129fb57600080fd5b505afa158015612a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a339190612fec565b6001600160a01b03161415612a485792915050565b80612a52816136d0565b9150506129ac565b5060405162461bcd60e51b815260206004820152601860248201527f496e76616c696420637572766520706f6f6c20617373657400000000000000006044820152606401610595565b60a254612ab8906001600160a01b031661280d565b609d5460a15461080a916001600160a01b039182169116600019612c28565b6105a88261280d565b6000612b35826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d4c9092919063ffffffff16565b8051909150156112b15780806020019051810190612b5391906132f0565b6112b15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610595565b600081831215612bc25781612bc4565b825b9392505050565b600081831015612bc25781612bc4565b6000818310612bc25781612bc4565b600080612bff84670de0b6b3a7640000612d5b565b9050612c0b8184612d67565b949350505050565b6000612bc48383670de0b6b3a7640000612d73565b801580612cb15750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612c7757600080fd5b505afa158015612c8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612caf919061332b565b155b612d1c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610595565b6040516001600160a01b0383166024820152604481018290526112b190849063095ea7b360e01b90606401611ed6565b6060612c0b8484600085612d8c565b6000612bc4828461362f565b6000612bc4828461360d565b600080612d808585612d5b565b905061299f8184612d67565b606082471015612ded5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610595565b843b612e3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610595565b600080866001600160a01b03168587604051612e57919061336d565b60006040518083038185875af1925050503d8060008114612e94576040519150601f19603f3d011682016040523d82523d6000602084013e612e99565b606091505b5091509150612ea9828286612eb4565b979650505050505050565b60608315612ec3575081612bc4565b825115612ed35782518084602001fd5b8160405162461bcd60e51b81526004016105959190613489565b828054828255906000526020600020908101928215612f40579160200282015b82811115612f405781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612f0d565b50612f4c929150612f6e565b5090565b60405180604001604052806002906020820280368337509192915050565b5b80821115612f4c5760008155600101612f6f565b60008083601f840112612f9557600080fd5b50813567ffffffffffffffff811115612fad57600080fd5b6020830191508360208260051b8501011115612fc857600080fd5b9250929050565b600060208284031215612fe157600080fd5b8135612bc481613743565b600060208284031215612ffe57600080fd5b8151612bc481613743565b6000806040838503121561301c57600080fd5b823561302781613743565b9150602083013561303781613743565b809150509250929050565b60008060008060008060008060a0898b03121561305e57600080fd5b883561306981613743565b9750602089013561307981613743565b9650604089013567ffffffffffffffff8082111561309657600080fd5b6130a28c838d01612f83565b909850965060608b01359150808211156130bb57600080fd5b6130c78c838d01612f83565b909650945060808b01359150808211156130e057600080fd5b506130ed8b828c01612f83565b999c989b5096995094979396929594505050565b60008060006060848603121561311657600080fd5b833561312181613743565b9250602084013561313181613743565b929592945050506040919091013590565b6000806040838503121561315557600080fd5b823561316081613743565b946020939093013593505050565b6000806020838503121561318157600080fd5b823567ffffffffffffffff81111561319857600080fd5b6131a485828601612f83565b90969095509350505050565b60008060008060008060008789036101608112156131cd57600080fd5b883567ffffffffffffffff808211156131e557600080fd5b6131f18c838d01612f83565b909a50985060208b013591508082111561320a57600080fd5b6132168c838d01612f83565b909850965060408b013591508082111561322f57600080fd5b5061323c8b828c01612f83565b909550935050610100605f198201121561325557600080fd5b5060608801905092959891949750929550565b60006040828403121561327a57600080fd5b82601f83011261328957600080fd5b6040516040810181811067ffffffffffffffff821117156132ac576132ac61372d565b80604052508083856040860111156132c357600080fd5b60005b60028110156132e55781518352602092830192909101906001016132c6565b509195945050505050565b60006020828403121561330257600080fd5b81518015158114612bc457600080fd5b60006020828403121561332457600080fd5b5035919050565b60006020828403121561333d57600080fd5b5051919050565b8060005b6002811015613367578151845260209384019390910190600101613348565b50505050565b6000825161337f8184602087016136a4565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156133ca5783516001600160a01b0316835292840192918401916001016133a5565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156134205781546001600160a01b0316845292840192600191820191016133fb565b505050838103828501528481528590820160005b8681101561346257823561344781613743565b6001600160a01b031682529183019190830190600101613434565b50979650505050505050565b6060810161347c8285613344565b8260408301529392505050565b60208152600082518060208401526134a88160408501602087016136a4565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b82815260608101612bc46020830184613344565b600080821280156001600160ff1b03849003851316156135d6576135d66136eb565b600160ff1b83900384128116156135ef576135ef6136eb565b50500190565b60008219821115613608576136086136eb565b500190565b60008261362a57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613649576136496136eb565b500290565b60008083128015600160ff1b85018412161561366c5761366c6136eb565b6001600160ff1b0384018313811615613687576136876136eb565b50500390565b60008282101561369f5761369f6136eb565b500390565b60005b838110156136bf5781810151838201526020016136a7565b838111156133675750506000910152565b60006000198214156136e4576136e46136eb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461260257600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212202ad24fc65e876b45c47a6b6360ff4b7c4e0a806155d521580aa4dbd2b4d50fb764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "details": "Get the total asset value held in the platform",
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated CRV and CVX and send to Harvester."
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into the Curve ETH pool",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_weth": "Address of WETH"
        }
      },
      "depositAll()": {
        "details": "Deposit the entire balance of any supported asset into the Curve 3pool"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "initialize(address[],address[],address[],(address,address,address,address,address,address,address,uint256))": {
        "params": {
          "_assets": "Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                WETH",
          "_rewardTokenAddresses": "Address of CRV & CVX",
          "initConfig": "Various addresses and info for initialization state"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from Curve ETH pool",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset",
          "_weth": "Address of asset to withdraw"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address[],address[],address[],(address,address,address,address,address,address,address,uint256))": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27105,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 27108,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 27148,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27226,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 27228,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 27232,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 27235,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 27237,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 27239,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 27241,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 27244,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 27248,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 19761,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "cvxDepositorAddress",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 19764,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "cvxRewardStaker",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IRewardStaking)23157"
      },
      {
        "astId": 19766,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "cvxDepositorPTokenId",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 19769,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "curvePool",
        "offset": 0,
        "slot": "160",
        "type": "t_contract(ICurveETHPoolV1)22860"
      },
      {
        "astId": 19772,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "lpToken",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 19775,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "oeth",
        "offset": 0,
        "slot": "162",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 19778,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "weth",
        "offset": 0,
        "slot": "163",
        "type": "t_contract(IWETH9)7354"
      },
      {
        "astId": 19780,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "oethCoinIndex",
        "offset": 0,
        "slot": "164",
        "type": "t_uint128"
      },
      {
        "astId": 19782,
        "contract": "contracts/strategies/ConvexEthMetaStrategy.sol:ConvexEthMetaStrategy",
        "label": "ethCoinIndex",
        "offset": 16,
        "slot": "164",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICurveETHPoolV1)22860": {
        "encoding": "inplace",
        "label": "contract ICurveETHPoolV1",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardStaking)23157": {
        "encoding": "inplace",
        "label": "contract IRewardStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)7354": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
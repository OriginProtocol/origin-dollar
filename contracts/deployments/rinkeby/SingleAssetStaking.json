{
  "address": "0x7d4807556082f2378e33347f42cec4112436c878",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAllStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint240",
              "name": "rate",
              "type": "uint240"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "stakeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct SingleAssetStaking.Stake[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalOutstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_durations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rates",
          "type": "uint256[]"
        }
      ],
      "name": "setDurationRates",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_stakeType",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_rootHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_proofDepth",
          "type": "uint256"
        }
      ],
      "name": "setAirDropRoot",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "airDroppedStake",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "durationRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalCurrentHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        }
      ],
      "name": "airDroppedStakeClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint240",
          "name": "rate",
          "type": "uint240"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "durations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllDurations",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "dropRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_durations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rates",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalExpectedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "yes",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "durations",
          "type": "uint256[]"
        }
      ],
      "name": "NewDurations",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        }
      ],
      "name": "NewRates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stakeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rootHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofDepth",
          "type": "uint256"
        }
      ],
      "name": "NewAirDropRootHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x352fe8bcd9a921fcc31ea177f5f63fa289f6dd62756bddc02fe5abb9605a7fb6",
  "receipt": {
    "to": null,
    "from": "0xD85A569F3C26f81070544451131c742283360400",
    "contractAddress": "0x7d4807556082f2378e33347f42cec4112436c878",
    "transactionIndex": 5,
    "gasUsed": "2447297",
    "logsBloom": "0x
    "blockHash": "0xc0ee751615c51f0eae922f136a4b3ef1417c281733898a57cfd151abd7fef77b",
    "transactionHash": "0x352fe8bcd9a921fcc31ea177f5f63fa289f6dd62756bddc02fe5abb9605a7fb6",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 7733945,
        "transactionHash": "0x352fe8bcd9a921fcc31ea177f5f63fa289f6dd62756bddc02fe5abb9605a7fb6",
        "address": "0x7d4807556082f2378e33347f42cec4112436c878",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d85a569f3c26f81070544451131c742283360400"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc0ee751615c51f0eae922f136a4b3ef1417c281733898a57cfd151abd7fef77b"
      }
    ],
    "blockNumber": 7733945,
    "cumulativeGasUsed": "3207157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "19364863fdc82a67c752b1e7be162d9b",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint240\",\"name\":\"rate\",\"type\":\"uint240\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"}],\"internalType\":\"struct SingleAssetStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"setDurationRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_proofDepth\",\"type\":\"uint256\"}],\"name\":\"setAirDropRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"airDroppedStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"durationRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalCurrentHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"}],\"name\":\"airDroppedStakeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint240\",\"name\":\"rate\",\"type\":\"uint240\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"durations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDurations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"dropRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalExpectedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"durations\",\"type\":\"uint256[]\"}],\"name\":\"NewDurations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"name\":\"NewRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofDepth\",\"type\":\"uint256\"}],\"name\":\"NewAirDropRootHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"airDroppedStake(uint256,uint8,uint256,uint256,uint256,bytes32[])\":{\"details\":\"Make a preapproved stake for the user, this is a presigned voucher that the user can redeem either from     an airdrop or a compensation program.     Only 1 of each type is allowed per user. The proof must match the root hash\",\"params\":{\"amount\":\"Number of tokens to stake in 1e18\",\"duration\":\"Number of seconds this stake will be held for\",\"index\":\"Number that is zero base index of the stake in the payout entry\",\"merkleProof\":\"Array of proofs for that amount\",\"rate\":\"Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 to fit the bool and type in struct Stake\",\"stakeType\":\"Number that represent the type of the stake, must not be 0 which is user stake\"}},\"airDroppedStakeClaimed(address,uint8)\":{\"details\":\"Has the airdropped stake already been claimed\"},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"durationRewardRate(uint256)\":{\"details\":\"Find the rate that corresponds to a given duration\",\"params\":{\"_duration\":\"Number of seconds\"}},\"exit()\":{\"details\":\"Exit out of all possible stakes\"},\"getAllStakes(address)\":{\"details\":\"Return all the stakes paid and unpaid for a given user\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,uint256[],uint256[])\":{\"details\":\"Initialize the contracts, sets up durations, rates, and preApprover     for preApproved contracts can only be called once\",\"params\":{\"_durations\":\"Array of allowed durations in seconds\",\"_rates\":\"Array of rates(0.3 is 30%) that correspond to the allowed              durations in 1e18 precision\",\"_stakingToken\":\"Address of the token that we are staking\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"setAirDropRoot(uint8,bytes32,uint256)\":{\"details\":\"Set air drop root for a specific stake type\",\"params\":{\"_proofDepth\":\"Depth of the Merklke Tree\",\"_rootHash\":\"Root hash of the Merkle Tree\",\"_stakeType\":\"Type of staking must be greater than 0\"}},\"setDurationRates(uint256[],uint256[])\":{\"details\":\"Set new durations and rates will not effect existing stakes\",\"params\":{\"_durations\":\"Array of durations in seconds\",\"_rates\":\"Array of rates that corresponds to the durations (0.01 is 1%) in 1e18\"}},\"stake(uint256,uint256)\":{\"details\":\"Stake an approved amount of staking token into the contract.     User must have already approved the contract for specified amount.\",\"params\":{\"amount\":\"Number of tokens to stake in 1e18\",\"duration\":\"Number of seconds this stake will be held for\"}},\"totalCurrentHoldings(address)\":{\"details\":\"Calculate all current holdings of a user: staked value + prorated rewards\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"totalExpectedRewards(address)\":{\"details\":\"Calculate all the rewards a user can expect to receive.\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"totalStaked(address)\":{\"details\":\"Calculate all the staked value a user has put into the contract,     rewards not included\",\"params\":{\"account\":\"Address of the account that we want to look up\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/staking/SingleAssetStaking.sol\":\"SingleAssetStaking\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/governance/Governable.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32\\n        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32\\n        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32\\n        private constant reentryStatusPosition = 0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() internal {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x3e51ea48102945bf4b305bf9722a07514a585a29555d92f8c84352d1a4cfcee1\"},\"contracts/staking/SingleAssetStaking.sol\":{\"content\":\"pragma solidity 0.5.11;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\n\\ncontract SingleAssetStaking is Initializable, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public stakingToken; // this is both the staking and rewards\\n\\n    struct Stake {\\n        uint256 amount; // amount to stake\\n        uint256 end; // when does the staking period end\\n        uint256 duration; // the duration of the stake\\n        uint240 rate; // rate to charge use 248 to reserve 8 bits for the bool\\n        bool paid;\\n        uint8 stakeType;\\n    }\\n\\n    struct DropRoot {\\n        bytes32 hash;\\n        uint256 depth;\\n    }\\n\\n    uint256[] public durations; // allowed durations\\n    uint256[] public rates; // rates that correspond with the allowed durations\\n\\n    uint256 public totalOutstanding;\\n    bool public paused;\\n\\n    mapping(address => Stake[]) public userStakes;\\n\\n    mapping(uint8 => DropRoot) public dropRoots;\\n\\n    // type 0 is reserved for stakes done by the user, all other types will be drop/preApproved stakes\\n    uint8 constant USER_STAKE_TYPE = 0;\\n    uint256 constant MAX_STAKES = 256;\\n\\n    /* ========== Initialize ========== */\\n\\n    /**\\n     * @dev Initialize the contracts, sets up durations, rates, and preApprover\\n     *      for preApproved contracts can only be called once\\n     * @param _stakingToken Address of the token that we are staking\\n     * @param _durations Array of allowed durations in seconds\\n     * @param _rates Array of rates(0.3 is 30%) that correspond to the allowed\\n     *               durations in 1e18 precision\\n     */\\n    function initialize(\\n        address _stakingToken,\\n        uint256[] calldata _durations,\\n        uint256[] calldata _rates\\n    ) external onlyGovernor initializer {\\n        stakingToken = IERC20(_stakingToken);\\n        _setDurationRates(_durations, _rates);\\n    }\\n\\n    /* ========= Internal helper functions ======== */\\n\\n    /**\\n     * @dev Validate and set the duration and corresponding rates, will emit\\n     *      events NewRate and NewDurations\\n     */\\n    function _setDurationRates(\\n        uint256[] memory _durations,\\n        uint256[] memory _rates\\n    ) internal {\\n        require(\\n            _rates.length == _durations.length,\\n            \\\"Mismatch durations and rates\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _rates.length; i++) {\\n            require(_rates[i] < uint240(-1), \\\"Max rate exceeded\\\");\\n        }\\n\\n        rates = _rates;\\n        durations = _durations;\\n\\n        emit NewRates(msg.sender, rates);\\n        emit NewDurations(msg.sender, durations);\\n    }\\n\\n    function _totalExpectedRewards(Stake[] storage stakes)\\n        internal\\n        view\\n        returns (uint256 total)\\n    {\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            Stake storage stake = stakes[i];\\n            if (!stake.paid) {\\n                total = total.add(stake.amount.mulTruncate(stake.rate));\\n            }\\n        }\\n    }\\n\\n    function _totalExpected(Stake storage _stake)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _stake.amount.add(_stake.amount.mulTruncate(_stake.rate));\\n    }\\n\\n    function _airDroppedStakeClaimed(address account, uint8 stakeType)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Stake[] storage stakes = userStakes[account];\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            if (stakes[i].stakeType == stakeType) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _findDurationRate(uint256 duration)\\n        internal\\n        view\\n        returns (uint240)\\n    {\\n        for (uint256 i = 0; i < durations.length; i++) {\\n            if (duration == durations[i]) {\\n                return uint240(rates[i]);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Internal staking function\\n     *      will insert the stake into the stakes array and verify we have\\n     *      enough to pay off stake + reward\\n     * @param staker Address of the staker\\n     * @param stakeType Number that represent the type of the stake, 0 is user\\n     *                  initiated all else is currently preApproved\\n     * @param duration Number of seconds this stake will be held for\\n     * @param rate Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 =\\n     *             to fit the bool and type in struct Stake\\n     * @param amount Number of tokens to stake in 1e18\\n     */\\n    function _stake(\\n        address staker,\\n        uint8 stakeType,\\n        uint256 duration,\\n        uint240 rate,\\n        uint256 amount\\n    ) internal {\\n        require(!paused, \\\"Staking paused\\\");\\n\\n        Stake[] storage stakes = userStakes[staker];\\n\\n        uint256 end = block.timestamp.add(duration);\\n\\n        uint256 i = stakes.length; // start at the end of the current array\\n\\n        require(i < MAX_STAKES, \\\"Max stakes\\\");\\n\\n        stakes.length += 1; // grow the array\\n        // find the spot where we can insert the current stake\\n        // this should make an increasing list sorted by end\\n        while (i != 0 && stakes[i - 1].end > end) {\\n            // shift it back one\\n            stakes[i] = stakes[i - 1];\\n            i -= 1;\\n        }\\n\\n        // insert the stake\\n        Stake storage newStake = stakes[i];\\n        newStake.rate = rate;\\n        newStake.stakeType = stakeType;\\n        newStake.end = end;\\n        newStake.duration = duration;\\n        newStake.amount = amount;\\n\\n        totalOutstanding = totalOutstanding.add(_totalExpected(newStake));\\n\\n        emit Staked(staker, amount);\\n    }\\n\\n    modifier requireLiquidity() {\\n        // we need to have enough balance to cover the rewards after the operation is complete\\n        _;\\n        require(\\n            stakingToken.balanceOf(address(this)) >= totalOutstanding,\\n            \\\"Insufficient rewards\\\"\\n        );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getAllDurations() external view returns (uint256[] memory) {\\n        return durations;\\n    }\\n\\n    function getAllRates() external view returns (uint256[] memory) {\\n        return rates;\\n    }\\n\\n    /**\\n     * @dev Return all the stakes paid and unpaid for a given user\\n     * @param account Address of the account that we want to look up\\n     */\\n    function getAllStakes(address account)\\n        external\\n        view\\n        returns (Stake[] memory)\\n    {\\n        return userStakes[account];\\n    }\\n\\n    /**\\n     * @dev Find the rate that corresponds to a given duration\\n     * @param _duration Number of seconds\\n     */\\n    function durationRewardRate(uint256 _duration)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _findDurationRate(_duration);\\n    }\\n\\n    /**\\n     * @dev Has the airdropped stake already been claimed\\n     */\\n    function airDroppedStakeClaimed(address account, uint8 stakeType)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _airDroppedStakeClaimed(account, stakeType);\\n    }\\n\\n    /**\\n     * @dev Calculate all the staked value a user has put into the contract,\\n     *      rewards not included\\n     * @param account Address of the account that we want to look up\\n     */\\n    function totalStaked(address account)\\n        external\\n        view\\n        returns (uint256 total)\\n    {\\n        Stake[] storage stakes = userStakes[account];\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            if (!stakes[i].paid) {\\n                total = total.add(stakes[i].amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate all the rewards a user can expect to receive.\\n     * @param account Address of the account that we want to look up\\n     */\\n    function totalExpectedRewards(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _totalExpectedRewards(userStakes[account]);\\n    }\\n\\n    /**\\n     * @dev Calculate all current holdings of a user: staked value + prorated rewards\\n     * @param account Address of the account that we want to look up\\n     */\\n    function totalCurrentHoldings(address account)\\n        external\\n        view\\n        returns (uint256 total)\\n    {\\n        Stake[] storage stakes = userStakes[account];\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            Stake storage stake = stakes[i];\\n            if (stake.paid) {\\n                continue;\\n            } else if (stake.end < block.timestamp) {\\n                total = total.add(_totalExpected(stake));\\n            } else {\\n                //calcualte the precentage accrued in term of rewards\\n                total = total.add(\\n                    stake.amount.add(\\n                        stake.amount.mulTruncate(stake.rate).mulTruncate(\\n                            stake\\n                                .duration\\n                                .sub(stake.end.sub(block.timestamp))\\n                                .divPrecisely(stake.duration)\\n                        )\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Make a preapproved stake for the user, this is a presigned voucher that the user can redeem either from\\n     *      an airdrop or a compensation program.\\n     *      Only 1 of each type is allowed per user. The proof must match the root hash\\n     * @param index Number that is zero base index of the stake in the payout entry\\n     * @param stakeType Number that represent the type of the stake, must not be 0 which is user stake\\n     * @param duration Number of seconds this stake will be held for\\n     * @param rate Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 to fit the bool and type in struct Stake\\n     * @param amount Number of tokens to stake in 1e18\\n     * @param merkleProof Array of proofs for that amount\\n     */\\n    function airDroppedStake(\\n        uint256 index,\\n        uint8 stakeType,\\n        uint256 duration,\\n        uint256 rate,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external requireLiquidity {\\n        require(stakeType != USER_STAKE_TYPE, \\\"Cannot be normal staking\\\");\\n        require(rate < uint240(-1), \\\"Max rate exceeded\\\");\\n        require(index < 2**merkleProof.length, \\\"Invalid index\\\");\\n        DropRoot storage dropRoot = dropRoots[stakeType];\\n        require(merkleProof.length == dropRoot.depth, \\\"Invalid proof\\\");\\n\\n        // Compute the merkle root\\n        bytes32 node = keccak256(\\n            abi.encodePacked(\\n                index,\\n                stakeType,\\n                address(this),\\n                msg.sender,\\n                duration,\\n                rate,\\n                amount\\n            )\\n        );\\n        uint256 path = index;\\n        for (uint16 i = 0; i < merkleProof.length; i++) {\\n            if ((path & 0x01) == 1) {\\n                node = keccak256(abi.encodePacked(merkleProof[i], node));\\n            } else {\\n                node = keccak256(abi.encodePacked(node, merkleProof[i]));\\n            }\\n            path /= 2;\\n        }\\n\\n        // Check the merkle proof\\n        require(node == dropRoot.hash, \\\"Stake not approved\\\");\\n\\n        // verify that we haven't already staked\\n        require(!_airDroppedStakeClaimed(msg.sender, stakeType), \\\"Already staked\\\");\\n\\n        _stake(msg.sender, stakeType, duration, uint240(rate), amount);\\n    }\\n\\n    /**\\n     * @dev Stake an approved amount of staking token into the contract.\\n     *      User must have already approved the contract for specified amount.\\n     * @param amount Number of tokens to stake in 1e18\\n     * @param duration Number of seconds this stake will be held for\\n     */\\n    function stake(uint256 amount, uint256 duration) external requireLiquidity {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        uint240 rewardRate = _findDurationRate(duration);\\n        require(rewardRate > 0, \\\"Invalid duration\\\"); // we couldn't find the rate that correspond to the passed duration\\n\\n        _stake(msg.sender, USER_STAKE_TYPE, duration, rewardRate, amount);\\n        // transfer in the token so that we can stake the correct amount\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @dev Exit out of all possible stakes\\n     */\\n    function exit() external requireLiquidity {\\n        Stake[] storage stakes = userStakes[msg.sender];\\n        require(stakes.length > 0, \\\"Nothing staked\\\");\\n\\n        uint256 totalWithdraw = 0;\\n        uint256 l = stakes.length;\\n        do {\\n            Stake storage exitStake = stakes[l - 1];\\n            // stop on the first ended stake that's already been paid\\n            if (exitStake.end < block.timestamp && exitStake.paid) {\\n                break;\\n            }\\n            //might not be ended\\n            if (exitStake.end < block.timestamp) {\\n                //we are paying out the stake\\n                exitStake.paid = true;\\n                totalWithdraw = totalWithdraw.add(_totalExpected(exitStake));\\n            }\\n            l--;\\n        } while (l > 0);\\n        require(totalWithdraw > 0, \\\"All stakes in lock-up\\\");\\n\\n        totalOutstanding = totalOutstanding.sub(totalWithdraw);\\n        emit Withdrawn(msg.sender, totalWithdraw);\\n        stakingToken.safeTransfer(msg.sender, totalWithdraw);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    function setPaused(bool _paused) external onlyGovernor {\\n        paused = _paused;\\n        emit Paused(msg.sender, paused);\\n    }\\n\\n    /**\\n     * @dev Set new durations and rates will not effect existing stakes\\n     * @param _durations Array of durations in seconds\\n     * @param _rates Array of rates that corresponds to the durations (0.01 is 1%) in 1e18\\n     */\\n    function setDurationRates(\\n        uint256[] calldata _durations,\\n        uint256[] calldata _rates\\n    ) external onlyGovernor {\\n        _setDurationRates(_durations, _rates);\\n    }\\n\\n    /**\\n     * @dev Set air drop root for a specific stake type\\n     * @param _stakeType Type of staking must be greater than 0\\n     * @param _rootHash Root hash of the Merkle Tree\\n     * @param _proofDepth Depth of the Merklke Tree\\n     */\\n    function setAirDropRoot(\\n        uint8 _stakeType,\\n        bytes32 _rootHash,\\n        uint256 _proofDepth\\n    ) external onlyGovernor {\\n        require(_stakeType != USER_STAKE_TYPE, \\\"Cannot be normal staking\\\");\\n        dropRoots[_stakeType].hash = _rootHash;\\n        dropRoots[_stakeType].depth = _proofDepth;\\n        emit NewAirDropRootHash(_stakeType, _rootHash, _proofDepth);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event Paused(address indexed user, bool yes);\\n    event NewDurations(address indexed user, uint256[] durations);\\n    event NewRates(address indexed user, uint256[] rates);\\n    event NewAirDropRootHash(\\n        uint8 stakeType,\\n        bytes32 rootHash,\\n        uint256 proofDepth\\n    );\\n}\\n\",\"keccak256\":\"0x62b95298d12f1862326a10c04b19c82d14e128355910cb1913a502d773241442\"},\"contracts/utils/StableMath.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param adjustment Amount to adjust by e.g. scaleBy(1e18, -1) == 1e17\\n     */\\n    function scaleBy(uint256 x, int8 adjustment)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (adjustment > 0) {\\n            x = x.mul(10**uint256(adjustment));\\n        } else if (adjustment < 0) {\\n            x = x.div(10**uint256(adjustment * -1));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0xa77fccf850feb6d54ba3a6530f92554caef8a67a1ceb573d4f8a5d1bf64ff9d2\"}},\"version\":1}",
  "bytecode": "0x608060405262000018336001600160e01b036200007116565b6200002b6001600160e01b036200008416565b6001600160a01b031660006001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a362000098565b60008051602062002b8383398151915255565b60008051602062002b838339815191525490565b612adb80620000a86000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639bfd8d61116100de578063d38bfff411610097578063e9e518a011610071578063e9e518a014610361578063e9fad8ee14610374578063ea1d81cb1461037c578063ff5a20bf1461038f5761018e565b8063d38bfff41461031a578063dd418ae21461032d578063df962bd6146103405761018e565b80639bfd8d611461029f578063a5149d54146102b2578063b5d5b5fa146102c5578063bc20a7af146102ea578063bc2ee5a6146102fd578063c7af3352146103125761018e565b80634f2b529d1161014b57806372f702f31161012557806372f702f3146102515780637b0472f014610266578063825e0e801461027957806382d781111461028c5761018e565b80634f2b529d146102215780635c975abb146102345780635d36b190146102495761018e565b806304238994146101935780630c340a24146101bc57806316078d04146101d157806316c38b3c146101e6578063334e7ed2146101fb578063389b21ce1461020e575b600080fd5b6101a66101a1366004611bd8565b610397565b6040516101b3919061272e565b60405180910390f35b6101c4610459565b6040516101b391906126dd565b6101d9610469565b6040516101b3919061290c565b6101f96101f4366004611d57565b61046f565b005b6101f9610209366004611ce7565b6104eb565b6101f961021c366004611eb1565b610582565b6101f961022f366004611dee565b610622565b61023c6108ad565b6040516101b39190612761565b6101f96108b6565b6102596108f9565b6040516101b3919061277d565b6101f9610274366004611dcf565b610908565b6101d9610287366004611d93565b610a30565b6101d961029a366004611bd8565b610a4a565b6101d96102ad366004611bd8565b610b69565b61023c6102c0366004611cb7565b610bf3565b6102d86102d3366004611c7d565b610c08565b6040516101b39695949392919061291a565b6101d96102f8366004611d93565b610c6a565b610305610c88565b6040516101b3919061273f565b61023c610ce0565b6101f9610328366004611bd8565b610d03565b6101d961033b366004611d93565b610d7a565b61035361034e366004611e93565b610d87565b6040516101b392919061276f565b6101f961036f366004611bf6565b610da0565b6101f9610ed1565b6101d961038a366004611bd8565b6110c7565b6103056110e8565b6001600160a01b0381166000908152603860209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561044d5760008481526020908190206040805160c081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160f01b038116606084015260ff600160f01b8204811615156080850152600160f81b9091041660a083015290835290920191016103cf565b5050505090505b919050565b600061046361113e565b90505b90565b60365481565b610477610ce0565b61049c5760405162461bcd60e51b8152600401610493906127ec565b60405180910390fd5b6037805460ff1916821515179081905560405133917fe8699cf681560fd07de85543bd994263f4557bdc5179dd702f256d15fd083e1d916104e09160ff1690612761565b60405180910390a250565b6104f3610ce0565b61050f5760405162461bcd60e51b8152600401610493906127ec565b61057c8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061116392505050565b50505050565b61058a610ce0565b6105a65760405162461bcd60e51b8152600401610493906127ec565b60ff83166105c65760405162461bcd60e51b8152600401610493906127ac565b60ff831660009081526039602052604090819020838155600101829055517f1ac9c006454d2d601a481473a37c95bf489c5923bd7c2a701757d4016a0f022d9061061590859085908590612974565b60405180910390a1505050565b60ff86166106425760405162461bcd60e51b8152600401610493906127ac565b6001600160f01b0384106106685760405162461bcd60e51b81526004016104939061281c565b600281900a871061068b5760405162461bcd60e51b8152600401610493906127fc565b60ff86166000908152603960205260409020600181015482146106c05760405162461bcd60e51b8152600401610493906128bc565b6000888830338a8a8a6040516020016106df9796959493929190612662565b60408051601f19818403018152919052805160209091012090508860005b61ffff81168511156107ab57816001166001141561075b5785858261ffff1681811061072557fe5b905060200201358360405160200161073e929190612630565b60405160208183030381529060405280519060200120925061079d565b8286868361ffff1681811061076c57fe5b90506020020135604051602001610784929190612630565b6040516020818303038152906040528051906020012092505b6002820491506001016106fd565b50825482146107cc5760405162461bcd60e51b8152600401610493906128dc565b6107d6338a611286565b156107f35760405162461bcd60e51b81526004016104939061287c565b610800338a8a8a8a6112fb565b50506036546033546040516370a0823160e01b81529192506001600160a01b0316906370a08231906108369030906004016126dd565b60206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108869190810190611db1565b10156108a45760405162461bcd60e51b8152600401610493906128ac565b50505050505050565b60375460ff1681565b6108be611544565b6001600160a01b0316336001600160a01b0316146108ee5760405162461bcd60e51b8152600401610493906128ec565b6108f733611569565b565b6033546001600160a01b031681565b600082116109285760405162461bcd60e51b8152600401610493906127cc565b6000610933826115e2565b90506000816001600160f01b03161161095e5760405162461bcd60e51b8152600401610493906127bc565b61096c3360008484876112fb565b60335461098a906001600160a01b031633308663ffffffff61164016565b506036546033546040516370a0823160e01b81526001600160a01b03909116906370a08231906109be9030906004016126dd565b60206040518083038186803b1580156109d657600080fd5b505afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a0e9190810190611db1565b1015610a2c5760405162461bcd60e51b8152600401610493906128ac565b5050565b6000610a3b826115e2565b6001600160f01b031692915050565b6001600160a01b0381166000908152603860205260408120815b8154811015610b62576000828281548110610a7b57fe5b9060005260206000209060040201905080600301601e9054906101000a900460ff1615610aa85750610b5a565b4281600101541015610ad457610acd610ac08261169b565b859063ffffffff6116c116565b9350610b58565b610b55610ac0610b47610b1c8460020154610b10610aff4288600101546116e690919063ffffffff16565b60028801549063ffffffff6116e616565b9063ffffffff61172816565b60038501548554610b3b916001600160f01b031663ffffffff61175d16565b9063ffffffff61175d16565b83549063ffffffff6116c116565b93505b505b600101610a64565b5050919050565b6001600160a01b0381166000908152603860205260408120815b8154811015610b6257818181548110610b9857fe5b9060005260206000209060040201600301601e9054906101000a900460ff16610beb57610be8828281548110610bca57fe5b6000918252602090912060049091020154849063ffffffff6116c116565b92505b600101610b83565b6000610bff8383611286565b90505b92915050565b60386020528160005260406000208181548110610c2157fe5b6000918252602090912060049091020180546001820154600283015460039093015491945092506001600160f01b0381169060ff600160f01b8204811691600160f81b90041686565b60348181548110610c7757fe5b600091825260209091200154905081565b60606034805480602002602001604051908101604052809291908181526020018280548015610cd657602002820191906000526020600020905b815481526020019060010190808311610cc2575b5050505050905090565b6000610cea61113e565b6001600160a01b0316336001600160a01b031614905090565b610d0b610ce0565b610d275760405162461bcd60e51b8152600401610493906127ec565b610d3081611772565b806001600160a01b0316610d4261113e565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60358181548110610c7757fe5b6039602052600090815260409020805460019091015482565b610da8610ce0565b610dc45760405162461bcd60e51b8152600401610493906127ec565b600054610100900460ff1680610ddd5750610ddd611796565b80610deb575060005460ff16155b610e075760405162461bcd60e51b81526004016104939061289c565b600054610100900460ff16158015610e32576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0388161790556040805160208681028083018201909352868252610eb7928891889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061116392505050565b8015610ec9576000805461ff00191690555b505050505050565b3360009081526038602052604090208054610efe5760405162461bcd60e51b81526004016104939061288c565b80546000905b6000836001830381548110610f1557fe5b90600052602060002090600402019050428160010154108015610f4357506003810154600160f01b900460ff165b15610f4e5750610f96565b4281600101541015610f8b5760038101805460ff60f01b1916600160f01b179055610f88610f7b8261169b565b849063ffffffff6116c116565b92505b506000190180610f04575b60008211610fb65760405162461bcd60e51b81526004016104939061285c565b603654610fc9908363ffffffff6116e616565b60365560405133907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d590610ffe90859061290c565b60405180910390a2603354611023906001600160a01b0316338463ffffffff61179c16565b50506036546033546040516370a0823160e01b81529192506001600160a01b0316906370a08231906110599030906004016126dd565b60206040518083038186803b15801561107157600080fd5b505afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110a99190810190611db1565b10156108f75760405162461bcd60e51b8152600401610493906128ac565b6001600160a01b0381166000908152603860205260408120610c02906117c3565b60606035805480602002602001604051908101604052809291908181526020018280548015610cd65760200282019190600052602060002090815481526020019060010190808311610cc2575050505050905090565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b81518151146111845760405162461bcd60e51b81526004016104939061282c565b60005b81518110156111d5576000196001600160f01b03168282815181106111a857fe5b6020026020010151106111cd5760405162461bcd60e51b81526004016104939061281c565b600101611187565b5080516111e9906035906020840190611a8e565b5081516111fd906034906020850190611a8e565b50336001600160a01b03167fa804368c7f1a6216d92d17d9753b923dfc3da14ae33d231e8d79e39202e249c360356040516112389190612750565b60405180910390a2336001600160a01b03167f180120279c2eb356244609197b5b64c0fbabd60f8d073b75aba771a296bb63d4603460405161127a9190612750565b60405180910390a25050565b6001600160a01b0382166000908152603860205260408120815b81548110156112f0578360ff168282815481106112b957fe5b6000918252602090912060049091020160030154600160f81b900460ff1614156112e857600192505050610c02565b6001016112a0565b506000949350505050565b60375460ff161561131e5760405162461bcd60e51b81526004016104939061284c565b6001600160a01b038516600090815260386020526040812090611347428663ffffffff6116c116565b8254909150610100811061136d5760405162461bcd60e51b81526004016104939061279c565b825460010161137c8482611ad9565b505b80158015906113ac57508183600183038154811061139857fe5b906000526020600020906004020160010154115b15611476578260018203815481106113c057fe5b90600052602060002090600402018382815481106113da57fe5b6000918252602090912082546004909202019081556001808301549082015560028083015490820155600391820180549290910180546001600160f01b0319166001600160f01b0390931692909217808355815460ff600160f01b918290048116151590910260ff60f01b19909216919091178084559154600160f81b90819004909116026001600160f81b039091161790556000190161137e565b600083828154811061148457fe5b600091825260209091206004909102016003810180546001600160f01b0319166001600160f01b038916176001600160f81b0316600160f81b60ff8c1602179055600181018490556002810188905585815590506114f36114e48261169b565b6036549063ffffffff6116c116565b6036556040516001600160a01b038a16907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9061153190889061290c565b60405180910390a2505050505050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b03811661158f5760405162461bcd60e51b81526004016104939061283c565b806001600160a01b03166115a161113e565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36115df8161183a565b50565b6000805b60345481101561163757603481815481106115fd57fe5b906000526020600020015483141561162f576035818154811061161c57fe5b9060005260206000200154915050610454565b6001016115e6565b50600092915050565b60405161057c9085906323b872dd60e01b90611664908790879087906024016126eb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261185e565b60038101548154600091610c0291610b47916001600160f01b031663ffffffff61175d16565b600082820183811015610bff5760405162461bcd60e51b8152600401610493906127dc565b6000610bff83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611943565b60008061174384670de0b6b3a764000063ffffffff61197416565b9050611755818463ffffffff6119ae16565b949350505050565b6000610bff8383670de0b6b3a76400006119f0565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b303b1590565b6040516117be90849063a9059cbb60e01b906116649086908690602401612713565b505050565b6000805b82548110156118345760008382815481106117de57fe5b9060005260206000209060040201905080600301601e9054906101000a900460ff1661182b576003810154815461182891610f7b91906001600160f01b031663ffffffff61175d16565b92505b506001016117c7565b50919050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b611870826001600160a01b0316611a1e565b61188c5760405162461bcd60e51b8152600401610493906128fc565b60006060836001600160a01b0316836040516118a89190612656565b6000604051808303816000865af19150503d80600081146118e5576040519150601f19603f3d011682016040523d82523d6000602084013e6118ea565b606091505b50915091508161190c5760405162461bcd60e51b81526004016104939061280c565b80511561057c57808060200190516119279190810190611d75565b61057c5760405162461bcd60e51b8152600401610493906128cc565b600081848411156119675760405162461bcd60e51b8152600401610493919061278b565b50508183035b9392505050565b60008261198357506000610c02565b8282028284828161199057fe5b0414610bff5760405162461bcd60e51b81526004016104939061286c565b6000610bff83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611a57565b600080611a03858563ffffffff61197416565b9050611a15818463ffffffff6119ae16565b95945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611755575050151592915050565b60008183611a785760405162461bcd60e51b8152600401610493919061278b565b506000838581611a8457fe5b0495945050505050565b828054828255906000526020600020908101928215611ac9579160200282015b82811115611ac9578251825591602001919060010190611aae565b50611ad5929150611b05565b5090565b8154818355818111156117be576004028160040283600052602060002091820191016117be9190611b1f565b61046691905b80821115611ad55760008155600101611b0b565b61046691905b80821115611ad557600080825560018201819055600282018190556003820155600401611b25565b8035610c0281612a69565b60008083601f840112611b6a57600080fd5b50813567ffffffffffffffff811115611b8257600080fd5b602083019150836020820283011115611b9a57600080fd5b9250929050565b8035610c0281612a7d565b8051610c0281612a7d565b8035610c0281612a86565b8051610c0281612a86565b8035610c0281612a8f565b600060208284031215611bea57600080fd5b60006117558484611b4d565b600080600080600060608688031215611c0e57600080fd5b6000611c1a8888611b4d565b955050602086013567ffffffffffffffff811115611c3757600080fd5b611c4388828901611b58565b9450945050604086013567ffffffffffffffff811115611c6257600080fd5b611c6e88828901611b58565b92509250509295509295909350565b60008060408385031215611c9057600080fd5b6000611c9c8585611b4d565b9250506020611cad85828601611bb7565b9150509250929050565b60008060408385031215611cca57600080fd5b6000611cd68585611b4d565b9250506020611cad85828601611bcd565b60008060008060408587031215611cfd57600080fd5b843567ffffffffffffffff811115611d1457600080fd5b611d2087828801611b58565b9450945050602085013567ffffffffffffffff811115611d3f57600080fd5b611d4b87828801611b58565b95989497509550505050565b600060208284031215611d6957600080fd5b60006117558484611ba1565b600060208284031215611d8757600080fd5b60006117558484611bac565b600060208284031215611da557600080fd5b60006117558484611bb7565b600060208284031215611dc357600080fd5b60006117558484611bc2565b60008060408385031215611de257600080fd5b6000611c9c8585611bb7565b600080600080600080600060c0888a031215611e0957600080fd5b6000611e158a8a611bb7565b9750506020611e268a828b01611bcd565b9650506040611e378a828b01611bb7565b9550506060611e488a828b01611bb7565b9450506080611e598a828b01611bb7565b93505060a088013567ffffffffffffffff811115611e7657600080fd5b611e828a828b01611b58565b925092505092959891949750929550565b600060208284031215611ea557600080fd5b60006117558484611bcd565b600080600060608486031215611ec657600080fd5b6000611ed28686611bcd565b9350506020611ee386828701611bb7565b9250506040611ef486828701611bb7565b9150509250925092565b6000611f0a838361259d565b505060c00190565b6000611f1e838361204b565b505060200190565b611f37611f32826129b8565b612a2b565b82525050565b611f37816129b8565b6000611f51826129a1565b611f5b81856129af565b9350611f668361298f565b8060005b83811015611f94578151611f7e8882611efe565b9750611f898361298f565b925050600101611f6a565b509495945050505050565b6000611faa826129a1565b611fb481856129af565b9350611fbf8361298f565b8060005b83811015611f94578151611fd78882611f12565b9750611fe28361298f565b925050600101611fc3565b6000611ff8826129a5565b61200281856129af565b935061200d83612995565b8060005b83811015611f945761202282612a47565b61202c8882611f12565b9750612037836129a9565b925050600101612011565b611f37816129c3565b611f3781610466565b611f3761206082610466565b610466565b6000612070826129a1565b61207a8185610454565b935061208a8185602086016129f1565b9290920192915050565b611f37816129e6565b60006120a8826129a1565b6120b281856129af565b93506120c28185602086016129f1565b6120cb81612a53565b9093019392505050565b60006120e2600a836129af565b694d6178207374616b657360b01b815260200192915050565b60006121086018836129af565b7f43616e6e6f74206265206e6f726d616c207374616b696e670000000000000000815260200192915050565b60006121416010836129af565b6f24b73b30b634b210323ab930ba34b7b760811b815260200192915050565b600061216d600e836129af565b6d043616e6e6f74207374616b6520360941b815260200192915050565b6000612197601b836129af565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006121d0601a836129af565b7f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000815260200192915050565b6000612209600d836129af565b6c092dcecc2d8d2c840d2dcc8caf609b1b815260200192915050565b60006122326020836129af565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b600061226b6011836129af565b7013585e081c985d1948195e18d959591959607a1b815260200192915050565b6000612298601c836129af565b7f4d69736d61746368206475726174696f6e7320616e6420726174657300000000815260200192915050565b60006122d1601a836129af565b7f4e657720476f7665726e6f722069732061646472657373283029000000000000815260200192915050565b600061230a600e836129af565b6d14dd185ada5b99c81c185d5cd95960921b815260200192915050565b60006123346015836129af565b740416c6c207374616b657320696e206c6f636b2d757605c1b815260200192915050565b60006123656021836129af565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006123a8600e836129af565b6d105b1c9958591e481cdd185ad95960921b815260200192915050565b60006123d2600e836129af565b6d139bdd1a1a5b99c81cdd185ad95960921b815260200192915050565b60006123fc602e836129af565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626581526d195b881a5b9a5d1a585b1a5e995960921b602082015260400192915050565b600061244c6014836129af565b73496e73756666696369656e74207265776172647360601b815260200192915050565b600061247c600d836129af565b6c24b73b30b634b210383937b7b360991b815260200192915050565b60006124a5602a836129af565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b60006124f16012836129af565b7114dd185ad9481b9bdd08185c1c1c9bdd995960721b815260200192915050565b600061251f6030836129af565b7f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f81526f6d706c6574652074686520636c61696d60801b602082015260400192915050565b6000612571601f836129af565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b805160c08301906125ae848261204b565b5060208201516125c1602085018261204b565b5060408201516125d4604085018261204b565b5060608201516125e7606085018261260d565b5060808201516125fa6080850182612042565b5060a082015161057c60a0850182612616565b611f37816129d4565b611f37816129e0565b611f3761262b826129e0565b612a3c565b600061263c8285612054565b60208201915061264c8284612054565b5060200192915050565b600061196d8284612065565b600061266e828a612054565b60208201915061267e828961261f565b60018201915061268e8288611f26565b60148201915061269e8287611f26565b6014820191506126ae8286612054565b6020820191506126be8285612054565b6020820191506126ce8284612054565b50602001979650505050505050565b60208101610c028284611f3d565b606081016126f98286611f3d565b6127066020830185611f3d565b611755604083018461204b565b604081016127218285611f3d565b61196d602083018461204b565b60208082528101610bff8184611f46565b60208082528101610bff8184611f9f565b60208082528101610bff8184611fed565b60208101610c028284612042565b60408101612721828561204b565b60208101610c028284612094565b60208082528101610bff818461209d565b60208082528101610c02816120d5565b60208082528101610c02816120fb565b60208082528101610c0281612134565b60208082528101610c0281612160565b60208082528101610c028161218a565b60208082528101610c02816121c3565b60208082528101610c02816121fc565b60208082528101610c0281612225565b60208082528101610c028161225e565b60208082528101610c028161228b565b60208082528101610c02816122c4565b60208082528101610c02816122fd565b60208082528101610c0281612327565b60208082528101610c0281612358565b60208082528101610c028161239b565b60208082528101610c02816123c5565b60208082528101610c02816123ef565b60208082528101610c028161243f565b60208082528101610c028161246f565b60208082528101610c0281612498565b60208082528101610c02816124e4565b60208082528101610c0281612512565b60208082528101610c0281612564565b60208101610c02828461204b565b60c08101612928828961204b565b612935602083018861204b565b612942604083018761204b565b61294f606083018661260d565b61295c6080830185612042565b61296960a0830184612616565b979650505050505050565b606081016129828286612616565b612706602083018561204b565b60200190565b60009081526020902090565b5190565b5490565b60010190565b90815260200190565b6000610c02826129c8565b151590565b6001600160a01b031690565b6001600160f01b031690565b60ff1690565b6000610c02826129b8565b60005b83811015612a0c5781810151838201526020016129f4565b8381111561057c5750506000910152565b6000610c0261206083610466565b6000610c02826000610c0282612a63565b6000610c0282612a5d565b6000610c028254612a1d565b601f01601f191690565b60f81b90565b60601b90565b612a72816129b8565b81146115df57600080fd5b612a72816129c3565b612a7281610466565b612a72816129e056fea365627a7a72315820f18cb5fdc9017870ad4e8741aafbd5f65ce1d71a5300ac96510876e7f5bf0b3f6c6578706572696d656e74616cf564736f6c634300050b00407bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80639bfd8d61116100de578063d38bfff411610097578063e9e518a011610071578063e9e518a014610361578063e9fad8ee14610374578063ea1d81cb1461037c578063ff5a20bf1461038f5761018e565b8063d38bfff41461031a578063dd418ae21461032d578063df962bd6146103405761018e565b80639bfd8d611461029f578063a5149d54146102b2578063b5d5b5fa146102c5578063bc20a7af146102ea578063bc2ee5a6146102fd578063c7af3352146103125761018e565b80634f2b529d1161014b57806372f702f31161012557806372f702f3146102515780637b0472f014610266578063825e0e801461027957806382d781111461028c5761018e565b80634f2b529d146102215780635c975abb146102345780635d36b190146102495761018e565b806304238994146101935780630c340a24146101bc57806316078d04146101d157806316c38b3c146101e6578063334e7ed2146101fb578063389b21ce1461020e575b600080fd5b6101a66101a1366004611bd8565b610397565b6040516101b3919061272e565b60405180910390f35b6101c4610459565b6040516101b391906126dd565b6101d9610469565b6040516101b3919061290c565b6101f96101f4366004611d57565b61046f565b005b6101f9610209366004611ce7565b6104eb565b6101f961021c366004611eb1565b610582565b6101f961022f366004611dee565b610622565b61023c6108ad565b6040516101b39190612761565b6101f96108b6565b6102596108f9565b6040516101b3919061277d565b6101f9610274366004611dcf565b610908565b6101d9610287366004611d93565b610a30565b6101d961029a366004611bd8565b610a4a565b6101d96102ad366004611bd8565b610b69565b61023c6102c0366004611cb7565b610bf3565b6102d86102d3366004611c7d565b610c08565b6040516101b39695949392919061291a565b6101d96102f8366004611d93565b610c6a565b610305610c88565b6040516101b3919061273f565b61023c610ce0565b6101f9610328366004611bd8565b610d03565b6101d961033b366004611d93565b610d7a565b61035361034e366004611e93565b610d87565b6040516101b392919061276f565b6101f961036f366004611bf6565b610da0565b6101f9610ed1565b6101d961038a366004611bd8565b6110c7565b6103056110e8565b6001600160a01b0381166000908152603860209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561044d5760008481526020908190206040805160c081018252600486029092018054835260018082015484860152600282015492840192909252600301546001600160f01b038116606084015260ff600160f01b8204811615156080850152600160f81b9091041660a083015290835290920191016103cf565b5050505090505b919050565b600061046361113e565b90505b90565b60365481565b610477610ce0565b61049c5760405162461bcd60e51b8152600401610493906127ec565b60405180910390fd5b6037805460ff1916821515179081905560405133917fe8699cf681560fd07de85543bd994263f4557bdc5179dd702f256d15fd083e1d916104e09160ff1690612761565b60405180910390a250565b6104f3610ce0565b61050f5760405162461bcd60e51b8152600401610493906127ec565b61057c8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061116392505050565b50505050565b61058a610ce0565b6105a65760405162461bcd60e51b8152600401610493906127ec565b60ff83166105c65760405162461bcd60e51b8152600401610493906127ac565b60ff831660009081526039602052604090819020838155600101829055517f1ac9c006454d2d601a481473a37c95bf489c5923bd7c2a701757d4016a0f022d9061061590859085908590612974565b60405180910390a1505050565b60ff86166106425760405162461bcd60e51b8152600401610493906127ac565b6001600160f01b0384106106685760405162461bcd60e51b81526004016104939061281c565b600281900a871061068b5760405162461bcd60e51b8152600401610493906127fc565b60ff86166000908152603960205260409020600181015482146106c05760405162461bcd60e51b8152600401610493906128bc565b6000888830338a8a8a6040516020016106df9796959493929190612662565b60408051601f19818403018152919052805160209091012090508860005b61ffff81168511156107ab57816001166001141561075b5785858261ffff1681811061072557fe5b905060200201358360405160200161073e929190612630565b60405160208183030381529060405280519060200120925061079d565b8286868361ffff1681811061076c57fe5b90506020020135604051602001610784929190612630565b6040516020818303038152906040528051906020012092505b6002820491506001016106fd565b50825482146107cc5760405162461bcd60e51b8152600401610493906128dc565b6107d6338a611286565b156107f35760405162461bcd60e51b81526004016104939061287c565b610800338a8a8a8a6112fb565b50506036546033546040516370a0823160e01b81529192506001600160a01b0316906370a08231906108369030906004016126dd565b60206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108869190810190611db1565b10156108a45760405162461bcd60e51b8152600401610493906128ac565b50505050505050565b60375460ff1681565b6108be611544565b6001600160a01b0316336001600160a01b0316146108ee5760405162461bcd60e51b8152600401610493906128ec565b6108f733611569565b565b6033546001600160a01b031681565b600082116109285760405162461bcd60e51b8152600401610493906127cc565b6000610933826115e2565b90506000816001600160f01b03161161095e5760405162461bcd60e51b8152600401610493906127bc565b61096c3360008484876112fb565b60335461098a906001600160a01b031633308663ffffffff61164016565b506036546033546040516370a0823160e01b81526001600160a01b03909116906370a08231906109be9030906004016126dd565b60206040518083038186803b1580156109d657600080fd5b505afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a0e9190810190611db1565b1015610a2c5760405162461bcd60e51b8152600401610493906128ac565b5050565b6000610a3b826115e2565b6001600160f01b031692915050565b6001600160a01b0381166000908152603860205260408120815b8154811015610b62576000828281548110610a7b57fe5b9060005260206000209060040201905080600301601e9054906101000a900460ff1615610aa85750610b5a565b4281600101541015610ad457610acd610ac08261169b565b859063ffffffff6116c116565b9350610b58565b610b55610ac0610b47610b1c8460020154610b10610aff4288600101546116e690919063ffffffff16565b60028801549063ffffffff6116e616565b9063ffffffff61172816565b60038501548554610b3b916001600160f01b031663ffffffff61175d16565b9063ffffffff61175d16565b83549063ffffffff6116c116565b93505b505b600101610a64565b5050919050565b6001600160a01b0381166000908152603860205260408120815b8154811015610b6257818181548110610b9857fe5b9060005260206000209060040201600301601e9054906101000a900460ff16610beb57610be8828281548110610bca57fe5b6000918252602090912060049091020154849063ffffffff6116c116565b92505b600101610b83565b6000610bff8383611286565b90505b92915050565b60386020528160005260406000208181548110610c2157fe5b6000918252602090912060049091020180546001820154600283015460039093015491945092506001600160f01b0381169060ff600160f01b8204811691600160f81b90041686565b60348181548110610c7757fe5b600091825260209091200154905081565b60606034805480602002602001604051908101604052809291908181526020018280548015610cd657602002820191906000526020600020905b815481526020019060010190808311610cc2575b5050505050905090565b6000610cea61113e565b6001600160a01b0316336001600160a01b031614905090565b610d0b610ce0565b610d275760405162461bcd60e51b8152600401610493906127ec565b610d3081611772565b806001600160a01b0316610d4261113e565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60358181548110610c7757fe5b6039602052600090815260409020805460019091015482565b610da8610ce0565b610dc45760405162461bcd60e51b8152600401610493906127ec565b600054610100900460ff1680610ddd5750610ddd611796565b80610deb575060005460ff16155b610e075760405162461bcd60e51b81526004016104939061289c565b600054610100900460ff16158015610e32576000805460ff1961ff0019909116610100171660011790555b603380546001600160a01b0319166001600160a01b0388161790556040805160208681028083018201909352868252610eb7928891889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061116392505050565b8015610ec9576000805461ff00191690555b505050505050565b3360009081526038602052604090208054610efe5760405162461bcd60e51b81526004016104939061288c565b80546000905b6000836001830381548110610f1557fe5b90600052602060002090600402019050428160010154108015610f4357506003810154600160f01b900460ff165b15610f4e5750610f96565b4281600101541015610f8b5760038101805460ff60f01b1916600160f01b179055610f88610f7b8261169b565b849063ffffffff6116c116565b92505b506000190180610f04575b60008211610fb65760405162461bcd60e51b81526004016104939061285c565b603654610fc9908363ffffffff6116e616565b60365560405133907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d590610ffe90859061290c565b60405180910390a2603354611023906001600160a01b0316338463ffffffff61179c16565b50506036546033546040516370a0823160e01b81529192506001600160a01b0316906370a08231906110599030906004016126dd565b60206040518083038186803b15801561107157600080fd5b505afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110a99190810190611db1565b10156108f75760405162461bcd60e51b8152600401610493906128ac565b6001600160a01b0381166000908152603860205260408120610c02906117c3565b60606035805480602002602001604051908101604052809291908181526020018280548015610cd65760200282019190600052602060002090815481526020019060010190808311610cc2575050505050905090565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b81518151146111845760405162461bcd60e51b81526004016104939061282c565b60005b81518110156111d5576000196001600160f01b03168282815181106111a857fe5b6020026020010151106111cd5760405162461bcd60e51b81526004016104939061281c565b600101611187565b5080516111e9906035906020840190611a8e565b5081516111fd906034906020850190611a8e565b50336001600160a01b03167fa804368c7f1a6216d92d17d9753b923dfc3da14ae33d231e8d79e39202e249c360356040516112389190612750565b60405180910390a2336001600160a01b03167f180120279c2eb356244609197b5b64c0fbabd60f8d073b75aba771a296bb63d4603460405161127a9190612750565b60405180910390a25050565b6001600160a01b0382166000908152603860205260408120815b81548110156112f0578360ff168282815481106112b957fe5b6000918252602090912060049091020160030154600160f81b900460ff1614156112e857600192505050610c02565b6001016112a0565b506000949350505050565b60375460ff161561131e5760405162461bcd60e51b81526004016104939061284c565b6001600160a01b038516600090815260386020526040812090611347428663ffffffff6116c116565b8254909150610100811061136d5760405162461bcd60e51b81526004016104939061279c565b825460010161137c8482611ad9565b505b80158015906113ac57508183600183038154811061139857fe5b906000526020600020906004020160010154115b15611476578260018203815481106113c057fe5b90600052602060002090600402018382815481106113da57fe5b6000918252602090912082546004909202019081556001808301549082015560028083015490820155600391820180549290910180546001600160f01b0319166001600160f01b0390931692909217808355815460ff600160f01b918290048116151590910260ff60f01b19909216919091178084559154600160f81b90819004909116026001600160f81b039091161790556000190161137e565b600083828154811061148457fe5b600091825260209091206004909102016003810180546001600160f01b0319166001600160f01b038916176001600160f81b0316600160f81b60ff8c1602179055600181018490556002810188905585815590506114f36114e48261169b565b6036549063ffffffff6116c116565b6036556040516001600160a01b038a16907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9061153190889061290c565b60405180910390a2505050505050505050565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b03811661158f5760405162461bcd60e51b81526004016104939061283c565b806001600160a01b03166115a161113e565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36115df8161183a565b50565b6000805b60345481101561163757603481815481106115fd57fe5b906000526020600020015483141561162f576035818154811061161c57fe5b9060005260206000200154915050610454565b6001016115e6565b50600092915050565b60405161057c9085906323b872dd60e01b90611664908790879087906024016126eb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261185e565b60038101548154600091610c0291610b47916001600160f01b031663ffffffff61175d16565b600082820183811015610bff5760405162461bcd60e51b8152600401610493906127dc565b6000610bff83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611943565b60008061174384670de0b6b3a764000063ffffffff61197416565b9050611755818463ffffffff6119ae16565b949350505050565b6000610bff8383670de0b6b3a76400006119f0565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b303b1590565b6040516117be90849063a9059cbb60e01b906116649086908690602401612713565b505050565b6000805b82548110156118345760008382815481106117de57fe5b9060005260206000209060040201905080600301601e9054906101000a900460ff1661182b576003810154815461182891610f7b91906001600160f01b031663ffffffff61175d16565b92505b506001016117c7565b50919050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b611870826001600160a01b0316611a1e565b61188c5760405162461bcd60e51b8152600401610493906128fc565b60006060836001600160a01b0316836040516118a89190612656565b6000604051808303816000865af19150503d80600081146118e5576040519150601f19603f3d011682016040523d82523d6000602084013e6118ea565b606091505b50915091508161190c5760405162461bcd60e51b81526004016104939061280c565b80511561057c57808060200190516119279190810190611d75565b61057c5760405162461bcd60e51b8152600401610493906128cc565b600081848411156119675760405162461bcd60e51b8152600401610493919061278b565b50508183035b9392505050565b60008261198357506000610c02565b8282028284828161199057fe5b0414610bff5760405162461bcd60e51b81526004016104939061286c565b6000610bff83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611a57565b600080611a03858563ffffffff61197416565b9050611a15818463ffffffff6119ae16565b95945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611755575050151592915050565b60008183611a785760405162461bcd60e51b8152600401610493919061278b565b506000838581611a8457fe5b0495945050505050565b828054828255906000526020600020908101928215611ac9579160200282015b82811115611ac9578251825591602001919060010190611aae565b50611ad5929150611b05565b5090565b8154818355818111156117be576004028160040283600052602060002091820191016117be9190611b1f565b61046691905b80821115611ad55760008155600101611b0b565b61046691905b80821115611ad557600080825560018201819055600282018190556003820155600401611b25565b8035610c0281612a69565b60008083601f840112611b6a57600080fd5b50813567ffffffffffffffff811115611b8257600080fd5b602083019150836020820283011115611b9a57600080fd5b9250929050565b8035610c0281612a7d565b8051610c0281612a7d565b8035610c0281612a86565b8051610c0281612a86565b8035610c0281612a8f565b600060208284031215611bea57600080fd5b60006117558484611b4d565b600080600080600060608688031215611c0e57600080fd5b6000611c1a8888611b4d565b955050602086013567ffffffffffffffff811115611c3757600080fd5b611c4388828901611b58565b9450945050604086013567ffffffffffffffff811115611c6257600080fd5b611c6e88828901611b58565b92509250509295509295909350565b60008060408385031215611c9057600080fd5b6000611c9c8585611b4d565b9250506020611cad85828601611bb7565b9150509250929050565b60008060408385031215611cca57600080fd5b6000611cd68585611b4d565b9250506020611cad85828601611bcd565b60008060008060408587031215611cfd57600080fd5b843567ffffffffffffffff811115611d1457600080fd5b611d2087828801611b58565b9450945050602085013567ffffffffffffffff811115611d3f57600080fd5b611d4b87828801611b58565b95989497509550505050565b600060208284031215611d6957600080fd5b60006117558484611ba1565b600060208284031215611d8757600080fd5b60006117558484611bac565b600060208284031215611da557600080fd5b60006117558484611bb7565b600060208284031215611dc357600080fd5b60006117558484611bc2565b60008060408385031215611de257600080fd5b6000611c9c8585611bb7565b600080600080600080600060c0888a031215611e0957600080fd5b6000611e158a8a611bb7565b9750506020611e268a828b01611bcd565b9650506040611e378a828b01611bb7565b9550506060611e488a828b01611bb7565b9450506080611e598a828b01611bb7565b93505060a088013567ffffffffffffffff811115611e7657600080fd5b611e828a828b01611b58565b925092505092959891949750929550565b600060208284031215611ea557600080fd5b60006117558484611bcd565b600080600060608486031215611ec657600080fd5b6000611ed28686611bcd565b9350506020611ee386828701611bb7565b9250506040611ef486828701611bb7565b9150509250925092565b6000611f0a838361259d565b505060c00190565b6000611f1e838361204b565b505060200190565b611f37611f32826129b8565b612a2b565b82525050565b611f37816129b8565b6000611f51826129a1565b611f5b81856129af565b9350611f668361298f565b8060005b83811015611f94578151611f7e8882611efe565b9750611f898361298f565b925050600101611f6a565b509495945050505050565b6000611faa826129a1565b611fb481856129af565b9350611fbf8361298f565b8060005b83811015611f94578151611fd78882611f12565b9750611fe28361298f565b925050600101611fc3565b6000611ff8826129a5565b61200281856129af565b935061200d83612995565b8060005b83811015611f945761202282612a47565b61202c8882611f12565b9750612037836129a9565b925050600101612011565b611f37816129c3565b611f3781610466565b611f3761206082610466565b610466565b6000612070826129a1565b61207a8185610454565b935061208a8185602086016129f1565b9290920192915050565b611f37816129e6565b60006120a8826129a1565b6120b281856129af565b93506120c28185602086016129f1565b6120cb81612a53565b9093019392505050565b60006120e2600a836129af565b694d6178207374616b657360b01b815260200192915050565b60006121086018836129af565b7f43616e6e6f74206265206e6f726d616c207374616b696e670000000000000000815260200192915050565b60006121416010836129af565b6f24b73b30b634b210323ab930ba34b7b760811b815260200192915050565b600061216d600e836129af565b6d043616e6e6f74207374616b6520360941b815260200192915050565b6000612197601b836129af565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006121d0601a836129af565b7f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000815260200192915050565b6000612209600d836129af565b6c092dcecc2d8d2c840d2dcc8caf609b1b815260200192915050565b60006122326020836129af565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b600061226b6011836129af565b7013585e081c985d1948195e18d959591959607a1b815260200192915050565b6000612298601c836129af565b7f4d69736d61746368206475726174696f6e7320616e6420726174657300000000815260200192915050565b60006122d1601a836129af565b7f4e657720476f7665726e6f722069732061646472657373283029000000000000815260200192915050565b600061230a600e836129af565b6d14dd185ada5b99c81c185d5cd95960921b815260200192915050565b60006123346015836129af565b740416c6c207374616b657320696e206c6f636b2d757605c1b815260200192915050565b60006123656021836129af565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006123a8600e836129af565b6d105b1c9958591e481cdd185ad95960921b815260200192915050565b60006123d2600e836129af565b6d139bdd1a1a5b99c81cdd185ad95960921b815260200192915050565b60006123fc602e836129af565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626581526d195b881a5b9a5d1a585b1a5e995960921b602082015260400192915050565b600061244c6014836129af565b73496e73756666696369656e74207265776172647360601b815260200192915050565b600061247c600d836129af565b6c24b73b30b634b210383937b7b360991b815260200192915050565b60006124a5602a836129af565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b60006124f16012836129af565b7114dd185ad9481b9bdd08185c1c1c9bdd995960721b815260200192915050565b600061251f6030836129af565b7f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f81526f6d706c6574652074686520636c61696d60801b602082015260400192915050565b6000612571601f836129af565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b805160c08301906125ae848261204b565b5060208201516125c1602085018261204b565b5060408201516125d4604085018261204b565b5060608201516125e7606085018261260d565b5060808201516125fa6080850182612042565b5060a082015161057c60a0850182612616565b611f37816129d4565b611f37816129e0565b611f3761262b826129e0565b612a3c565b600061263c8285612054565b60208201915061264c8284612054565b5060200192915050565b600061196d8284612065565b600061266e828a612054565b60208201915061267e828961261f565b60018201915061268e8288611f26565b60148201915061269e8287611f26565b6014820191506126ae8286612054565b6020820191506126be8285612054565b6020820191506126ce8284612054565b50602001979650505050505050565b60208101610c028284611f3d565b606081016126f98286611f3d565b6127066020830185611f3d565b611755604083018461204b565b604081016127218285611f3d565b61196d602083018461204b565b60208082528101610bff8184611f46565b60208082528101610bff8184611f9f565b60208082528101610bff8184611fed565b60208101610c028284612042565b60408101612721828561204b565b60208101610c028284612094565b60208082528101610bff818461209d565b60208082528101610c02816120d5565b60208082528101610c02816120fb565b60208082528101610c0281612134565b60208082528101610c0281612160565b60208082528101610c028161218a565b60208082528101610c02816121c3565b60208082528101610c02816121fc565b60208082528101610c0281612225565b60208082528101610c028161225e565b60208082528101610c028161228b565b60208082528101610c02816122c4565b60208082528101610c02816122fd565b60208082528101610c0281612327565b60208082528101610c0281612358565b60208082528101610c028161239b565b60208082528101610c02816123c5565b60208082528101610c02816123ef565b60208082528101610c028161243f565b60208082528101610c028161246f565b60208082528101610c0281612498565b60208082528101610c02816124e4565b60208082528101610c0281612512565b60208082528101610c0281612564565b60208101610c02828461204b565b60c08101612928828961204b565b612935602083018861204b565b612942604083018761204b565b61294f606083018661260d565b61295c6080830185612042565b61296960a0830184612616565b979650505050505050565b606081016129828286612616565b612706602083018561204b565b60200190565b60009081526020902090565b5190565b5490565b60010190565b90815260200190565b6000610c02826129c8565b151590565b6001600160a01b031690565b6001600160f01b031690565b60ff1690565b6000610c02826129b8565b60005b83811015612a0c5781810151838201526020016129f4565b8381111561057c5750506000910152565b6000610c0261206083610466565b6000610c02826000610c0282612a63565b6000610c0282612a5d565b6000610c028254612a1d565b601f01601f191690565b60f81b90565b60601b90565b612a72816129b8565b81146115df57600080fd5b612a72816129c3565b612a7281610466565b612a72816129e056fea365627a7a72315820f18cb5fdc9017870ad4e8741aafbd5f65ce1d71a5300ac96510876e7f5bf0b3f6c6578706572696d656e74616cf564736f6c634300050b0040",
  "devdoc": {
    "methods": {
      "airDroppedStake(uint256,uint8,uint256,uint256,uint256,bytes32[])": {
        "details": "Make a preapproved stake for the user, this is a presigned voucher that the user can redeem either from     an airdrop or a compensation program.     Only 1 of each type is allowed per user. The proof must match the root hash",
        "params": {
          "amount": "Number of tokens to stake in 1e18",
          "duration": "Number of seconds this stake will be held for",
          "index": "Number that is zero base index of the stake in the payout entry",
          "merkleProof": "Array of proofs for that amount",
          "rate": "Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 to fit the bool and type in struct Stake",
          "stakeType": "Number that represent the type of the stake, must not be 0 which is user stake"
        }
      },
      "airDroppedStakeClaimed(address,uint8)": {
        "details": "Has the airdropped stake already been claimed"
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "durationRewardRate(uint256)": {
        "details": "Find the rate that corresponds to a given duration",
        "params": {
          "_duration": "Number of seconds"
        }
      },
      "exit()": {
        "details": "Exit out of all possible stakes"
      },
      "getAllStakes(address)": {
        "details": "Return all the stakes paid and unpaid for a given user",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,uint256[],uint256[])": {
        "details": "Initialize the contracts, sets up durations, rates, and preApprover     for preApproved contracts can only be called once",
        "params": {
          "_durations": "Array of allowed durations in seconds",
          "_rates": "Array of rates(0.3 is 30%) that correspond to the allowed              durations in 1e18 precision",
          "_stakingToken": "Address of the token that we are staking"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "setAirDropRoot(uint8,bytes32,uint256)": {
        "details": "Set air drop root for a specific stake type",
        "params": {
          "_proofDepth": "Depth of the Merklke Tree",
          "_rootHash": "Root hash of the Merkle Tree",
          "_stakeType": "Type of staking must be greater than 0"
        }
      },
      "setDurationRates(uint256[],uint256[])": {
        "details": "Set new durations and rates will not effect existing stakes",
        "params": {
          "_durations": "Array of durations in seconds",
          "_rates": "Array of rates that corresponds to the durations (0.01 is 1%) in 1e18"
        }
      },
      "stake(uint256,uint256)": {
        "details": "Stake an approved amount of staking token into the contract.     User must have already approved the contract for specified amount.",
        "params": {
          "amount": "Number of tokens to stake in 1e18",
          "duration": "Number of seconds this stake will be held for"
        }
      },
      "totalCurrentHoldings(address)": {
        "details": "Calculate all current holdings of a user: staked value + prorated rewards",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "totalExpectedRewards(address)": {
        "details": "Calculate all the rewards a user can expect to receive.",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "totalStaked(address)": {
        "details": "Calculate all the staked value a user has put into the contract,     rewards not included",
        "params": {
          "account": "Address of the account that we want to look up"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}
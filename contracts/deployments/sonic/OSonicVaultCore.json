{
  "address": "0xb3D6e885F0c0f5355C7029AF328fE923EBf9906c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wS",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "AllocateThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "AssetDefaultStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dripper",
          "type": "address"
        }
      ],
      "name": "DripperChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplyDiffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "NetOusdMintForStrategyThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_ousdMetaStrategy",
          "type": "address"
        }
      ],
      "name": "OusdMetaStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebasePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "RebaseThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebaseUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyAddedToMintWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRemovedFromMintWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "SwapAllowedUndervalueChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "SwapSlippageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "SwapperChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "TrusteeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "TrusteeFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "VaultBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDelay",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalClaimDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newClaimable",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalClaimable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_queued",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "YieldDistribution",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "addWithdrawalQueueLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetDefaultStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cacheWETHAssetIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemOutputs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "claimWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_requestIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimWithdrawals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAssetConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSupported",
              "type": "bool"
            },
            {
              "internalType": "enum VaultStorage.UnitConversion",
              "name": "unitConversion",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "allowedOracleSlippageBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct VaultStorage.Asset",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMintWhitelistedStrategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumOusdAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netOusdMintForStrategyThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netOusdMintedForStrategy",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ousdMetaStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUnitMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUnitRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "queued",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAssetIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalClaimDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalQueueMetadata",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "queued",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "claimable",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "claimed",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "nextWithdrawalIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "timestamp",
          "type": "uint40"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queued",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdde05c32cbb67e66eaf2fd6a497c304b535db89fe3a493350e9de5cab253e830",
  "receipt": {
    "to": null,
    "from": "0xFD9E6005187F448957a0972a7d0C0A6dA2911236",
    "contractAddress": "0xb3D6e885F0c0f5355C7029AF328fE923EBf9906c",
    "transactionIndex": 0,
    "gasUsed": "3674937",
    "logsBloom": "0x
    "blockHash": "0xcdeb1dfc2fc4248e3e59987e42d3b028f12f6d988481a7c8463e128c01356412",
    "transactionHash": "0xdde05c32cbb67e66eaf2fd6a497c304b535db89fe3a493350e9de5cab253e830",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3884377,
        "transactionHash": "0xdde05c32cbb67e66eaf2fd6a497c304b535db89fe3a493350e9de5cab253e830",
        "address": "0xb3D6e885F0c0f5355C7029AF328fE923EBf9906c",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd9e6005187f448957a0972a7d0c0a6da2911236"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcdeb1dfc2fc4248e3e59987e42d3b028f12f6d988481a7c8463e128c01356412"
      }
    ],
    "blockNumber": 3884377,
    "cumulativeGasUsed": "3674937",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x039e2fB66102314Ce7b64Ce5Ce3E5183bc94aD38"
  ],
  "numDeployments": 1,
  "solcInputHash": "948eecc0ec79eb2dc715ae4f9ad789c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"AllocateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AssetDefaultStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dripper\",\"type\":\"address\"}],\"name\":\"DripperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyDiffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"NetOusdMintForStrategyThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ousdMetaStrategy\",\"type\":\"address\"}],\"name\":\"OusdMetaStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"RebaseThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebaseUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedToMintWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedFromMintWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"SwapAllowedUndervalueChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"SwapSlippageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toAssetAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SwapperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TrusteeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"TrusteeFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"VaultBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDelay\",\"type\":\"uint256\"}],\"name\":\"WithdrawalClaimDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newClaimable\",\"type\":\"uint256\"}],\"name\":\"WithdrawalClaimable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_queued\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"addWithdrawalQueueLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDefaultStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cacheWETHAssetIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutputs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"claimWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_requestIds\",\"type\":\"uint256[]\"}],\"name\":\"claimWithdrawals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"enum VaultStorage.UnitConversion\",\"name\":\"unitConversion\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"allowedOracleSlippageBps\",\"type\":\"uint16\"}],\"internalType\":\"struct VaultStorage.Asset\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintWhitelistedStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOusdAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netOusdMintForStrategyThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netOusdMintedForStrategy\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ousdMetaStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUnitMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUnitRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAssetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalClaimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalQueueMetadata\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"queued\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nextWithdrawalIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queued\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"addWithdrawalQueueLiquidity()\":{\"details\":\"is called from the Native Staking strategy when validator withdrawals are processed. It also called before any WETH is allocated to a strategy.\"},\"burnForStrategy(uint256)\":{\"details\":\"Notice: can't use `nonReentrant` modifier since the `redeem` function could require withdrawal on `ConvexOUSDMetaStrategy` and that one can call `burnForStrategy` while the execution of the `redeem` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function.\",\"params\":{\"_amount\":\"Amount of OUSD to burn\"}},\"cacheWETHAssetIndex()\":{\"details\":\"Caches WETH's index in `allAssets` variable.      Reduces gas usage by redeem by caching that.\"},\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of asset\"},\"returns\":{\"_0\":\"uint256 Balance of asset in decimals of asset\"}},\"claimWithdrawal(uint256)\":{\"params\":{\"_requestId\":\"Unique ID for the withdrawal request\"},\"returns\":{\"amount\":\"Amount of WETH transferred to the withdrawer\"}},\"claimWithdrawals(uint256[])\":{\"params\":{\"_requestIds\":\"Unique ID of each withdrawal request\"},\"returns\":{\"amounts\":\"Amount of WETH received for each request\",\"totalAmount\":\"Total amount of WETH transferred to the withdrawer\"}},\"constructor\":{\"params\":{\"_wS\":\"Sonic's Wrapped S token\"}},\"getAssetConfig(address)\":{\"params\":{\"_asset\":\"Address of the token asset\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"address of the asset\"},\"returns\":{\"_0\":\"true if supported\"}},\"mint(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset being deposited\",\"_asset\":\"Address of the asset being deposited\",\"_minimumOusdAmount\":\"Minimum OTokens to mint\"}},\"mintForStrategy(uint256)\":{\"params\":{\"_amount\":\"Amount of the asset being deposited Notice: can't use `nonReentrant` modifier since the `mint` function can call `allocate`, and that can trigger `ConvexOUSDMetaStrategy` to call this function while the execution of the `mint` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function.\"}},\"priceUnitMint(address)\":{\"params\":{\"asset\":\"address of the asset\"},\"returns\":{\"price\":\"uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\"}},\"priceUnitRedeem(address)\":{\"params\":{\"asset\":\"Address of the asset\"},\"returns\":{\"price\":\"uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\"}},\"redeemAll(uint256)\":{\"params\":{\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"requestWithdrawal(uint256)\":{\"params\":{\"_amount\":\"Amount of OETH to burn.\"},\"returns\":{\"queued\":\"Cumulative total of all WETH queued including already claimed requests.\",\"requestId\":\"Unique ID for the withdrawal request\"}},\"setAdminImpl(address)\":{\"params\":{\"newImpl\":\"address of the implementation\"}},\"totalValue()\":{\"returns\":{\"value\":\"Total value in USD/ETH (1e18)\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"title\":\"Origin Sonic VaultCore contract on Sonic\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWithdrawalQueueLiquidity()\":{\"notice\":\"Collects harvested rewards from the Dripper as WETH then adds WETH to the withdrawal queue if there is a funding shortfall.\"},\"allocate()\":{\"notice\":\"Allocate unallocated funds on Vault to strategies.*\"},\"assetDefaultStrategies(address)\":{\"notice\":\"Mapping of asset address to the Strategy that they should automatically\"},\"autoAllocateThreshold()\":{\"notice\":\"OToken mints over this amount automatically allocate funds. 18 decimals.\"},\"burnForStrategy(uint256)\":{\"notice\":\"Burn OTokens for Metapool Strategy\"},\"calculateRedeemOutputs(uint256)\":{\"notice\":\"Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned\"},\"capitalPaused()\":{\"notice\":\"pause operations that change the OToken supply. eg mint, redeem, allocate, mint/burn for strategy\"},\"checkBalance(address)\":{\"notice\":\"Get the balance of an asset held in Vault and all strategies.\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"claimWithdrawal(uint256)\":{\"notice\":\"Claim a previously requested withdrawal once it is claimable. This request can be claimed once the withdrawal queue's `claimable` amount is greater than or equal this request's `queued` amount and 10 minutes has passed. If the requests is not claimable, the transaction will revert with `Queue pending liquidity`. If the request is not older than 10 minutes, the transaction will revert with `Claim delay not met`. OETH is converted to WETH at 1:1.\"},\"claimWithdrawals(uint256[])\":{\"notice\":\"Claim a previously requested withdrawals once they are claimable. This requests can be claimed once the withdrawal queue's `claimable` amount is greater than or equal each request's `queued` amount and 10 minutes has passed. If one of the requests is not claimable, the whole transaction will revert with `Queue pending liquidity`. If one of the requests is not older than 10 minutes, the whole transaction will revert with `Claim delay not met`.\"},\"dripper()\":{\"notice\":\"Address of the Dripper contract that streams harvested rewards to the Vault\"},\"getAllAssets()\":{\"notice\":\"Return all vault asset addresses in order\"},\"getAllStrategies()\":{\"notice\":\"Return the array of all strategies\"},\"getAssetConfig(address)\":{\"notice\":\"Gets the vault configuration of a supported asset.\"},\"getAssetCount()\":{\"notice\":\"Return the number of assets supported by the Vault.\"},\"getStrategyCount()\":{\"notice\":\"Return the number of strategies active on the Vault.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"isSupportedAsset(address)\":{\"notice\":\"Returns whether the vault supports the asset\"},\"maxSupplyDiff()\":{\"notice\":\"Max difference between total supply and total value of assets. 18 decimals.\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Deposit a supported asset and mint OTokens.\"},\"mintForStrategy(uint256)\":{\"notice\":\"Mint OTokens for a Metapool Strategy\"},\"netOusdMintForStrategyThreshold()\":{\"notice\":\"How much net total OTokens are allowed to be minted by all strategies\"},\"netOusdMintedForStrategy()\":{\"notice\":\"How much OTokens are currently minted by the strategy\"},\"ousdMetaStrategy()\":{\"notice\":\"Metapool strategy that is allowed to mint/burn OTokens without changing collateral\"},\"priceProvider()\":{\"notice\":\"Address of the Oracle price provider contract\"},\"priceUnitMint(address)\":{\"notice\":\"Returns the total price in 18 digit units for a given asset.      Never goes above 1, since that is how we price mints.\"},\"priceUnitRedeem(address)\":{\"notice\":\"Returns the total price in 18 digit unit for a given asset.      Never goes below 1, since that is how we price redeems\"},\"rebase()\":{\"notice\":\"Calculate the total value of assets held by the Vault and all      strategies and update the supply of OTokens.\"},\"rebasePaused()\":{\"notice\":\"pause rebasing if true\"},\"rebaseThreshold()\":{\"notice\":\"OToken mints over this amount automatically rebase. 18 decimals.\"},\"redeem(uint256,uint256)\":{\"notice\":\"Instant redeem is not supported on Sonic. Use the asynchronous `requestWithdrawal` a `claimWithdrawal` instead.\"},\"redeemAll(uint256)\":{\"notice\":\"Withdraw a supported asset and burn all OTokens.\"},\"redeemFeeBps()\":{\"notice\":\"Redemption fee in basis points. eg 50 = 0.5%\"},\"requestWithdrawal(uint256)\":{\"notice\":\"Request an asynchronous withdrawal of WETH in exchange for OETH. The OETH is burned on request and the WETH is transferred to the withdrawer on claim. This request can be claimed once the withdrawal queue's `claimable` amount is greater than or equal this request's `queued` amount. There is a minimum of 10 minutes before a request can be claimed. After that, the request just needs enough WETH liquidity in the Vault to satisfy all the outstanding requests to that point in the queue. OETH is converted to WETH at 1:1.\"},\"setAdminImpl(address)\":{\"notice\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\"},\"strategistAddr()\":{\"notice\":\"Address of the Strategist\"},\"totalValue()\":{\"notice\":\"Determine the total value of assets held by the vault and its         strategies.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"trusteeAddress()\":{\"notice\":\"Trustee contract that can collect a percentage of yield\"},\"trusteeFeeBps()\":{\"notice\":\"Amount of yield collected in basis points. eg 2000 = 20%\"},\"vaultBuffer()\":{\"notice\":\"Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\"},\"withdrawalClaimDelay()\":{\"notice\":\"Sets a minimum delay that is required to elapse between     requesting async withdrawals and claiming the request.     When set to 0 async withdrawals are disabled.\"},\"withdrawalQueueMetadata()\":{\"notice\":\"Global metadata for the withdrawal queue including: queued - cumulative total of all withdrawal requests included the ones that have already been claimed claimable - cumulative total of all the requests that can be claimed including the ones already claimed claimed - total of all the requests that have been claimed nextWithdrawalIndex - index of the next withdrawal request starting at 0\"},\"withdrawalRequests(uint256)\":{\"notice\":\"Mapping of withdrawal request indices to the user withdrawal request data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/OSonicVaultCore.sol\":\"OSonicVaultCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IDripper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDripper {\\n    /// @notice How much funds have dripped out already and are currently\\n    //   available to be sent to the vault.\\n    /// @return The amount that would be sent if a collect was called\\n    function availableFunds() external view returns (uint256);\\n\\n    /// @notice Collect all dripped funds and send to vault.\\n    ///  Recalculate new drip rate.\\n    function collect() external;\\n\\n    /// @notice Collect all dripped funds, send to vault, recalculate new drip\\n    ///  rate, and rebase mToken.\\n    function collectAndRebase() external;\\n\\n    /// @notice Change the drip duration. Governor only.\\n    /// @param _durationSeconds the number of seconds to drip out the entire\\n    ///  balance over if no collects were called during that time.\\n    function setDripDuration(uint256 _durationSeconds) external;\\n\\n    /// @dev Transfer out ERC20 tokens held by the contract. Governor only.\\n    /// @param _asset ERC20 token address\\n    /// @param _amount amount to transfer\\n    function transferToken(address _asset, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf160a884d11a9e38ab14d504aa0c3318e78244e4d4c37b555658e0dbbe42c1ce\",\"license\":\"MIT\"},\"contracts/interfaces/IGetExchangeRateToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGetExchangeRateToken {\\n    function getExchangeRate() external view returns (uint256 _exchangeRate);\\n}\\n\",\"keccak256\":\"0x243be4dffe1eb453d25cae22b6c172bb64c574d80943cef058fdc30a4b9c9bfd\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eabf152389f145c9c23ed71972af73fb1708cbc4b26e524a9ba29a557b7cfe5\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract OUSD is Governable {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Event triggered when the supply changes\\n    /// @param totalSupply Updated token total supply\\n    /// @param rebasingCredits Updated token rebasing credits\\n    /// @param rebasingCreditsPerToken Updated token rebasing credits per token\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    /// @dev Event triggered when an account opts in for rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingEnabled(address account);\\n    /// @dev Event triggered when an account opts out of rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingDisabled(address account);\\n    /// @dev Emitted when `value` tokens are moved from one account `from` to\\n    ///      another `to`.\\n    /// @param from Address of the account tokens are moved from\\n    /// @param to Address of the account tokens are moved to\\n    /// @param value Amount of tokens transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    ///      a call to {approve}. `value` is the new allowance.\\n    /// @param owner Address of the owner approving allowance\\n    /// @param spender Address of the spender allowance is granted to\\n    /// @param value Amount of tokens spender can transfer\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    /// @dev Yield resulting from {changeSupply} that a `source` account would\\n    ///      receive is directed to `target` account.\\n    /// @param source Address of the source forwarding the yield\\n    /// @param target Address of the target receiving the yield\\n    event YieldDelegated(address source, address target);\\n    /// @dev Yield delegation from `source` account to the `target` account is\\n    ///      suspended.\\n    /// @param source Address of the source suspending yield forwarding\\n    /// @param target Address of the target no longer receiving yield from `source`\\n    ///        account\\n    event YieldUndelegated(address source, address target);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        StdNonRebasing,\\n        StdRebasing,\\n        YieldDelegationSource,\\n        YieldDelegationTarget\\n    }\\n\\n    uint256[154] private _gap; // Slots to align with deployed contract\\n    uint256 private constant MAX_SUPPLY = type(uint128).max;\\n    /// @dev The amount of tokens in existence\\n    uint256 public totalSupply;\\n    mapping(address => mapping(address => uint256)) private allowances;\\n    /// @dev The vault with privileges to execute {mint}, {burn}\\n    ///     and {changeSupply}\\n    address public vaultAddress;\\n    mapping(address => uint256) internal creditBalances;\\n    // the 2 storage variables below need trailing underscores to not name collide with public functions\\n    uint256 private rebasingCredits_; // Sum of all rebasing credits (creditBalances for rebasing accounts)\\n    uint256 private rebasingCreditsPerToken_;\\n    /// @dev The amount of tokens that are not rebasing - receiving yield\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) internal alternativeCreditsPerToken;\\n    /// @dev A map of all addresses and their respective RebaseOptions\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) private __deprecated_isUpgraded;\\n    /// @dev A map of addresses that have yields forwarded to. This is an\\n    ///      inverse mapping of {yieldFrom}\\n    /// Key Account forwarding yield\\n    /// Value Account receiving yield\\n    mapping(address => address) public yieldTo;\\n    /// @dev A map of addresses that are receiving the yield. This is an\\n    ///      inverse mapping of {yieldTo}\\n    /// Key Account receiving yield\\n    /// Value Account forwarding yield\\n    mapping(address => address) public yieldFrom;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n    uint256[34] private __gap; // including below gap totals up to 200\\n\\n    /// @dev Initializes the contract and sets necessary variables.\\n    /// @param _vaultAddress Address of the vault contract\\n    /// @param _initialCreditsPerToken The starting rebasing credits per token.\\n    function initialize(address _vaultAddress, uint256 _initialCreditsPerToken)\\n        external\\n        onlyGovernor\\n    {\\n        require(_vaultAddress != address(0), \\\"Zero vault address\\\");\\n        require(vaultAddress == address(0), \\\"Already initialized\\\");\\n\\n        rebasingCreditsPerToken_ = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /// @dev Returns the symbol of the token, a shorter version\\n    ///      of the name.\\n    function symbol() external pure virtual returns (string memory) {\\n        return \\\"OUSD\\\";\\n    }\\n\\n    /// @dev Returns the name of the token.\\n    function name() external pure virtual returns (string memory) {\\n        return \\\"Origin Dollar\\\";\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    function decimals() external pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256) {\\n        return rebasingCreditsPerToken_;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() external view returns (uint256) {\\n        return rebasingCreditsPerToken_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() external view returns (uint256) {\\n        return rebasingCredits_;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() external view returns (uint256) {\\n        return rebasingCredits_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        RebaseOptions state = rebaseState[_account];\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            // Saves a slot read when transferring to or from a yield delegating source\\n            // since we know creditBalances equals the balance.\\n            return creditBalances[_account];\\n        }\\n        uint256 baseBalance = (creditBalances[_account] * 1e18) /\\n            _creditsPerToken(_account);\\n        if (state == RebaseOptions.YieldDelegationTarget) {\\n            // creditBalances of yieldFrom accounts equals token balances\\n            return baseBalance - creditBalances[yieldFrom[_account]];\\n        }\\n        return baseBalance;\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            creditBalances[_account],\\n            _creditsPerToken(_account),\\n            true // all accounts have their resolution \\\"upgraded\\\"\\n        );\\n    }\\n\\n    // Backwards compatible view\\n    function nonRebasingCreditsPerToken(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return alternativeCreditsPerToken[_account];\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     * @return true on success.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        uint256 userAllowance = allowances[_from][msg.sender];\\n        require(_value <= userAllowance, \\\"Allowance exceeded\\\");\\n\\n        unchecked {\\n            allowances[_from][msg.sender] = userAllowance - _value;\\n        }\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        (\\n            int256 fromRebasingCreditsDiff,\\n            int256 fromNonRebasingSupplyDiff\\n        ) = _adjustAccount(_from, -_value.toInt256());\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_to, _value.toInt256());\\n\\n        _adjustGlobals(\\n            fromRebasingCreditsDiff + toRebasingCreditsDiff,\\n            fromNonRebasingSupplyDiff + toNonRebasingSupplyDiff\\n        );\\n    }\\n\\n    function _adjustAccount(address _account, int256 _balanceChange)\\n        internal\\n        returns (int256 rebasingCreditsDiff, int256 nonRebasingSupplyDiff)\\n    {\\n        RebaseOptions state = rebaseState[_account];\\n        int256 currentBalance = balanceOf(_account).toInt256();\\n        if (currentBalance + _balanceChange < 0) {\\n            revert(\\\"Transfer amount exceeds balance\\\");\\n        }\\n        uint256 newBalance = (currentBalance + _balanceChange).toUint256();\\n\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            address target = yieldTo[_account];\\n            uint256 targetOldBalance = balanceOf(target);\\n            uint256 targetNewCredits = _balanceToRebasingCredits(\\n                targetOldBalance + newBalance\\n            );\\n            rebasingCreditsDiff =\\n                targetNewCredits.toInt256() -\\n                creditBalances[target].toInt256();\\n\\n            creditBalances[_account] = newBalance;\\n            creditBalances[target] = targetNewCredits;\\n        } else if (state == RebaseOptions.YieldDelegationTarget) {\\n            uint256 newCredits = _balanceToRebasingCredits(\\n                newBalance + creditBalances[yieldFrom[_account]]\\n            );\\n            rebasingCreditsDiff =\\n                newCredits.toInt256() -\\n                creditBalances[_account].toInt256();\\n            creditBalances[_account] = newCredits;\\n        } else {\\n            _autoMigrate(_account);\\n            uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n                _account\\n            ];\\n            if (alternativeCreditsPerTokenMem > 0) {\\n                nonRebasingSupplyDiff = _balanceChange;\\n                if (alternativeCreditsPerTokenMem != 1e18) {\\n                    alternativeCreditsPerToken[_account] = 1e18;\\n                }\\n                creditBalances[_account] = newBalance;\\n            } else {\\n                uint256 newCredits = _balanceToRebasingCredits(newBalance);\\n                rebasingCreditsDiff =\\n                    newCredits.toInt256() -\\n                    creditBalances[_account].toInt256();\\n                creditBalances[_account] = newCredits;\\n            }\\n        }\\n    }\\n\\n    function _adjustGlobals(\\n        int256 _rebasingCreditsDiff,\\n        int256 _nonRebasingSupplyDiff\\n    ) internal {\\n        if (_rebasingCreditsDiff != 0) {\\n            rebasingCredits_ = (rebasingCredits_.toInt256() +\\n                _rebasingCreditsDiff).toUint256();\\n        }\\n        if (_nonRebasingSupplyDiff != 0) {\\n            nonRebasingSupply = (nonRebasingSupply.toInt256() +\\n                _nonRebasingSupplyDiff).toUint256();\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to check the amount of tokens that _owner has allowed\\n     *      to `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @notice Approve the passed address to spend the specified amount of\\n     *      tokens on behalf of msg.sender.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     * @return true on success.\\n     */\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates `_amount` tokens and assigns them to `_account`,\\n     *     increasing the total supply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, _amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply + _amount;\\n\\n        require(totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @notice Destroys `_amount` tokens from `_account`,\\n     *     reducing the total supply.\\n     */\\n    function burn(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, -_amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply - _amount;\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n            _account\\n        ];\\n        if (alternativeCreditsPerTokenMem != 0) {\\n            return alternativeCreditsPerTokenMem;\\n        } else {\\n            return rebasingCreditsPerToken_;\\n        }\\n    }\\n\\n    /**\\n     * @dev Auto migrate contracts to be non rebasing,\\n     *     unless they have opted into yield.\\n     * @param _account Address of the account.\\n     */\\n    function _autoMigrate(address _account) internal {\\n        bool isContract = _account.code.length > 0;\\n        // In previous code versions, contracts would not have had their\\n        // rebaseState[_account] set to RebaseOptions.NonRebasing when migrated\\n        // therefore we check the actual accounting used on the account instead.\\n        if (\\n            isContract &&\\n            rebaseState[_account] == RebaseOptions.NotSet &&\\n            alternativeCreditsPerToken[_account] == 0\\n        ) {\\n            _rebaseOptOut(_account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates credits from contract's global rebasingCreditsPerToken_, and\\n     *      also balance that corresponds to those credits. The latter is important\\n     *      when adjusting the contract's global nonRebasingSupply to circumvent any\\n     *      possible rounding errors.\\n     *\\n     * @param _balance Balance of the account.\\n     */\\n    function _balanceToRebasingCredits(uint256 _balance)\\n        internal\\n        view\\n        returns (uint256 rebasingCredits)\\n    {\\n        // Rounds up, because we need to ensure that accounts always have\\n        // at least the balance that they should have.\\n        // Note this should always be used on an absolute account value,\\n        // not on a possibly negative diff, because then the rounding would be wrong.\\n        return ((_balance) * rebasingCreditsPerToken_ + 1e18 - 1) / 1e18;\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account) external onlyGovernor {\\n        require(_account != address(0), \\\"Zero address not allowed\\\");\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     */\\n    function rebaseOptIn() external {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        uint256 balance = balanceOf(_account);\\n\\n        // prettier-ignore\\n        require(\\n            alternativeCreditsPerToken[_account] > 0 ||\\n                // Accounts may explicitly `rebaseOptIn` regardless of\\n                // accounting if they have a 0 balance.\\n                creditBalances[_account] == 0\\n            ,\\n            \\\"Account must be non-rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        // prettier-ignore\\n        require(\\n            state == RebaseOptions.StdNonRebasing ||\\n                state == RebaseOptions.NotSet,\\n            \\\"Only standard non-rebasing accounts can opt in\\\"\\n        );\\n\\n        uint256 newCredits = _balanceToRebasingCredits(balance);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdRebasing;\\n        alternativeCreditsPerToken[_account] = 0;\\n        creditBalances[_account] = newCredits;\\n        // Globals\\n        _adjustGlobals(newCredits.toInt256(), -balance.toInt256());\\n\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will no longer receive yield\\n     */\\n    function rebaseOptOut() external {\\n        _rebaseOptOut(msg.sender);\\n    }\\n\\n    function _rebaseOptOut(address _account) internal {\\n        require(\\n            alternativeCreditsPerToken[_account] == 0,\\n            \\\"Account must be rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        require(\\n            state == RebaseOptions.StdRebasing || state == RebaseOptions.NotSet,\\n            \\\"Only standard rebasing accounts can opt out\\\"\\n        );\\n\\n        uint256 oldCredits = creditBalances[_account];\\n        uint256 balance = balanceOf(_account);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdNonRebasing;\\n        alternativeCreditsPerToken[_account] = 1e18;\\n        creditBalances[_account] = balance;\\n        // Globals\\n        _adjustGlobals(-oldCredits.toInt256(), balance.toInt256());\\n\\n        emit AccountRebasingDisabled(_account);\\n    }\\n\\n    /**\\n     * @notice Distribute yield to users. This changes the exchange rate\\n     *  between \\\"credits\\\" and OUSD tokens to change rebasing user's balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply) external onlyVault {\\n        require(totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                totalSupply,\\n                rebasingCredits_,\\n                rebasingCreditsPerToken_\\n            );\\n            return;\\n        }\\n\\n        totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        uint256 rebasingSupply = totalSupply - nonRebasingSupply;\\n        // round up in the favour of the protocol\\n        rebasingCreditsPerToken_ =\\n            (rebasingCredits_ * 1e18 + rebasingSupply - 1) /\\n            rebasingSupply;\\n\\n        require(rebasingCreditsPerToken_ > 0, \\\"Invalid change in supply\\\");\\n\\n        emit TotalSupplyUpdatedHighres(\\n            totalSupply,\\n            rebasingCredits_,\\n            rebasingCreditsPerToken_\\n        );\\n    }\\n\\n    /*\\n     * @notice Send the yield from one account to another account.\\n     *         Each account keeps its own balances.\\n     */\\n    function delegateYield(address _from, address _to) external onlyGovernor {\\n        require(_from != address(0), \\\"Zero from address not allowed\\\");\\n        require(_to != address(0), \\\"Zero to address not allowed\\\");\\n\\n        require(_from != _to, \\\"Cannot delegate to self\\\");\\n        require(\\n            yieldFrom[_to] == address(0) &&\\n                yieldTo[_to] == address(0) &&\\n                yieldFrom[_from] == address(0) &&\\n                yieldTo[_from] == address(0),\\n            \\\"Blocked by existing yield delegation\\\"\\n        );\\n        RebaseOptions stateFrom = rebaseState[_from];\\n        RebaseOptions stateTo = rebaseState[_to];\\n\\n        require(\\n            stateFrom == RebaseOptions.NotSet ||\\n                stateFrom == RebaseOptions.StdNonRebasing ||\\n                stateFrom == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState from\\\"\\n        );\\n\\n        require(\\n            stateTo == RebaseOptions.NotSet ||\\n                stateTo == RebaseOptions.StdNonRebasing ||\\n                stateTo == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState to\\\"\\n        );\\n\\n        if (alternativeCreditsPerToken[_from] == 0) {\\n            _rebaseOptOut(_from);\\n        }\\n        if (alternativeCreditsPerToken[_to] > 0) {\\n            _rebaseOptIn(_to);\\n        }\\n\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(_to);\\n        uint256 oldToCredits = creditBalances[_to];\\n        uint256 newToCredits = _balanceToRebasingCredits(\\n            fromBalance + toBalance\\n        );\\n\\n        // Set up the bidirectional links\\n        yieldTo[_from] = _to;\\n        yieldFrom[_to] = _from;\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.YieldDelegationSource;\\n        alternativeCreditsPerToken[_from] = 1e18;\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[_to] = RebaseOptions.YieldDelegationTarget;\\n        creditBalances[_to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, -(fromBalance).toInt256());\\n        emit YieldDelegated(_from, _to);\\n    }\\n\\n    /*\\n     * @notice Stop sending the yield from one account to another account.\\n     */\\n    function undelegateYield(address _from) external onlyGovernor {\\n        // Require a delegation, which will also ensure a valid delegation\\n        require(yieldTo[_from] != address(0), \\\"Zero address not allowed\\\");\\n\\n        address to = yieldTo[_from];\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(to);\\n        uint256 oldToCredits = creditBalances[to];\\n        uint256 newToCredits = _balanceToRebasingCredits(toBalance);\\n\\n        // Remove the bidirectional links\\n        yieldFrom[to] = address(0);\\n        yieldTo[_from] = address(0);\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.StdNonRebasing;\\n        // alternativeCreditsPerToken[from] already 1e18 from `delegateYield()`\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[to] = RebaseOptions.StdRebasing;\\n        // alternativeCreditsPerToken[to] already 0 from `delegateYield()`\\n        creditBalances[to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, fromBalance.toInt256());\\n        emit YieldUndelegated(_from, to);\\n    }\\n}\\n\",\"keccak256\":\"0x5741d16e48d6031ec92c1e189ea023c78a34956b6bc9642ea9dfc9a6dafe49ca\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/OETHVaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { VaultCore } from \\\"./VaultCore.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IDripper } from \\\"../interfaces/IDripper.sol\\\";\\n\\n/**\\n * @title OETH VaultCore Contract\\n * @author Origin Protocol Inc\\n */\\ncontract OETHVaultCore is VaultCore {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    address public immutable weth;\\n    uint256 public wethAssetIndex;\\n\\n    // For future use (because OETHBaseVaultCore inherits from this)\\n    uint256[50] private __gap;\\n\\n    constructor(address _weth) {\\n        weth = _weth;\\n    }\\n\\n    /**\\n     * @dev Caches WETH's index in `allAssets` variable.\\n     *      Reduces gas usage by redeem by caching that.\\n     */\\n    function cacheWETHAssetIndex() external onlyGovernor {\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i; i < assetCount; ++i) {\\n            if (allAssets[i] == weth) {\\n                wethAssetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        require(allAssets[wethAssetIndex] == weth, \\\"Invalid WETH Asset Index\\\");\\n    }\\n\\n    // @inheritdoc VaultCore\\n    // slither-disable-start reentrancy-no-eth\\n    function _mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) internal virtual override {\\n        require(_asset == weth, \\\"Unsupported asset for minting\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            _amount >= _minimumOusdAmount,\\n            \\\"Mint amount lower than minimum\\\"\\n        );\\n\\n        emit Mint(msg.sender, _amount);\\n\\n        // Rebase must happen before any transfers occur.\\n        if (!rebasePaused && _amount >= rebaseThreshold) {\\n            // Stream any harvested rewards (WETH) that are available to the Vault\\n            IDripper(dripper).collect();\\n\\n            _rebase();\\n        }\\n\\n        // Mint oTokens\\n        oUSD.mint(msg.sender, _amount);\\n\\n        // Transfer the deposited coins to the vault\\n        IERC20(_asset).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Give priority to the withdrawal queue for the new WETH liquidity\\n        _addWithdrawalQueueLiquidity();\\n\\n        // Auto-allocate if necessary\\n        if (_amount >= autoAllocateThreshold) {\\n            _allocate();\\n        }\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    // @inheritdoc VaultCore\\n    function _calculateRedeemOutputs(uint256 _amount)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory outputs)\\n    {\\n        // Overrides `VaultCore._calculateRedeemOutputs` to redeem with only\\n        // WETH instead of LST-mix. Doesn't change the function signature\\n        // for backward compatibility\\n\\n        // Calculate redeem fee\\n        if (redeemFeeBps > 0) {\\n            uint256 redeemFee = _amount.mulTruncateScale(redeemFeeBps, 1e4);\\n            _amount = _amount - redeemFee;\\n        }\\n\\n        // Ensure that the WETH index is cached\\n        uint256 _wethAssetIndex = wethAssetIndex;\\n        require(\\n            allAssets[_wethAssetIndex] == weth,\\n            \\\"WETH Asset index not cached\\\"\\n        );\\n\\n        outputs = new uint256[](allAssets.length);\\n        outputs[_wethAssetIndex] = _amount;\\n    }\\n\\n    // @inheritdoc VaultCore\\n    function _redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        internal\\n        virtual\\n        override\\n    {\\n        // Override `VaultCore._redeem` to simplify it. Gets rid of oracle\\n        // usage and looping through all assets for LST-mix redeem. Instead\\n        // does a simple WETH-only redeem.\\n        emit Redeem(msg.sender, _amount);\\n\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // Amount excluding fees\\n        uint256 amountMinusFee = _calculateRedeemOutputs(_amount)[\\n            wethAssetIndex\\n        ];\\n\\n        require(\\n            amountMinusFee >= _minimumUnitAmount,\\n            \\\"Redeem amount lower than minimum\\\"\\n        );\\n\\n        // Is there enough WETH in the Vault available after accounting for the withdrawal queue\\n        require(_wethAvailable() >= amountMinusFee, \\\"Liquidity error\\\");\\n\\n        // Transfer WETH minus the fee to the redeemer\\n        IERC20(weth).safeTransfer(msg.sender, amountMinusFee);\\n\\n        // Burn OETH from user (including fees)\\n        oUSD.burn(msg.sender, _amount);\\n\\n        // Prevent insolvency\\n        _postRedeem(_amount);\\n    }\\n\\n    /**\\n     * @notice Request an asynchronous withdrawal of WETH in exchange for OETH.\\n     * The OETH is burned on request and the WETH is transferred to the withdrawer on claim.\\n     * This request can be claimed once the withdrawal queue's `claimable` amount\\n     * is greater than or equal this request's `queued` amount.\\n     * There is a minimum of 10 minutes before a request can be claimed. After that, the request just needs\\n     * enough WETH liquidity in the Vault to satisfy all the outstanding requests to that point in the queue.\\n     * OETH is converted to WETH at 1:1.\\n     * @param _amount Amount of OETH to burn.\\n     * @return requestId Unique ID for the withdrawal request\\n     * @return queued Cumulative total of all WETH queued including already claimed requests.\\n     */\\n    function requestWithdrawal(uint256 _amount)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        nonReentrant\\n        returns (uint256 requestId, uint256 queued)\\n    {\\n        require(withdrawalClaimDelay > 0, \\\"Async withdrawals not enabled\\\");\\n\\n        // The check that the requester has enough OETH is done in to later burn call\\n\\n        requestId = withdrawalQueueMetadata.nextWithdrawalIndex;\\n        queued = withdrawalQueueMetadata.queued + _amount;\\n\\n        // Store the next withdrawal request\\n        withdrawalQueueMetadata.nextWithdrawalIndex = SafeCast.toUint128(\\n            requestId + 1\\n        );\\n        // Store the updated queued amount which reserves WETH in the withdrawal queue\\n        // and reduces the vault's total assets\\n        withdrawalQueueMetadata.queued = SafeCast.toUint128(queued);\\n        // Store the user's withdrawal request\\n        withdrawalRequests[requestId] = WithdrawalRequest({\\n            withdrawer: msg.sender,\\n            claimed: false,\\n            timestamp: uint40(block.timestamp),\\n            amount: SafeCast.toUint128(_amount),\\n            queued: SafeCast.toUint128(queued)\\n        });\\n\\n        // Burn the user's OETH\\n        oUSD.burn(msg.sender, _amount);\\n\\n        // Prevent withdrawal if the vault is solvent by more than the the allowed percentage\\n        _postRedeem(_amount);\\n\\n        emit WithdrawalRequested(msg.sender, requestId, _amount, queued);\\n    }\\n\\n    // slither-disable-start reentrancy-no-eth\\n    /**\\n     * @notice Claim a previously requested withdrawal once it is claimable.\\n     * This request can be claimed once the withdrawal queue's `claimable` amount\\n     * is greater than or equal this request's `queued` amount and 10 minutes has passed.\\n     * If the requests is not claimable, the transaction will revert with `Queue pending liquidity`.\\n     * If the request is not older than 10 minutes, the transaction will revert with `Claim delay not met`.\\n     * OETH is converted to WETH at 1:1.\\n     * @param _requestId Unique ID for the withdrawal request\\n     * @return amount Amount of WETH transferred to the withdrawer\\n     */\\n    function claimWithdrawal(uint256 _requestId)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        nonReentrant\\n        returns (uint256 amount)\\n    {\\n        // Try and get more liquidity if there is not enough available\\n        if (\\n            withdrawalRequests[_requestId].queued >\\n            withdrawalQueueMetadata.claimable\\n        ) {\\n            // Stream any harvested rewards (WETH) that are available to the Vault\\n            IDripper(dripper).collect();\\n\\n            // Add any WETH from the Dripper to the withdrawal queue\\n            _addWithdrawalQueueLiquidity();\\n        }\\n\\n        amount = _claimWithdrawal(_requestId);\\n\\n        // transfer WETH from the vault to the withdrawer\\n        IERC20(weth).safeTransfer(msg.sender, amount);\\n\\n        // Prevent insolvency\\n        _postRedeem(amount);\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    /**\\n     * @notice Claim a previously requested withdrawals once they are claimable.\\n     * This requests can be claimed once the withdrawal queue's `claimable` amount\\n     * is greater than or equal each request's `queued` amount and 10 minutes has passed.\\n     * If one of the requests is not claimable, the whole transaction will revert with `Queue pending liquidity`.\\n     * If one of the requests is not older than 10 minutes,\\n     * the whole transaction will revert with `Claim delay not met`.\\n     * @param _requestIds Unique ID of each withdrawal request\\n     * @return amounts Amount of WETH received for each request\\n     * @return totalAmount Total amount of WETH transferred to the withdrawer\\n     */\\n    function claimWithdrawals(uint256[] calldata _requestIds)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        nonReentrant\\n        returns (uint256[] memory amounts, uint256 totalAmount)\\n    {\\n        // Just call the Dripper instead of looping through _requestIds to find the highest id\\n        // and checking it's queued amount is > the queue's claimable amount.\\n\\n        // Stream any harvested rewards (WETH) that are available to the Vault\\n        IDripper(dripper).collect();\\n\\n        // Add any WETH from the Dripper to the withdrawal queue\\n        _addWithdrawalQueueLiquidity();\\n\\n        amounts = new uint256[](_requestIds.length);\\n        for (uint256 i; i < _requestIds.length; ++i) {\\n            amounts[i] = _claimWithdrawal(_requestIds[i]);\\n            totalAmount += amounts[i];\\n        }\\n\\n        // transfer all the claimed WETH from the vault to the withdrawer\\n        IERC20(weth).safeTransfer(msg.sender, totalAmount);\\n\\n        // Prevent insolvency\\n        _postRedeem(totalAmount);\\n    }\\n\\n    function _claimWithdrawal(uint256 requestId)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        require(withdrawalClaimDelay > 0, \\\"Async withdrawals not enabled\\\");\\n\\n        // Load the structs from storage into memory\\n        WithdrawalRequest memory request = withdrawalRequests[requestId];\\n        WithdrawalQueueMetadata memory queue = withdrawalQueueMetadata;\\n\\n        require(\\n            request.timestamp + withdrawalClaimDelay <= block.timestamp,\\n            \\\"Claim delay not met\\\"\\n        );\\n        // If there isn't enough reserved liquidity in the queue to claim\\n        require(request.queued <= queue.claimable, \\\"Queue pending liquidity\\\");\\n        require(request.withdrawer == msg.sender, \\\"Not requester\\\");\\n        require(request.claimed == false, \\\"Already claimed\\\");\\n\\n        // Store the request as claimed\\n        withdrawalRequests[requestId].claimed = true;\\n        // Store the updated claimed amount\\n        withdrawalQueueMetadata.claimed = queue.claimed + request.amount;\\n\\n        emit WithdrawalClaimed(msg.sender, requestId, request.amount);\\n\\n        return request.amount;\\n    }\\n\\n    /// @notice Collects harvested rewards from the Dripper as WETH then\\n    /// adds WETH to the withdrawal queue if there is a funding shortfall.\\n    /// @dev is called from the Native Staking strategy when validator withdrawals are processed.\\n    /// It also called before any WETH is allocated to a strategy.\\n    function addWithdrawalQueueLiquidity() external {\\n        // Stream any harvested rewards (WETH) that are available to the Vault\\n        IDripper(dripper).collect();\\n\\n        _addWithdrawalQueueLiquidity();\\n    }\\n\\n    /// @dev Adds WETH to the withdrawal queue if there is a funding shortfall.\\n    /// This assumes 1 WETH equal 1 OETH.\\n    function _addWithdrawalQueueLiquidity()\\n        internal\\n        returns (uint256 addedClaimable)\\n    {\\n        WithdrawalQueueMetadata memory queue = withdrawalQueueMetadata;\\n\\n        // Check if the claimable WETH is less than the queued amount\\n        uint256 queueShortfall = queue.queued - queue.claimable;\\n\\n        // No need to do anything is the withdrawal queue is full funded\\n        if (queueShortfall == 0) {\\n            return 0;\\n        }\\n\\n        uint256 wethBalance = IERC20(weth).balanceOf(address(this));\\n\\n        // Of the claimable withdrawal requests, how much is unclaimed?\\n        // That is, the amount of WETH that is currently allocated for the withdrawal queue\\n        uint256 allocatedWeth = queue.claimable - queue.claimed;\\n\\n        // If there is no unallocated WETH then there is nothing to add to the queue\\n        if (wethBalance <= allocatedWeth) {\\n            return 0;\\n        }\\n\\n        uint256 unallocatedWeth = wethBalance - allocatedWeth;\\n\\n        // the new claimable amount is the smaller of the queue shortfall or unallocated weth\\n        addedClaimable = queueShortfall < unallocatedWeth\\n            ? queueShortfall\\n            : unallocatedWeth;\\n        uint256 newClaimable = queue.claimable + addedClaimable;\\n\\n        // Store the new claimable amount back to storage\\n        withdrawalQueueMetadata.claimable = SafeCast.toUint128(newClaimable);\\n\\n        // emit a WithdrawalClaimable event\\n        emit WithdrawalClaimable(newClaimable, addedClaimable);\\n    }\\n\\n    /***************************************\\n                View Functions\\n    ****************************************/\\n\\n    /// @dev Calculate how much WETH in the vault is not reserved for the withdrawal queue.\\n    // That is, it is available to be redeemed or deposited into a strategy.\\n    function _wethAvailable() internal view returns (uint256 wethAvailable) {\\n        WithdrawalQueueMetadata memory queue = withdrawalQueueMetadata;\\n\\n        // The amount of WETH that is still to be claimed in the withdrawal queue\\n        uint256 outstandingWithdrawals = queue.queued - queue.claimed;\\n\\n        // The amount of sitting in WETH in the vault\\n        uint256 wethBalance = IERC20(weth).balanceOf(address(this));\\n\\n        // If there is not enough WETH in the vault to cover the outstanding withdrawals\\n        if (wethBalance <= outstandingWithdrawals) {\\n            return 0;\\n        }\\n\\n        return wethBalance - outstandingWithdrawals;\\n    }\\n\\n    /// @dev Get the balance of an asset held in Vault and all strategies\\n    /// less any WETH that is reserved for the withdrawal queue.\\n    /// WETH is the only asset that can return a non-zero balance.\\n    /// All other assets will return 0 even if there is some dust amounts left in the Vault.\\n    /// For example, there is 1 wei left of stETH in the OETH Vault but will return 0 in this function.\\n    ///\\n    /// If there is not enough WETH in the vault and all strategies to cover all outstanding\\n    /// withdrawal requests then return a WETH balance of 0\\n    function _checkBalance(address _asset)\\n        internal\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        if (_asset != weth) {\\n            return 0;\\n        }\\n\\n        // Get the WETH in the vault and the strategies\\n        balance = super._checkBalance(_asset);\\n\\n        WithdrawalQueueMetadata memory queue = withdrawalQueueMetadata;\\n\\n        // If the vault becomes insolvent enough that the total value in the vault and all strategies\\n        // is less than the outstanding withdrawals.\\n        // For example, there was a mass slashing event and most users request a withdrawal.\\n        if (balance + queue.claimed < queue.queued) {\\n            return 0;\\n        }\\n\\n        // Need to remove WETH that is reserved for the withdrawal queue\\n        return balance + queue.claimed - queue.queued;\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function allocate() external override whenNotCapitalPaused nonReentrant {\\n        // Add any unallocated WETH to the withdrawal queue first\\n        _addWithdrawalQueueLiquidity();\\n\\n        _allocate();\\n    }\\n\\n    /// @dev Allocate WETH to the default WETH strategy if there is excess to the Vault buffer.\\n    /// This is called from either `mint` or `allocate` and assumes `_addWithdrawalQueueLiquidity`\\n    /// has been called before this function.\\n    function _allocate() internal override {\\n        // No need to do anything if no default strategy for WETH\\n        address depositStrategyAddr = assetDefaultStrategies[weth];\\n        if (depositStrategyAddr == address(0)) return;\\n\\n        uint256 wethAvailableInVault = _wethAvailable();\\n        // No need to do anything if there isn't any WETH in the vault to allocate\\n        if (wethAvailableInVault == 0) return;\\n\\n        // Calculate the target buffer for the vault using the total supply\\n        uint256 totalSupply = oUSD.totalSupply();\\n        uint256 targetBuffer = totalSupply.mulTruncate(vaultBuffer);\\n\\n        // If available WETH in the Vault is below or equal the target buffer then there's nothing to allocate\\n        if (wethAvailableInVault <= targetBuffer) return;\\n\\n        // The amount of assets to allocate to the default strategy\\n        uint256 allocateAmount = wethAvailableInVault - targetBuffer;\\n\\n        IStrategy strategy = IStrategy(depositStrategyAddr);\\n        // Transfer WETH to the strategy and call the strategy's deposit function\\n        IERC20(weth).safeTransfer(address(strategy), allocateAmount);\\n        strategy.deposit(weth, allocateAmount);\\n\\n        emit AssetAllocated(weth, depositStrategyAddr, allocateAmount);\\n    }\\n\\n    /// @dev The total value of all WETH held by the vault and all its strategies\\n    /// less any WETH that is reserved for the withdrawal queue.\\n    ///\\n    // If there is not enough WETH in the vault and all strategies to cover all outstanding\\n    // withdrawal requests then return a total value of 0.\\n    function _totalValue() internal view override returns (uint256 value) {\\n        // As WETH is the only asset, just return the WETH balance\\n        return _checkBalance(weth);\\n    }\\n\\n    /// @dev Only WETH is supported in the OETH Vault so return the WETH balance only\\n    /// Any ETH balances in the Vault will be ignored.\\n    /// Amounts from previously supported vault assets will also be ignored.\\n    /// For example, there is 1 wei left of stETH in the OETH Vault but is will be ignored.\\n    function _totalValueInVault()\\n        internal\\n        view\\n        override\\n        returns (uint256 value)\\n    {\\n        value = IERC20(weth).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa7954411d556fd5a9dd3dfc86166965fbc407e94bc4505401ab5b7c8bc8f9445\",\"license\":\"MIT\"},\"contracts/vault/OSonicVaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { OETHVaultCore } from \\\"./OETHVaultCore.sol\\\";\\n\\n/**\\n * @title Origin Sonic VaultCore contract on Sonic\\n * @author Origin Protocol Inc\\n */\\ncontract OSonicVaultCore is OETHVaultCore {\\n    /// @param _wS Sonic's Wrapped S token\\n    constructor(address _wS) OETHVaultCore(_wS) {}\\n\\n    /**\\n     * @notice Instant redeem is not supported on Sonic.\\n     * Use the asynchronous `requestWithdrawal` a `claimWithdrawal` instead.\\n     */\\n    function redeem(uint256, uint256) external override {\\n        revert(\\\"unsupported function\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x663cd2058e7e1d2b32f3c14e6f7c459bdf913d953d690bddfcb8b6d85661c501\",\"license\":\"MIT\"},\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultCore contract\\n * @notice The Vault contract stores assets. On a deposit, OTokens will be minted\\n           and sent to the depositor. On a withdrawal, OTokens will be burned and\\n           assets will be sent to the withdrawer. The Vault accepts deposits of\\n           interest from yield bearing strategies which will modify the supply\\n           of OTokens.\\n * @author Origin Protocol Inc\\n */\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IGetExchangeRateToken } from \\\"../interfaces/IGetExchangeRateToken.sol\\\";\\nimport { IDripper } from \\\"../interfaces/IDripper.sol\\\";\\n\\nimport \\\"./VaultInitializer.sol\\\";\\n\\ncontract VaultCore is VaultInitializer {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n    /// @dev max signed int\\n    uint256 internal constant MAX_INT = type(uint256).max;\\n\\n    /**\\n     * @dev Verifies that the rebasing is not paused.\\n     */\\n    modifier whenNotRebasePaused() {\\n        require(!rebasePaused, \\\"Rebasing paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the deposits are not paused.\\n     */\\n    modifier whenNotCapitalPaused() {\\n        require(!capitalPaused, \\\"Capital paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the AMO strategy.\\n     */\\n    modifier onlyOusdMetaStrategy() {\\n        require(\\n            msg.sender == ousdMetaStrategy,\\n            \\\"Caller is not the OUSD meta strategy\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit a supported asset and mint OTokens.\\n     * @param _asset Address of the asset being deposited\\n     * @param _amount Amount of the asset being deposited\\n     * @param _minimumOusdAmount Minimum OTokens to mint\\n     */\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external whenNotCapitalPaused nonReentrant {\\n        _mint(_asset, _amount, _minimumOusdAmount);\\n    }\\n\\n    /**\\n     * @dev Deposit a supported asset and mint OTokens.\\n     * @param _asset Address of the asset being deposited\\n     * @param _amount Amount of the asset being deposited\\n     * @param _minimumOusdAmount Minimum OTokens to mint\\n     */\\n    function _mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) internal virtual {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        uint256 units = _toUnits(_amount, _asset);\\n        uint256 unitPrice = _toUnitPrice(_asset, true);\\n        uint256 priceAdjustedDeposit = (units * unitPrice) / 1e18;\\n\\n        if (_minimumOusdAmount > 0) {\\n            require(\\n                priceAdjustedDeposit >= _minimumOusdAmount,\\n                \\\"Mint amount lower than minimum\\\"\\n            );\\n        }\\n\\n        emit Mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Rebase must happen before any transfers occur.\\n        if (priceAdjustedDeposit >= rebaseThreshold && !rebasePaused) {\\n            if (dripper != address(0)) {\\n                // Stream any harvested rewards that are available\\n                IDripper(dripper).collect();\\n            }\\n            _rebase();\\n        }\\n\\n        // Mint matching amount of OTokens\\n        oUSD.mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Transfer the deposited coins to the vault\\n        IERC20 asset = IERC20(_asset);\\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (priceAdjustedDeposit >= autoAllocateThreshold) {\\n            _allocate();\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint OTokens for a Metapool Strategy\\n     * @param _amount Amount of the asset being deposited\\n     *\\n     * Notice: can't use `nonReentrant` modifier since the `mint` function can\\n     * call `allocate`, and that can trigger `ConvexOUSDMetaStrategy` to call this function\\n     * while the execution of the `mint` has not yet completed -> causing a `nonReentrant` collision.\\n     *\\n     * Also important to understand is that this is a limitation imposed by the test suite.\\n     * Production / mainnet contracts should never be configured in a way where mint/redeem functions\\n     * that are moving funds between the Vault and end user wallets can influence strategies\\n     * utilizing this function.\\n     */\\n    function mintForStrategy(uint256 _amount)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        onlyOusdMetaStrategy\\n    {\\n        require(_amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Mint(msg.sender, _amount);\\n\\n        // safe to cast because of the require check at the beginning of the function\\n        netOusdMintedForStrategy += int256(_amount);\\n\\n        require(\\n            abs(netOusdMintedForStrategy) < netOusdMintForStrategyThreshold,\\n            \\\"Minted ousd surpassed netOusdMintForStrategyThreshold.\\\"\\n        );\\n\\n        // Mint matching amount of OTokens\\n        oUSD.mint(msg.sender, _amount);\\n    }\\n\\n    // In memoriam\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn OTokens.\\n     * @param _amount Amount of OTokens to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(_amount, _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn OTokens.\\n     * @param _amount Amount of OTokens to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function _redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        internal\\n        virtual\\n    {\\n        // Calculate redemption outputs\\n        uint256[] memory outputs = _calculateRedeemOutputs(_amount);\\n\\n        emit Redeem(msg.sender, _amount);\\n\\n        // Send outputs\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            if (outputs[i] == 0) continue;\\n\\n            address assetAddr = allAssets[i];\\n\\n            if (IERC20(assetAddr).balanceOf(address(this)) >= outputs[i]) {\\n                // Use Vault funds first if sufficient\\n                IERC20(assetAddr).safeTransfer(msg.sender, outputs[i]);\\n            } else {\\n                address strategyAddr = assetDefaultStrategies[assetAddr];\\n                if (strategyAddr != address(0)) {\\n                    // Nothing in Vault, but something in Strategy, send from there\\n                    IStrategy strategy = IStrategy(strategyAddr);\\n                    strategy.withdraw(msg.sender, assetAddr, outputs[i]);\\n                } else {\\n                    // Cant find funds anywhere\\n                    revert(\\\"Liquidity error\\\");\\n                }\\n            }\\n        }\\n\\n        if (_minimumUnitAmount > 0) {\\n            uint256 unitTotal = 0;\\n            for (uint256 i = 0; i < outputs.length; ++i) {\\n                unitTotal += _toUnits(outputs[i], allAssets[i]);\\n            }\\n            require(\\n                unitTotal >= _minimumUnitAmount,\\n                \\\"Redeem amount lower than minimum\\\"\\n            );\\n        }\\n\\n        oUSD.burn(msg.sender, _amount);\\n\\n        _postRedeem(_amount);\\n    }\\n\\n    function _postRedeem(uint256 _amount) internal {\\n        // Until we can prove that we won't affect the prices of our assets\\n        // by withdrawing them, this should be here.\\n        // It's possible that a strategy was off on its asset total, perhaps\\n        // a reward token sold for more or for less than anticipated.\\n        uint256 totalUnits = 0;\\n        if (_amount >= rebaseThreshold && !rebasePaused) {\\n            totalUnits = _rebase();\\n        } else {\\n            totalUnits = _totalValue();\\n        }\\n\\n        // Check that the OTokens are backed by enough assets\\n        if (maxSupplyDiff > 0) {\\n            // If there are more outstanding withdrawal requests than assets in the vault and strategies\\n            // then the available assets will be negative and totalUnits will be rounded up to zero.\\n            // As we don't know the exact shortfall amount, we will reject all redeem and withdrawals\\n            require(totalUnits > 0, \\\"Too many outstanding requests\\\");\\n\\n            // Allow a max difference of maxSupplyDiff% between\\n            // backing assets value and OUSD total supply\\n            uint256 diff = oUSD.totalSupply().divPrecisely(totalUnits);\\n            require(\\n                (diff > 1e18 ? diff - 1e18 : 1e18 - diff) <= maxSupplyDiff,\\n                \\\"Backing supply liquidity error\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn OTokens for Metapool Strategy\\n     * @param _amount Amount of OUSD to burn\\n     *\\n     * @dev Notice: can't use `nonReentrant` modifier since the `redeem` function could\\n     * require withdrawal on `ConvexOUSDMetaStrategy` and that one can call `burnForStrategy`\\n     * while the execution of the `redeem` has not yet completed -> causing a `nonReentrant` collision.\\n     *\\n     * Also important to understand is that this is a limitation imposed by the test suite.\\n     * Production / mainnet contracts should never be configured in a way where mint/redeem functions\\n     * that are moving funds between the Vault and end user wallets can influence strategies\\n     * utilizing this function.\\n     */\\n    function burnForStrategy(uint256 _amount)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        onlyOusdMetaStrategy\\n    {\\n        require(_amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Redeem(msg.sender, _amount);\\n\\n        // safe to cast because of the require check at the beginning of the function\\n        netOusdMintedForStrategy -= int256(_amount);\\n\\n        require(\\n            abs(netOusdMintedForStrategy) < netOusdMintForStrategyThreshold,\\n            \\\"Attempting to burn too much OUSD.\\\"\\n        );\\n\\n        // Burn OTokens\\n        oUSD.burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn all OTokens.\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeemAll(uint256 _minimumUnitAmount)\\n        external\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(oUSD.balanceOf(msg.sender), _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function allocate() external virtual whenNotCapitalPaused nonReentrant {\\n        _allocate();\\n    }\\n\\n    /**\\n     * @dev Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function _allocate() internal virtual {\\n        uint256 vaultValue = _totalValueInVault();\\n        // Nothing in vault to allocate\\n        if (vaultValue == 0) return;\\n        uint256 strategiesValue = _totalValueInStrategies();\\n        // We have a method that does the same as this, gas optimisation\\n        uint256 calculatedTotalValue = vaultValue + strategiesValue;\\n\\n        // We want to maintain a buffer on the Vault so calculate a percentage\\n        // modifier to multiply each amount being allocated by to enforce the\\n        // vault buffer\\n        uint256 vaultBufferModifier;\\n        if (strategiesValue == 0) {\\n            // Nothing in Strategies, allocate 100% minus the vault buffer to\\n            // strategies\\n            vaultBufferModifier = uint256(1e18) - vaultBuffer;\\n        } else {\\n            vaultBufferModifier =\\n                (vaultBuffer * calculatedTotalValue) /\\n                vaultValue;\\n            if (1e18 > vaultBufferModifier) {\\n                // E.g. 1e18 - (1e17 * 10e18)/5e18 = 8e17\\n                // (5e18 * 8e17) / 1e18 = 4e18 allocated from Vault\\n                vaultBufferModifier = uint256(1e18) - vaultBufferModifier;\\n            } else {\\n                // We need to let the buffer fill\\n                return;\\n            }\\n        }\\n        if (vaultBufferModifier == 0) return;\\n\\n        // Iterate over all assets in the Vault and allocate to the appropriate\\n        // strategy\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            // No balance, nothing to do here\\n            if (assetBalance == 0) continue;\\n\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance.mulTruncate(\\n                vaultBufferModifier\\n            );\\n\\n            address depositStrategyAddr = assetDefaultStrategies[\\n                address(asset)\\n            ];\\n\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\n                // Transfer asset to Strategy and call deposit method to\\n                // mint or take required action\\n                asset.safeTransfer(address(strategy), allocateAmount);\\n                strategy.deposit(address(asset), allocateAmount);\\n                emit AssetAllocated(\\n                    address(asset),\\n                    depositStrategyAddr,\\n                    allocateAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of OTokens.\\n     */\\n    function rebase() external virtual nonReentrant {\\n        _rebase();\\n    }\\n\\n    /**\\n     * @dev Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of OTokens, optionally sending a\\n     *      portion of the yield to the trustee.\\n     * @return totalUnits Total balance of Vault in units\\n     */\\n    function _rebase() internal whenNotRebasePaused returns (uint256) {\\n        uint256 ousdSupply = oUSD.totalSupply();\\n        uint256 vaultValue = _totalValue();\\n        if (ousdSupply == 0) {\\n            return vaultValue;\\n        }\\n\\n        // Yield fee collection\\n        address _trusteeAddress = trusteeAddress; // gas savings\\n        if (_trusteeAddress != address(0) && (vaultValue > ousdSupply)) {\\n            uint256 yield = vaultValue - ousdSupply;\\n            uint256 fee = yield.mulTruncateScale(trusteeFeeBps, 1e4);\\n            require(yield > fee, \\\"Fee must not be greater than yield\\\");\\n            if (fee > 0) {\\n                oUSD.mint(_trusteeAddress, fee);\\n            }\\n            emit YieldDistribution(_trusteeAddress, yield, fee);\\n        }\\n\\n        // Only ratchet OToken supply upwards\\n        ousdSupply = oUSD.totalSupply(); // Final check should use latest value\\n        if (vaultValue > ousdSupply) {\\n            oUSD.changeSupply(vaultValue);\\n        }\\n        return vaultValue;\\n    }\\n\\n    /**\\n     * @notice Determine the total value of assets held by the vault and its\\n     *         strategies.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function totalValue() external view virtual returns (uint256 value) {\\n        value = _totalValue();\\n    }\\n\\n    /**\\n     * @dev Internal Calculate the total value of the assets held by the\\n     *         vault and its strategies.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValue() internal view virtual returns (uint256 value) {\\n        return _totalValueInVault() + _totalValueInStrategies();\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Vault.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValueInVault()\\n        internal\\n        view\\n        virtual\\n        returns (uint256 value)\\n    {\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 y; y < assetCount; ++y) {\\n            address assetAddr = allAssets[y];\\n            uint256 balance = IERC20(assetAddr).balanceOf(address(this));\\n            if (balance > 0) {\\n                value += _toUnits(balance, assetAddr);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Strategies.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValueInStrategies() internal view returns (uint256 value) {\\n        uint256 stratCount = allStrategies.length;\\n        for (uint256 i = 0; i < stratCount; ++i) {\\n            value = value + _totalValueInStrategy(allStrategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held by strategy.\\n     * @param _strategyAddr Address of the strategy\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValueInStrategy(address _strategyAddr)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 y; y < assetCount; ++y) {\\n            address assetAddr = allAssets[y];\\n            if (strategy.supportsAsset(assetAddr)) {\\n                uint256 balance = strategy.checkBalance(assetAddr);\\n                if (balance > 0) {\\n                    value += _toUnits(balance, assetAddr);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return uint256 Balance of asset in decimals of asset\\n     */\\n    function checkBalance(address _asset) external view returns (uint256) {\\n        return _checkBalance(_asset);\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return balance Balance of asset in decimals of asset\\n     */\\n    function _checkBalance(address _asset)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 balance)\\n    {\\n        IERC20 asset = IERC20(_asset);\\n        balance = asset.balanceOf(address(this));\\n        uint256 stratCount = allStrategies.length;\\n        for (uint256 i = 0; i < stratCount; ++i) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            if (strategy.supportsAsset(_asset)) {\\n                balance = balance + strategy.checkBalance(_asset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned\\n     */\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _calculateRedeemOutputs(_amount);\\n    }\\n\\n    /**\\n     * @dev Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned.\\n     * @return outputs Array of amounts respective to the supported assets\\n     */\\n    function _calculateRedeemOutputs(uint256 _amount)\\n        internal\\n        view\\n        virtual\\n        returns (uint256[] memory outputs)\\n    {\\n        // We always give out coins in proportion to how many we have,\\n        // Now if all coins were the same value, this math would easy,\\n        // just take the percentage of each coin, and multiply by the\\n        // value to be given out. But if coins are worth more than $1,\\n        // then we would end up handing out too many coins. We need to\\n        // adjust by the total value of coins.\\n        //\\n        // To do this, we total up the value of our coins, by their\\n        // percentages. Then divide what we would otherwise give out by\\n        // this number.\\n        //\\n        // Let say we have 100 DAI at $1.06  and 200 USDT at $1.00.\\n        // So for every 1 DAI we give out, we'll be handing out 2 USDT\\n        // Our total output ratio is: 33% * 1.06 + 66% * 1.00 = 1.02\\n        //\\n        // So when calculating the output, we take the percentage of\\n        // each coin, times the desired output value, divided by the\\n        // totalOutputRatio.\\n        //\\n        // For example, withdrawing: 30 OUSD:\\n        // DAI 33% * 30 / 1.02 = 9.80 DAI\\n        // USDT = 66 % * 30 / 1.02 = 19.60 USDT\\n        //\\n        // Checking these numbers:\\n        // 9.80 DAI * 1.06 = $10.40\\n        // 19.60 USDT * 1.00 = $19.60\\n        //\\n        // And so the user gets $10.40 + $19.60 = $30 worth of value.\\n\\n        uint256 assetCount = allAssets.length;\\n        uint256[] memory assetUnits = new uint256[](assetCount);\\n        uint256[] memory assetBalances = new uint256[](assetCount);\\n        outputs = new uint256[](assetCount);\\n\\n        // Calculate redeem fee\\n        if (redeemFeeBps > 0) {\\n            uint256 redeemFee = _amount.mulTruncateScale(redeemFeeBps, 1e4);\\n            _amount = _amount - redeemFee;\\n        }\\n\\n        // Calculate assets balances and decimals once,\\n        // for a large gas savings.\\n        uint256 totalUnits = 0;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            address assetAddr = allAssets[i];\\n            uint256 balance = _checkBalance(assetAddr);\\n            assetBalances[i] = balance;\\n            assetUnits[i] = _toUnits(balance, assetAddr);\\n            totalUnits = totalUnits + assetUnits[i];\\n        }\\n        // Calculate totalOutputRatio\\n        uint256 totalOutputRatio = 0;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            uint256 unitPrice = _toUnitPrice(allAssets[i], false);\\n            uint256 ratio = (assetUnits[i] * unitPrice) / totalUnits;\\n            totalOutputRatio = totalOutputRatio + ratio;\\n        }\\n        // Calculate final outputs\\n        uint256 factor = _amount.divPrecisely(totalOutputRatio);\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            outputs[i] = (assetBalances[i] * factor) / totalUnits;\\n        }\\n    }\\n\\n    /***************************************\\n                    Pricing\\n    ****************************************/\\n\\n    /**\\n     * @notice Returns the total price in 18 digit units for a given asset.\\n     *      Never goes above 1, since that is how we price mints.\\n     * @param asset address of the asset\\n     * @return price uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\\n     */\\n    function priceUnitMint(address asset)\\n        external\\n        view\\n        returns (uint256 price)\\n    {\\n        /* need to supply 1 asset unit in asset's decimals and can not just hard-code\\n         * to 1e18 and ignore calling `_toUnits` since we need to consider assets\\n         * with the exchange rate\\n         */\\n        uint256 units = _toUnits(\\n            uint256(1e18).scaleBy(_getDecimals(asset), 18),\\n            asset\\n        );\\n        price = (_toUnitPrice(asset, true) * units) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Returns the total price in 18 digit unit for a given asset.\\n     *      Never goes below 1, since that is how we price redeems\\n     * @param asset Address of the asset\\n     * @return price uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\\n     */\\n    function priceUnitRedeem(address asset)\\n        external\\n        view\\n        returns (uint256 price)\\n    {\\n        /* need to supply 1 asset unit in asset's decimals and can not just hard-code\\n         * to 1e18 and ignore calling `_toUnits` since we need to consider assets\\n         * with the exchange rate\\n         */\\n        uint256 units = _toUnits(\\n            uint256(1e18).scaleBy(_getDecimals(asset), 18),\\n            asset\\n        );\\n        price = (_toUnitPrice(asset, false) * units) / 1e18;\\n    }\\n\\n    /***************************************\\n                    Utils\\n    ****************************************/\\n\\n    /**\\n     * @dev Convert a quantity of a token into 1e18 fixed decimal \\\"units\\\"\\n     * in the underlying base (USD/ETH) used by the vault.\\n     * Price is not taken into account, only quantity.\\n     *\\n     * Examples of this conversion:\\n     *\\n     * - 1e18 DAI becomes 1e18 units (same decimals)\\n     * - 1e6 USDC becomes 1e18 units (decimal conversion)\\n     * - 1e18 rETH becomes 1.2e18 units (exchange rate conversion)\\n     *\\n     * @param _raw Quantity of asset\\n     * @param _asset Core Asset address\\n     * @return value 1e18 normalized quantity of units\\n     */\\n    function _toUnits(uint256 _raw, address _asset)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        UnitConversion conversion = assets[_asset].unitConversion;\\n        if (conversion == UnitConversion.DECIMALS) {\\n            return _raw.scaleBy(18, _getDecimals(_asset));\\n        } else if (conversion == UnitConversion.GETEXCHANGERATE) {\\n            uint256 exchangeRate = IGetExchangeRateToken(_asset)\\n                .getExchangeRate();\\n            return (_raw * exchangeRate) / 1e18;\\n        } else {\\n            revert(\\\"Unsupported conversion type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns asset's unit price accounting for different asset types\\n     *      and takes into account the context in which that price exists -\\n     *      - mint or redeem.\\n     *\\n     * Note: since we are returning the price of the unit and not the one of the\\n     * asset (see comment above how 1 rETH exchanges for 1.2 units) we need\\n     * to make the Oracle price adjustment as well since we are pricing the\\n     * units and not the assets.\\n     *\\n     * The price also snaps to a \\\"full unit price\\\" in case a mint or redeem\\n     * action would be unfavourable to the protocol.\\n     *\\n     */\\n    function _toUnitPrice(address _asset, bool isMint)\\n        internal\\n        view\\n        returns (uint256 price)\\n    {\\n        UnitConversion conversion = assets[_asset].unitConversion;\\n        price = IOracle(priceProvider).price(_asset);\\n\\n        if (conversion == UnitConversion.GETEXCHANGERATE) {\\n            uint256 exchangeRate = IGetExchangeRateToken(_asset)\\n                .getExchangeRate();\\n            price = (price * 1e18) / exchangeRate;\\n        } else if (conversion != UnitConversion.DECIMALS) {\\n            revert(\\\"Unsupported conversion type\\\");\\n        }\\n\\n        /* At this stage the price is already adjusted to the unit\\n         * so the price checks are agnostic to underlying asset being\\n         * pegged to a USD or to an ETH or having a custom exchange rate.\\n         */\\n        require(price <= MAX_UNIT_PRICE_DRIFT, \\\"Vault: Price exceeds max\\\");\\n        require(price >= MIN_UNIT_PRICE_DRIFT, \\\"Vault: Price under min\\\");\\n\\n        if (isMint) {\\n            /* Never price a normalized unit price for more than one\\n             * unit of OETH/OUSD when minting.\\n             */\\n            if (price > 1e18) {\\n                price = 1e18;\\n            }\\n            require(price >= MINT_MINIMUM_UNIT_PRICE, \\\"Asset price below peg\\\");\\n        } else {\\n            /* Never give out more than 1 normalized unit amount of assets\\n             * for one unit of OETH/OUSD when redeeming.\\n             */\\n            if (price < 1e18) {\\n                price = 1e18;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the number of decimals of a token asset\\n     * @param _asset Address of the asset\\n     * @return decimals number of decimals\\n     */\\n    function _getDecimals(address _asset)\\n        internal\\n        view\\n        returns (uint256 decimals)\\n    {\\n        decimals = assets[_asset].decimals;\\n        require(decimals > 0, \\\"Decimals not cached\\\");\\n    }\\n\\n    /**\\n     * @notice Return the number of assets supported by the Vault.\\n     */\\n    function getAssetCount() public view returns (uint256) {\\n        return allAssets.length;\\n    }\\n\\n    /**\\n     * @notice Gets the vault configuration of a supported asset.\\n     * @param _asset Address of the token asset\\n     */\\n    function getAssetConfig(address _asset)\\n        public\\n        view\\n        returns (Asset memory config)\\n    {\\n        config = assets[_asset];\\n    }\\n\\n    /**\\n     * @notice Return all vault asset addresses in order\\n     */\\n    function getAllAssets() external view returns (address[] memory) {\\n        return allAssets;\\n    }\\n\\n    /**\\n     * @notice Return the number of strategies active on the Vault.\\n     */\\n    function getStrategyCount() external view returns (uint256) {\\n        return allStrategies.length;\\n    }\\n\\n    /**\\n     * @notice Return the array of all strategies\\n     */\\n    function getAllStrategies() external view returns (address[] memory) {\\n        return allStrategies;\\n    }\\n\\n    /**\\n     * @notice Returns whether the vault supports the asset\\n     * @param _asset address of the asset\\n     * @return true if supported\\n     */\\n    function isSupportedAsset(address _asset) external view returns (bool) {\\n        return assets[_asset].isSupported;\\n    }\\n\\n    /**\\n     * @dev Falldown to the admin implementation\\n     * @notice This is a catch all for all functions not declared in core\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                sload(slot),\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function abs(int256 x) private pure returns (uint256) {\\n        require(x < int256(MAX_INT), \\\"Amount too high\\\");\\n        return x >= 0 ? uint256(x) : uint256(-x);\\n    }\\n}\\n\",\"keccak256\":\"0xb86e6a0b958d20018dd81b0f9e5928d34aec1b2ec3cfab6b75c201dcfce781b3\",\"license\":\"MIT\"},\"contracts/vault/VaultInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultInitializer contract\\n * @notice The Vault contract initializes the vault.\\n * @author Origin Protocol Inc\\n */\\n\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract VaultInitializer is VaultStorage {\\n    function initialize(address _priceProvider, address _oToken)\\n        external\\n        onlyGovernor\\n        initializer\\n    {\\n        require(_priceProvider != address(0), \\\"PriceProvider address is zero\\\");\\n        require(_oToken != address(0), \\\"oToken address is zero\\\");\\n\\n        oUSD = OUSD(_oToken);\\n\\n        priceProvider = _priceProvider;\\n\\n        rebasePaused = false;\\n        capitalPaused = true;\\n\\n        // Initial redeem fee of 0 basis points\\n        redeemFeeBps = 0;\\n        // Initial Vault buffer of 0%\\n        vaultBuffer = 0;\\n        // Initial allocate threshold of 25,000 OUSD\\n        autoAllocateThreshold = 25000e18;\\n        // Threshold for rebasing\\n        rebaseThreshold = 1000e18;\\n        // Initialize all strategies\\n        allStrategies = new address[](0);\\n    }\\n}\\n\",\"keccak256\":\"0x5b9676307bbabe14b5278f00ec7edc557b84debbfa1391902d78100cb9cd467e\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetRemoved(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n    event WithdrawalClaimDelayUpdated(uint256 _newDelay);\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    /// @dev Storage slot for the address of the VaultAdmin contract that is delegated to\\n    // keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    /// @dev Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    /// @dev Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public ousdMetaStrategy;\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    // slither-disable-next-line uninitialized-state\\n    int256 public netOusdMintedForStrategy;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public netOusdMintForStrategyThreshold;\\n\\n    // slither-disable-end constable-states\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // List of strategies that can mint oTokens directly\\n    // Used in OETHBaseVaultCore\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => bool) public isMintWhitelistedStrategy;\\n\\n    /// @notice Address of the Dripper contract that streams harvested rewards to the Vault\\n    /// @dev The vault is proxied so needs to be set with setDripper against the proxy contract.\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public dripper;\\n    // slither-disable-end constable-states\\n\\n    /// Withdrawal Queue Storage /////\\n\\n    struct WithdrawalQueueMetadata {\\n        // cumulative total of all withdrawal requests included the ones that have already been claimed\\n        uint128 queued;\\n        // cumulative total of all the requests that can be claimed including the ones that have already been claimed\\n        uint128 claimable;\\n        // total of all the requests that have been claimed\\n        uint128 claimed;\\n        // index of the next withdrawal request starting at 0\\n        uint128 nextWithdrawalIndex;\\n    }\\n\\n    /// @notice Global metadata for the withdrawal queue including:\\n    /// queued - cumulative total of all withdrawal requests included the ones that have already been claimed\\n    /// claimable - cumulative total of all the requests that can be claimed including the ones already claimed\\n    /// claimed - total of all the requests that have been claimed\\n    /// nextWithdrawalIndex - index of the next withdrawal request starting at 0\\n    // slither-disable-next-line uninitialized-state\\n    WithdrawalQueueMetadata public withdrawalQueueMetadata;\\n\\n    struct WithdrawalRequest {\\n        address withdrawer;\\n        bool claimed;\\n        uint40 timestamp; // timestamp of the withdrawal request\\n        // Amount of oTokens to redeem. eg OETH\\n        uint128 amount;\\n        // cumulative total of all withdrawal requests including this one.\\n        // this request can be claimed when this queued amount is less than or equal to the queue's claimable amount.\\n        uint128 queued;\\n    }\\n\\n    /// @notice Mapping of withdrawal request indices to the user withdrawal request data\\n    mapping(uint256 => WithdrawalRequest) public withdrawalRequests;\\n\\n    /// @notice Sets a minimum delay that is required to elapse between\\n    ///     requesting async withdrawals and claiming the request.\\n    ///     When set to 0 async withdrawals are disabled.\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public withdrawalClaimDelay;\\n    // slither-disable-end constable-states\\n\\n    // For future use\\n    uint256[44] private __gap;\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x956632a7f426b7d7f46bb56dbc2bd18d262680e7afc9768d2fd3c24c37b7a06d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6037805461ffff60a01b1916600160a81b179055603d80546001600160a01b0319908116909155603e805482169055603f8054909116905560e0604052600060a081905260c052604880546001600160b01b031916905534801561006257600080fd5b50604051614240380380614240833981016040819052610081916100f1565b806100983360008051602061422083398151915255565b600080516020614220833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36001600160a01b031660805250610121565b60006020828403121561010357600080fd5b81516001600160a01b038116811461011a57600080fd5b9392505050565b60805161407b6101a56000396000818161044101528181610961015281816109cb01528181610e1201528181611a4901528181611b270152818161231601528181612a2401528181612b6901528181612d8501528181612e8c01528181612f8f01528181612fda01528181613042015281816133d10152613780015261407b6000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c80636217f3ea1161019d578063ab80dafb116100e9578063c7af3352116100a2578063e45cc9f01161007c578063e45cc9f014610792578063e6cc54321461079b578063f8444436146107af578063fc0cfeee146107c2576102f1565b8063c7af33521461076f578063d38bfff414610777578063d4c3eea01461078a576102f1565b8063ab80dafb14610729578063abaa99161461073c578063af14052c14610744578063b888879e1461074c578063b9b17f9f1461075f578063c3b2886414610767576102f1565b80638e510b52116101565780639ee679e8116101305780639ee679e8146106c75780639fa1826e146106ef578063a0aead4d146106f8578063a403e4d514610700576102f1565b80638e510b52146105ea578063937b2581146105f35780639be918e61461069b576102f1565b80636217f3ea1461056857806367bd7ba31461057b5780636ec3ab671461059b5780637136a7a6146105bb5780637a2202f3146105ce5780637cbc2373146105d7576102f1565b80634530820a1161025c57806353ca9f24116102155780635b60f9fc116101ef5780635b60f9fc146105275780635d36b1901461053a5780635f51522614610542578063603ea03b14610555576102f1565b806353ca9f24146104f757806354c6d8581461050b578063570d8e1d14610514576102f1565b80634530820a1461046b57806345e4213b1461049e578063485cc955146104a757806348e30f54146104ba57806349c1d54d146104db57806352d38e5d146104ee576102f1565b80632acada4d116102ae5780632acada4d146103ad57806331e19cfa146103c2578063362bd1a3146103ca5780633b8fe28d146104295780633fc8cef31461043c57806344c5470714610463576102f1565b806309f6442c146103395780630c340a2414610355578063156e29f61461037557806318ce56bd146103885780631edfe3da1461039b578063207134b0146103a4575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e808015610332573d6000f35b3d6000fd5b005b61034260385481565b6040519081526020015b60405180910390f35b61035d6107d5565b6040516001600160a01b03909116815260200161034c565b6103376103833660046139b8565b6107f2565b60455461035d906001600160a01b031681565b61034260395481565b61034260435481565b6103b5610870565b60405161034c91906139eb565b603654610342565b604b54604c546103f6916001600160801b0380821692600160801b928390048216928183169291041684565b604080516001600160801b039586168152938516602085015291841691830191909152909116606082015260800161034c565b610342610437366004613a37565b6108d2565b61035d7f000000000000000000000000000000000000000000000000000000000000000081565b61033761092d565b61048e610479366004613a37565b60496020526000908152604090205460ff1681565b604051901515815260200161034c565b610342604e5481565b6103376104b5366004613a52565b610a6d565b6104cd6104c8366004613a85565b610c6f565b60405161034c929190613b38565b60425461035d906001600160a01b031681565b610342603b5481565b60375461048e90600160a01b900460ff1681565b610342607b5481565b603f5461035d906001600160a01b031681565b610342610535366004613a37565b610e4f565b610337610e78565b610342610550366004613a37565b610f1e565b604a5461035d906001600160a01b031681565b610337610576366004613b5a565b610f2f565b61058e610589366004613b5a565b6110c1565b60405161034c9190613b73565b6105ae6105a9366004613a37565b6110cc565b60405161034c9190613b9c565b6103376105c9366004613b5a565b611172565b61034260475481565b6103376105e5366004613bf2565b61124e565b61034260415481565b610654610601366004613b5a565b604d60205260009081526040902080546001909101546001600160a01b03821691600160a01b810460ff1691600160a81b90910464ffffffffff16906001600160801b0380821691600160801b90041685565b604080516001600160a01b039096168652931515602086015264ffffffffff909216928401929092526001600160801b03918216606084015216608082015260a00161034c565b61048e6106a9366004613a37565b6001600160a01b031660009081526033602052604090205460ff1690565b6106da6106d5366004613b5a565b61128d565b6040805192835260208301919091520161034c565b610342603a5481565b603454610342565b61035d61070e366004613a37565b6040602081905260009182529020546001600160a01b031681565b610337610737366004613b5a565b61154a565b6103376116bc565b610337611734565b60375461035d906001600160a01b031681565b61033761177a565b6103b56117ea565b61048e61184a565b610337610785366004613a37565b61187b565b61034261191f565b61034260465481565b60375461048e90600160a81b900460ff1681565b6103426107bd366004613b5a565b611929565b6103376107d0366004613a37565b611a83565b60006107ed6000805160206140268339815191525490565b905090565b603754600160a81b900460ff16156108255760405162461bcd60e51b815260040161081c90613c14565b60405180910390fd5b600080516020614006833981519152805460011981016108575760405162461bcd60e51b815260040161081c90613c3c565b60028255610866858585611b25565b5060019055505050565b606060348054806020026020016040519081016040528092919081815260200182805480156108c857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108aa575b5050505050905090565b6000806108fb6108f56108e485611da6565b670de0b6b3a7640000906012611e10565b84611e72565b9050670de0b6b3a764000081610912856001611fbd565b61091c9190613c7a565b6109269190613c91565b9392505050565b61093561184a565b6109515760405162461bcd60e51b815260040161081c90613cb3565b60345460005b818110156109c8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034828154811061099c5761099c613cea565b6000918252602090912001546001600160a01b0316036109c057607b8190556109c8565b600101610957565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034607b5481548110610a0857610a08613cea565b6000918252602090912001546001600160a01b031614610a6a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205745544820417373657420496e6465780000000000000000604482015260640161081c565b50565b610a7561184a565b610a915760405162461bcd60e51b815260040161081c90613cb3565b600054610100900460ff1680610aaa575060005460ff16155b610b0d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161081c565b600054610100900460ff16158015610b2f576000805461ffff19166101011790555b6001600160a01b038316610b855760405162461bcd60e51b815260206004820152601d60248201527f507269636550726f76696465722061646472657373206973207a65726f000000604482015260640161081c565b6001600160a01b038216610bd45760405162461bcd60e51b81526020600482015260166024820152756f546f6b656e2061646472657373206973207a65726f60501b604482015260640161081c565b603c80546001600160a01b038481166001600160a01b031990921691909117909155603780546001600160b01b03191691851691909117600160a81b17905560006038819055603981905569054b40b1f852bda00000603a55683635c9adc5dea00000603b556040805191825260208201908190529051610c5791603691613930565b508015610c6a576000805461ff00191690555b505050565b603754606090600090600160a81b900460ff1615610c9f5760405162461bcd60e51b815260040161081c90613c14565b60008051602061400683398151915280546001198101610cd15760405162461bcd60e51b815260040161081c90613c3c565b60028255604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d2557600080fd5b505af1158015610d39573d6000803e3d6000fd5b50505050610d45612290565b508467ffffffffffffffff811115610d5f57610d5f613d00565b604051908082528060200260200182016040528015610d88578160200160208202803683370190505b50935060005b85811015610e0457610db7878783818110610dab57610dab613cea565b9050602002013561246c565b858281518110610dc957610dc9613cea565b602002602001018181525050848181518110610de757610de7613cea565b602002602001015184610dfa9190613d16565b9350600101610d8e565b50610e396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385612762565b610e42836127b8565b6001825550509250929050565b600080610e616108f56108e485611da6565b9050670de0b6b3a764000081610912856000611fbd565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610f135760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161081c565b610f1c3361295f565b565b6000610f2982612a20565b92915050565b603754600160a81b900460ff1615610f595760405162461bcd60e51b815260040161081c90613c14565b6045546001600160a01b03163314610f835760405162461bcd60e51b815260040161081c90613d29565b6000198110610fa45760405162461bcd60e51b815260040161081c90613d6d565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63382604051610fd5929190613d96565b60405180910390a18060466000828254610fef9190613daf565b909155505060475460465461100390612af3565b1061105a5760405162461bcd60e51b815260206004820152602160248201527f417474656d7074696e6720746f206275726e20746f6f206d756368204f5553446044820152601760f91b606482015260840161081c565b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061108c9033908590600401613d96565b600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b5050505050565b6060610f2982612b31565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160a01b038616825260338152908490208451928301909452835460ff80821615158452939492939184019161010090910416600181111561113857611138613b86565b600181111561114957611149613b86565b8152905462010000810460ff1660208301526301000000900461ffff1660409091015292915050565b603754600160a81b900460ff161561119c5760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016111ce5760405162461bcd60e51b815260040161081c90613c3c565b60028255603c546040516370a0823160e01b8152336004820152611246916001600160a01b0316906370a0823190602401602060405180830381865afa15801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112409190613dcf565b84612c72565b506001905550565b60405162461bcd60e51b81526020600482015260146024820152733ab739bab83837b93a32b210333ab731ba34b7b760611b604482015260640161081c565b6037546000908190600160a81b900460ff16156112bc5760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016112ee5760405162461bcd60e51b815260040161081c90613c3c565b600282556000604e54116113445760405162461bcd60e51b815260206004820152601d60248201527f4173796e63207769746864726177616c73206e6f7420656e61626c6564000000604482015260640161081c565b604c54604b546001600160801b03600160801b9092048216955061136a91879116613d16565b925061137f61137a856001613d16565b612e19565b604c80546001600160801b03928316600160801b0292169190911790556113a583612e19565b604b80546001600160801b0319166001600160801b03929092169190911790556040805160a081018252338152600060208201524264ffffffffff1691810191909152606081016113f587612e19565b6001600160801b0316815260200161140c85612e19565b6001600160801b039081169091526000868152604d602090815260409182902084518154928601518685015164ffffffffff16600160a81b0264ffffffffff60a81b19911515600160a01b026001600160a81b03199095166001600160a01b0393841617949094171692909217815560608501516080909501518416600160801b029490931693909317600190920191909155603c549051632770a7eb60e21b8152911690639dc29fac906114c79033908990600401613d96565b600060405180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b50505050611502856127b8565b6040805186815260208101859052859133917f38e3d972947cfef94205163d483d6287ef27eb312e20cb8e0b13a49989db232e910160405180910390a3600182555050915091565b603754600160a81b900460ff16156115745760405162461bcd60e51b815260040161081c90613c14565b6045546001600160a01b0316331461159e5760405162461bcd60e51b815260040161081c90613d29565b60001981106115bf5760405162461bcd60e51b815260040161081c90613d6d565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688533826040516115f0929190613d96565b60405180910390a1806046600082825461160a9190613de8565b909155505060475460465461161e90612af3565b1061168a5760405162461bcd60e51b815260206004820152603660248201527f4d696e746564206f75736420737572706173736564206e65744f7573644d696e6044820152753a2337b929ba3930ba32b3bcaa343932b9b437b6321760511b606482015260840161081c565b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061108c9033908590600401613d96565b603754600160a81b900460ff16156116e65760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016117185760405162461bcd60e51b815260040161081c90613c3c565b60028255611724612290565b5061172d612e82565b5060019055565b600080516020614006833981519152805460011981016117665760405162461bcd60e51b815260040161081c90613c3c565b600282556117726130aa565b505060019055565b604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156117ca57600080fd5b505af11580156117de573d6000803e3d6000fd5b50505050610a6a612290565b606060368054806020026020016040519081016040528092919081815260200182805480156108c8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116108aa575050505050905090565b60006118626000805160206140268339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61188361184a565b61189f5760405162461bcd60e51b815260040161081c90613cb3565b6118c7817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166118e76000805160206140268339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006107ed6133ca565b603754600090600160a81b900460ff16156119565760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016119885760405162461bcd60e51b815260040161081c90613c3c565b60028255604b546000858152604d60205260409020600101546001600160801b03600160801b92839004811692909104161115611a3157604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a0f57600080fd5b505af1158015611a23573d6000803e3d6000fd5b50505050611a2f612290565b505b611a3a8461246c565b9250611a706001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385612762565b611a79836127b8565b5060019055919050565b611a8b61184a565b611aa75760405162461bcd60e51b815260040161081c90613cb3565b803b611b015760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b606482015260840161081c565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614611ba65760405162461bcd60e51b815260206004820152601d60248201527f556e737570706f7274656420617373657420666f72206d696e74696e67000000604482015260640161081c565b60008211611bf65760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161081c565b80821015611c465760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d0000604482015260640161081c565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853383604051611c77929190613d96565b60405180910390a1603754600160a01b900460ff16158015611c9b5750603b548210155b15611d1257604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611cf057600080fd5b505af1158015611d04573d6000803e3d6000fd5b50505050611d106130aa565b505b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611d449033908690600401613d96565b600060405180830381600087803b158015611d5e57600080fd5b505af1158015611d72573d6000803e3d6000fd5b50611d8c925050506001600160a01b0384163330856133f5565b611d94612290565b50603a548210610c6a57610c6a612e82565b6001600160a01b03811660009081526033602052604090205462010000900460ff1680611e0b5760405162461bcd60e51b8152602060048201526013602482015272111958da5b585b1cc81b9bdd0818d858da1959606a1b604482015260640161081c565b919050565b600081831115611e4057611e39611e278385613e10565b611e3290600a613f0a565b8590613433565b9350611e6a565b81831015611e6a57611e67611e558484613e10565b611e6090600a613f0a565b859061343f565b93505b509192915050565b6001600160a01b038116600090815260336020526040812054610100900460ff1681816001811115611ea657611ea6613b86565b03611ec957611ec16012611eb985611da6565b869190611e10565b915050610f29565b6001816001811115611edd57611edd613b86565b03611f6e576000836001600160a01b031663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f469190613dcf565b9050670de0b6b3a7640000611f5b8287613c7a565b611f659190613c91565b92505050610f29565b60405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161081c565b5092915050565b6001600160a01b038281166000818152603360205260408082205460375491516315d5220f60e31b81526004810194909452919361010090920460ff169291169063aea9107890602401602060405180830381865afa158015612024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120489190613dcf565b9150600181600181111561205e5761205e613b86565b036120ee576000846001600160a01b031663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190613dcf565b9050806120dc84670de0b6b3a7640000613c7a565b6120e69190613c91565b92505061214f565b600081600181111561210257612102613b86565b1461214f5760405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161081c565b67120a871cc00200008211156121a75760405162461bcd60e51b815260206004820152601860248201527f5661756c743a2050726963652065786365656473206d61780000000000000000604482015260640161081c565b6709b6e64a8ec600008210156121f85760405162461bcd60e51b81526020600482015260166024820152752b30bab63a1d10283934b1b2903ab73232b91036b4b760511b604482015260640161081c565b821561226f57670de0b6b3a764000082111561221a57670de0b6b3a764000091505b670dd99bb65dd7000082101561226a5760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b604482015260640161081c565b611fb6565b670de0b6b3a7640000821015611fb65750670de0b6b3a76400009392505050565b60408051608081018252604b546001600160801b03808216808452600160801b92839004821660208501819052604c54808416968601969096529290940416606083015260009283916122e291613f16565b6001600160801b03169050806000036122fe5760009250505090565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123899190613dcf565b90506000836040015184602001516123a19190613f16565b6001600160801b031690508082116123be57600094505050505090565b60006123ca8284613e10565b90508084106123d957806123db565b835b955060008686602001516001600160801b03166123f89190613d16565b905061240381612e19565b604b80546001600160801b03928316600160801b0292169190911790556040517fee79a0c43d3993055690b54e074b5153e8bae8d1a872b656dedb64aa8f4633339061245b9083908a90918252602082015260400190565b60405180910390a150505050505090565b600080604e54116124bf5760405162461bcd60e51b815260206004820152601d60248201527f4173796e63207769746864726177616c73206e6f7420656e61626c6564000000604482015260640161081c565b6000828152604d6020908152604091829020825160a08101845281546001600160a01b038116825260ff600160a01b82041615158285015264ffffffffff600160a81b90910481168286019081526001909301546001600160801b03808216606080860191909152600160801b92839004821660808087019190915288519081018952604b548084168252849004831697810197909752604c54808316988801989098529190960490951694840194909452604e5491519093429261258692909116613d16565b11156125ca5760405162461bcd60e51b815260206004820152601360248201527210db185a5b4819195b185e481b9bdd081b595d606a1b604482015260640161081c565b80602001516001600160801b031682608001516001600160801b031611156126345760405162461bcd60e51b815260206004820152601760248201527f51756575652070656e64696e67206c6971756964697479000000000000000000604482015260640161081c565b81516001600160a01b0316331461267d5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103932b8bab2b9ba32b960991b604482015260640161081c565b6020820151156126c15760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b604482015260640161081c565b6000848152604d602052604090819020805460ff60a01b1916600160a01b1790556060830151908201516126f59190613f35565b604c80546001600160801b0319166001600160801b03928316179055606083015160405191168152849033907f2d43eb174787155132b52ddb6b346e2dca99302eac3df4466dbeff953d3c84d19060200160405180910390a350606001516001600160801b031692915050565b610c6a8363a9059cbb60e01b8484604051602401612781929190613d96565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261344b565b6000603b5482101580156127d65750603754600160a01b900460ff16155b156127ea576127e36130aa565b90506127f5565b6127f26133ca565b90505b6041541561295b576000811161284d5760405162461bcd60e51b815260206004820152601d60248201527f546f6f206d616e79206f75747374616e64696e67207265717565737473000000604482015260640161081c565b60006128d082603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ca9190613dcf565b9061351d565b9050604154670de0b6b3a764000082116128fb576128f682670de0b6b3a7640000613e10565b61290d565b61290d670de0b6b3a764000083613e10565b1115610c6a5760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f720000604482015260640161081c565b5050565b6001600160a01b0381166129b55760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161081c565b806001600160a01b03166129d56000805160206140268339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610a6a8160008051602061402683398151915255565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614612a6357506000919050565b612a6c82613546565b60408051608081018252604b546001600160801b03808216808452600160801b9283900482166020850152604c54808316958501869052929092041660608301529293509190612abc9084613d16565b1015612acb5750600092915050565b805160408201516001600160801b0391821691612ae9911684613d16565b6109269190613e10565b60006000198212612b165760405162461bcd60e51b815260040161081c90613d6d565b6000821215612b2d57612b2882613f54565b610f29565b5090565b60385460609015612b6057603854600090612b509084906127106136e0565b9050612b5c8184613e10565b9250505b6000607b5490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660348281548110612ba457612ba4613cea565b6000918252602090912001546001600160a01b031614612c065760405162461bcd60e51b815260206004820152601b60248201527f5745544820417373657420696e646578206e6f74206361636865640000000000604482015260640161081c565b60345467ffffffffffffffff811115612c2157612c21613d00565b604051908082528060200260200182016040528015612c4a578160200160208202803683370190505b50915082828281518110612c6057612c60613cea565b60200260200101818152505050919050565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63383604051612ca3929190613d96565b60405180910390a181600003612cb7575050565b6000612cc283612b31565b607b5481518110612cd557612cd5613cea565b6020026020010151905081811015612d2f5760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d604482015260640161081c565b80612d38613702565b1015612d785760405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015260640161081c565b612dac6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612762565b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90612dde9033908790600401613d96565b600060405180830381600087803b158015612df857600080fd5b505af1158015612e0c573d6000803e3d6000fd5b50505050610c6a836127b8565b60006001600160801b03821115612b2d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161081c565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152604060208190529020541680612ec55750565b6000612ecf613702565b905080600003612edd575050565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015612f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4b9190613dcf565b90506000612f646039548361381090919063ffffffff16565b9050808311612f735750505050565b6000612f7f8285613e10565b905084612fb66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284612762565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef2490613004907f0000000000000000000000000000000000000000000000000000000000000000908690600401613d96565b600060405180830381600087803b15801561301e57600080fd5b505af1158015613032573d6000803e3d6000fd5b5050604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682528a1660208201529081018590527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505050505050565b603754600090600160a01b900460ff16156130f95760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015260640161081c565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015613143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131679190613dcf565b905060006131736133ca565b9050816000036131865791506133c79050565b6042546001600160a01b031680158015906131a057508282115b156132e25760006131b18484613e10565b905060006131ce604354612710846136e09092919063ffffffff16565b905080821161322a5760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b606482015260840161081c565b801561329557603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906132629086908590600401613d96565b600060405180830381600087803b15801561327c57600080fd5b505af1158015613290573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133599190613dcf565b9250828211156133c257603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b1580156133a957600080fd5b505af11580156133bd573d6000803e3d6000fd5b505050505b509150505b90565b60006107ed7f0000000000000000000000000000000000000000000000000000000000000000612a20565b6040516001600160a01b038085166024830152831660448201526064810182905261342d9085906323b872dd60e01b90608401612781565b50505050565b60006109268284613c7a565b60006109268284613c91565b60006134a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138259092919063ffffffff16565b805190915015610c6a57808060200190518101906134be9190613f70565b610c6a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161081c565b60008061353284670de0b6b3a7640000613433565b905061353e818461343f565b949350505050565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a0823190602401602060405180830381865afa15801561358f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b39190613dcf565b60365490925060005b818110156136d8576000603682815481106135d9576135d9613cea565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0388811660048301529091169150819063aa388af690602401602060405180830381865afa15801561362f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136539190613f70565b156136cf57604051632fa8a91360e11b81526001600160a01b038781166004830152821690635f51522690602401602060405180830381865afa15801561369e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c29190613dcf565b6136cc9086613d16565b94505b506001016135bc565b505050919050565b6000806136ed8585613433565b90506136f9818461343f565b95945050505050565b60408051608081018252604b546001600160801b03808216808452600160801b9283900482166020850152604c548083169585018690529290920416606083015260009283916137529190613f16565b6040516370a0823160e01b81523060048201526001600160801b039190911691506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156137c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137eb9190613dcf565b90508181116137fe576000935050505090565b6138088282613e10565b935050505090565b60006109268383670de0b6b3a76400006136e0565b606061353e848460008585843b61387e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161081c565b600080866001600160a01b0316858760405161389a9190613fb6565b60006040518083038185875af1925050503d80600081146138d7576040519150601f19603f3d011682016040523d82523d6000602084013e6138dc565b606091505b50915091506138ec8282866138f7565b979650505050505050565b60608315613906575081610926565b8251156139165782518084602001fd5b8160405162461bcd60e51b815260040161081c9190613fd2565b828054828255906000526020600020908101928215613985579160200282015b8281111561398557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613950565b50612b2d9291505b80821115612b2d576000815560010161398d565b80356001600160a01b0381168114611e0b57600080fd5b6000806000606084860312156139cd57600080fd5b6139d6846139a1565b95602085013595506040909401359392505050565b602080825282518282018190526000918401906040840190835b81811015613a2c5783516001600160a01b0316835260209384019390920191600101613a05565b509095945050505050565b600060208284031215613a4957600080fd5b610926826139a1565b60008060408385031215613a6557600080fd5b613a6e836139a1565b9150613a7c602084016139a1565b90509250929050565b60008060208385031215613a9857600080fd5b823567ffffffffffffffff811115613aaf57600080fd5b8301601f81018513613ac057600080fd5b803567ffffffffffffffff811115613ad757600080fd5b8560208260051b8401011115613aec57600080fd5b6020919091019590945092505050565b600081518084526020840193506020830160005b82811015613b2e578151865260209586019590910190600101613b10565b5093949350505050565b604081526000613b4b6040830185613afc565b90508260208301529392505050565b600060208284031215613b6c57600080fd5b5035919050565b6020815260006109266020830184613afc565b634e487b7160e01b600052602160045260246000fd5b8151151581526020820151608082019060028110613bca57634e487b7160e01b600052602160045260246000fd5b8060208401525060ff604084015116604083015261ffff606084015116606083015292915050565b60008060408385031215613c0557600080fd5b50508035926020909101359150565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f2957610f29613c64565b600082613cae57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80820180821115610f2957610f29613c64565b60208082526024908201527f43616c6c6572206973206e6f7420746865204f555344206d65746120737472616040820152637465677960e01b606082015260800190565b6020808252600f908201526e082dadeeadce840e8dede40d0d2ced608b1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b8181036000831280158383131683831282161715611fb657611fb6613c64565b600060208284031215613de157600080fd5b5051919050565b8082018281126000831280158216821582161715613e0857613e08613c64565b505092915050565b81810381811115610f2957610f29613c64565b6001815b6001841115613e5e57808504811115613e4257613e42613c64565b6001841615613e5057908102905b60019390931c928002613e27565b935093915050565b600082613e7557506001610f29565b81613e8257506000610f29565b8160018114613e985760028114613ea257613ebe565b6001915050610f29565b60ff841115613eb357613eb3613c64565b50506001821b610f29565b5060208310610133831016604e8410600b8410161715613ee1575081810a610f29565b613eee6000198484613e23565b8060001904821115613f0257613f02613c64565b029392505050565b60006109268383613e66565b6001600160801b038281168282160390811115610f2957610f29613c64565b6001600160801b038181168382160190811115610f2957610f29613c64565b6000600160ff1b8201613f6957613f69613c64565b5060000390565b600060208284031215613f8257600080fd5b8151801515811461092657600080fd5b60005b83811015613fad578181015183820152602001613f95565b50506000910152565b60008251613fc8818460208701613f92565b9190910192915050565b6020815260008251806020840152613ff1816040850160208701613f92565b601f01601f1916919091016040019291505056fe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212202de7dbb20ec302f109ca6116b0a84f0dc4e5ad578580c8d1b1f95f186df04d0564736f6c634300081c00337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c80636217f3ea1161019d578063ab80dafb116100e9578063c7af3352116100a2578063e45cc9f01161007c578063e45cc9f014610792578063e6cc54321461079b578063f8444436146107af578063fc0cfeee146107c2576102f1565b8063c7af33521461076f578063d38bfff414610777578063d4c3eea01461078a576102f1565b8063ab80dafb14610729578063abaa99161461073c578063af14052c14610744578063b888879e1461074c578063b9b17f9f1461075f578063c3b2886414610767576102f1565b80638e510b52116101565780639ee679e8116101305780639ee679e8146106c75780639fa1826e146106ef578063a0aead4d146106f8578063a403e4d514610700576102f1565b80638e510b52146105ea578063937b2581146105f35780639be918e61461069b576102f1565b80636217f3ea1461056857806367bd7ba31461057b5780636ec3ab671461059b5780637136a7a6146105bb5780637a2202f3146105ce5780637cbc2373146105d7576102f1565b80634530820a1161025c57806353ca9f24116102155780635b60f9fc116101ef5780635b60f9fc146105275780635d36b1901461053a5780635f51522614610542578063603ea03b14610555576102f1565b806353ca9f24146104f757806354c6d8581461050b578063570d8e1d14610514576102f1565b80634530820a1461046b57806345e4213b1461049e578063485cc955146104a757806348e30f54146104ba57806349c1d54d146104db57806352d38e5d146104ee576102f1565b80632acada4d116102ae5780632acada4d146103ad57806331e19cfa146103c2578063362bd1a3146103ca5780633b8fe28d146104295780633fc8cef31461043c57806344c5470714610463576102f1565b806309f6442c146103395780630c340a2414610355578063156e29f61461037557806318ce56bd146103885780631edfe3da1461039b578063207134b0146103a4575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e808015610332573d6000f35b3d6000fd5b005b61034260385481565b6040519081526020015b60405180910390f35b61035d6107d5565b6040516001600160a01b03909116815260200161034c565b6103376103833660046139b8565b6107f2565b60455461035d906001600160a01b031681565b61034260395481565b61034260435481565b6103b5610870565b60405161034c91906139eb565b603654610342565b604b54604c546103f6916001600160801b0380821692600160801b928390048216928183169291041684565b604080516001600160801b039586168152938516602085015291841691830191909152909116606082015260800161034c565b610342610437366004613a37565b6108d2565b61035d7f000000000000000000000000000000000000000000000000000000000000000081565b61033761092d565b61048e610479366004613a37565b60496020526000908152604090205460ff1681565b604051901515815260200161034c565b610342604e5481565b6103376104b5366004613a52565b610a6d565b6104cd6104c8366004613a85565b610c6f565b60405161034c929190613b38565b60425461035d906001600160a01b031681565b610342603b5481565b60375461048e90600160a01b900460ff1681565b610342607b5481565b603f5461035d906001600160a01b031681565b610342610535366004613a37565b610e4f565b610337610e78565b610342610550366004613a37565b610f1e565b604a5461035d906001600160a01b031681565b610337610576366004613b5a565b610f2f565b61058e610589366004613b5a565b6110c1565b60405161034c9190613b73565b6105ae6105a9366004613a37565b6110cc565b60405161034c9190613b9c565b6103376105c9366004613b5a565b611172565b61034260475481565b6103376105e5366004613bf2565b61124e565b61034260415481565b610654610601366004613b5a565b604d60205260009081526040902080546001909101546001600160a01b03821691600160a01b810460ff1691600160a81b90910464ffffffffff16906001600160801b0380821691600160801b90041685565b604080516001600160a01b039096168652931515602086015264ffffffffff909216928401929092526001600160801b03918216606084015216608082015260a00161034c565b61048e6106a9366004613a37565b6001600160a01b031660009081526033602052604090205460ff1690565b6106da6106d5366004613b5a565b61128d565b6040805192835260208301919091520161034c565b610342603a5481565b603454610342565b61035d61070e366004613a37565b6040602081905260009182529020546001600160a01b031681565b610337610737366004613b5a565b61154a565b6103376116bc565b610337611734565b60375461035d906001600160a01b031681565b61033761177a565b6103b56117ea565b61048e61184a565b610337610785366004613a37565b61187b565b61034261191f565b61034260465481565b60375461048e90600160a81b900460ff1681565b6103426107bd366004613b5a565b611929565b6103376107d0366004613a37565b611a83565b60006107ed6000805160206140268339815191525490565b905090565b603754600160a81b900460ff16156108255760405162461bcd60e51b815260040161081c90613c14565b60405180910390fd5b600080516020614006833981519152805460011981016108575760405162461bcd60e51b815260040161081c90613c3c565b60028255610866858585611b25565b5060019055505050565b606060348054806020026020016040519081016040528092919081815260200182805480156108c857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108aa575b5050505050905090565b6000806108fb6108f56108e485611da6565b670de0b6b3a7640000906012611e10565b84611e72565b9050670de0b6b3a764000081610912856001611fbd565b61091c9190613c7a565b6109269190613c91565b9392505050565b61093561184a565b6109515760405162461bcd60e51b815260040161081c90613cb3565b60345460005b818110156109c8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034828154811061099c5761099c613cea565b6000918252602090912001546001600160a01b0316036109c057607b8190556109c8565b600101610957565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034607b5481548110610a0857610a08613cea565b6000918252602090912001546001600160a01b031614610a6a5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205745544820417373657420496e6465780000000000000000604482015260640161081c565b50565b610a7561184a565b610a915760405162461bcd60e51b815260040161081c90613cb3565b600054610100900460ff1680610aaa575060005460ff16155b610b0d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161081c565b600054610100900460ff16158015610b2f576000805461ffff19166101011790555b6001600160a01b038316610b855760405162461bcd60e51b815260206004820152601d60248201527f507269636550726f76696465722061646472657373206973207a65726f000000604482015260640161081c565b6001600160a01b038216610bd45760405162461bcd60e51b81526020600482015260166024820152756f546f6b656e2061646472657373206973207a65726f60501b604482015260640161081c565b603c80546001600160a01b038481166001600160a01b031990921691909117909155603780546001600160b01b03191691851691909117600160a81b17905560006038819055603981905569054b40b1f852bda00000603a55683635c9adc5dea00000603b556040805191825260208201908190529051610c5791603691613930565b508015610c6a576000805461ff00191690555b505050565b603754606090600090600160a81b900460ff1615610c9f5760405162461bcd60e51b815260040161081c90613c14565b60008051602061400683398151915280546001198101610cd15760405162461bcd60e51b815260040161081c90613c3c565b60028255604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d2557600080fd5b505af1158015610d39573d6000803e3d6000fd5b50505050610d45612290565b508467ffffffffffffffff811115610d5f57610d5f613d00565b604051908082528060200260200182016040528015610d88578160200160208202803683370190505b50935060005b85811015610e0457610db7878783818110610dab57610dab613cea565b9050602002013561246c565b858281518110610dc957610dc9613cea565b602002602001018181525050848181518110610de757610de7613cea565b602002602001015184610dfa9190613d16565b9350600101610d8e565b50610e396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385612762565b610e42836127b8565b6001825550509250929050565b600080610e616108f56108e485611da6565b9050670de0b6b3a764000081610912856000611fbd565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610f135760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161081c565b610f1c3361295f565b565b6000610f2982612a20565b92915050565b603754600160a81b900460ff1615610f595760405162461bcd60e51b815260040161081c90613c14565b6045546001600160a01b03163314610f835760405162461bcd60e51b815260040161081c90613d29565b6000198110610fa45760405162461bcd60e51b815260040161081c90613d6d565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63382604051610fd5929190613d96565b60405180910390a18060466000828254610fef9190613daf565b909155505060475460465461100390612af3565b1061105a5760405162461bcd60e51b815260206004820152602160248201527f417474656d7074696e6720746f206275726e20746f6f206d756368204f5553446044820152601760f91b606482015260840161081c565b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061108c9033908590600401613d96565b600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b5050505050565b6060610f2982612b31565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160a01b038616825260338152908490208451928301909452835460ff80821615158452939492939184019161010090910416600181111561113857611138613b86565b600181111561114957611149613b86565b8152905462010000810460ff1660208301526301000000900461ffff1660409091015292915050565b603754600160a81b900460ff161561119c5760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016111ce5760405162461bcd60e51b815260040161081c90613c3c565b60028255603c546040516370a0823160e01b8152336004820152611246916001600160a01b0316906370a0823190602401602060405180830381865afa15801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112409190613dcf565b84612c72565b506001905550565b60405162461bcd60e51b81526020600482015260146024820152733ab739bab83837b93a32b210333ab731ba34b7b760611b604482015260640161081c565b6037546000908190600160a81b900460ff16156112bc5760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016112ee5760405162461bcd60e51b815260040161081c90613c3c565b600282556000604e54116113445760405162461bcd60e51b815260206004820152601d60248201527f4173796e63207769746864726177616c73206e6f7420656e61626c6564000000604482015260640161081c565b604c54604b546001600160801b03600160801b9092048216955061136a91879116613d16565b925061137f61137a856001613d16565b612e19565b604c80546001600160801b03928316600160801b0292169190911790556113a583612e19565b604b80546001600160801b0319166001600160801b03929092169190911790556040805160a081018252338152600060208201524264ffffffffff1691810191909152606081016113f587612e19565b6001600160801b0316815260200161140c85612e19565b6001600160801b039081169091526000868152604d602090815260409182902084518154928601518685015164ffffffffff16600160a81b0264ffffffffff60a81b19911515600160a01b026001600160a81b03199095166001600160a01b0393841617949094171692909217815560608501516080909501518416600160801b029490931693909317600190920191909155603c549051632770a7eb60e21b8152911690639dc29fac906114c79033908990600401613d96565b600060405180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b50505050611502856127b8565b6040805186815260208101859052859133917f38e3d972947cfef94205163d483d6287ef27eb312e20cb8e0b13a49989db232e910160405180910390a3600182555050915091565b603754600160a81b900460ff16156115745760405162461bcd60e51b815260040161081c90613c14565b6045546001600160a01b0316331461159e5760405162461bcd60e51b815260040161081c90613d29565b60001981106115bf5760405162461bcd60e51b815260040161081c90613d6d565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688533826040516115f0929190613d96565b60405180910390a1806046600082825461160a9190613de8565b909155505060475460465461161e90612af3565b1061168a5760405162461bcd60e51b815260206004820152603660248201527f4d696e746564206f75736420737572706173736564206e65744f7573644d696e6044820152753a2337b929ba3930ba32b3bcaa343932b9b437b6321760511b606482015260840161081c565b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061108c9033908590600401613d96565b603754600160a81b900460ff16156116e65760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016117185760405162461bcd60e51b815260040161081c90613c3c565b60028255611724612290565b5061172d612e82565b5060019055565b600080516020614006833981519152805460011981016117665760405162461bcd60e51b815260040161081c90613c3c565b600282556117726130aa565b505060019055565b604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156117ca57600080fd5b505af11580156117de573d6000803e3d6000fd5b50505050610a6a612290565b606060368054806020026020016040519081016040528092919081815260200182805480156108c8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116108aa575050505050905090565b60006118626000805160206140268339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61188361184a565b61189f5760405162461bcd60e51b815260040161081c90613cb3565b6118c7817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166118e76000805160206140268339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006107ed6133ca565b603754600090600160a81b900460ff16156119565760405162461bcd60e51b815260040161081c90613c14565b600080516020614006833981519152805460011981016119885760405162461bcd60e51b815260040161081c90613c3c565b60028255604b546000858152604d60205260409020600101546001600160801b03600160801b92839004811692909104161115611a3157604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a0f57600080fd5b505af1158015611a23573d6000803e3d6000fd5b50505050611a2f612290565b505b611a3a8461246c565b9250611a706001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385612762565b611a79836127b8565b5060019055919050565b611a8b61184a565b611aa75760405162461bcd60e51b815260040161081c90613cb3565b803b611b015760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b606482015260840161081c565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614611ba65760405162461bcd60e51b815260206004820152601d60248201527f556e737570706f7274656420617373657420666f72206d696e74696e67000000604482015260640161081c565b60008211611bf65760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161081c565b80821015611c465760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d0000604482015260640161081c565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853383604051611c77929190613d96565b60405180910390a1603754600160a01b900460ff16158015611c9b5750603b548210155b15611d1257604a60009054906101000a90046001600160a01b03166001600160a01b031663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611cf057600080fd5b505af1158015611d04573d6000803e3d6000fd5b50505050611d106130aa565b505b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611d449033908690600401613d96565b600060405180830381600087803b158015611d5e57600080fd5b505af1158015611d72573d6000803e3d6000fd5b50611d8c925050506001600160a01b0384163330856133f5565b611d94612290565b50603a548210610c6a57610c6a612e82565b6001600160a01b03811660009081526033602052604090205462010000900460ff1680611e0b5760405162461bcd60e51b8152602060048201526013602482015272111958da5b585b1cc81b9bdd0818d858da1959606a1b604482015260640161081c565b919050565b600081831115611e4057611e39611e278385613e10565b611e3290600a613f0a565b8590613433565b9350611e6a565b81831015611e6a57611e67611e558484613e10565b611e6090600a613f0a565b859061343f565b93505b509192915050565b6001600160a01b038116600090815260336020526040812054610100900460ff1681816001811115611ea657611ea6613b86565b03611ec957611ec16012611eb985611da6565b869190611e10565b915050610f29565b6001816001811115611edd57611edd613b86565b03611f6e576000836001600160a01b031663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f469190613dcf565b9050670de0b6b3a7640000611f5b8287613c7a565b611f659190613c91565b92505050610f29565b60405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161081c565b5092915050565b6001600160a01b038281166000818152603360205260408082205460375491516315d5220f60e31b81526004810194909452919361010090920460ff169291169063aea9107890602401602060405180830381865afa158015612024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120489190613dcf565b9150600181600181111561205e5761205e613b86565b036120ee576000846001600160a01b031663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190613dcf565b9050806120dc84670de0b6b3a7640000613c7a565b6120e69190613c91565b92505061214f565b600081600181111561210257612102613b86565b1461214f5760405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161081c565b67120a871cc00200008211156121a75760405162461bcd60e51b815260206004820152601860248201527f5661756c743a2050726963652065786365656473206d61780000000000000000604482015260640161081c565b6709b6e64a8ec600008210156121f85760405162461bcd60e51b81526020600482015260166024820152752b30bab63a1d10283934b1b2903ab73232b91036b4b760511b604482015260640161081c565b821561226f57670de0b6b3a764000082111561221a57670de0b6b3a764000091505b670dd99bb65dd7000082101561226a5760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b604482015260640161081c565b611fb6565b670de0b6b3a7640000821015611fb65750670de0b6b3a76400009392505050565b60408051608081018252604b546001600160801b03808216808452600160801b92839004821660208501819052604c54808416968601969096529290940416606083015260009283916122e291613f16565b6001600160801b03169050806000036122fe5760009250505090565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123899190613dcf565b90506000836040015184602001516123a19190613f16565b6001600160801b031690508082116123be57600094505050505090565b60006123ca8284613e10565b90508084106123d957806123db565b835b955060008686602001516001600160801b03166123f89190613d16565b905061240381612e19565b604b80546001600160801b03928316600160801b0292169190911790556040517fee79a0c43d3993055690b54e074b5153e8bae8d1a872b656dedb64aa8f4633339061245b9083908a90918252602082015260400190565b60405180910390a150505050505090565b600080604e54116124bf5760405162461bcd60e51b815260206004820152601d60248201527f4173796e63207769746864726177616c73206e6f7420656e61626c6564000000604482015260640161081c565b6000828152604d6020908152604091829020825160a08101845281546001600160a01b038116825260ff600160a01b82041615158285015264ffffffffff600160a81b90910481168286019081526001909301546001600160801b03808216606080860191909152600160801b92839004821660808087019190915288519081018952604b548084168252849004831697810197909752604c54808316988801989098529190960490951694840194909452604e5491519093429261258692909116613d16565b11156125ca5760405162461bcd60e51b815260206004820152601360248201527210db185a5b4819195b185e481b9bdd081b595d606a1b604482015260640161081c565b80602001516001600160801b031682608001516001600160801b031611156126345760405162461bcd60e51b815260206004820152601760248201527f51756575652070656e64696e67206c6971756964697479000000000000000000604482015260640161081c565b81516001600160a01b0316331461267d5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103932b8bab2b9ba32b960991b604482015260640161081c565b6020820151156126c15760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b604482015260640161081c565b6000848152604d602052604090819020805460ff60a01b1916600160a01b1790556060830151908201516126f59190613f35565b604c80546001600160801b0319166001600160801b03928316179055606083015160405191168152849033907f2d43eb174787155132b52ddb6b346e2dca99302eac3df4466dbeff953d3c84d19060200160405180910390a350606001516001600160801b031692915050565b610c6a8363a9059cbb60e01b8484604051602401612781929190613d96565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261344b565b6000603b5482101580156127d65750603754600160a01b900460ff16155b156127ea576127e36130aa565b90506127f5565b6127f26133ca565b90505b6041541561295b576000811161284d5760405162461bcd60e51b815260206004820152601d60248201527f546f6f206d616e79206f75747374616e64696e67207265717565737473000000604482015260640161081c565b60006128d082603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ca9190613dcf565b9061351d565b9050604154670de0b6b3a764000082116128fb576128f682670de0b6b3a7640000613e10565b61290d565b61290d670de0b6b3a764000083613e10565b1115610c6a5760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f720000604482015260640161081c565b5050565b6001600160a01b0381166129b55760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161081c565b806001600160a01b03166129d56000805160206140268339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610a6a8160008051602061402683398151915255565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614612a6357506000919050565b612a6c82613546565b60408051608081018252604b546001600160801b03808216808452600160801b9283900482166020850152604c54808316958501869052929092041660608301529293509190612abc9084613d16565b1015612acb5750600092915050565b805160408201516001600160801b0391821691612ae9911684613d16565b6109269190613e10565b60006000198212612b165760405162461bcd60e51b815260040161081c90613d6d565b6000821215612b2d57612b2882613f54565b610f29565b5090565b60385460609015612b6057603854600090612b509084906127106136e0565b9050612b5c8184613e10565b9250505b6000607b5490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660348281548110612ba457612ba4613cea565b6000918252602090912001546001600160a01b031614612c065760405162461bcd60e51b815260206004820152601b60248201527f5745544820417373657420696e646578206e6f74206361636865640000000000604482015260640161081c565b60345467ffffffffffffffff811115612c2157612c21613d00565b604051908082528060200260200182016040528015612c4a578160200160208202803683370190505b50915082828281518110612c6057612c60613cea565b60200260200101818152505050919050565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63383604051612ca3929190613d96565b60405180910390a181600003612cb7575050565b6000612cc283612b31565b607b5481518110612cd557612cd5613cea565b6020026020010151905081811015612d2f5760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d604482015260640161081c565b80612d38613702565b1015612d785760405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015260640161081c565b612dac6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612762565b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90612dde9033908790600401613d96565b600060405180830381600087803b158015612df857600080fd5b505af1158015612e0c573d6000803e3d6000fd5b50505050610c6a836127b8565b60006001600160801b03821115612b2d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161081c565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152604060208190529020541680612ec55750565b6000612ecf613702565b905080600003612edd575050565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015612f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4b9190613dcf565b90506000612f646039548361381090919063ffffffff16565b9050808311612f735750505050565b6000612f7f8285613e10565b905084612fb66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284612762565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef2490613004907f0000000000000000000000000000000000000000000000000000000000000000908690600401613d96565b600060405180830381600087803b15801561301e57600080fd5b505af1158015613032573d6000803e3d6000fd5b5050604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682528a1660208201529081018590527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505050505050565b603754600090600160a01b900460ff16156130f95760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015260640161081c565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015613143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131679190613dcf565b905060006131736133ca565b9050816000036131865791506133c79050565b6042546001600160a01b031680158015906131a057508282115b156132e25760006131b18484613e10565b905060006131ce604354612710846136e09092919063ffffffff16565b905080821161322a5760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b606482015260840161081c565b801561329557603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906132629086908590600401613d96565b600060405180830381600087803b15801561327c57600080fd5b505af1158015613290573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133599190613dcf565b9250828211156133c257603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b1580156133a957600080fd5b505af11580156133bd573d6000803e3d6000fd5b505050505b509150505b90565b60006107ed7f0000000000000000000000000000000000000000000000000000000000000000612a20565b6040516001600160a01b038085166024830152831660448201526064810182905261342d9085906323b872dd60e01b90608401612781565b50505050565b60006109268284613c7a565b60006109268284613c91565b60006134a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138259092919063ffffffff16565b805190915015610c6a57808060200190518101906134be9190613f70565b610c6a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161081c565b60008061353284670de0b6b3a7640000613433565b905061353e818461343f565b949350505050565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a0823190602401602060405180830381865afa15801561358f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b39190613dcf565b60365490925060005b818110156136d8576000603682815481106135d9576135d9613cea565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0388811660048301529091169150819063aa388af690602401602060405180830381865afa15801561362f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136539190613f70565b156136cf57604051632fa8a91360e11b81526001600160a01b038781166004830152821690635f51522690602401602060405180830381865afa15801561369e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c29190613dcf565b6136cc9086613d16565b94505b506001016135bc565b505050919050565b6000806136ed8585613433565b90506136f9818461343f565b95945050505050565b60408051608081018252604b546001600160801b03808216808452600160801b9283900482166020850152604c548083169585018690529290920416606083015260009283916137529190613f16565b6040516370a0823160e01b81523060048201526001600160801b039190911691506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156137c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137eb9190613dcf565b90508181116137fe576000935050505090565b6138088282613e10565b935050505090565b60006109268383670de0b6b3a76400006136e0565b606061353e848460008585843b61387e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161081c565b600080866001600160a01b0316858760405161389a9190613fb6565b60006040518083038185875af1925050503d80600081146138d7576040519150601f19603f3d011682016040523d82523d6000602084013e6138dc565b606091505b50915091506138ec8282866138f7565b979650505050505050565b60608315613906575081610926565b8251156139165782518084602001fd5b8160405162461bcd60e51b815260040161081c9190613fd2565b828054828255906000526020600020908101928215613985579160200282015b8281111561398557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613950565b50612b2d9291505b80821115612b2d576000815560010161398d565b80356001600160a01b0381168114611e0b57600080fd5b6000806000606084860312156139cd57600080fd5b6139d6846139a1565b95602085013595506040909401359392505050565b602080825282518282018190526000918401906040840190835b81811015613a2c5783516001600160a01b0316835260209384019390920191600101613a05565b509095945050505050565b600060208284031215613a4957600080fd5b610926826139a1565b60008060408385031215613a6557600080fd5b613a6e836139a1565b9150613a7c602084016139a1565b90509250929050565b60008060208385031215613a9857600080fd5b823567ffffffffffffffff811115613aaf57600080fd5b8301601f81018513613ac057600080fd5b803567ffffffffffffffff811115613ad757600080fd5b8560208260051b8401011115613aec57600080fd5b6020919091019590945092505050565b600081518084526020840193506020830160005b82811015613b2e578151865260209586019590910190600101613b10565b5093949350505050565b604081526000613b4b6040830185613afc565b90508260208301529392505050565b600060208284031215613b6c57600080fd5b5035919050565b6020815260006109266020830184613afc565b634e487b7160e01b600052602160045260246000fd5b8151151581526020820151608082019060028110613bca57634e487b7160e01b600052602160045260246000fd5b8060208401525060ff604084015116604083015261ffff606084015116606083015292915050565b60008060408385031215613c0557600080fd5b50508035926020909101359150565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f2957610f29613c64565b600082613cae57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80820180821115610f2957610f29613c64565b60208082526024908201527f43616c6c6572206973206e6f7420746865204f555344206d65746120737472616040820152637465677960e01b606082015260800190565b6020808252600f908201526e082dadeeadce840e8dede40d0d2ced608b1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b8181036000831280158383131683831282161715611fb657611fb6613c64565b600060208284031215613de157600080fd5b5051919050565b8082018281126000831280158216821582161715613e0857613e08613c64565b505092915050565b81810381811115610f2957610f29613c64565b6001815b6001841115613e5e57808504811115613e4257613e42613c64565b6001841615613e5057908102905b60019390931c928002613e27565b935093915050565b600082613e7557506001610f29565b81613e8257506000610f29565b8160018114613e985760028114613ea257613ebe565b6001915050610f29565b60ff841115613eb357613eb3613c64565b50506001821b610f29565b5060208310610133831016604e8410600b8410161715613ee1575081810a610f29565b613eee6000198484613e23565b8060001904821115613f0257613f02613c64565b029392505050565b60006109268383613e66565b6001600160801b038281168282160390811115610f2957610f29613c64565b6001600160801b038181168382160190811115610f2957610f29613c64565b6000600160ff1b8201613f6957613f69613c64565b5060000390565b600060208284031215613f8257600080fd5b8151801515811461092657600080fd5b60005b83811015613fad578181015183820152602001613f95565b50506000910152565b60008251613fc8818460208701613f92565b9190910192915050565b6020815260008251806020840152613ff1816040850160208701613f92565b601f01601f1916919091016040019291505056fe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212202de7dbb20ec302f109ca6116b0a84f0dc4e5ad578580c8d1b1f95f186df04d0564736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "addWithdrawalQueueLiquidity()": {
        "details": "is called from the Native Staking strategy when validator withdrawals are processed. It also called before any WETH is allocated to a strategy."
      },
      "burnForStrategy(uint256)": {
        "details": "Notice: can't use `nonReentrant` modifier since the `redeem` function could require withdrawal on `ConvexOUSDMetaStrategy` and that one can call `burnForStrategy` while the execution of the `redeem` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function.",
        "params": {
          "_amount": "Amount of OUSD to burn"
        }
      },
      "cacheWETHAssetIndex()": {
        "details": "Caches WETH's index in `allAssets` variable.      Reduces gas usage by redeem by caching that."
      },
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of asset"
        },
        "returns": {
          "_0": "uint256 Balance of asset in decimals of asset"
        }
      },
      "claimWithdrawal(uint256)": {
        "params": {
          "_requestId": "Unique ID for the withdrawal request"
        },
        "returns": {
          "amount": "Amount of WETH transferred to the withdrawer"
        }
      },
      "claimWithdrawals(uint256[])": {
        "params": {
          "_requestIds": "Unique ID of each withdrawal request"
        },
        "returns": {
          "amounts": "Amount of WETH received for each request",
          "totalAmount": "Total amount of WETH transferred to the withdrawer"
        }
      },
      "constructor": {
        "params": {
          "_wS": "Sonic's Wrapped S token"
        }
      },
      "getAssetConfig(address)": {
        "params": {
          "_asset": "Address of the token asset"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "address of the asset"
        },
        "returns": {
          "_0": "true if supported"
        }
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of the asset being deposited",
          "_asset": "Address of the asset being deposited",
          "_minimumOusdAmount": "Minimum OTokens to mint"
        }
      },
      "mintForStrategy(uint256)": {
        "params": {
          "_amount": "Amount of the asset being deposited Notice: can't use `nonReentrant` modifier since the `mint` function can call `allocate`, and that can trigger `ConvexOUSDMetaStrategy` to call this function while the execution of the `mint` has not yet completed -> causing a `nonReentrant` collision. Also important to understand is that this is a limitation imposed by the test suite. Production / mainnet contracts should never be configured in a way where mint/redeem functions that are moving funds between the Vault and end user wallets can influence strategies utilizing this function."
        }
      },
      "priceUnitMint(address)": {
        "params": {
          "asset": "address of the asset"
        },
        "returns": {
          "price": "uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed"
        }
      },
      "priceUnitRedeem(address)": {
        "params": {
          "asset": "Address of the asset"
        },
        "returns": {
          "price": "uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed"
        }
      },
      "redeemAll(uint256)": {
        "params": {
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "requestWithdrawal(uint256)": {
        "params": {
          "_amount": "Amount of OETH to burn."
        },
        "returns": {
          "queued": "Cumulative total of all WETH queued including already claimed requests.",
          "requestId": "Unique ID for the withdrawal request"
        }
      },
      "setAdminImpl(address)": {
        "params": {
          "newImpl": "address of the implementation"
        }
      },
      "totalValue()": {
        "returns": {
          "value": "Total value in USD/ETH (1e18)"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "title": "Origin Sonic VaultCore contract on Sonic",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWithdrawalQueueLiquidity()": {
        "notice": "Collects harvested rewards from the Dripper as WETH then adds WETH to the withdrawal queue if there is a funding shortfall."
      },
      "allocate()": {
        "notice": "Allocate unallocated funds on Vault to strategies.*"
      },
      "assetDefaultStrategies(address)": {
        "notice": "Mapping of asset address to the Strategy that they should automatically"
      },
      "autoAllocateThreshold()": {
        "notice": "OToken mints over this amount automatically allocate funds. 18 decimals."
      },
      "burnForStrategy(uint256)": {
        "notice": "Burn OTokens for Metapool Strategy"
      },
      "calculateRedeemOutputs(uint256)": {
        "notice": "Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned"
      },
      "capitalPaused()": {
        "notice": "pause operations that change the OToken supply. eg mint, redeem, allocate, mint/burn for strategy"
      },
      "checkBalance(address)": {
        "notice": "Get the balance of an asset held in Vault and all strategies."
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "claimWithdrawal(uint256)": {
        "notice": "Claim a previously requested withdrawal once it is claimable. This request can be claimed once the withdrawal queue's `claimable` amount is greater than or equal this request's `queued` amount and 10 minutes has passed. If the requests is not claimable, the transaction will revert with `Queue pending liquidity`. If the request is not older than 10 minutes, the transaction will revert with `Claim delay not met`. OETH is converted to WETH at 1:1."
      },
      "claimWithdrawals(uint256[])": {
        "notice": "Claim a previously requested withdrawals once they are claimable. This requests can be claimed once the withdrawal queue's `claimable` amount is greater than or equal each request's `queued` amount and 10 minutes has passed. If one of the requests is not claimable, the whole transaction will revert with `Queue pending liquidity`. If one of the requests is not older than 10 minutes, the whole transaction will revert with `Claim delay not met`."
      },
      "dripper()": {
        "notice": "Address of the Dripper contract that streams harvested rewards to the Vault"
      },
      "getAllAssets()": {
        "notice": "Return all vault asset addresses in order"
      },
      "getAllStrategies()": {
        "notice": "Return the array of all strategies"
      },
      "getAssetConfig(address)": {
        "notice": "Gets the vault configuration of a supported asset."
      },
      "getAssetCount()": {
        "notice": "Return the number of assets supported by the Vault."
      },
      "getStrategyCount()": {
        "notice": "Return the number of strategies active on the Vault."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "isSupportedAsset(address)": {
        "notice": "Returns whether the vault supports the asset"
      },
      "maxSupplyDiff()": {
        "notice": "Max difference between total supply and total value of assets. 18 decimals."
      },
      "mint(address,uint256,uint256)": {
        "notice": "Deposit a supported asset and mint OTokens."
      },
      "mintForStrategy(uint256)": {
        "notice": "Mint OTokens for a Metapool Strategy"
      },
      "netOusdMintForStrategyThreshold()": {
        "notice": "How much net total OTokens are allowed to be minted by all strategies"
      },
      "netOusdMintedForStrategy()": {
        "notice": "How much OTokens are currently minted by the strategy"
      },
      "ousdMetaStrategy()": {
        "notice": "Metapool strategy that is allowed to mint/burn OTokens without changing collateral"
      },
      "priceProvider()": {
        "notice": "Address of the Oracle price provider contract"
      },
      "priceUnitMint(address)": {
        "notice": "Returns the total price in 18 digit units for a given asset.      Never goes above 1, since that is how we price mints."
      },
      "priceUnitRedeem(address)": {
        "notice": "Returns the total price in 18 digit unit for a given asset.      Never goes below 1, since that is how we price redeems"
      },
      "rebase()": {
        "notice": "Calculate the total value of assets held by the Vault and all      strategies and update the supply of OTokens."
      },
      "rebasePaused()": {
        "notice": "pause rebasing if true"
      },
      "rebaseThreshold()": {
        "notice": "OToken mints over this amount automatically rebase. 18 decimals."
      },
      "redeem(uint256,uint256)": {
        "notice": "Instant redeem is not supported on Sonic. Use the asynchronous `requestWithdrawal` a `claimWithdrawal` instead."
      },
      "redeemAll(uint256)": {
        "notice": "Withdraw a supported asset and burn all OTokens."
      },
      "redeemFeeBps()": {
        "notice": "Redemption fee in basis points. eg 50 = 0.5%"
      },
      "requestWithdrawal(uint256)": {
        "notice": "Request an asynchronous withdrawal of WETH in exchange for OETH. The OETH is burned on request and the WETH is transferred to the withdrawer on claim. This request can be claimed once the withdrawal queue's `claimable` amount is greater than or equal this request's `queued` amount. There is a minimum of 10 minutes before a request can be claimed. After that, the request just needs enough WETH liquidity in the Vault to satisfy all the outstanding requests to that point in the queue. OETH is converted to WETH at 1:1."
      },
      "setAdminImpl(address)": {
        "notice": "set the implementation for the admin, this needs to be in a base class else we cannot set it"
      },
      "strategistAddr()": {
        "notice": "Address of the Strategist"
      },
      "totalValue()": {
        "notice": "Determine the total value of assets held by the vault and its         strategies."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "trusteeAddress()": {
        "notice": "Trustee contract that can collect a percentage of yield"
      },
      "trusteeFeeBps()": {
        "notice": "Amount of yield collected in basis points. eg 2000 = 20%"
      },
      "vaultBuffer()": {
        "notice": "Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18."
      },
      "withdrawalClaimDelay()": {
        "notice": "Sets a minimum delay that is required to elapse between     requesting async withdrawals and claiming the request.     When set to 0 async withdrawals are disabled."
      },
      "withdrawalQueueMetadata()": {
        "notice": "Global metadata for the withdrawal queue including: queued - cumulative total of all withdrawal requests included the ones that have already been claimed claimable - cumulative total of all the requests that can be claimed including the ones already claimed claimed - total of all the requests that have been claimed nextWithdrawalIndex - index of the next withdrawal request starting at 0"
      },
      "withdrawalRequests(uint256)": {
        "notice": "Mapping of withdrawal request indices to the user withdrawal request data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51351,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 51354,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 51394,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 58067,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Asset)58061_storage)"
      },
      {
        "astId": 58071,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "allAssets",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 58082,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "strategies",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(Strategy)58076_storage)"
      },
      {
        "astId": 58086,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "allStrategies",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 58089,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "priceProvider",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 58093,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "rebasePaused",
        "offset": 20,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 58097,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "capitalPaused",
        "offset": 21,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 58100,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 58103,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "vaultBuffer",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 58106,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "autoAllocateThreshold",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 58109,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "rebaseThreshold",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 58113,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "oUSD",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(OUSD)48733"
      },
      {
        "astId": 58124,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "_deprecated_rebaseHooksAddr",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 58131,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "_deprecated_uniswapAddr",
        "offset": 0,
        "slot": "62",
        "type": "t_address"
      },
      {
        "astId": 58138,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      },
      {
        "astId": 58143,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "assetDefaultStrategies",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 58146,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "maxSupplyDiff",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 58149,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "trusteeAddress",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 58152,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "trusteeFeeBps",
        "offset": 0,
        "slot": "67",
        "type": "t_uint256"
      },
      {
        "astId": 58156,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "_deprecated_swapTokens",
        "offset": 0,
        "slot": "68",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 58162,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "ousdMetaStrategy",
        "offset": 0,
        "slot": "69",
        "type": "t_address"
      },
      {
        "astId": 58165,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "netOusdMintedForStrategy",
        "offset": 0,
        "slot": "70",
        "type": "t_int256"
      },
      {
        "astId": 58168,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "netOusdMintForStrategyThreshold",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 58190,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "swapConfig",
        "offset": 0,
        "slot": "72",
        "type": "t_struct(SwapConfig)58180_storage"
      },
      {
        "astId": 58194,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "isMintWhitelistedStrategy",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 58197,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "dripper",
        "offset": 0,
        "slot": "74",
        "type": "t_address"
      },
      {
        "astId": 58211,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "withdrawalQueueMetadata",
        "offset": 0,
        "slot": "75",
        "type": "t_struct(WithdrawalQueueMetadata)58207_storage"
      },
      {
        "astId": 58228,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "withdrawalRequests",
        "offset": 0,
        "slot": "77",
        "type": "t_mapping(t_uint256,t_struct(WithdrawalRequest)58222_storage)"
      },
      {
        "astId": 58231,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "withdrawalClaimDelay",
        "offset": 0,
        "slot": "78",
        "type": "t_uint256"
      },
      {
        "astId": 58235,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "__gap",
        "offset": 0,
        "slot": "79",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 53062,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "wethAssetIndex",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 53066,
        "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
        "label": "__gap",
        "offset": 0,
        "slot": "124",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(OUSD)48733": {
        "encoding": "inplace",
        "label": "contract OUSD",
        "numberOfBytes": "20"
      },
      "t_enum(UnitConversion)58051": {
        "encoding": "inplace",
        "label": "enum VaultStorage.UnitConversion",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Asset)58061_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)58061_storage"
      },
      "t_mapping(t_address,t_struct(Strategy)58076_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)58076_storage"
      },
      "t_mapping(t_uint256,t_struct(WithdrawalRequest)58222_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VaultStorage.WithdrawalRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawalRequest)58222_storage"
      },
      "t_struct(Asset)58061_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Asset",
        "members": [
          {
            "astId": 58053,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 58056,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "unitConversion",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(UnitConversion)58051"
          },
          {
            "astId": 58058,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "decimals",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 58060,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "allowedOracleSlippageBps",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)58076_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Strategy",
        "members": [
          {
            "astId": 58073,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 58075,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "_deprecated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SwapConfig)58180_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.SwapConfig",
        "members": [
          {
            "astId": 58177,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "swapper",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 58179,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "allowedUndervalueBps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WithdrawalQueueMetadata)58207_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.WithdrawalQueueMetadata",
        "members": [
          {
            "astId": 58200,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "queued",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 58202,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "claimable",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 58204,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "claimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 58206,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "nextWithdrawalIndex",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WithdrawalRequest)58222_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.WithdrawalRequest",
        "members": [
          {
            "astId": 58213,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "withdrawer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 58215,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "claimed",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 58217,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "timestamp",
            "offset": 21,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 58219,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 58221,
            "contract": "contracts/vault/OSonicVaultCore.sol:OSonicVaultCore",
            "label": "queued",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0x406C9317a58B5827A64176d06AeB68ed0B5B5B1e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oSonic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_centralRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_exclusionList",
          "type": "address[]"
        }
      ],
      "name": "bribeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "centralRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolBoostCentralRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ammPoolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        }
      ],
      "name": "computePoolBoosterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ammPoolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        }
      ],
      "name": "createPoolBoosterMetropolis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oSonic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolBoosterFromPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "boosterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ammPoolAddress",
          "type": "address"
        },
        {
          "internalType": "enum IPoolBoostCentralRegistry.PoolBoosterType",
          "name": "boosterType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolBoosterLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolBoosters",
      "outputs": [
        {
          "internalType": "address",
          "name": "boosterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ammPoolAddress",
          "type": "address"
        },
        {
          "internalType": "enum IPoolBoostCentralRegistry.PoolBoosterType",
          "name": "boosterType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolBoosterAddress",
          "type": "address"
        }
      ],
      "name": "removePoolBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x093a2f098130c67a5bd32f76c89f13934baf040278af63133bf2f50c893d9f42",
  "receipt": {
    "to": null,
    "from": "0x074105fdD39e982B2ffE749A193c942db1046AB9",
    "contractAddress": "0x406C9317a58B5827A64176d06AeB68ed0B5B5B1e",
    "transactionIndex": 1,
    "gasUsed": "1494617",
    "logsBloom": "0x
    "blockHash": "0x131f9c34ac647afaa1cb4b3807b46e69a299c1615bb6dcc0708b871fcad50b62",
    "transactionHash": "0x093a2f098130c67a5bd32f76c89f13934baf040278af63133bf2f50c893d9f42",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18772201,
        "transactionHash": "0x093a2f098130c67a5bd32f76c89f13934baf040278af63133bf2f50c893d9f42",
        "address": "0x406C9317a58B5827A64176d06AeB68ed0B5B5B1e",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000031a91336414d3b955e494e7d485a6b06b55fc8fb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x131f9c34ac647afaa1cb4b3807b46e69a299c1615bb6dcc0708b871fcad50b62"
      }
    ],
    "blockNumber": 18772201,
    "cumulativeGasUsed": "1523113",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb1e25689D55734FD3ffFc939c4C3Eb52DFf8A794",
    "0x31a91336414d3B955E494E7d485a6B06b55FC8fB",
    "0x4F3B656Aa5Fb5E708bF7B63D6ff71623eb4a218A",
    "0xd9db92613867FE0d290CE64Fe737E2F8B80CADc3",
    "0x03A9896A464C515d13f2679df337bF95bc891fdA"
  ],
  "numDeployments": 1,
  "solcInputHash": "8f8cde0d4f114ce913815df8ad8c422f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oSonic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_centralRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_exclusionList\",\"type\":\"address[]\"}],\"name\":\"bribeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"centralRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolBoostCentralRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ammPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"computePoolBoosterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ammPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"createPoolBoosterMetropolis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oSonic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolBoosterFromPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"boosterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammPoolAddress\",\"type\":\"address\"},{\"internalType\":\"enum IPoolBoostCentralRegistry.PoolBoosterType\",\"name\":\"boosterType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolBoosterLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBoosters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"boosterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammPoolAddress\",\"type\":\"address\"},{\"internalType\":\"enum IPoolBoostCentralRegistry.PoolBoosterType\",\"name\":\"boosterType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolBoosterAddress\",\"type\":\"address\"}],\"name\":\"removePoolBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"bribeAll(address[])\":{\"params\":{\"_exclusionList\":\"A list of pool booster addresses to skip when        calling this function.\"}},\"computePoolBoosterAddress(address,uint256)\":{\"details\":\"Create a Pool Booster for Metropolis pool.\",\"params\":{\"_ammPoolAddress\":\"address of the AMM pool where the yield originates from\",\"_salt\":\"A unique number that affects the address of the pool booster created. Note: this number        should match the one from `createPoolBoosterMetropolis` in order for the final deployed address        and pre-computed address to match\"}},\"createPoolBoosterMetropolis(address,uint256)\":{\"details\":\"Create a Pool Booster for Metropolis pool.\",\"params\":{\"_ammPoolAddress\":\"address of the AMM pool where the yield originates from\",\"_salt\":\"A unique number that affects the address of the pool booster created. Note: this number        should match the one from `computePoolBoosterAddress` in order for the final deployed address        and pre-computed address to match\"}},\"removePoolBooster(address)\":{\"details\":\"This action does not destroy the pool booster contract nor does it      stop the yield delegation to it.\",\"params\":{\"_poolBoosterAddress\":\"address of the pool booster\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"title\":\"Pool booster factory for creating Metropolis pool boosters.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bribeAll(address[])\":{\"notice\":\"Goes over all the pool boosters created by this factory and         calls bribe() on them.\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"removePoolBooster(address)\":{\"notice\":\"Removes the pool booster from the internal list of pool boosters.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/poolBooster/PoolBoosterFactoryMetropolis.sol\":\"PoolBoosterFactoryMetropolis\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        emit GovernorshipTransferred(_governor(), newGovernor);\\n\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xec8e86e43da98835736de1151b86ca13cd8a1a256adc1382ce7030d825521003\",\"license\":\"MIT\"},\"contracts/interfaces/poolBooster/IPoolBoostCentralRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPoolBoostCentralRegistry {\\n    /**\\n     * @dev all the supported pool booster types are listed here. It is possible\\n     *      to have multiple versions of the factory that supports the same type of\\n     *      pool booster. Factories are immutable and this can happen when a factory\\n     *      or related pool booster required code update.\\n     *      e.g. \\\"PoolBoosterSwapxDouble\\\" & \\\"PoolBoosterSwapxDouble_v2\\\"\\n     */\\n    enum PoolBoosterType {\\n        // Supports bribing 2 contracts per pool. Appropriate for Ichi vault concentrated\\n        // liquidity pools where (which is expected in most/all cases) both pool gauges\\n        // require bribing.\\n        SwapXDoubleBooster,\\n        // Supports bribing a single contract per pool. Appropriate for Classic Stable &\\n        // Classic Volatile pools and Ichi vaults where only 1 side (1 of the 2 gauges)\\n        // needs bribing\\n        SwapXSingleBooster,\\n        // Supports bribing a single contract per pool. Appropriate for Metropolis pools\\n        MetropolisBooster\\n    }\\n\\n    struct PoolBoosterEntry {\\n        address boosterAddress;\\n        address ammPoolAddress;\\n        PoolBoosterType boosterType;\\n    }\\n\\n    event PoolBoosterCreated(\\n        address poolBoosterAddress,\\n        address ammPoolAddress,\\n        PoolBoosterType poolBoosterType,\\n        address factoryAddress\\n    );\\n    event PoolBoosterRemoved(address poolBoosterAddress);\\n\\n    function emitPoolBoosterCreated(\\n        address _poolBoosterAddress,\\n        address _ammPoolAddress,\\n        PoolBoosterType _boosterType\\n    ) external;\\n\\n    function emitPoolBoosterRemoved(address _poolBoosterAddress) external;\\n}\\n\",\"keccak256\":\"0xfbb6f386707ecb09caa6c75fe1fbbaeb57f09b0e4018a2553f8dc5ab1ecc7fa1\",\"license\":\"MIT\"},\"contracts/interfaces/poolBooster/IPoolBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPoolBooster {\\n    event BribeExecuted(uint256 amount);\\n\\n    /// @notice Execute the bribe action\\n    function bribe() external;\\n}\\n\",\"keccak256\":\"0x7d0ec960fef6b539a1c472826a38026fd72e687c2351c259f18ef0cc2c9b322a\",\"license\":\"MIT\"},\"contracts/poolBooster/AbstractPoolBoosterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IPoolBooster } from \\\"../interfaces/poolBooster/IPoolBooster.sol\\\";\\nimport { IPoolBoostCentralRegistry } from \\\"../interfaces/poolBooster/IPoolBoostCentralRegistry.sol\\\";\\n\\n/**\\n * @title Abstract Pool booster factory\\n * @author Origin Protocol Inc\\n */\\ncontract AbstractPoolBoosterFactory is Governable {\\n    struct PoolBoosterEntry {\\n        address boosterAddress;\\n        address ammPoolAddress;\\n        IPoolBoostCentralRegistry.PoolBoosterType boosterType;\\n    }\\n\\n    // @notice address of Origin Sonic\\n    address public immutable oSonic;\\n    // @notice Central registry contract\\n    IPoolBoostCentralRegistry public immutable centralRegistry;\\n\\n    // @notice list of all the pool boosters created by this factory\\n    PoolBoosterEntry[] public poolBoosters;\\n    // @notice mapping of AMM pool to pool booster\\n    mapping(address => PoolBoosterEntry) public poolBoosterFromPool;\\n\\n    // @param address _oSonic address of the OSonic token\\n    // @param address _governor address governor\\n    // @param address _centralRegistry address of the central registry\\n    constructor(\\n        address _oSonic,\\n        address _governor,\\n        address _centralRegistry\\n    ) {\\n        require(_oSonic != address(0), \\\"Invalid oSonic address\\\");\\n        require(_governor != address(0), \\\"Invalid governor address\\\");\\n        require(\\n            _centralRegistry != address(0),\\n            \\\"Invalid central registry address\\\"\\n        );\\n\\n        oSonic = _oSonic;\\n        centralRegistry = IPoolBoostCentralRegistry(_centralRegistry);\\n        _setGovernor(_governor);\\n    }\\n\\n    /**\\n     * @notice Goes over all the pool boosters created by this factory and\\n     *         calls bribe() on them.\\n     * @param _exclusionList A list of pool booster addresses to skip when\\n     *        calling this function.\\n     */\\n    function bribeAll(address[] memory _exclusionList) external {\\n        uint256 lengthI = poolBoosters.length;\\n        for (uint256 i = 0; i < lengthI; i++) {\\n            address poolBoosterAddress = poolBoosters[i].boosterAddress;\\n            bool skipBribeCall = false;\\n            uint256 lengthJ = _exclusionList.length;\\n            for (uint256 j = 0; j < lengthJ; j++) {\\n                // pool booster in exclusion list\\n                if (_exclusionList[j] == poolBoosterAddress) {\\n                    skipBribeCall = true;\\n                    break;\\n                }\\n            }\\n\\n            if (!skipBribeCall) {\\n                IPoolBooster(poolBoosterAddress).bribe();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes the pool booster from the internal list of pool boosters.\\n     * @dev This action does not destroy the pool booster contract nor does it\\n     *      stop the yield delegation to it.\\n     * @param _poolBoosterAddress address of the pool booster\\n     */\\n    function removePoolBooster(address _poolBoosterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 boostersLen = poolBoosters.length;\\n        for (uint256 i = 0; i < boostersLen; ++i) {\\n            if (poolBoosters[i].boosterAddress == _poolBoosterAddress) {\\n                // erase mapping\\n                delete poolBoosterFromPool[poolBoosters[i].ammPoolAddress];\\n\\n                // overwrite current pool booster with the last entry in the list\\n                poolBoosters[i] = poolBoosters[boostersLen - 1];\\n                // drop the last entry\\n                poolBoosters.pop();\\n\\n                centralRegistry.emitPoolBoosterRemoved(_poolBoosterAddress);\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _storePoolBoosterEntry(\\n        address _poolBoosterAddress,\\n        address _ammPoolAddress,\\n        IPoolBoostCentralRegistry.PoolBoosterType _boosterType\\n    ) internal {\\n        PoolBoosterEntry memory entry = PoolBoosterEntry(\\n            _poolBoosterAddress,\\n            _ammPoolAddress,\\n            _boosterType\\n        );\\n\\n        poolBoosters.push(entry);\\n        poolBoosterFromPool[_ammPoolAddress] = entry;\\n\\n        // emit the events of the pool booster created\\n        centralRegistry.emitPoolBoosterCreated(\\n            _poolBoosterAddress,\\n            _ammPoolAddress,\\n            _boosterType\\n        );\\n    }\\n\\n    function _deployContract(bytes memory _bytecode, uint256 _salt)\\n        internal\\n        returns (address _address)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _address := create2(\\n                0,\\n                add(_bytecode, 0x20),\\n                mload(_bytecode),\\n                _salt\\n            )\\n        }\\n\\n        require(\\n            _address.code.length > 0 && _address != address(0),\\n            \\\"Failed creating a pool booster\\\"\\n        );\\n    }\\n\\n    // pre-compute the address of the deployed contract that will be\\n    // created when create2 is called\\n    function _computeAddress(bytes memory _bytecode, uint256 _salt)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                _salt,\\n                keccak256(_bytecode)\\n            )\\n        );\\n\\n        // cast last 20 bytes of hash to address\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    function poolBoosterLength() external view returns (uint256) {\\n        return poolBoosters.length;\\n    }\\n}\\n\",\"keccak256\":\"0xf0252e97fd2ca5a026a04ce1e2244febc1fc362b079532edf45407befc34b05b\",\"license\":\"MIT\"},\"contracts/poolBooster/PoolBoosterFactoryMetropolis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PoolBoosterMetropolis } from \\\"./PoolBoosterMetropolis.sol\\\";\\nimport { AbstractPoolBoosterFactory, IPoolBoostCentralRegistry } from \\\"./AbstractPoolBoosterFactory.sol\\\";\\n\\n/**\\n * @title Pool booster factory for creating Metropolis pool boosters.\\n * @author Origin Protocol Inc\\n */\\ncontract PoolBoosterFactoryMetropolis is AbstractPoolBoosterFactory {\\n    uint256 public constant version = 1;\\n    address public immutable rewardFactory;\\n    address public immutable voter;\\n\\n    // @param address _oSonic address of the OSonic token\\n    // @param address _governor address governor\\n    // @param address _centralRegistry address of the central registry\\n    // @param address _rewardFactory address of the Metropolis reward factory\\n    // @param address _voter address of the Metropolis voter\\n    constructor(\\n        address _oSonic,\\n        address _governor,\\n        address _centralRegistry,\\n        address _rewardFactory,\\n        address _voter\\n    ) AbstractPoolBoosterFactory(_oSonic, _governor, _centralRegistry) {\\n        rewardFactory = _rewardFactory;\\n        voter = _voter;\\n    }\\n\\n    /**\\n     * @dev Create a Pool Booster for Metropolis pool.\\n     * @param _ammPoolAddress address of the AMM pool where the yield originates from\\n     * @param _salt A unique number that affects the address of the pool booster created. Note: this number\\n     *        should match the one from `computePoolBoosterAddress` in order for the final deployed address\\n     *        and pre-computed address to match\\n     */\\n    function createPoolBoosterMetropolis(address _ammPoolAddress, uint256 _salt)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _ammPoolAddress != address(0),\\n            \\\"Invalid ammPoolAddress address\\\"\\n        );\\n        require(_salt > 0, \\\"Invalid salt\\\");\\n\\n        address poolBoosterAddress = _deployContract(\\n            abi.encodePacked(\\n                type(PoolBoosterMetropolis).creationCode,\\n                abi.encode(oSonic, rewardFactory, _ammPoolAddress, voter)\\n            ),\\n            _salt\\n        );\\n\\n        _storePoolBoosterEntry(\\n            poolBoosterAddress,\\n            _ammPoolAddress,\\n            IPoolBoostCentralRegistry.PoolBoosterType.MetropolisBooster\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a Pool Booster for Metropolis pool.\\n     * @param _ammPoolAddress address of the AMM pool where the yield originates from\\n     * @param _salt A unique number that affects the address of the pool booster created. Note: this number\\n     *        should match the one from `createPoolBoosterMetropolis` in order for the final deployed address\\n     *        and pre-computed address to match\\n     */\\n    function computePoolBoosterAddress(address _ammPoolAddress, uint256 _salt)\\n        external\\n        view\\n        returns (address)\\n    {\\n        require(\\n            _ammPoolAddress != address(0),\\n            \\\"Invalid ammPoolAddress address\\\"\\n        );\\n        require(_salt > 0, \\\"Invalid salt\\\");\\n\\n        return\\n            _computeAddress(\\n                abi.encodePacked(\\n                    type(PoolBoosterMetropolis).creationCode,\\n                    abi.encode(oSonic, rewardFactory, _ammPoolAddress, voter)\\n                ),\\n                _salt\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xaf99f8cc7bb8741a3017015872db3d05bb6dec77a21db704752ddeef81a5fc63\",\"license\":\"MIT\"},\"contracts/poolBooster/PoolBoosterMetropolis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IPoolBooster } from \\\"../interfaces/poolBooster/IPoolBooster.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Pool booster for Metropolis pools\\n * @author Origin Protocol Inc\\n */\\ncontract PoolBoosterMetropolis is IPoolBooster {\\n    // @notice address of the OS token\\n    IERC20 public immutable osToken;\\n    // @notice address of the pool\\n    address public immutable pool;\\n    // @notice if balance under this amount the bribe action is skipped\\n    uint256 public constant MIN_BRIBE_AMOUNT = 1e10;\\n\\n    IRewarderFactory public immutable rewardFactory;\\n\\n    IVoter public immutable voter;\\n\\n    constructor(\\n        address _osToken,\\n        address _rewardFactory,\\n        address _pool,\\n        address _voter\\n    ) {\\n        require(_pool != address(0), \\\"Invalid pool address\\\");\\n        pool = _pool;\\n        // Abstract factory already validates this is not a zero address\\n        osToken = IERC20(_osToken);\\n\\n        rewardFactory = IRewarderFactory(_rewardFactory);\\n\\n        voter = IVoter(_voter);\\n    }\\n\\n    function bribe() external override {\\n        uint256 balance = osToken.balanceOf(address(this));\\n        // balance too small, do no bribes\\n        (, uint256 minBribeAmount) = rewardFactory.getWhitelistedTokenInfo(\\n            address(osToken)\\n        );\\n        if (balance < MIN_BRIBE_AMOUNT || balance < minBribeAmount) {\\n            return;\\n        }\\n\\n        uint256 id = voter.getCurrentVotingPeriod() + 1;\\n\\n        // Deploy a rewarder\\n        IRewarder rewarder = IRewarder(\\n            rewardFactory.createBribeRewarder(address(osToken), pool)\\n        );\\n\\n        // Approve the rewarder to spend the balance\\n        osToken.approve(address(rewarder), balance);\\n\\n        // Fund and bribe the rewarder\\n        rewarder.fundAndBribe(id, id, balance);\\n\\n        emit BribeExecuted(balance);\\n    }\\n}\\n\\ninterface IRewarderFactory {\\n    function createBribeRewarder(address token, address pool)\\n        external\\n        returns (address rewarder);\\n\\n    function getWhitelistedTokenInfo(address token)\\n        external\\n        view\\n        returns (bool isWhitelisted, uint256 minBribeAmount);\\n}\\n\\ninterface IRewarder {\\n    function fundAndBribe(\\n        uint256 startId,\\n        uint256 lastId,\\n        uint256 amountPerPeriod\\n    ) external payable;\\n}\\n\\ninterface IVoter {\\n    function getCurrentVotingPeriod() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x55ce4a01651de79a09aace24a1346e54fcfdf6082f44162757404292282ed112\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051611c7c380380611c7c833981016040819052610030916101f7565b8484846001600160a01b03831661008e5760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964206f536f6e696320616464726573730000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166100e45760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420676f7665726e6f72206164647265737300000000000000006044820152606401610085565b6001600160a01b03811661013a5760405162461bcd60e51b815260206004820181905260248201527f496e76616c69642063656e7472616c20726567697374727920616464726573736044820152606401610085565b6001600160a01b03808416608052811660a05261015682610174565b5050506001600160a01b0391821660c0521660e0525061025c915050565b6001600160a01b038116610194600080516020611c5c8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3600080516020611c5c83398151915255565b80516001600160a01b03811681146101f257600080fd5b919050565b600080600080600060a0868803121561020f57600080fd5b610218866101db565b9450610226602087016101db565b9350610234604087016101db565b9250610242606087016101db565b9150610250608087016101db565b90509295509295909350565b60805160a05160c05160e05161198f6102cd6000396000818161018a015281816104f501526106f3015260008181610163015281816104c301526106c10152600081816101c301528181610b1c0152610df60152600081816102a10152818161049b0152610699015261198f6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b6eee96211610097578063d38bfff411610066578063d38bfff414610263578063d517786814610276578063e24abe6314610289578063fa89f9921461029c57600080fd5b8063b6eee962146101e5578063b73f8e4114610225578063be08982414610238578063c7af33521461024b57600080fd5b806346c96aac116100d357806346c96aac1461018557806354fd4d50146101ac5780635d36b190146101b45780638f73dcfa146101be57600080fd5b80630c340a2414610105578063110c1a411461012a57806317c01cb31461014c578063245e4bf01461015e575b600080fd5b61010d6102c3565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d610138366004610edc565b6102e0565b60405161012193929190610f0b565b6000545b604051908152602001610121565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b610150600181565b6101bc610326565b005b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b61013d6101f3366004610f6b565b600160208190526000918252604090912080549101546001600160a01b0391821691811690600160a01b900460ff1683565b61010d610233366004610f86565b6103d1565b6101bc610246366004610f86565b6105ab565b610253610761565b6040519015158152602001610121565b6101bc610271366004610f6b565b610792565b6101bc610284366004610fc6565b610836565b6101bc610297366004610f6b565b610929565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b60006102db60008051602061193a8339815191525490565b905090565b600081815481106102f057600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03918216925090811690600160a01b900460ff1683565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146103c65760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084015b60405180910390fd5b6103cf33610b85565b565b60006001600160a01b0383166104295760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420616d6d506f6f6c416464726573732061646472657373000060448201526064016103bd565b600082116104685760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081cd85b1d60a21b60448201526064016103bd565b6105a26040518060200161047b90610ecf565b818103601f199081018352601f9091011660408181526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660208401527f000000000000000000000000000000000000000000000000000000000000000081169183019190915280871660608301527f000000000000000000000000000000000000000000000000000000000000000016608082015260a00160408051601f198184030181529082905261053b92916020016110c6565b60408051601f1981840301815282825280516020918201206001600160f81b0319848301526bffffffffffffffffffffffff193060601b16602185015260358401879052605580850191909152825180850390910181526075909301909152815191012090565b90505b92915050565b6105b3610761565b6105cf5760405162461bcd60e51b81526004016103bd906110e3565b6001600160a01b0382166106255760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420616d6d506f6f6c416464726573732061646472657373000060448201526064016103bd565b600081116106645760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081cd85b1d60a21b60448201526064016103bd565b600061074e6040518060200161067990610ecf565b818103601f199081018352601f9091011660408181526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660208401527f000000000000000000000000000000000000000000000000000000000000000081169183019190915280871660608301527f000000000000000000000000000000000000000000000000000000000000000016608082015260a00160408051601f198184030181529082905261073992916020016110c6565b60405160208183030381529060405283610be7565b905061075c81846002610c63565b505050565b600061077960008051602061193a8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b61079a610761565b6107b65760405162461bcd60e51b81526004016103bd906110e3565b6107de817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166107fe60008051602061193a8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60008054905b8181101561075c5760008082815481106108585761085861111a565b6000918252602082206002909102015485516001600160a01b039091169250815b818110156108c457836001600160a01b031687828151811061089d5761089d61111a565b60200260200101516001600160a01b0316036108bc57600192506108c4565b600101610879565b508161091e57826001600160a01b03166337d0208c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561090557600080fd5b505af1158015610919573d6000803e3d6000fd5b505050505b50505060010161083c565b610931610761565b61094d5760405162461bcd60e51b81526004016103bd906110e3565b60008054905b8181101561075c57826001600160a01b0316600082815481106109785761097861111a565b60009182526020909120600290910201546001600160a01b031603610b7d57600160008083815481106109ad576109ad61111a565b6000918252602080832060016002909302018201546001600160a01b031684528301939093526040909101812080546001600160a01b0319168155820180546001600160a81b031916905590610a039084611130565b81548110610a1357610a1361111a565b906000526020600020906002020160008281548110610a3457610a3461111a565b600091825260209091208254600292830290910180546001600160a01b039283166001600160a01b03199182161782556001808601805491840180549290951692821683178555549294600160a01b9384900460ff1694936001600160a81b0319909216909217918490811115610aad57610aad610ef5565b02179055509050506000805480610ac657610ac6611151565b6000828152602090206002600019929092019182020180546001600160a01b031916815560010180546001600160a81b03191690559055604051630702522960e01b81526001600160a01b0384811660048301527f00000000000000000000000000000000000000000000000000000000000000001690630702522990602401600060405180830381600087803b158015610b6057600080fd5b505af1158015610b74573d6000803e3d6000fd5b50505050505050565b600101610953565b6001600160a01b038116610bdb5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016103bd565b610be481610e68565b50565b6000818351602085016000f590506000816001600160a01b03163b118015610c1757506001600160a01b03811615155b6105a55760405162461bcd60e51b815260206004820152601e60248201527f4661696c6564206372656174696e67206120706f6f6c20626f6f73746572000060448201526064016103bd565b60006040518060600160405280856001600160a01b03168152602001846001600160a01b03168152602001836002811115610ca057610ca0610ef5565b905260008054600181018255908052815160029182027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039384166001600160a01b031991821617825560208601517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909301805493909416908316811784556040860151959650869591949193926001600160a81b0319161790600160a01b908490811115610d5d57610d5d610ef5565b021790555050506001600160a01b03808416600090815260016020818152604092839020855181549086166001600160a01b03199182161782559186015192810180549390951691831682178555928501518594909290916001600160a81b031990911617600160a01b836002811115610dd957610dd9610ef5565b021790555050604051630b22521d60e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063591290e890610e3090879087908790600401610f0b565b600060405180830381600087803b158015610e4a57600080fd5b505af1158015610e5e573d6000803e3d6000fd5b5050505050505050565b806001600160a01b0316610e8860008051602061193a8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a360008051602061193a83398151915255565b6107d28061116883390190565b600060208284031215610eee57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038481168252831660208201526060810160038310610f4157634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b80356001600160a01b0381168114610f6657600080fd5b919050565b600060208284031215610f7d57600080fd5b6105a282610f4f565b60008060408385031215610f9957600080fd5b610fa283610f4f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610fd857600080fd5b813567ffffffffffffffff811115610fef57600080fd5b8201601f8101841361100057600080fd5b803567ffffffffffffffff81111561101a5761101a610fb0565b8060051b604051601f19603f830116810181811067ffffffffffffffff8211171561104757611047610fb0565b60405291825260208184018101929081018784111561106557600080fd5b6020850194505b8385101561108b5761107d85610f4f565b81526020948501940161106c565b509695505050505050565b6000815160005b818110156110b7576020818501810151868301520161109d565b50600093019283525090919050565b60006110db6110d58386611096565b84611096565b949350505050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b818103818111156105a557634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fdfe61010060405234801561001157600080fd5b506040516107d23803806107d2833981016040819052610030916100c9565b6001600160a01b03821661008a5760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420706f6f6c2061646472657373000000000000000000000000604482015260640160405180910390fd5b6001600160a01b0391821660a05292811660805290811660c0521660e05261011d565b80516001600160a01b03811681146100c457600080fd5b919050565b600080600080608085870312156100df57600080fd5b6100e8856100ad565b93506100f6602086016100ad565b9250610104604086016100ad565b9150610112606086016100ad565b905092959194509250565b60805160a05160c05160e05161064761018b6000396000818161012201526102a001526000818160d701528181610214015261039801526000818160b0015261036a015260008181606c0152818161015c015281816101e601528181610342015261042e01526106476000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806312c587c51461006757806316f0115b146100ab578063245e4bf0146100d257806337d0208c146100f95780633978033f1461010357806346c96aac1461011d575b600080fd5b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b610101610144565b005b61010f6402540be40081565b6040519081526020016100a2565b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf9190610545565b60405163050fa72960e51b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a1f4e520906024016040805180830381865afa15801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e9190610573565b9150506402540be40082108061029357508082105b1561029c575050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae40bc796040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103209190610545565b61032b90600161059f565b6040516354cb24bd60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a996497a906044016020604051808303816000875af11580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040591906105c6565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018790529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d91906105f6565b5060405163de39030b60e01b81526004810183905260248101839052604481018590526001600160a01b0382169063de39030b90606401600060405180830381600087803b1580156104ee57600080fd5b505af1158015610502573d6000803e3d6000fd5b505050507f1424c3a24f9b1f30558ab0a7b48e07ce9f7d85b293a69a90356e1478504232eb8460405161053791815260200190565b60405180910390a150505050565b60006020828403121561055757600080fd5b5051919050565b8051801515811461056e57600080fd5b919050565b6000806040838503121561058657600080fd5b61058f8361055e565b6020939093015192949293505050565b808201808211156105c057634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156105d857600080fd5b81516001600160a01b03811681146105ef57600080fd5b9392505050565b60006020828403121561060857600080fd5b6105ef8261055e56fea26469706673582212203c154f1256d38ec0d400bb44c0b687f0c001b38f37c453f9be5d0482a5da9ff664736f6c634300081c00337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220c62bb6b16fe9c7ed232d6cecd5d009344d7fdc1e942b8f4693f58226e4e8a04364736f6c634300081c00337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "bribeAll(address[])": {
        "params": {
          "_exclusionList": "A list of pool booster addresses to skip when        calling this function."
        }
      },
      "computePoolBoosterAddress(address,uint256)": {
        "details": "Create a Pool Booster for Metropolis pool.",
        "params": {
          "_ammPoolAddress": "address of the AMM pool where the yield originates from",
          "_salt": "A unique number that affects the address of the pool booster created. Note: this number        should match the one from `createPoolBoosterMetropolis` in order for the final deployed address        and pre-computed address to match"
        }
      },
      "createPoolBoosterMetropolis(address,uint256)": {
        "details": "Create a Pool Booster for Metropolis pool.",
        "params": {
          "_ammPoolAddress": "address of the AMM pool where the yield originates from",
          "_salt": "A unique number that affects the address of the pool booster created. Note: this number        should match the one from `computePoolBoosterAddress` in order for the final deployed address        and pre-computed address to match"
        }
      },
      "removePoolBooster(address)": {
        "details": "This action does not destroy the pool booster contract nor does it      stop the yield delegation to it.",
        "params": {
          "_poolBoosterAddress": "address of the pool booster"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "title": "Pool booster factory for creating Metropolis pool boosters.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bribeAll(address[])": {
        "notice": "Goes over all the pool boosters created by this factory and         calls bribe() on them."
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "removePoolBooster(address)": {
        "notice": "Removes the pool booster from the internal list of pool boosters."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 683,
        "contract": "contracts/poolBooster/PoolBoosterFactoryMetropolis.sol:PoolBoosterFactoryMetropolis",
        "label": "poolBoosters",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(PoolBoosterEntry)674_storage)dyn_storage"
      },
      {
        "astId": 688,
        "contract": "contracts/poolBooster/PoolBoosterFactoryMetropolis.sol:PoolBoosterFactoryMetropolis",
        "label": "poolBoosterFromPool",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(PoolBoosterEntry)674_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolBoosterEntry)674_storage)dyn_storage": {
        "base": "t_struct(PoolBoosterEntry)674_storage",
        "encoding": "dynamic_array",
        "label": "struct AbstractPoolBoosterFactory.PoolBoosterEntry[]",
        "numberOfBytes": "32"
      },
      "t_enum(PoolBoosterType)594": {
        "encoding": "inplace",
        "label": "enum IPoolBoostCentralRegistry.PoolBoosterType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(PoolBoosterEntry)674_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AbstractPoolBoosterFactory.PoolBoosterEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolBoosterEntry)674_storage"
      },
      "t_struct(PoolBoosterEntry)674_storage": {
        "encoding": "inplace",
        "label": "struct AbstractPoolBoosterFactory.PoolBoosterEntry",
        "members": [
          {
            "astId": 668,
            "contract": "contracts/poolBooster/PoolBoosterFactoryMetropolis.sol:PoolBoosterFactoryMetropolis",
            "label": "boosterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 670,
            "contract": "contracts/poolBooster/PoolBoosterFactoryMetropolis.sol:PoolBoosterFactoryMetropolis",
            "label": "ammPoolAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 673,
            "contract": "contracts/poolBooster/PoolBoosterFactoryMetropolis.sol:PoolBoosterFactoryMetropolis",
            "label": "boosterType",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(PoolBoosterType)594"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}
{
  "address": "0xc5DdE3eCe69F4B4FA21dAd810B41baAc8D30657E",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "platformAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            }
          ],
          "internalType": "struct InitializableAbstractStrategy.BaseStrategyConfig",
          "name": "_baseConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_wrappedSonic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sfc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "validatorId",
          "type": "uint256"
        }
      ],
      "name": "DefaultValidatorIdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "validatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delegatedAmount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "RegistratorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "validatorId",
          "type": "uint256"
        }
      ],
      "name": "SupportedValidator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "withdrawId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "validatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "undelegatedAmount",
          "type": "uint256"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "validatorId",
          "type": "uint256"
        }
      ],
      "name": "UnsupportedValidator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "withdrawId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "validatorId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "undelegatedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_validatorIds",
          "type": "uint256[]"
        }
      ],
      "name": "collectRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultValidatorId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorId",
          "type": "uint256"
        }
      ],
      "name": "isSupportedValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawId",
          "type": "uint256"
        }
      ],
      "name": "isWithdrawnFromSFC",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextWithdrawId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_validatorIds",
          "type": "uint256[]"
        }
      ],
      "name": "restakeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorId",
          "type": "uint256"
        }
      ],
      "name": "setDefaultValidatorId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorRegistrator",
          "type": "address"
        }
      ],
      "name": "setRegistrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sfc",
      "outputs": [
        {
          "internalType": "contract ISFC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorId",
          "type": "uint256"
        }
      ],
      "name": "supportValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedValidators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedValidatorsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_undelegateAmount",
          "type": "uint256"
        }
      ],
      "name": "undelegate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validatorId",
          "type": "uint256"
        }
      ],
      "name": "unsupportValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorRegistrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawId",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSFC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validatorId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "undelegatedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedSonic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7cedf62d3b489803f09fdd34f5c0d9b73ab40799a5eb9219e220c0e28920a0b2",
  "receipt": {
    "to": null,
    "from": "0x3Ba227D87c2A7aB89EAaCEFbeD9bfa0D15Ad249A",
    "contractAddress": "0xc5DdE3eCe69F4B4FA21dAd810B41baAc8D30657E",
    "transactionIndex": 1,
    "gasUsed": "3238724",
    "logsBloom": "0x
    "blockHash": "0x3bafcdb5c9d2338ddeee0cfc547d13b57d61a221426cd972721a3883516423a7",
    "transactionHash": "0x7cedf62d3b489803f09fdd34f5c0d9b73ab40799a5eb9219e220c0e28920a0b2",
    "logs": [],
    "blockNumber": 18034200,
    "cumulativeGasUsed": "3719496",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xFC00FACE00000000000000000000000000000000",
      "0xa3c0eCA00D2B76b4d1F170b0AB3FdeA16C180186"
    ],
    "0x039e2fB66102314Ce7b64Ce5Ce3E5183bc94aD38",
    "0xFC00FACE00000000000000000000000000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "f5d4cf9f739f00dcfdb6eaefa295e33d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct InitializableAbstractStrategy.BaseStrategyConfig\",\"name\":\"_baseConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_wrappedSonic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sfc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"DefaultValidatorIdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatedAmount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RegistratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"SupportedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"undelegatedAmount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"UnsupportedValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"undelegatedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_validatorIds\",\"type\":\"uint256[]\"}],\"name\":\"collectRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultValidatorId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"isSupportedValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawId\",\"type\":\"uint256\"}],\"name\":\"isWithdrawnFromSFC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWithdrawId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_validatorIds\",\"type\":\"uint256[]\"}],\"name\":\"restakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"setDefaultValidatorId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorRegistrator\",\"type\":\"address\"}],\"name\":\"setRegistrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sfc\",\"outputs\":[{\"internalType\":\"contract ISFC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"supportValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedValidatorsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_undelegateAmount\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"unsupportValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorRegistrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawId\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSFC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"undelegatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedSonic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of Wrapped Sonic (wS) token\"},\"returns\":{\"balance\":\"   Total value managed by the strategy\"}},\"collectRewards(uint256[])\":{\"params\":{\"_validatorIds\":\"List of Sonic validator IDs to claim rewards\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"Amount of assets that were transferred to the strategy by the vault.\",\"_asset\":\"Address of asset to deposit. Has to be Wrapped Sonic (wS).\"}},\"getRewardTokenAddresses()\":{\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"isSupportedValidator(uint256)\":{\"params\":{\"_validatorId\":\"The validator identifier\"}},\"isWithdrawnFromSFC(uint256)\":{\"params\":{\"_withdrawId\":\"The unique withdraw ID used to `undelegate`\"}},\"restakeRewards(uint256[])\":{\"params\":{\"_validatorIds\":\"List of Sonic validator IDs to restake rewards\"}},\"setDefaultValidatorId(uint256)\":{\"params\":{\"_validatorId\":\"The validator identifier. eg 18\"}},\"setHarvesterAddress(address)\":{\"params\":{\"_harvesterAddress\":\"Address of the harvester contract.\"}},\"setRegistrator(address)\":{\"params\":{\"_validatorRegistrator\":\"The address of the Registrator\"}},\"setRewardTokenAddresses(address[])\":{\"params\":{\"_rewardTokenAddresses\":\"Array of reward token addresses\"}},\"supportValidator(uint256)\":{\"params\":{\"_validatorId\":\"The validator identifier. eg 18\"}},\"supportsAsset(address)\":{\"details\":\"Returns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset token\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"undelegate(uint256,uint256)\":{\"params\":{\"_undelegateAmount\":\"the amount of Sonic (S) to undelegate.\",\"_validatorId\":\"The Sonic validator ID to undelegate from.\"},\"returns\":{\"withdrawId\":\"The unique ID of the withdrawal request.\"}},\"unsupportValidator(uint256)\":{\"params\":{\"_validatorId\":\"The validator identifier. eg 18\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of Wrapped Sonic (wS) to withdraw\",\"_asset\":\"Address of the Wrapped Sonic (wS) token\",\"_recipient\":\"Address to receive withdrawn assets\"}},\"withdrawFromSFC(uint256)\":{\"params\":{\"_withdrawId\":\"The unique withdraw ID used to `undelegate`\"},\"returns\":{\"withdrawnAmount\":\"The amount of Sonic (S) withdrawn. This can be less than the undelegated amount in the event of slashing.\"}}},\"title\":\"Staking Strategy for Sonic's native S currency\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetToPToken(address)\":{\"notice\":\"asset => pToken (Platform Specific Token Address)\"},\"checkBalance(address)\":{\"notice\":\"Returns the total value of Sonic (S) that is delegated validators. Wrapped Sonic (wS) deposits that are still to be delegated and any undelegated amounts still pending a withdrawal.\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"notice\":\"is not used by this strategy as all staking rewards are restaked\"},\"collectRewards(uint256[])\":{\"notice\":\"Claim any pending rewards from validators\"},\"defaultValidatorId()\":{\"notice\":\"Default validator id to deposit to\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit wrapped S asset into the underlying platform.\"},\"depositAll()\":{\"notice\":\"Deposit the entire balance of wrapped S in this strategy contract into the underlying platform.\"},\"getRewardTokenAddresses()\":{\"notice\":\"Get the reward token addresses.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"harvesterAddress()\":{\"notice\":\"Address of the Harvester contract allowed to collect reward tokens\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"isSupportedValidator(uint256)\":{\"notice\":\"Returns whether a validator is supported by this strategy\"},\"isWithdrawnFromSFC(uint256)\":{\"notice\":\"returns a bool whether a withdrawalId has already been withdrawn or not\"},\"nextWithdrawId()\":{\"notice\":\"a unique ID for each withdrawal request\"},\"pendingWithdrawals()\":{\"notice\":\"Sonic (S) that is pending withdrawal after undelegating\"},\"platformAddress()\":{\"notice\":\"Address of the underlying platform\"},\"removePToken(uint256)\":{\"notice\":\"is not supported for this strategy as the Wrapped Sonic (wS) token is set at deploy time.\"},\"restakeRewards(uint256[])\":{\"notice\":\"Restake any pending validator rewards for all supported validators\"},\"rewardTokenAddresses(uint256)\":{\"notice\":\"Address of the reward tokens. eg CRV, BAL, CVX, AURA\"},\"safeApproveAllTokens()\":{\"notice\":\"is not used by this strategy\"},\"setDefaultValidatorId(uint256)\":{\"notice\":\"Set the default validatorId to delegate to on deposit\"},\"setHarvesterAddress(address)\":{\"notice\":\"Set the Harvester contract that can collect rewards.\"},\"setPTokenAddress(address,address)\":{\"notice\":\"is not supported for this strategy as the Wrapped Sonic (wS) token is set at deploy time.\"},\"setRegistrator(address)\":{\"notice\":\"Set the address of the Registrator which can undelegate, withdraw and collect rewards\"},\"setRewardTokenAddresses(address[])\":{\"notice\":\"Set the reward token addresses. Any old addresses will be overwritten.\"},\"sfc()\":{\"notice\":\"Sonic's Special Fee Contract (SFC)\"},\"supportValidator(uint256)\":{\"notice\":\"Allows a validator to be delegated to by the Registrator\"},\"supportedValidators(uint256)\":{\"notice\":\"List of supported validator IDs that can be delegated to\"},\"supportedValidatorsLength()\":{\"notice\":\"Returns the length of the supportedValidators array\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\"},\"undelegate(uint256,uint256)\":{\"notice\":\"Undelegate from a specific Sonic validator. This needs to be followed by a `withdrawFromSFC` two weeks later.\"},\"unsupportValidator(uint256)\":{\"notice\":\"Removes a validator from the supported list. Unsupported validators can still be undelegated from, withdrawn from and rewards collected.\"},\"validatorRegistrator()\":{\"notice\":\"Address of the registrator - allowed to register, exit and remove validators\"},\"vaultAddress()\":{\"notice\":\"Address of the OToken vault\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraw Wrapped Sonic (wS) from this strategy contract. Used only if some wS is lingering on the contract. That can happen only when someone sends wS directly to this contract\"},\"withdrawAll()\":{\"notice\":\"Transfer all Wrapped Sonic (wS) deposits back to the vault. This does not withdraw from delegated validators. That has to be done separately with `undelegate`. Any native S in this strategy will be withdrawn.\"},\"withdrawFromSFC(uint256)\":{\"notice\":\"Withdraw native S from a previously undelegated validator. The native S is wrapped wS and transferred to the Vault.\"},\"withdrawals(uint256)\":{\"notice\":\"Mapping of withdrawIds to validatorIds and undelegatedAmounts\"},\"wrappedSonic()\":{\"notice\":\"Address of Sonic's wrapped S token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/sonic/SonicStakingStrategy.sol\":\"SonicStakingStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        emit GovernorshipTransferred(_governor(), newGovernor);\\n\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xec8e86e43da98835736de1151b86ca13cd8a1a256adc1382ce7030d825521003\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    function ADMIN_IMPLEMENTATION() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _unitConversion) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n\\n    function setDripper(address _dripper) external;\\n\\n    function dripper() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function cacheWETHAssetIndex() external;\\n\\n    function wethAssetIndex() external view returns (uint256);\\n\\n    function initialize(address, address) external;\\n\\n    function setAdminImpl(address) external;\\n\\n    function removeAsset(address _asset) external;\\n\\n    // These are OETH specific functions\\n    function addWithdrawalQueueLiquidity() external;\\n\\n    function requestWithdrawal(uint256 _amount)\\n        external\\n        returns (uint256 requestId, uint256 queued);\\n\\n    function claimWithdrawal(uint256 requestId)\\n        external\\n        returns (uint256 amount);\\n\\n    function claimWithdrawals(uint256[] memory requestIds)\\n        external\\n        returns (uint256[] memory amounts, uint256 totalAmount);\\n\\n    function withdrawalQueueMetadata()\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalQueueMetadata memory);\\n\\n    function withdrawalRequests(uint256 requestId)\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalRequest memory);\\n\\n    // OETHb specific functions\\n    function addStrategyToMintWhitelist(address strategyAddr) external;\\n\\n    function removeStrategyFromMintWhitelist(address strategyAddr) external;\\n\\n    function isMintWhitelistedStrategy(address strategyAddr)\\n        external\\n        view\\n        returns (bool);\\n\\n    function withdrawalClaimDelay() external view returns (uint256);\\n\\n    function setWithdrawalClaimDelay(uint256 newDelay) external;\\n}\\n\",\"keccak256\":\"0x90de40850f126a263dd5a0bf4729c831a536a1f66a232407aab408d1bfb1bb1e\",\"license\":\"MIT\"},\"contracts/interfaces/sonic/ISFC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Special Fee Contract for Sonic network\\n * @notice The SFC maintains a list of validators and delegators and distributes rewards to them.\\n * @custom:security-contact security@fantom.foundation\\n */\\ninterface ISFC {\\n    error StakeIsFullySlashed();\\n\\n    event CreatedValidator(\\n        uint256 indexed validatorID,\\n        address indexed auth,\\n        uint256 createdEpoch,\\n        uint256 createdTime\\n    );\\n    event Delegated(\\n        address indexed delegator,\\n        uint256 indexed validatorID,\\n        uint256 amount\\n    );\\n    event Undelegated(\\n        address indexed delegator,\\n        uint256 indexed validatorID,\\n        uint256 indexed wrID,\\n        uint256 amount\\n    );\\n    event Withdrawn(\\n        address indexed delegator,\\n        uint256 indexed validatorID,\\n        uint256 indexed wrID,\\n        uint256 amount,\\n        uint256 penalty\\n    );\\n    event ClaimedRewards(\\n        address indexed delegator,\\n        uint256 indexed validatorID,\\n        uint256 rewards\\n    );\\n    event RestakedRewards(\\n        address indexed delegator,\\n        uint256 indexed validatorID,\\n        uint256 rewards\\n    );\\n    event BurntFTM(uint256 amount);\\n    event UpdatedSlashingRefundRatio(\\n        uint256 indexed validatorID,\\n        uint256 refundRatio\\n    );\\n    event RefundedSlashedLegacyDelegation(\\n        address indexed delegator,\\n        uint256 indexed validatorID,\\n        uint256 amount\\n    );\\n\\n    event DeactivatedValidator(\\n        uint256 indexed validatorID,\\n        uint256 deactivatedEpoch,\\n        uint256 deactivatedTime\\n    );\\n    event ChangedValidatorStatus(uint256 indexed validatorID, uint256 status);\\n    event AnnouncedRedirection(address indexed from, address indexed to);\\n\\n    function currentSealedEpoch() external view returns (uint256);\\n\\n    function getEpochSnapshot(uint256 epoch)\\n        external\\n        view\\n        returns (\\n            uint256 endTime,\\n            uint256 endBlock,\\n            uint256 epochFee,\\n            uint256 baseRewardPerSecond,\\n            uint256 totalStake,\\n            uint256 totalSupply\\n        );\\n\\n    function getStake(address delegator, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getValidator(uint256 validatorID)\\n        external\\n        view\\n        returns (\\n            uint256 status,\\n            uint256 receivedStake,\\n            address auth,\\n            uint256 createdEpoch,\\n            uint256 createdTime,\\n            uint256 deactivatedTime,\\n            uint256 deactivatedEpoch\\n        );\\n\\n    function getValidatorID(address auth) external view returns (uint256);\\n\\n    function getValidatorPubkey(uint256 validatorID)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function pubkeyAddressvalidatorID(address pubkeyAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawalRequest(\\n        address delegator,\\n        uint256 validatorID,\\n        uint256 wrID\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 epoch,\\n            uint256 time,\\n            uint256 amount\\n        );\\n\\n    function isOwner() external view returns (bool);\\n\\n    function lastValidatorID() external view returns (uint256);\\n\\n    function minGasPrice() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function slashingRefundRatio(uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stashedRewardsUntilEpoch(address delegator, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalActiveStake() external view returns (uint256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function version() external pure returns (bytes3);\\n\\n    function currentEpoch() external view returns (uint256);\\n\\n    function updateConstsAddress(address v) external;\\n\\n    function constsAddress() external view returns (address);\\n\\n    function getEpochValidatorIDs(uint256 epoch)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getEpochReceivedStake(uint256 epoch, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochAccumulatedRewardPerToken(\\n        uint256 epoch,\\n        uint256 validatorID\\n    ) external view returns (uint256);\\n\\n    function getEpochAccumulatedUptime(uint256 epoch, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochAverageUptime(uint256 epoch, uint256 validatorID)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getEpochAccumulatedOriginatedTxsFee(\\n        uint256 epoch,\\n        uint256 validatorID\\n    ) external view returns (uint256);\\n\\n    function getEpochOfflineTime(uint256 epoch, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochOfflineBlocks(uint256 epoch, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochEndBlock(uint256 epoch) external view returns (uint256);\\n\\n    function rewardsStash(address delegator, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function createValidator(bytes calldata pubkey) external payable;\\n\\n    function getSelfStake(uint256 validatorID) external view returns (uint256);\\n\\n    function delegate(uint256 validatorID) external payable;\\n\\n    function undelegate(\\n        uint256 validatorID,\\n        uint256 wrID,\\n        uint256 amount\\n    ) external;\\n\\n    function isSlashed(uint256 validatorID) external view returns (bool);\\n\\n    function withdraw(uint256 validatorID, uint256 wrID) external;\\n\\n    function deactivateValidator(uint256 validatorID, uint256 status) external;\\n\\n    function pendingRewards(address delegator, uint256 validatorID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stashRewards(address delegator, uint256 validatorID) external;\\n\\n    function claimRewards(uint256 validatorID) external;\\n\\n    function restakeRewards(uint256 validatorID) external;\\n\\n    function updateSlashingRefundRatio(uint256 validatorID, uint256 refundRatio)\\n        external;\\n\\n    function updateTreasuryAddress(address v) external;\\n\\n    function burnFTM(uint256 amount) external;\\n\\n    function sealEpoch(\\n        uint256[] calldata offlineTime,\\n        uint256[] calldata offlineBlocks,\\n        uint256[] calldata uptimes,\\n        uint256[] calldata originatedTxsFee\\n    ) external;\\n\\n    function sealEpochValidators(uint256[] calldata nextValidatorIDs) external;\\n\\n    function initialize(\\n        uint256 sealedEpoch,\\n        uint256 _totalSupply,\\n        address nodeDriver,\\n        address consts,\\n        address _owner\\n    ) external;\\n\\n    function setGenesisValidator(\\n        address auth,\\n        uint256 validatorID,\\n        bytes calldata pubkey,\\n        uint256 createdTime\\n    ) external;\\n\\n    function setGenesisDelegation(\\n        address delegator,\\n        uint256 validatorID,\\n        uint256 stake\\n    ) external;\\n\\n    function updateStakeSubscriberAddress(address v) external;\\n\\n    function stakeSubscriberAddress() external view returns (address);\\n\\n    function setRedirectionAuthorizer(address v) external;\\n\\n    function announceRedirection(address to) external;\\n\\n    function initiateRedirection(address from, address to) external;\\n\\n    function redirect(address to) external;\\n}\\n\",\"keccak256\":\"0xdc5c8d15f8e1ae1201c657f80d44d6f08bf121a3d19c38411cf4f5c7c996f1cb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/sonic/IWrappedSonic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWrappedSonic {\\n    event Deposit(address indexed account, uint256 value);\\n    event Withdrawal(address indexed account, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function depositFor(address account) external payable returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 value) external;\\n\\n    function withdrawTo(address account, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5843845337f386292062082ad5006f04eac250cd4ac5595629ddce2cf3da38eb\",\"license\":\"MIT\"},\"contracts/strategies/sonic/SonicStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SonicValidatorDelegator } from \\\"./SonicValidatorDelegator.sol\\\";\\nimport { IWrappedSonic } from \\\"../../interfaces/sonic/IWrappedSonic.sol\\\";\\n\\n/**\\n * @title Staking Strategy for Sonic's native S currency\\n * @author Origin Protocol Inc\\n */\\ncontract SonicStakingStrategy is SonicValidatorDelegator {\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    constructor(\\n        BaseStrategyConfig memory _baseConfig,\\n        address _wrappedSonic,\\n        address _sfc\\n    ) SonicValidatorDelegator(_baseConfig, _wrappedSonic, _sfc) {}\\n\\n    /// @notice Deposit wrapped S asset into the underlying platform.\\n    /// @param _asset Address of asset to deposit. Has to be Wrapped Sonic (wS).\\n    /// @param _amount Amount of assets that were transferred to the strategy by the vault.\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_asset == wrappedSonic, \\\"Unsupported asset\\\");\\n        _deposit(_asset, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit Wrapped Sonic (wS) to this strategy and delegate to a validator.\\n     * @param _asset Address of Wrapped Sonic (wS) token\\n     * @param _amount Amount of Wrapped Sonic (wS) to deposit\\n     */\\n    function _deposit(address _asset, uint256 _amount) internal virtual {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n\\n        _delegate(_amount);\\n        emit Deposit(_asset, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit the entire balance of wrapped S in this strategy contract into\\n     * the underlying platform.\\n     */\\n    function depositAll() external virtual override onlyVault nonReentrant {\\n        uint256 wSBalance = IERC20(wrappedSonic).balanceOf(address(this));\\n\\n        if (wSBalance > 0) {\\n            _deposit(wrappedSonic, wSBalance);\\n        }\\n    }\\n\\n    /// @notice Withdraw Wrapped Sonic (wS) from this strategy contract.\\n    /// Used only if some wS is lingering on the contract.\\n    /// That can happen only when someone sends wS directly to this contract\\n    /// @param _recipient Address to receive withdrawn assets\\n    /// @param _asset Address of the Wrapped Sonic (wS) token\\n    /// @param _amount Amount of Wrapped Sonic (wS) to withdraw\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_asset == wrappedSonic, \\\"Unsupported asset\\\");\\n        _withdraw(_recipient, _asset, _amount);\\n    }\\n\\n    function _withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) internal override {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\n\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        IERC20(_asset).transfer(_recipient, _amount);\\n\\n        emit Withdrawal(wrappedSonic, address(0), _amount);\\n    }\\n\\n    /// @notice Transfer all Wrapped Sonic (wS) deposits back to the vault.\\n    /// This does not withdraw from delegated validators. That has to be done separately with `undelegate`.\\n    /// Any native S in this strategy will be withdrawn.\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            IWrappedSonic(wrappedSonic).deposit{ value: balance }();\\n        }\\n        uint256 wSBalance = IERC20(wrappedSonic).balanceOf(address(this));\\n        if (wSBalance > 0) {\\n            _withdraw(vaultAddress, wrappedSonic, wSBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset token\\n     */\\n    function supportsAsset(address _asset)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _asset == wrappedSonic;\\n    }\\n\\n    /**\\n     * @notice is not supported for this strategy as the\\n     * Wrapped Sonic (wS) token is set at deploy time.\\n     */\\n    function setPTokenAddress(address, address)\\n        external\\n        view\\n        override\\n        onlyGovernor\\n    {\\n        revert(\\\"unsupported function\\\");\\n    }\\n\\n    /// @notice is not used by this strategy as all staking rewards are restaked\\n    function collectRewardTokens() external override nonReentrant {\\n        revert(\\\"unsupported function\\\");\\n    }\\n\\n    /**\\n     * @notice is not supported for this strategy as the\\n     * Wrapped Sonic (wS) token is set at deploy time.\\n     */\\n    function removePToken(uint256) external view override onlyGovernor {\\n        revert(\\\"unsupported function\\\");\\n    }\\n\\n    /// @dev is not used by this strategy but must be implemented as it's abstract\\n    /// in the inherited `InitializableAbstractStrategy` contract.\\n    function _abstractSetPToken(address, address) internal virtual override {}\\n\\n    /// @notice is not used by this strategy\\n    function safeApproveAllTokens() external override onlyGovernor {}\\n}\\n\",\"keccak256\":\"0x33756b10ee4f02daafb51490c55019a4e7f054b80d1e8237a0952276b5517272\",\"license\":\"MIT\"},\"contracts/strategies/sonic/SonicValidatorDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../../utils/InitializableAbstractStrategy.sol\\\";\\nimport { IVault } from \\\"../../interfaces/IVault.sol\\\";\\nimport { ISFC } from \\\"../../interfaces/sonic/ISFC.sol\\\";\\nimport { IWrappedSonic } from \\\"../../interfaces/sonic/IWrappedSonic.sol\\\";\\n\\n/**\\n * @title Manages delegation to Sonic validators\\n * @notice This contract implements all the required functionality to delegate to,\\n   undelegate from and withdraw from validators.\\n * @author Origin Protocol Inc\\n */\\nabstract contract SonicValidatorDelegator is InitializableAbstractStrategy {\\n    /// @notice Address of Sonic's wrapped S token\\n    address public immutable wrappedSonic;\\n    /// @notice Sonic's Special Fee Contract (SFC)\\n    ISFC public immutable sfc;\\n\\n    /// @notice a unique ID for each withdrawal request\\n    uint256 public nextWithdrawId;\\n    /// @notice Sonic (S) that is pending withdrawal after undelegating\\n    uint256 public pendingWithdrawals;\\n\\n    /// @notice List of supported validator IDs that can be delegated to\\n    uint256[] public supportedValidators;\\n\\n    /// @notice Default validator id to deposit to\\n    uint256 public defaultValidatorId;\\n\\n    struct WithdrawRequest {\\n        uint256 validatorId;\\n        uint256 undelegatedAmount;\\n        uint256 timestamp;\\n    }\\n    /// @notice Mapping of withdrawIds to validatorIds and undelegatedAmounts\\n    mapping(uint256 => WithdrawRequest) public withdrawals;\\n\\n    /// @notice Address of the registrator - allowed to register, exit and remove validators\\n    address public validatorRegistrator;\\n\\n    // For future use\\n    uint256[44] private __gap;\\n\\n    event Delegated(uint256 indexed validatorId, uint256 delegatedAmount);\\n    event Undelegated(\\n        uint256 indexed withdrawId,\\n        uint256 indexed validatorId,\\n        uint256 undelegatedAmount\\n    );\\n    event Withdrawn(\\n        uint256 indexed withdrawId,\\n        uint256 indexed validatorId,\\n        uint256 undelegatedAmount,\\n        uint256 withdrawnAmount\\n    );\\n    event RegistratorChanged(address indexed newAddress);\\n    event SupportedValidator(uint256 indexed validatorId);\\n    event UnsupportedValidator(uint256 indexed validatorId);\\n    event DefaultValidatorIdChanged(uint256 indexed validatorId);\\n\\n    /// @dev Throws if called by any account other than the Registrator or Strategist\\n    modifier onlyRegistratorOrStrategist() {\\n        require(\\n            msg.sender == validatorRegistrator ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Registrator or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        BaseStrategyConfig memory _baseConfig,\\n        address _wrappedSonic,\\n        address _sfc\\n    ) InitializableAbstractStrategy(_baseConfig) {\\n        wrappedSonic = _wrappedSonic;\\n        sfc = ISFC(_sfc);\\n    }\\n\\n    function initialize() external virtual onlyGovernor initializer {\\n        address[] memory rewardTokens = new address[](0);\\n        address[] memory assets = new address[](1);\\n        address[] memory pTokens = new address[](1);\\n\\n        assets[0] = address(wrappedSonic);\\n        pTokens[0] = address(platformAddress);\\n\\n        InitializableAbstractStrategy._initialize(\\n            rewardTokens,\\n            assets,\\n            pTokens\\n        );\\n    }\\n\\n    /// @notice Returns the total value of Sonic (S) that is delegated validators.\\n    /// Wrapped Sonic (wS) deposits that are still to be delegated and any undelegated amounts\\n    /// still pending a withdrawal.\\n    /// @param _asset      Address of Wrapped Sonic (wS) token\\n    /// @return balance    Total value managed by the strategy\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256 balance)\\n    {\\n        require(_asset == wrappedSonic, \\\"Unsupported asset\\\");\\n\\n        // add the Wrapped Sonic (wS) in the strategy from deposits that are still to be delegated\\n        // and any undelegated amounts still pending a withdrawal\\n        balance =\\n            IERC20(wrappedSonic).balanceOf(address(this)) +\\n            pendingWithdrawals;\\n\\n        // For each supported validator, get the staked amount and pending rewards\\n        uint256 validatorLen = supportedValidators.length;\\n        for (uint256 i = 0; i < validatorLen; i++) {\\n            uint256 validator = supportedValidators[i];\\n            balance += sfc.getStake(address(this), validator);\\n            balance += sfc.pendingRewards(address(this), validator);\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegate from this strategy to a specific Sonic validator. Called\\n     * automatically on asset deposit\\n     * @param _amount the amount of Sonic (S) to delegate.\\n     */\\n    function _delegate(uint256 _amount) internal {\\n        require(\\n            isSupportedValidator(defaultValidatorId),\\n            \\\"Validator not supported\\\"\\n        );\\n\\n        // unwrap Wrapped Sonic (wS) to native Sonic (S)\\n        IWrappedSonic(wrappedSonic).withdraw(_amount);\\n\\n        //slither-disable-next-line arbitrary-send-eth\\n        sfc.delegate{ value: _amount }(defaultValidatorId);\\n\\n        emit Delegated(defaultValidatorId, _amount);\\n    }\\n\\n    /**\\n     * @notice Undelegate from a specific Sonic validator.\\n     * This needs to be followed by a `withdrawFromSFC` two weeks later.\\n     * @param _validatorId The Sonic validator ID to undelegate from.\\n     * @param _undelegateAmount the amount of Sonic (S) to undelegate.\\n     * @return withdrawId The unique ID of the withdrawal request.\\n     */\\n    function undelegate(uint256 _validatorId, uint256 _undelegateAmount)\\n        external\\n        onlyRegistratorOrStrategist\\n        nonReentrant\\n        returns (uint256 withdrawId)\\n    {\\n        withdrawId = _undelegate(_validatorId, _undelegateAmount);\\n    }\\n\\n    function _undelegate(uint256 _validatorId, uint256 _undelegateAmount)\\n        internal\\n        returns (uint256 withdrawId)\\n    {\\n        // Can still undelegate even if the validator is no longer supported\\n        require(_undelegateAmount > 0, \\\"Must undelegate something\\\");\\n\\n        uint256 amountDelegated = sfc.getStake(address(this), _validatorId);\\n        require(\\n            _undelegateAmount <= amountDelegated,\\n            \\\"Insufficient delegation\\\"\\n        );\\n\\n        withdrawId = nextWithdrawId++;\\n\\n        withdrawals[withdrawId] = WithdrawRequest(\\n            _validatorId,\\n            _undelegateAmount,\\n            block.timestamp\\n        );\\n        pendingWithdrawals += _undelegateAmount;\\n\\n        sfc.undelegate(_validatorId, withdrawId, _undelegateAmount);\\n\\n        emit Undelegated(withdrawId, _validatorId, _undelegateAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw native S from a previously undelegated validator.\\n     * The native S is wrapped wS and transferred to the Vault.\\n     * @param _withdrawId The unique withdraw ID used to `undelegate`\\n     * @return withdrawnAmount The amount of Sonic (S) withdrawn.\\n     * This can be less than the undelegated amount in the event of slashing.\\n     */\\n    function withdrawFromSFC(uint256 _withdrawId)\\n        external\\n        onlyRegistratorOrStrategist\\n        nonReentrant\\n        returns (uint256 withdrawnAmount)\\n    {\\n        require(_withdrawId < nextWithdrawId, \\\"Invalid withdrawId\\\");\\n\\n        // Can still withdraw even if the validator is no longer supported\\n        // Load the withdrawal from storage into memory\\n        WithdrawRequest memory withdrawal = withdrawals[_withdrawId];\\n        require(!isWithdrawnFromSFC(_withdrawId), \\\"Already withdrawn\\\");\\n\\n        withdrawals[_withdrawId].undelegatedAmount = 0;\\n        pendingWithdrawals -= withdrawal.undelegatedAmount;\\n\\n        uint256 sBalanceBefore = address(this).balance;\\n\\n        // Try to withdraw from SFC\\n        try sfc.withdraw(withdrawal.validatorId, _withdrawId) {\\n            // continue below\\n        } catch (bytes memory err) {\\n            bytes4 errorSelector = bytes4(err);\\n\\n            // If the validator has been fully slashed, SFC's withdraw function will\\n            // revert with a StakeIsFullySlashed custom error.\\n            if (errorSelector == ISFC.StakeIsFullySlashed.selector) {\\n                // The validator was fully slashed, so all the delegated amounts were lost.\\n                // Will swallow the error as we still want to update the\\n                // withdrawals and pendingWithdrawals storage variables.\\n\\n                // The return param defaults to zero but lets set it explicitly so it's clear\\n                withdrawnAmount = 0;\\n\\n                emit Withdrawn(\\n                    _withdrawId,\\n                    withdrawal.validatorId,\\n                    withdrawal.undelegatedAmount,\\n                    withdrawnAmount\\n                );\\n\\n                // Exit here as there is nothing to transfer to the Vault\\n                return withdrawnAmount;\\n            } else {\\n                // Bubble up any other SFC custom errors.\\n                // Inline assembly is currently the only way to generically rethrow the exact same custom error\\n                // from the raw bytes err in a catch block while preserving its original selector and parameters.\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    revert(add(32, err), mload(err))\\n                }\\n            }\\n        }\\n\\n        // Set return parameter\\n        withdrawnAmount = address(this).balance - sBalanceBefore;\\n\\n        // Wrap Sonic (S) to Wrapped Sonic (wS)\\n        IWrappedSonic(wrappedSonic).deposit{ value: withdrawnAmount }();\\n\\n        // Transfer the Wrapped Sonic (wS) to the Vault\\n        _withdraw(vaultAddress, wrappedSonic, withdrawnAmount);\\n\\n        // withdrawal.undelegatedAmount & withdrawnAmount can differ in case of slashing\\n        emit Withdrawn(\\n            _withdrawId,\\n            withdrawal.validatorId,\\n            withdrawal.undelegatedAmount,\\n            withdrawnAmount\\n        );\\n    }\\n\\n    /// @notice returns a bool whether a withdrawalId has already been withdrawn or not\\n    /// @param _withdrawId The unique withdraw ID used to `undelegate`\\n    function isWithdrawnFromSFC(uint256 _withdrawId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        WithdrawRequest memory withdrawal = withdrawals[_withdrawId];\\n        require(withdrawal.validatorId > 0, \\\"Invalid withdrawId\\\");\\n        return withdrawal.undelegatedAmount == 0;\\n    }\\n\\n    /**\\n     * @notice Restake any pending validator rewards for all supported validators\\n     * @param _validatorIds List of Sonic validator IDs to restake rewards\\n     */\\n    function restakeRewards(uint256[] calldata _validatorIds)\\n        external\\n        nonReentrant\\n    {\\n        for (uint256 i = 0; i < _validatorIds.length; ++i) {\\n            require(\\n                isSupportedValidator(_validatorIds[i]),\\n                \\\"Validator not supported\\\"\\n            );\\n\\n            uint256 rewards = sfc.pendingRewards(\\n                address(this),\\n                _validatorIds[i]\\n            );\\n\\n            if (rewards > 0) {\\n                sfc.restakeRewards(_validatorIds[i]);\\n            }\\n        }\\n\\n        // The SFC contract will emit Delegated and RestakedRewards events.\\n        // The checkBalance function should not change as the pending rewards will moved to the staked amount.\\n    }\\n\\n    /**\\n     * @notice Claim any pending rewards from validators\\n     * @param _validatorIds List of Sonic validator IDs to claim rewards\\n     */\\n    function collectRewards(uint256[] calldata _validatorIds)\\n        external\\n        onlyRegistratorOrStrategist\\n        nonReentrant\\n    {\\n        uint256 sBalanceBefore = address(this).balance;\\n\\n        for (uint256 i = 0; i < _validatorIds.length; ++i) {\\n            uint256 rewards = sfc.pendingRewards(\\n                address(this),\\n                _validatorIds[i]\\n            );\\n\\n            if (rewards > 0) {\\n                // The SFC contract will emit ClaimedRewards(delegator (this), validatorId, rewards)\\n                sfc.claimRewards(_validatorIds[i]);\\n            }\\n        }\\n\\n        uint256 rewardsAmount = address(this).balance - sBalanceBefore;\\n\\n        // Wrap Sonic (S) to Wrapped Sonic (wS)\\n        IWrappedSonic(wrappedSonic).deposit{ value: rewardsAmount }();\\n\\n        // Transfer the Wrapped Sonic (wS) to the Vault\\n        _withdraw(vaultAddress, wrappedSonic, rewardsAmount);\\n    }\\n\\n    /**\\n     * @notice To receive native S from SFC and Wrapped Sonic (wS)\\n     *\\n     * @dev This does not prevent donating S tokens to the contract\\n     * as wrappedSonic has a `withdrawTo` function where a third party\\n     * owner of wrappedSonic can withdraw to this contract.\\n     */\\n    receive() external payable {\\n        require(\\n            msg.sender == address(sfc) || msg.sender == wrappedSonic,\\n            \\\"S not from allowed contracts\\\"\\n        );\\n    }\\n\\n    /***************************************\\n                Admin functions\\n    ****************************************/\\n\\n    /// @notice Set the address of the Registrator which can undelegate, withdraw and collect rewards\\n    /// @param _validatorRegistrator The address of the Registrator\\n    function setRegistrator(address _validatorRegistrator)\\n        external\\n        onlyGovernor\\n    {\\n        validatorRegistrator = _validatorRegistrator;\\n        emit RegistratorChanged(_validatorRegistrator);\\n    }\\n\\n    /// @notice Set the default validatorId to delegate to on deposit\\n    /// @param _validatorId The validator identifier. eg 18\\n    function setDefaultValidatorId(uint256 _validatorId)\\n        external\\n        onlyRegistratorOrStrategist\\n    {\\n        require(isSupportedValidator(_validatorId), \\\"Validator not supported\\\");\\n        defaultValidatorId = _validatorId;\\n        emit DefaultValidatorIdChanged(_validatorId);\\n    }\\n\\n    /// @notice Allows a validator to be delegated to by the Registrator\\n    /// @param _validatorId The validator identifier. eg 18\\n    function supportValidator(uint256 _validatorId) external onlyGovernor {\\n        require(\\n            !isSupportedValidator(_validatorId),\\n            \\\"Validator already supported\\\"\\n        );\\n\\n        supportedValidators.push(_validatorId);\\n\\n        emit SupportedValidator(_validatorId);\\n    }\\n\\n    /// @notice Removes a validator from the supported list.\\n    /// Unsupported validators can still be undelegated from, withdrawn from and rewards collected.\\n    /// @param _validatorId The validator identifier. eg 18\\n    function unsupportValidator(uint256 _validatorId) external onlyGovernor {\\n        require(isSupportedValidator(_validatorId), \\\"Validator not supported\\\");\\n\\n        uint256 validatorLen = supportedValidators.length;\\n        for (uint256 i = 0; i < validatorLen; ++i) {\\n            if (supportedValidators[i] == _validatorId) {\\n                supportedValidators[i] = supportedValidators[validatorLen - 1];\\n                supportedValidators.pop();\\n                break;\\n            }\\n        }\\n\\n        uint256 stake = sfc.getStake(address(this), _validatorId);\\n\\n        // undelegate if validator still has funds staked\\n        if (stake > 0) {\\n            _undelegate(_validatorId, stake);\\n        }\\n        emit UnsupportedValidator(_validatorId);\\n    }\\n\\n    /// @notice Returns the length of the supportedValidators array\\n    function supportedValidatorsLength() external view returns (uint256) {\\n        return supportedValidators.length;\\n    }\\n\\n    /// @notice Returns whether a validator is supported by this strategy\\n    /// @param _validatorId The validator identifier\\n    function isSupportedValidator(uint256 _validatorId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 validatorLen = supportedValidators.length;\\n        for (uint256 i = 0; i < validatorLen; ++i) {\\n            if (supportedValidators[i] == _validatorId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xd884047d6be704b067a4446e32f5bc147d97ba55bce8aba8536caa42b70ca8a0\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract OUSD is Governable {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Event triggered when the supply changes\\n    /// @param totalSupply Updated token total supply\\n    /// @param rebasingCredits Updated token rebasing credits\\n    /// @param rebasingCreditsPerToken Updated token rebasing credits per token\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    /// @dev Event triggered when an account opts in for rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingEnabled(address account);\\n    /// @dev Event triggered when an account opts out of rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingDisabled(address account);\\n    /// @dev Emitted when `value` tokens are moved from one account `from` to\\n    ///      another `to`.\\n    /// @param from Address of the account tokens are moved from\\n    /// @param to Address of the account tokens are moved to\\n    /// @param value Amount of tokens transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    ///      a call to {approve}. `value` is the new allowance.\\n    /// @param owner Address of the owner approving allowance\\n    /// @param spender Address of the spender allowance is granted to\\n    /// @param value Amount of tokens spender can transfer\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    /// @dev Yield resulting from {changeSupply} that a `source` account would\\n    ///      receive is directed to `target` account.\\n    /// @param source Address of the source forwarding the yield\\n    /// @param target Address of the target receiving the yield\\n    event YieldDelegated(address source, address target);\\n    /// @dev Yield delegation from `source` account to the `target` account is\\n    ///      suspended.\\n    /// @param source Address of the source suspending yield forwarding\\n    /// @param target Address of the target no longer receiving yield from `source`\\n    ///        account\\n    event YieldUndelegated(address source, address target);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        StdNonRebasing,\\n        StdRebasing,\\n        YieldDelegationSource,\\n        YieldDelegationTarget\\n    }\\n\\n    uint256[154] private _gap; // Slots to align with deployed contract\\n    uint256 private constant MAX_SUPPLY = type(uint128).max;\\n    /// @dev The amount of tokens in existence\\n    uint256 public totalSupply;\\n    mapping(address => mapping(address => uint256)) private allowances;\\n    /// @dev The vault with privileges to execute {mint}, {burn}\\n    ///     and {changeSupply}\\n    address public vaultAddress;\\n    mapping(address => uint256) internal creditBalances;\\n    // the 2 storage variables below need trailing underscores to not name collide with public functions\\n    uint256 private rebasingCredits_; // Sum of all rebasing credits (creditBalances for rebasing accounts)\\n    uint256 private rebasingCreditsPerToken_;\\n    /// @dev The amount of tokens that are not rebasing - receiving yield\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) internal alternativeCreditsPerToken;\\n    /// @dev A map of all addresses and their respective RebaseOptions\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) private __deprecated_isUpgraded;\\n    /// @dev A map of addresses that have yields forwarded to. This is an\\n    ///      inverse mapping of {yieldFrom}\\n    /// Key Account forwarding yield\\n    /// Value Account receiving yield\\n    mapping(address => address) public yieldTo;\\n    /// @dev A map of addresses that are receiving the yield. This is an\\n    ///      inverse mapping of {yieldTo}\\n    /// Key Account receiving yield\\n    /// Value Account forwarding yield\\n    mapping(address => address) public yieldFrom;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n    uint256[34] private __gap; // including below gap totals up to 200\\n\\n    /// @dev Initializes the contract and sets necessary variables.\\n    /// @param _vaultAddress Address of the vault contract\\n    /// @param _initialCreditsPerToken The starting rebasing credits per token.\\n    function initialize(address _vaultAddress, uint256 _initialCreditsPerToken)\\n        external\\n        onlyGovernor\\n    {\\n        require(_vaultAddress != address(0), \\\"Zero vault address\\\");\\n        require(vaultAddress == address(0), \\\"Already initialized\\\");\\n\\n        rebasingCreditsPerToken_ = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /// @dev Returns the symbol of the token, a shorter version\\n    ///      of the name.\\n    function symbol() external pure virtual returns (string memory) {\\n        return \\\"OUSD\\\";\\n    }\\n\\n    /// @dev Returns the name of the token.\\n    function name() external pure virtual returns (string memory) {\\n        return \\\"Origin Dollar\\\";\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    function decimals() external pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256) {\\n        return rebasingCreditsPerToken_;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() external view returns (uint256) {\\n        return rebasingCreditsPerToken_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() external view returns (uint256) {\\n        return rebasingCredits_;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() external view returns (uint256) {\\n        return rebasingCredits_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        RebaseOptions state = rebaseState[_account];\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            // Saves a slot read when transferring to or from a yield delegating source\\n            // since we know creditBalances equals the balance.\\n            return creditBalances[_account];\\n        }\\n        uint256 baseBalance = (creditBalances[_account] * 1e18) /\\n            _creditsPerToken(_account);\\n        if (state == RebaseOptions.YieldDelegationTarget) {\\n            // creditBalances of yieldFrom accounts equals token balances\\n            return baseBalance - creditBalances[yieldFrom[_account]];\\n        }\\n        return baseBalance;\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            creditBalances[_account],\\n            _creditsPerToken(_account),\\n            true // all accounts have their resolution \\\"upgraded\\\"\\n        );\\n    }\\n\\n    // Backwards compatible view\\n    function nonRebasingCreditsPerToken(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return alternativeCreditsPerToken[_account];\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     * @return true on success.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        uint256 userAllowance = allowances[_from][msg.sender];\\n        require(_value <= userAllowance, \\\"Allowance exceeded\\\");\\n\\n        unchecked {\\n            allowances[_from][msg.sender] = userAllowance - _value;\\n        }\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        (\\n            int256 fromRebasingCreditsDiff,\\n            int256 fromNonRebasingSupplyDiff\\n        ) = _adjustAccount(_from, -_value.toInt256());\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_to, _value.toInt256());\\n\\n        _adjustGlobals(\\n            fromRebasingCreditsDiff + toRebasingCreditsDiff,\\n            fromNonRebasingSupplyDiff + toNonRebasingSupplyDiff\\n        );\\n    }\\n\\n    function _adjustAccount(address _account, int256 _balanceChange)\\n        internal\\n        returns (int256 rebasingCreditsDiff, int256 nonRebasingSupplyDiff)\\n    {\\n        RebaseOptions state = rebaseState[_account];\\n        int256 currentBalance = balanceOf(_account).toInt256();\\n        if (currentBalance + _balanceChange < 0) {\\n            revert(\\\"Transfer amount exceeds balance\\\");\\n        }\\n        uint256 newBalance = (currentBalance + _balanceChange).toUint256();\\n\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            address target = yieldTo[_account];\\n            uint256 targetOldBalance = balanceOf(target);\\n            uint256 targetNewCredits = _balanceToRebasingCredits(\\n                targetOldBalance + newBalance\\n            );\\n            rebasingCreditsDiff =\\n                targetNewCredits.toInt256() -\\n                creditBalances[target].toInt256();\\n\\n            creditBalances[_account] = newBalance;\\n            creditBalances[target] = targetNewCredits;\\n        } else if (state == RebaseOptions.YieldDelegationTarget) {\\n            uint256 newCredits = _balanceToRebasingCredits(\\n                newBalance + creditBalances[yieldFrom[_account]]\\n            );\\n            rebasingCreditsDiff =\\n                newCredits.toInt256() -\\n                creditBalances[_account].toInt256();\\n            creditBalances[_account] = newCredits;\\n        } else {\\n            _autoMigrate(_account);\\n            uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n                _account\\n            ];\\n            if (alternativeCreditsPerTokenMem > 0) {\\n                nonRebasingSupplyDiff = _balanceChange;\\n                if (alternativeCreditsPerTokenMem != 1e18) {\\n                    alternativeCreditsPerToken[_account] = 1e18;\\n                }\\n                creditBalances[_account] = newBalance;\\n            } else {\\n                uint256 newCredits = _balanceToRebasingCredits(newBalance);\\n                rebasingCreditsDiff =\\n                    newCredits.toInt256() -\\n                    creditBalances[_account].toInt256();\\n                creditBalances[_account] = newCredits;\\n            }\\n        }\\n    }\\n\\n    function _adjustGlobals(\\n        int256 _rebasingCreditsDiff,\\n        int256 _nonRebasingSupplyDiff\\n    ) internal {\\n        if (_rebasingCreditsDiff != 0) {\\n            rebasingCredits_ = (rebasingCredits_.toInt256() +\\n                _rebasingCreditsDiff).toUint256();\\n        }\\n        if (_nonRebasingSupplyDiff != 0) {\\n            nonRebasingSupply = (nonRebasingSupply.toInt256() +\\n                _nonRebasingSupplyDiff).toUint256();\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to check the amount of tokens that _owner has allowed\\n     *      to `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @notice Approve the passed address to spend the specified amount of\\n     *      tokens on behalf of msg.sender.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     * @return true on success.\\n     */\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates `_amount` tokens and assigns them to `_account`,\\n     *     increasing the total supply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, _amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply + _amount;\\n\\n        require(totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @notice Destroys `_amount` tokens from `_account`,\\n     *     reducing the total supply.\\n     */\\n    function burn(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, -_amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply - _amount;\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n            _account\\n        ];\\n        if (alternativeCreditsPerTokenMem != 0) {\\n            return alternativeCreditsPerTokenMem;\\n        } else {\\n            return rebasingCreditsPerToken_;\\n        }\\n    }\\n\\n    /**\\n     * @dev Auto migrate contracts to be non rebasing,\\n     *     unless they have opted into yield.\\n     * @param _account Address of the account.\\n     */\\n    function _autoMigrate(address _account) internal {\\n        bool isContract = _account.code.length > 0;\\n        // In previous code versions, contracts would not have had their\\n        // rebaseState[_account] set to RebaseOptions.NonRebasing when migrated\\n        // therefore we check the actual accounting used on the account instead.\\n        if (\\n            isContract &&\\n            rebaseState[_account] == RebaseOptions.NotSet &&\\n            alternativeCreditsPerToken[_account] == 0\\n        ) {\\n            _rebaseOptOut(_account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates credits from contract's global rebasingCreditsPerToken_, and\\n     *      also balance that corresponds to those credits. The latter is important\\n     *      when adjusting the contract's global nonRebasingSupply to circumvent any\\n     *      possible rounding errors.\\n     *\\n     * @param _balance Balance of the account.\\n     */\\n    function _balanceToRebasingCredits(uint256 _balance)\\n        internal\\n        view\\n        returns (uint256 rebasingCredits)\\n    {\\n        // Rounds up, because we need to ensure that accounts always have\\n        // at least the balance that they should have.\\n        // Note this should always be used on an absolute account value,\\n        // not on a possibly negative diff, because then the rounding would be wrong.\\n        return ((_balance) * rebasingCreditsPerToken_ + 1e18 - 1) / 1e18;\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account) external onlyGovernor {\\n        require(_account != address(0), \\\"Zero address not allowed\\\");\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     */\\n    function rebaseOptIn() external {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        uint256 balance = balanceOf(_account);\\n\\n        // prettier-ignore\\n        require(\\n            alternativeCreditsPerToken[_account] > 0 ||\\n                // Accounts may explicitly `rebaseOptIn` regardless of\\n                // accounting if they have a 0 balance.\\n                creditBalances[_account] == 0\\n            ,\\n            \\\"Account must be non-rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        // prettier-ignore\\n        require(\\n            state == RebaseOptions.StdNonRebasing ||\\n                state == RebaseOptions.NotSet,\\n            \\\"Only standard non-rebasing accounts can opt in\\\"\\n        );\\n\\n        uint256 newCredits = _balanceToRebasingCredits(balance);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdRebasing;\\n        alternativeCreditsPerToken[_account] = 0;\\n        creditBalances[_account] = newCredits;\\n        // Globals\\n        _adjustGlobals(newCredits.toInt256(), -balance.toInt256());\\n\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will no longer receive yield\\n     */\\n    function rebaseOptOut() external {\\n        _rebaseOptOut(msg.sender);\\n    }\\n\\n    function _rebaseOptOut(address _account) internal {\\n        require(\\n            alternativeCreditsPerToken[_account] == 0,\\n            \\\"Account must be rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        require(\\n            state == RebaseOptions.StdRebasing || state == RebaseOptions.NotSet,\\n            \\\"Only standard rebasing accounts can opt out\\\"\\n        );\\n\\n        uint256 oldCredits = creditBalances[_account];\\n        uint256 balance = balanceOf(_account);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdNonRebasing;\\n        alternativeCreditsPerToken[_account] = 1e18;\\n        creditBalances[_account] = balance;\\n        // Globals\\n        _adjustGlobals(-oldCredits.toInt256(), balance.toInt256());\\n\\n        emit AccountRebasingDisabled(_account);\\n    }\\n\\n    /**\\n     * @notice Distribute yield to users. This changes the exchange rate\\n     *  between \\\"credits\\\" and OUSD tokens to change rebasing user's balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply) external onlyVault {\\n        require(totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                totalSupply,\\n                rebasingCredits_,\\n                rebasingCreditsPerToken_\\n            );\\n            return;\\n        }\\n\\n        totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        uint256 rebasingSupply = totalSupply - nonRebasingSupply;\\n        // round up in the favour of the protocol\\n        rebasingCreditsPerToken_ =\\n            (rebasingCredits_ * 1e18 + rebasingSupply - 1) /\\n            rebasingSupply;\\n\\n        require(rebasingCreditsPerToken_ > 0, \\\"Invalid change in supply\\\");\\n\\n        emit TotalSupplyUpdatedHighres(\\n            totalSupply,\\n            rebasingCredits_,\\n            rebasingCreditsPerToken_\\n        );\\n    }\\n\\n    /*\\n     * @notice Send the yield from one account to another account.\\n     *         Each account keeps its own balances.\\n     */\\n    function delegateYield(address _from, address _to) external onlyGovernor {\\n        require(_from != address(0), \\\"Zero from address not allowed\\\");\\n        require(_to != address(0), \\\"Zero to address not allowed\\\");\\n\\n        require(_from != _to, \\\"Cannot delegate to self\\\");\\n        require(\\n            yieldFrom[_to] == address(0) &&\\n                yieldTo[_to] == address(0) &&\\n                yieldFrom[_from] == address(0) &&\\n                yieldTo[_from] == address(0),\\n            \\\"Blocked by existing yield delegation\\\"\\n        );\\n        RebaseOptions stateFrom = rebaseState[_from];\\n        RebaseOptions stateTo = rebaseState[_to];\\n\\n        require(\\n            stateFrom == RebaseOptions.NotSet ||\\n                stateFrom == RebaseOptions.StdNonRebasing ||\\n                stateFrom == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState from\\\"\\n        );\\n\\n        require(\\n            stateTo == RebaseOptions.NotSet ||\\n                stateTo == RebaseOptions.StdNonRebasing ||\\n                stateTo == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState to\\\"\\n        );\\n\\n        if (alternativeCreditsPerToken[_from] == 0) {\\n            _rebaseOptOut(_from);\\n        }\\n        if (alternativeCreditsPerToken[_to] > 0) {\\n            _rebaseOptIn(_to);\\n        }\\n\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(_to);\\n        uint256 oldToCredits = creditBalances[_to];\\n        uint256 newToCredits = _balanceToRebasingCredits(\\n            fromBalance + toBalance\\n        );\\n\\n        // Set up the bidirectional links\\n        yieldTo[_from] = _to;\\n        yieldFrom[_to] = _from;\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.YieldDelegationSource;\\n        alternativeCreditsPerToken[_from] = 1e18;\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[_to] = RebaseOptions.YieldDelegationTarget;\\n        creditBalances[_to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, -(fromBalance).toInt256());\\n        emit YieldDelegated(_from, _to);\\n    }\\n\\n    /*\\n     * @notice Stop sending the yield from one account to another account.\\n     */\\n    function undelegateYield(address _from) external onlyGovernor {\\n        // Require a delegation, which will also ensure a valid delegation\\n        require(yieldTo[_from] != address(0), \\\"Zero address not allowed\\\");\\n\\n        address to = yieldTo[_from];\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(to);\\n        uint256 oldToCredits = creditBalances[to];\\n        uint256 newToCredits = _balanceToRebasingCredits(toBalance);\\n\\n        // Remove the bidirectional links\\n        yieldFrom[to] = address(0);\\n        yieldTo[_from] = address(0);\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.StdNonRebasing;\\n        // alternativeCreditsPerToken[from] already 1e18 from `delegateYield()`\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[to] = RebaseOptions.StdRebasing;\\n        // alternativeCreditsPerToken[to] already 0 from `delegateYield()`\\n        creditBalances[to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, fromBalance.toInt256());\\n        emit YieldUndelegated(_from, to);\\n    }\\n}\\n\",\"keccak256\":\"0x5741d16e48d6031ec92c1e189ea023c78a34956b6bc9642ea9dfc9a6dafe49ca\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Harvester\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        virtual\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x4b6b5a929421e03809ab58240ad85643da74f4f484af503246231576d3158987\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetRemoved(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n    event WithdrawalClaimDelayUpdated(uint256 _newDelay);\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Strategy) public strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD public oUSD;\\n\\n    /// @dev Storage slot for the address of the VaultAdmin contract that is delegated to\\n    // keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 public constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    /// @dev Address of the contract responsible for post rebase syncs with AMMs\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    /// @dev Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public ousdMetaStrategy;\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    // slither-disable-next-line uninitialized-state\\n    int256 public netOusdMintedForStrategy;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public netOusdMintForStrategyThreshold;\\n\\n    // slither-disable-end constable-states\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // List of strategies that can mint oTokens directly\\n    // Used in OETHBaseVaultCore\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => bool) public isMintWhitelistedStrategy;\\n\\n    /// @notice Address of the Dripper contract that streams harvested rewards to the Vault\\n    /// @dev The vault is proxied so needs to be set with setDripper against the proxy contract.\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public dripper;\\n    // slither-disable-end constable-states\\n\\n    /// Withdrawal Queue Storage /////\\n\\n    struct WithdrawalQueueMetadata {\\n        // cumulative total of all withdrawal requests included the ones that have already been claimed\\n        uint128 queued;\\n        // cumulative total of all the requests that can be claimed including the ones that have already been claimed\\n        uint128 claimable;\\n        // total of all the requests that have been claimed\\n        uint128 claimed;\\n        // index of the next withdrawal request starting at 0\\n        uint128 nextWithdrawalIndex;\\n    }\\n\\n    /// @notice Global metadata for the withdrawal queue including:\\n    /// queued - cumulative total of all withdrawal requests included the ones that have already been claimed\\n    /// claimable - cumulative total of all the requests that can be claimed including the ones already claimed\\n    /// claimed - total of all the requests that have been claimed\\n    /// nextWithdrawalIndex - index of the next withdrawal request starting at 0\\n    // slither-disable-next-line uninitialized-state\\n    WithdrawalQueueMetadata public withdrawalQueueMetadata;\\n\\n    struct WithdrawalRequest {\\n        address withdrawer;\\n        bool claimed;\\n        uint40 timestamp; // timestamp of the withdrawal request\\n        // Amount of oTokens to redeem. eg OETH\\n        uint128 amount;\\n        // cumulative total of all withdrawal requests including this one.\\n        // this request can be claimed when this queued amount is less than or equal to the queue's claimable amount.\\n        uint128 queued;\\n    }\\n\\n    /// @notice Mapping of withdrawal request indices to the user withdrawal request data\\n    mapping(uint256 => WithdrawalRequest) public withdrawalRequests;\\n\\n    /// @notice Sets a minimum delay that is required to elapse between\\n    ///     requesting async withdrawals and claiming the request.\\n    ///     When set to 0 async withdrawals are disabled.\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public withdrawalClaimDelay;\\n    // slither-disable-end constable-states\\n\\n    // For future use\\n    uint256[44] private __gap;\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc96eb2e6b540ccdbf7667dbee2ca78053e0e27d865953608a21f25581ca8e1e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051613c2c380380613c2c83398101604081905261003091610076565b82516001600160a01b03908116608052602090930151831660a05290821660c0521660e05261010f565b80516001600160a01b038116811461007157600080fd5b919050565b6000806000838503608081121561008c57600080fd5b604081121561009a57600080fd5b50604080519081016001600160401b03811182821017156100cb57634e487b7160e01b600052604160045260246000fd5b6040526100d78561005a565b81526100e56020860161005a565b602082015292506100f86040850161005a565b91506101066060850161005a565b90509250925092565b60805160a05160c05160e0516139b7610275600039600081816102700152818161069f01528181610c9d01528181611135015281816111e401528181611640015281816116f1015281816122d701528181612386015281816126e601528181612adb01528181612c340152612f180152600081816102a201528181610739015281816107f0015281816109ab01528181610dc501528181610e5d01528181610f51015281816112950152818161132d015281816115270152818161158e01528181611a6701528181611cef01528181611d7a01528181611e1b015281816121f1015281816124c601528181612546015281816129100152612e9c01526000818161042a01528181610aa501528181610e3c01528181610edc0152818161103e0152818161130c015281816113740152818161179e01528181611c1401528181611dfa0152818161217c015261243b0152600081816108640152611abb01526139b76000f3fe6080604052600436106102605760003560e01c80638129fc1c11610144578063beca03d5116100b6578063d9caed121161007a578063d9caed1214610832578063dbe55e5614610852578063dc25cf9214610886578063de5f6268146108a6578063f6ca71b0146108bb578063f9c3cf8b146108dd57600080fd5b8063beca03d514610793578063c2e1e3f4146107a9578063c7af3352146107c9578063ce75d565146107de578063d38bfff41461081257600080fd5b80639136616a116101085780639136616a146106c157806392a89c4f146106dc57806396d538bb146106fc578063aa388af61461071c578063abe4820314610769578063ad1728cb1461077e57600080fd5b80638129fc1c1461062357806384bcbb4e14610638578063853828b61461065857806387bae8671461066d5780638992229f1461068d57600080fd5b80635a1b65ae116101dd578063634b91e3116101a1578063634b91e31461056d5780636520a4311461058d57806367c7066c146105ad5780636e811d38146105cd57806377ae46e5146105ed5780637b2d9b2c1461060357600080fd5b80635a1b65ae146104a15780635bd62b73146104c15780635cc07076146104e15780635d36b190146105385780635f5152261461054d57600080fd5b806333a893801161022457806333a89380146103e8578063430bf08a14610418578063440b376c1461044c57806347e7ef241461046c5780635a063f631461048c57600080fd5b80630c340a241461031c5780630ed57b3a1461034e5780630fc3b4c41461036e5780631072cbea146103a45780631ffd6b1f146103c457600080fd5b3661031757336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806102c45750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6103155760405162461bcd60e51b815260206004820152601c60248201527f53206e6f742066726f6d20616c6c6f77656420636f6e7472616374730000000060448201526064015b60405180910390fd5b005b600080fd5b34801561032857600080fd5b506103316108fd565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561035a57600080fd5b506103156103693660046133e6565b61091a565b34801561037a57600080fd5b5061033161038936600461341f565b6035602052600090815260409020546001600160a01b031681565b3480156103b057600080fd5b506103156103bf36600461343c565b61097d565b3480156103d057600080fd5b506103da60a05481565b604051908152602001610345565b3480156103f457600080fd5b50610408610403366004613468565b610a3c565b6040519015158152602001610345565b34801561042457600080fd5b506103317f000000000000000000000000000000000000000000000000000000000000000081565b34801561045857600080fd5b506103da610467366004613468565b610a8c565b34801561047857600080fd5b5061031561048736600461343c565b610ed1565b34801561049857600080fd5b50610315610fb3565b3480156104ad57600080fd5b506103156104bc3660046134cd565b611028565b3480156104cd57600080fd5b506103156104dc366004613468565b61135e565b3480156104ed57600080fd5b5061051d6104fc366004613468565b60a16020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610345565b34801561054457600080fd5b5061031561147d565b34801561055957600080fd5b506103da61056836600461341f565b611523565b34801561057957600080fd5b506103da61058836600461350f565b611785565b34801561059957600080fd5b506103da6105a8366004613468565b61189c565b3480156105b957600080fd5b50603954610331906001600160a01b031681565b3480156105d957600080fd5b506103156105e836600461341f565b6118bd565b3480156105f957600080fd5b506103da609d5481565b34801561060f57600080fd5b5061033161061e366004613468565b61192b565b34801561062f57600080fd5b50610315611955565b34801561064457600080fd5b50610315610653366004613468565b611b30565b34801561066457600080fd5b50610315611c09565b34801561067957600080fd5b5060a254610331906001600160a01b031681565b34801561069957600080fd5b506103317f000000000000000000000000000000000000000000000000000000000000000081565b3480156106cd57600080fd5b50610315610369366004613468565b3480156106e857600080fd5b506104086106f7366004613468565b611e4a565b34801561070857600080fd5b506103156107173660046134cd565b611ece565b34801561072857600080fd5b5061040861073736600461341f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561077557600080fd5b50609f546103da565b34801561078a57600080fd5b50610315611feb565b34801561079f57600080fd5b506103da609e5481565b3480156107b557600080fd5b506103156107c436600461341f565b61200f565b3480156107d557600080fd5b5061040861209c565b3480156107ea57600080fd5b506103317f000000000000000000000000000000000000000000000000000000000000000081565b34801561081e57600080fd5b5061031561082d36600461341f565b6120cd565b34801561083e57600080fd5b5061031561084d366004613531565b612171565b34801561085e57600080fd5b506103317f000000000000000000000000000000000000000000000000000000000000000081565b34801561089257600080fd5b506103156108a13660046134cd565b612255565b3480156108b257600080fd5b50610315612430565b3480156108c757600080fd5b506108d0612573565b6040516103459190613572565b3480156108e957600080fd5b506103156108f8366004613468565b6125d5565b60006109156000805160206139628339815191525490565b905090565b61092261209c565b61093e5760405162461bcd60e51b815260040161030c906135be565b60405162461bcd60e51b81526020600482015260146024820152733ab739bab83837b93a32b210333ab731ba34b7b760611b604482015260640161030c565b61098561209c565b6109a15760405162461bcd60e51b815260040161030c906135be565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603610a1c5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f7274656420617373657400604482015260640161030c565b610a38610a276108fd565b6001600160a01b03841690836127a2565b5050565b609f54600090815b81811015610a825783609f8281548110610a6057610a606135f5565b906000526020600020015403610a7a575060019392505050565b600101610a44565b5060009392505050565b60a2546000906001600160a01b0316331480610b3a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b25919061360b565b6001600160a01b0316336001600160a01b0316145b610b565760405162461bcd60e51b815260040161030c90613628565b60008051602061394283398151915280546001198101610b885760405162461bcd60e51b815260040161030c90613673565b60028255609d548410610bd25760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081dda5d1a191c985dd25960721b604482015260640161030c565b600084815260a160209081526040918290208251606081018452815481526001820154928101929092526002015491810191909152610c1085611e4a565b15610c515760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b604482015260640161030c565b600085815260a1602090815260408220600101829055820151609e805491929091610c7d9084906136b1565b90915550508051604051630441a3e760e41b815247916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163441a3e7091610cdb918a90600401918252602082015260400190565b600060405180830381600087803b158015610cf557600080fd5b505af1925050508015610d06575060015b610db7573d808015610d34576040519150601f19603f3d011682016040523d82523d6000602084013e610d39565b606091505b506000610d45826136ca565b905063e706980560e01b6001600160e01b0319821601610daf5783516020808601516040805191825260009282018390529199508a917ff33ea8296e3b54855453ed4cdaa29d067a97e3cc1d5ebd1fb072699e78aa01e2910160405180910390a350505050610ec7565b815182602001fd5b610dc181476136b1565b94507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e1e57600080fd5b505af1158015610e32573d6000803e3d6000fd5b5050505050610e827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000876127fd565b81516020808401516040805191825291810188905288917ff33ea8296e3b54855453ed4cdaa29d067a97e3cc1d5ebd1fb072699e78aa01e2910160405180910390a350505b5060019055919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f195760405162461bcd60e51b815260040161030c90613704565b60008051602061394283398151915280546001198101610f4b5760405162461bcd60e51b815260040161030c90613673565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614610fa05760405162461bcd60e51b815260040161030c9061373b565b610faa8484612977565b50600190555050565b60008051602061394283398151915280546001198101610fe55760405162461bcd60e51b815260040161030c90613673565b6002825560405162461bcd60e51b81526020600482015260146024820152733ab739bab83837b93a32b210333ab731ba34b7b760611b604482015260640161030c565b60a2546001600160a01b03163314806110d357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561109a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110be919061360b565b6001600160a01b0316336001600160a01b0316145b6110ef5760405162461bcd60e51b815260040161030c90613628565b600080516020613942833981519152805460011981016111215760405162461bcd60e51b815260040161030c90613673565b600282554760005b848110156112845760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636099ecb230898986818110611175576111756135f5565b905060200201356040518363ffffffff1660e01b8152600401611199929190613766565b602060405180830381865afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da919061377f565b9050801561127b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630962ef79888885818110611223576112236135f5565b905060200201356040518263ffffffff1660e01b815260040161124891815260200190565b600060405180830381600087803b15801561126257600080fd5b505af1158015611276573d6000803e3d6000fd5b505050505b50600101611129565b50600061129182476136b1565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112ee57600080fd5b505af1158015611302573d6000803e3d6000fd5b50505050506113527f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836127fd565b50506001825550505050565b60a2546001600160a01b031633148061140957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f4919061360b565b6001600160a01b0316336001600160a01b0316145b6114255760405162461bcd60e51b815260040161030c90613628565b61142e81610a3c565b61144a5760405162461bcd60e51b815260040161030c90613798565b60a081905560405181907f6d9855e4bae1edd0b0a36a2560dddfb1ef5dfae0fc1a6a919f612efd174ee53d90600090a250565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146115185760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161030c565b61152133612a11565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316146115765760405162461bcd60e51b815260040161030c9061373b565b609e546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156115dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611601919061377f565b61160b91906137cf565b609f5490915060005b8181101561177e576000609f8281548110611631576116316135f5565b906000526020600020015490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfd4766330836040518363ffffffff1660e01b815260040161168c929190613766565b602060405180830381865afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd919061377f565b6116d790856137cf565b60405163304cf65960e11b81529094506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636099ecb2906117289030908590600401613766565b602060405180830381865afa158015611745573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611769919061377f565b61177390856137cf565b935050600101611614565b5050919050565b60a2546000906001600160a01b031633148061183357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e919061360b565b6001600160a01b0316336001600160a01b0316145b61184f5760405162461bcd60e51b815260040161030c90613628565b600080516020613942833981519152805460011981016118815760405162461bcd60e51b815260040161030c90613673565b6002825561188f8585612a70565b6001909255509392505050565b609f81815481106118ac57600080fd5b600091825260209091200154905081565b6118c561209c565b6118e15760405162461bcd60e51b815260040161030c906135be565b60a280546001600160a01b0319166001600160a01b0383169081179091556040517f83f29c79feb71f8fba9d0fbc4ba5f0982a28b6b1e868b3fc50e6400d100bca0f90600090a250565b603a818154811061193b57600080fd5b6000918252602090912001546001600160a01b0316905081565b61195d61209c565b6119795760405162461bcd60e51b815260040161030c906135be565b600054610100900460ff1680611992575060005460ff16155b6119f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161030c565b600054610100900460ff16158015611a17576000805461ffff19166101011790555b6040805160008082526001602080840182815260608501865293949293928501908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000082600081518110611a9957611a996135f5565b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600081518110611aed57611aed6135f5565b60200260200101906001600160a01b031690816001600160a01b031681525050611b18838383612cda565b5050508015611b2d576000805461ff00191690555b50565b611b3861209c565b611b545760405162461bcd60e51b815260040161030c906135be565b611b5d81610a3c565b15611baa5760405162461bcd60e51b815260206004820152601b60248201527f56616c696461746f7220616c726561647920737570706f727465640000000000604482015260640161030c565b609f805460018101825560009182527f0bc14066c33013fe88f66e314e4cf150b0b2d4d6451a1a51dbbd1c27cd11de280182905560405182917f02920cd852f6fb97d3c61666647e84dc075aeef1da73bce825d24c7a0c277ece91a250565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611c585750611c436108fd565b6001600160a01b0316336001600160a01b0316145b611cb05760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b606482015260840161030c565b60008051602061394283398151915280546001198101611ce25760405162461bcd60e51b815260040161030c90613673565b60028255478015611d62577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d4857600080fd5b505af1158015611d5c573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ded919061377f565b90508015611e4057611e407f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836127fd565b5050600182555050565b600081815260a160209081526040808320815160608101835281548082526001830154948201949094526002909101549181019190915290611ec35760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081dda5d1a191c985dd25960721b604482015260640161030c565b602001511592915050565b611ed661209c565b611ef25760405162461bcd60e51b815260040161030c906135be565b8060005b81811015611f9c576000848483818110611f1257611f126135f5565b9050602002016020810190611f27919061341f565b6001600160a01b031603611f945760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b606482015260840161030c565b600101611ef6565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a8484604051611fd1939291906137e2565b60405180910390a1611fe5603a8484613304565b50505050565b611ff361209c565b6115215760405162461bcd60e51b815260040161030c906135be565b61201761209c565b6120335760405162461bcd60e51b815260040161030c906135be565b603954604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a1603980546001600160a01b0319166001600160a01b0392909216919091179055565b60006120b46000805160206139628339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6120d561209c565b6120f15760405162461bcd60e51b815260040161030c906135be565b612119817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166121396000805160206139628339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146121b95760405162461bcd60e51b815260040161030c90613704565b600080516020613942833981519152805460011981016121eb5760405162461bcd60e51b815260040161030c90613673565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146122405760405162461bcd60e51b815260040161030c9061373b565b61224b8585856127fd565b5060019055505050565b600080516020613942833981519152805460011981016122875760405162461bcd60e51b815260040161030c90613673565b6002825560005b83811015612426576122b78585838181106122ab576122ab6135f5565b90506020020135610a3c565b6122d35760405162461bcd60e51b815260040161030c90613798565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636099ecb230888886818110612317576123176135f5565b905060200201356040518363ffffffff1660e01b815260040161233b929190613766565b602060405180830381865afa158015612358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237c919061377f565b9050801561241d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166308c368748787858181106123c5576123c56135f5565b905060200201356040518263ffffffff1660e01b81526004016123ea91815260200190565b600060405180830381600087803b15801561240457600080fd5b505af1158015612418573d6000803e3d6000fd5b505050505b5060010161228e565b5050600190555050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146124785760405162461bcd60e51b815260040161030c90613704565b600080516020613942833981519152805460011981016124aa5760405162461bcd60e51b815260040161030c90613673565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612539919061377f565b9050801561256b5761256b7f000000000000000000000000000000000000000000000000000000000000000082612977565b505060019055565b6060603a8054806020026020016040519081016040528092919081815260200182805480156125cb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125ad575b5050505050905090565b6125dd61209c565b6125f95760405162461bcd60e51b815260040161030c906135be565b61260281610a3c565b61261e5760405162461bcd60e51b815260040161030c90613798565b609f5460005b818110156126cb5782609f8281548110612640576126406135f5565b9060005260206000200154036126c357609f61265d6001846136b1565b8154811061266d5761266d6135f5565b9060005260206000200154609f828154811061268b5761268b6135f5565b600091825260209091200155609f8054806126a8576126a861387d565b600190038181906000526020600020016000905590556126cb565b600101612624565b5060405163cfd4766360e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cfd476639061271d9030908790600401613766565b602060405180830381865afa15801561273a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275e919061377f565b90508015612772576127708382612a70565b505b60405183907f79b3ee06a72f89da075102ad32be1edf72a769ad31461b0477e24304ef9cdf3890600090a2505050565b6127f88363a9059cbb60e01b84846040516024016127c1929190613766565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d8d565b505050565b6000811161284d5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e67000000000000000000604482015260640161030c565b6001600160a01b03831661289c5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b604482015260640161030c565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906128ca9086908590600401613766565b6020604051808303816000875af11580156128e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290d9190613893565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639860008360405161296a929190613766565b60405180910390a2505050565b600081116129c05760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015260640161030c565b6129c981612e5f565b816001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62600083604051612a05929190613766565b60405180910390a25050565b6001600160a01b038116612a675760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161030c565b611b2d81612fc4565b6000808211612ac15760405162461bcd60e51b815260206004820152601960248201527f4d75737420756e64656c656761746520736f6d657468696e6700000000000000604482015260640161030c565b60405163cfd4766360e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cfd4766390612b129030908890600401613766565b602060405180830381865afa158015612b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b53919061377f565b905080831115612ba55760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742064656c65676174696f6e000000000000000000604482015260640161030c565b609d8054906000612bb5836138b5565b9091555060408051606081018252868152602080820187815242838501908152600086815260a1909352938220925183555160018301559151600290910155609e80549294508592909190612c0b9084906137cf565b90915550506040516313e1937d60e21b81526004810185905260248101839052604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634f864df490606401600060405180830381600087803b158015612c8057600080fd5b505af1158015612c94573d6000803e3d6000fd5b5050505083827f0bb92b0997292736a695dc55fdbeed2509294a39bd4c39ba5a694d3e19f8923085604051612ccb91815260200190565b60405180910390a35092915050565b8251612ced90603a906020860190613367565b50815181518114612d375760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015260640161030c565b60005b81811015612d8657612d7e848281518110612d5757612d576135f5565b6020026020010151848381518110612d7157612d716135f5565b602002602001015161302b565b600101612d3a565b5050505050565b6000612de2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661318a9092919063ffffffff16565b8051909150156127f85780806020019051810190612e009190613893565b6127f85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161030c565b612e6a60a054610a3c565b612e865760405162461bcd60e51b815260040161030c90613798565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015612ee857600080fd5b505af1158015612efc573d6000803e3d6000fd5b505060a054604051639fa6dd3560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350639fa6dd3592508491612f539160040190815260200190565b6000604051808303818588803b158015612f6c57600080fd5b505af1158015612f80573d6000803e3d6000fd5b505050505060a0547fdf2a7c5f7a567419f37f5bba40b572a4500cdf7c85f7b18a67c6dba1b94fba3b82604051612fb991815260200190565b60405180910390a250565b806001600160a01b0316612fe46000805160206139628339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a360008051602061396283398151915255565b6001600160a01b0382811660009081526035602052604090205416156130885760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015260640161030c565b6001600160a01b038216158015906130a857506001600160a01b03811615155b6130e85760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015260640161030c565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b606061319984846000856131a3565b90505b9392505050565b6060824710156132045760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161030c565b843b6132525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030c565b600080866001600160a01b0316858760405161326e91906138f2565b60006040518083038185875af1925050503d80600081146132ab576040519150601f19603f3d011682016040523d82523d6000602084013e6132b0565b606091505b50915091506132c08282866132cb565b979650505050505050565b606083156132da57508161319c565b8251156132ea5782518084602001fd5b8160405162461bcd60e51b815260040161030c919061390e565b828054828255906000526020600020908101928215613357579160200282015b828111156133575781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613324565b506133639291506133bc565b5090565b828054828255906000526020600020908101928215613357579160200282015b8281111561335757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613387565b5b8082111561336357600081556001016133bd565b6001600160a01b0381168114611b2d57600080fd5b600080604083850312156133f957600080fd5b8235613404816133d1565b91506020830135613414816133d1565b809150509250929050565b60006020828403121561343157600080fd5b813561319c816133d1565b6000806040838503121561344f57600080fd5b823561345a816133d1565b946020939093013593505050565b60006020828403121561347a57600080fd5b5035919050565b60008083601f84011261349357600080fd5b50813567ffffffffffffffff8111156134ab57600080fd5b6020830191508360208260051b85010111156134c657600080fd5b9250929050565b600080602083850312156134e057600080fd5b823567ffffffffffffffff8111156134f757600080fd5b61350385828601613481565b90969095509350505050565b6000806040838503121561352257600080fd5b50508035926020909101359150565b60008060006060848603121561354657600080fd5b8335613551816133d1565b92506020840135613561816133d1565b929592945050506040919091013590565b602080825282518282018190526000918401906040840190835b818110156135b35783516001600160a01b031683526020938401939092019160010161358c565b509095945050505050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561361d57600080fd5b815161319c816133d1565b6020808252602b908201527f43616c6c6572206973206e6f7420746865205265676973747261746f72206f7260408201526a0814dd1c985d1959da5cdd60aa1b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156136c4576136c461369b565b92915050565b805160208201516001600160e01b031981169190600482101561177e576001600160e01b031960049290920360031b82901b161692915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b602080825260119082015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561379157600080fd5b5051919050565b60208082526017908201527f56616c696461746f72206e6f7420737570706f72746564000000000000000000604082015260600190565b808201808211156136c4576136c461369b565b6040808252845490820181905260008581526020812090916060840190835b818110156138285783546001600160a01b0316835260019384019360209093019201613801565b50508381036020808601919091528582520190508460005b85811015613871578135613853816133d1565b6001600160a01b031683526020928301929190910190600101613840565b50909695505050505050565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156138a557600080fd5b8151801515811461319c57600080fd5b6000600182016138c7576138c761369b565b5060010190565b60005b838110156138e95781810151838201526020016138d1565b50506000910152565b600082516139048184602087016138ce565b9190910192915050565b602081526000825180602084015261392d8160408501602087016138ce565b601f01601f1916919091016040019291505056fe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220885a148a4df6a35fcde902d7ecbe70ee8410d21d33325654d3f80b48d9eb7bb064736f6c634300081c0033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of Wrapped Sonic (wS) token"
        },
        "returns": {
          "balance": "   Total value managed by the strategy"
        }
      },
      "collectRewards(uint256[])": {
        "params": {
          "_validatorIds": "List of Sonic validator IDs to claim rewards"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "Amount of assets that were transferred to the strategy by the vault.",
          "_asset": "Address of asset to deposit. Has to be Wrapped Sonic (wS)."
        }
      },
      "getRewardTokenAddresses()": {
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "isSupportedValidator(uint256)": {
        "params": {
          "_validatorId": "The validator identifier"
        }
      },
      "isWithdrawnFromSFC(uint256)": {
        "params": {
          "_withdrawId": "The unique withdraw ID used to `undelegate`"
        }
      },
      "restakeRewards(uint256[])": {
        "params": {
          "_validatorIds": "List of Sonic validator IDs to restake rewards"
        }
      },
      "setDefaultValidatorId(uint256)": {
        "params": {
          "_validatorId": "The validator identifier. eg 18"
        }
      },
      "setHarvesterAddress(address)": {
        "params": {
          "_harvesterAddress": "Address of the harvester contract."
        }
      },
      "setRegistrator(address)": {
        "params": {
          "_validatorRegistrator": "The address of the Registrator"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "params": {
          "_rewardTokenAddresses": "Array of reward token addresses"
        }
      },
      "supportValidator(uint256)": {
        "params": {
          "_validatorId": "The validator identifier. eg 18"
        }
      },
      "supportsAsset(address)": {
        "details": "Returns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset token"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "undelegate(uint256,uint256)": {
        "params": {
          "_undelegateAmount": "the amount of Sonic (S) to undelegate.",
          "_validatorId": "The Sonic validator ID to undelegate from."
        },
        "returns": {
          "withdrawId": "The unique ID of the withdrawal request."
        }
      },
      "unsupportValidator(uint256)": {
        "params": {
          "_validatorId": "The validator identifier. eg 18"
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "Amount of Wrapped Sonic (wS) to withdraw",
          "_asset": "Address of the Wrapped Sonic (wS) token",
          "_recipient": "Address to receive withdrawn assets"
        }
      },
      "withdrawFromSFC(uint256)": {
        "params": {
          "_withdrawId": "The unique withdraw ID used to `undelegate`"
        },
        "returns": {
          "withdrawnAmount": "The amount of Sonic (S) withdrawn. This can be less than the undelegated amount in the event of slashing."
        }
      }
    },
    "title": "Staking Strategy for Sonic's native S currency",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetToPToken(address)": {
        "notice": "asset => pToken (Platform Specific Token Address)"
      },
      "checkBalance(address)": {
        "notice": "Returns the total value of Sonic (S) that is delegated validators. Wrapped Sonic (wS) deposits that are still to be delegated and any undelegated amounts still pending a withdrawal."
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "notice": "is not used by this strategy as all staking rewards are restaked"
      },
      "collectRewards(uint256[])": {
        "notice": "Claim any pending rewards from validators"
      },
      "defaultValidatorId()": {
        "notice": "Default validator id to deposit to"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit wrapped S asset into the underlying platform."
      },
      "depositAll()": {
        "notice": "Deposit the entire balance of wrapped S in this strategy contract into the underlying platform."
      },
      "getRewardTokenAddresses()": {
        "notice": "Get the reward token addresses."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "harvesterAddress()": {
        "notice": "Address of the Harvester contract allowed to collect reward tokens"
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "isSupportedValidator(uint256)": {
        "notice": "Returns whether a validator is supported by this strategy"
      },
      "isWithdrawnFromSFC(uint256)": {
        "notice": "returns a bool whether a withdrawalId has already been withdrawn or not"
      },
      "nextWithdrawId()": {
        "notice": "a unique ID for each withdrawal request"
      },
      "pendingWithdrawals()": {
        "notice": "Sonic (S) that is pending withdrawal after undelegating"
      },
      "platformAddress()": {
        "notice": "Address of the underlying platform"
      },
      "removePToken(uint256)": {
        "notice": "is not supported for this strategy as the Wrapped Sonic (wS) token is set at deploy time."
      },
      "restakeRewards(uint256[])": {
        "notice": "Restake any pending validator rewards for all supported validators"
      },
      "rewardTokenAddresses(uint256)": {
        "notice": "Address of the reward tokens. eg CRV, BAL, CVX, AURA"
      },
      "safeApproveAllTokens()": {
        "notice": "is not used by this strategy"
      },
      "setDefaultValidatorId(uint256)": {
        "notice": "Set the default validatorId to delegate to on deposit"
      },
      "setHarvesterAddress(address)": {
        "notice": "Set the Harvester contract that can collect rewards."
      },
      "setPTokenAddress(address,address)": {
        "notice": "is not supported for this strategy as the Wrapped Sonic (wS) token is set at deploy time."
      },
      "setRegistrator(address)": {
        "notice": "Set the address of the Registrator which can undelegate, withdraw and collect rewards"
      },
      "setRewardTokenAddresses(address[])": {
        "notice": "Set the reward token addresses. Any old addresses will be overwritten."
      },
      "sfc()": {
        "notice": "Sonic's Special Fee Contract (SFC)"
      },
      "supportValidator(uint256)": {
        "notice": "Allows a validator to be delegated to by the Registrator"
      },
      "supportedValidators(uint256)": {
        "notice": "List of supported validator IDs that can be delegated to"
      },
      "supportedValidatorsLength()": {
        "notice": "Returns the length of the supportedValidators array"
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends."
      },
      "undelegate(uint256,uint256)": {
        "notice": "Undelegate from a specific Sonic validator. This needs to be followed by a `withdrawFromSFC` two weeks later."
      },
      "unsupportValidator(uint256)": {
        "notice": "Removes a validator from the supported list. Unsupported validators can still be undelegated from, withdrawn from and rewards collected."
      },
      "validatorRegistrator()": {
        "notice": "Address of the registrator - allowed to register, exit and remove validators"
      },
      "vaultAddress()": {
        "notice": "Address of the OToken vault"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraw Wrapped Sonic (wS) from this strategy contract. Used only if some wS is lingering on the contract. That can happen only when someone sends wS directly to this contract"
      },
      "withdrawAll()": {
        "notice": "Transfer all Wrapped Sonic (wS) deposits back to the vault. This does not withdraw from delegated validators. That has to be done separately with `undelegate`. Any native S in this strategy will be withdrawn."
      },
      "withdrawFromSFC(uint256)": {
        "notice": "Withdraw native S from a previously undelegated validator. The native S is wrapped wS and transferred to the Vault."
      },
      "withdrawals(uint256)": {
        "notice": "Mapping of withdrawIds to validatorIds and undelegatedAmounts"
      },
      "wrappedSonic()": {
        "notice": "Address of Sonic's wrapped S token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6477,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6480,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6520,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6600,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "_deprecated_platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 6603,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "_deprecated_vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 6608,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6612,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6614,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 6616,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 6619,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 6623,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6627,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 3859,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "nextWithdrawId",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 3862,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "pendingWithdrawals",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 3866,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "supportedValidators",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3869,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "defaultValidatorId",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 3882,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "withdrawals",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint256,t_struct(WithdrawRequest)3876_storage)"
      },
      {
        "astId": 3885,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "validatorRegistrator",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 3889,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "163",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3529,
        "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(WithdrawRequest)3876_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SonicValidatorDelegator.WithdrawRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawRequest)3876_storage"
      },
      "t_struct(WithdrawRequest)3876_storage": {
        "encoding": "inplace",
        "label": "struct SonicValidatorDelegator.WithdrawRequest",
        "members": [
          {
            "astId": 3871,
            "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
            "label": "validatorId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3873,
            "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
            "label": "undelegatedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3875,
            "contract": "contracts/strategies/sonic/SonicStakingStrategy.sol:SonicStakingStrategy",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
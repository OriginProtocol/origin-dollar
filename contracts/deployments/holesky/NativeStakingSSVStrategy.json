{
  "address": "0x4aEAcdb5D84eDf02Dd85f3DFC1645b89D7579d62",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "platformAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            }
          ],
          "internalType": "struct InitializableAbstractStrategy.BaseStrategyConfig",
          "name": "_baseConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ssvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ssvNetwork",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAccumulator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beaconChainDepositContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AccountingConsensusRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noOfValidators",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingValidators",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethSentToVault",
          "type": "uint256"
        }
      ],
      "name": "AccountingFullyWithdrawnValidator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "AccountingGovernorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldActiveDepositedValidators",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeDepositedValidators",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBeaconChainRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beaconChainRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethToWeth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethToBeSentToVault",
          "type": "uint256"
        }
      ],
      "name": "AccountingManuallyFixed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingValidators",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethSentToVault",
          "type": "uint256"
        }
      ],
      "name": "AccountingValidatorSlashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        }
      ],
      "name": "ETHStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "FuseIntervalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "RegistratorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        }
      ],
      "name": "SSVValidatorExitCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        }
      ],
      "name": "SSVValidatorExitInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        }
      ],
      "name": "SSVValidatorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BEACON_CHAIN_DEPOSIT_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_ACCUMULATOR_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_STAKE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSV_NETWORK_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SSV_TOKEN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_TOKEN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consensusRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "depositSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doAccounting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "accountingValid",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        }
      ],
      "name": "exitSsvValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fuseIntervalEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fuseIntervalStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_activeDepositedValidators",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethToWeth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wethToBeSentToVault",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consensusRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethThresholdCheck",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wethThresholdCheck",
          "type": "uint256"
        }
      ],
      "name": "manuallyFixAccounting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes",
          "name": "sharesData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "registerSsvValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "removeSsvValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAccountingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fuseIntervalStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fuseIntervalEnd",
          "type": "uint256"
        }
      ],
      "name": "setFuseInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setRegistrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "pubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "depositDataRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ValidatorStakeData[]",
          "name": "validators",
          "type": "tuple[]"
        }
      ],
      "name": "stakeEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorRegistrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "validatorsStates",
      "outputs": [
        {
          "internalType": "enum ValidatorRegistrator.VALIDATOR_STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x32a95bad479c439018f11c6c93e19fc7fd7edc0fdbcdc15009a32231d7967c5c",
  "receipt": {
    "to": null,
    "from": "0x1b94CA50D3Ad9f8368851F8526132272d1a5028C",
    "contractAddress": "0x4aEAcdb5D84eDf02Dd85f3DFC1645b89D7579d62",
    "transactionIndex": 26,
    "gasUsed": "4123386",
    "logsBloom": "0x
    "blockHash": "0x7accf851e0f53d2da70bb20741170ae10a24b9724ad337e6e7ec6f032a75da32",
    "transactionHash": "0x32a95bad479c439018f11c6c93e19fc7fd7edc0fdbcdc15009a32231d7967c5c",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 1429889,
        "transactionHash": "0x32a95bad479c439018f11c6c93e19fc7fd7edc0fdbcdc15009a32231d7967c5c",
        "address": "0x4aEAcdb5D84eDf02Dd85f3DFC1645b89D7579d62",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001b94ca50d3ad9f8368851f8526132272d1a5028c"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x7accf851e0f53d2da70bb20741170ae10a24b9724ad337e6e7ec6f032a75da32"
      }
    ],
    "blockNumber": 1429889,
    "cumulativeGasUsed": "6291081",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0x19d2bAaBA949eFfa163bFB9efB53ed8701aA5dD9"
    ],
    "0x94373a4919B3240D86eA41593D5eBa789FEF3848",
    "0xad45A78180961079BFaeEe349704F411dfF947C6",
    "0x38A4794cCEd47d3baf7370CcC43B560D3a1beEFA",
    "0x590B781b511e953dbFC49e7E7864A6E787aFBDCc",
    "0x4242424242424242424242424242424242424242"
  ],
  "numDeployments": 2,
  "solcInputHash": "46be8b80ad6bb26f70e58a31071e073e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct InitializableAbstractStrategy.BaseStrategyConfig\",\"name\":\"_baseConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ssvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ssvNetwork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAccumulator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beaconChainDepositContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AccountingConsensusRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noOfValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethSentToVault\",\"type\":\"uint256\"}],\"name\":\"AccountingFullyWithdrawnValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AccountingGovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldActiveDepositedValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeDepositedValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBeaconChainRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beaconChainRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToWeth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethToBeSentToVault\",\"type\":\"uint256\"}],\"name\":\"AccountingManuallyFixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethSentToVault\",\"type\":\"uint256\"}],\"name\":\"AccountingValidatorSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"}],\"name\":\"ETHStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"FuseIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RegistratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"SSVValidatorExitCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"SSVValidatorExitInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"SSVValidatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BEACON_CHAIN_DEPOSIT_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ACCUMULATOR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSV_NETWORK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSV_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consensusRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"depositSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doAccounting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"accountingValid\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"exitSsvValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuseIntervalEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuseIntervalStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeDepositedValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethToWeth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wethToBeSentToVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consensusRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethThresholdCheck\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wethThresholdCheck\",\"type\":\"uint256\"}],\"name\":\"manuallyFixAccounting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes\",\"name\":\"sharesData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"registerSsvValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"removeSsvValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAccountingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fuseIntervalStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fuseIntervalEnd\",\"type\":\"uint256\"}],\"name\":\"setFuseInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRegistrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ValidatorStakeData[]\",\"name\":\"validators\",\"type\":\"tuple[]\"}],\"name\":\"stakeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorRegistrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validatorsStates\",\"outputs\":[{\"internalType\":\"enum ValidatorRegistrator.VALIDATOR_STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of weth asset\"},\"returns\":{\"balance\":\"   Total value of (W)ETH\"}},\"constructor\":{\"params\":{\"_baseConfig\":\"Base strategy config with platformAddress (ERC-4626 Vault contract), eg sfrxETH or sDAI, and vaultAddress (OToken Vault contract), eg VaultProxy or OETHVaultProxy\",\"_beaconChainDepositContract\":\"Address of the beacon chain deposit contract\",\"_feeAccumulator\":\"Address of the fee accumulator receiving execution layer validator rewards\",\"_ssvNetwork\":\"Address of the SSV Network contract\",\"_ssvToken\":\"Address of the Erc20 SSV Token contract\",\"_wethAddress\":\"Address of the Erc20 WETH Token contract\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"Amount of assets that were transferred to the strategy by the vault.\",\"_asset\":\"Address of asset to deposit. Has to be WETH.\"}},\"depositSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))\":{\"details\":\"A SSV cluster is defined by the SSVOwnerAddress and the set of operatorIds. uses \\\"onlyStrategist\\\" modifier so continuous front-running can't DOS our maintenance service that tries to top up SSV tokens.\",\"params\":{\"cluster\":\"The SSV cluster details that must be derived from emitted events from the SSVNetwork contract.\"}},\"doAccounting()\":{\"details\":\"This function could in theory be permission-less but lets allow only the Registrator (Defender Action) to call it for now.\"},\"getRewardTokenAddresses()\":{\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"initialize(address[],address[],address[])\":{\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_rewardTokenAddresses\":\"Address of reward token for platform\"}},\"manuallyFixAccounting(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"allow the accounting governor to fix the accounting of this strategy and unpause\",\"params\":{\"_activeDepositedValidators\":\"the override value of activeDepositedValidators\",\"_consensusRewards\":\"the override value for consensusRewards\",\"_ethThresholdCheck\":\"maximum allowed ETH balance on the contract for the function to run\",\"_ethToWeth\":\"the amount of ETH to be converted to WETH\",\"_wethThresholdCheck\":\"maximum allowed WETH balance on the contract for the function to run        the above 2 checks are done so transaction doesn't get front run and cause        unexpected behaviour\",\"_wethToBeSentToVault\":\"the amount of WETH to be sent to the Vault\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removePToken(uint256)\":{\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"setHarvesterAddress(address)\":{\"params\":{\"_harvesterAddress\":\"Address of the harvester contract.\"}},\"setPTokenAddress(address,address)\":{\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"params\":{\"_rewardTokenAddresses\":\"Array of reward token addresses\"}},\"stakeEth((bytes,bytes,bytes32)[])\":{\"params\":{\"validators\":\"A list of validator data needed to stake. The `ValidatorStakeData` struct contains the pubkey, signature and depositDataRoot. Only the registrator can call this function.\"}},\"supportsAsset(address)\":{\"params\":{\"_asset\":\"The address of the asset token.\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of WETH to withdraw\",\"_asset\":\"WETH to withdraw\",\"_recipient\":\"Address to receive withdrawn assets\"}}},\"stateVariables\":{\"FEE_ACCUMULATOR_ADDRESS\":{\"details\":\"this address will receive Execution layer rewards - These are rewards earned for executing transactions on the Ethereum network as part of block proposals. They include priority fees (fees paid by users for their transactions to be included) and MEV rewards (rewards for arranging transactions in a way that benefits the validator).\"}},\"title\":\"Native Staking SSV Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BEACON_CHAIN_DEPOSIT_CONTRACT()\":{\"notice\":\"The address of the beacon chain deposit contract\"},\"FEE_ACCUMULATOR_ADDRESS()\":{\"notice\":\"Fee collector address\"},\"MAX_STAKE()\":{\"notice\":\"The maximum amount of ETH that can be staked by a validator\"},\"SSV_NETWORK_ADDRESS()\":{\"notice\":\"The address of the SSV Network contract used to interface with\"},\"SSV_TOKEN_ADDRESS()\":{\"notice\":\"SSV ERC20 token that serves as a payment for operating SSV validators\"},\"VAULT_ADDRESS()\":{\"notice\":\"Address of the OETH Vault proxy contract\"},\"WETH_TOKEN_ADDRESS()\":{\"notice\":\"The address of the Wrapped ETH (WETH) token contract\"},\"accountingGovernor()\":{\"notice\":\"Governor that can manually correct the accounting\"},\"assetToPToken(address)\":{\"notice\":\"asset => pToken (Platform Specific Token Address)\"},\"checkBalance(address)\":{\"notice\":\"Returns the total value of (W)ETH that is staked to the validators and WETH deposits that are still to be staked. This does not include ETH from consensus rewards sitting in this strategy or ETH from MEV rewards in the FeeAccumulator. These rewards are harvested and sent to the Dripper so will eventually be sent to the Vault as WETH.\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"notice\":\"Collect accumulated reward token and send to Vault.\"},\"consensusRewards()\":{\"notice\":\"Keeps track of the total consensus rewards swept from the beacon chain\"},\"deposit(address,uint256)\":{\"notice\":\"Unlike other strategies, this does not deposit assets into the underlying platform. It just checks the asset is WETH and emits the Deposit event. To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used. Will NOT revert if the strategy is paused from an accounting failure.\"},\"depositAll()\":{\"notice\":\"Unlike other strategies, this does not deposit assets into the underlying platform. It just emits the Deposit event. To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used. Will NOT revert if the strategy is paused from an accounting failure.\"},\"depositSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))\":{\"notice\":\"Deposits more SSV Tokens to the SSV Network contract which is used to pay the SSV Operators.\"},\"doAccounting()\":{\"notice\":\"This notion page offers a good explanation of how the accounting functions https://www.notion.so/originprotocol/Limited-simplified-native-staking-accounting-67a217c8420d40678eb943b9da0ee77d In short, after dividing by 32, if the ETH remaining on the contract falls between 0 and fuseIntervalStart, the accounting function will treat that ETH as Beacon chain consensus rewards. On the contrary, if after dividing by 32, the ETH remaining on the contract falls between fuseIntervalEnd and 32, the accounting function will treat that as a validator slashing.Perform the accounting attributing beacon chain ETH to either full or partial withdrawals. Returns true when accounting is valid and fuse isn't \\\"blown\\\". Returns false when fuse is blown.\"},\"exitSsvValidator(bytes,uint64[])\":{\"notice\":\"Exit a validator from the Beacon chain. The staked ETH will eventually swept to this native staking strategy. Only the registrator can call this function.\"},\"fuseIntervalEnd()\":{\"notice\":\"end of fuse interval\"},\"fuseIntervalStart()\":{\"notice\":\"start of fuse interval\"},\"getRewardTokenAddresses()\":{\"notice\":\"Get the reward token addresses.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"harvesterAddress()\":{\"notice\":\"Address of the Harvester contract allowed to collect reward tokens\"},\"initialize(address[],address[],address[])\":{\"notice\":\"initialize function, to set up initial internal state\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"platformAddress()\":{\"notice\":\"Address of the underlying platform\"},\"registerSsvValidator(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,bool,uint256))\":{\"notice\":\"Registers a new validator in the SSV Cluster. Only the registrator can call this function.\"},\"removePToken(uint256)\":{\"notice\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\"},\"removeSsvValidator(bytes,uint64[],(uint32,uint64,uint64,bool,uint256))\":{\"notice\":\"Remove a validator from the SSV Cluster. Make sure `exitSsvValidator` is called before and the validate has exited the Beacon chain. If removed before the validator has exited the beacon chain will result in the validator being slashed. Only the registrator can call this function.\"},\"rewardTokenAddresses(uint256)\":{\"notice\":\"Address of the reward tokens. eg CRV, BAL, CVX, AURA\"},\"safeApproveAllTokens()\":{\"notice\":\"Approves the SSV Network contract to transfer SSV tokens for deposits\"},\"setFuseInterval(uint256,uint256)\":{\"notice\":\"set fuse interval values\"},\"setHarvesterAddress(address)\":{\"notice\":\"Set the Harvester contract that can collect rewards.\"},\"setPTokenAddress(address,address)\":{\"notice\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\"},\"setRegistrator(address)\":{\"notice\":\"Set the address of the registrator which can register, exit and remove validators\"},\"setRewardTokenAddresses(address[])\":{\"notice\":\"Set the reward token addresses. Any old addresses will be overwritten.\"},\"stakeEth((bytes,bytes,bytes32)[])\":{\"notice\":\"Stakes WETH to the node validators\"},\"supportsAsset(address)\":{\"notice\":\"Returns bool indicating whether asset is supported by strategy.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\"},\"validatorRegistrator()\":{\"notice\":\"Address of the registrator - allowed to register, exit and remove validators\"},\"validatorsStates(bytes32)\":{\"notice\":\"State of the validators keccak256(pubKey) => state\"},\"vaultAddress()\":{\"notice\":\"Address of the OToken vault\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraw WETH from this contract. Used only if some WETH for is lingering on the contract. That can happen when:   - the deposit was not a multiple of 32 WETH   - someone sent WETH directly to this contract Will NOT revert if the strategy is paused from an accounting failure.\"},\"withdrawAll()\":{\"notice\":\"transfer all WETH deposits back to the vault. This does not withdraw from the validators. That has to be done separately with the `exitSsvValidator` and `removeSsvValidator` operations. This does not withdraw any execution rewards from the FeeAccumulator or consensus rewards in this strategy. Any ETH in this strategy that was swept from a full validator withdrawal will not be withdrawn. ETH from full validator withdrawals is sent to the Vault using `doAccounting`. Will NOT revert if the strategy is paused from an accounting failure.\"}},\"notice\":\"Strategy to deploy funds into DVT validators powered by the SSV Network\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol\":\"NativeStakingSSVStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x598f90bdbc854250bbd5991426bfb43367207e64e33109c41aa8b54323fd8d8e\",\"license\":\"MIT\"},\"contracts/interfaces/ISSVNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Cluster {\\n    uint32 validatorCount;\\n    uint64 networkFeeIndex;\\n    uint64 index;\\n    bool active;\\n    uint256 balance;\\n}\\n\\ninterface ISSVNetwork {\\n    error ApprovalNotWithinTimeframe();\\n    error CallerNotOwner();\\n    error CallerNotWhitelisted();\\n    error ClusterAlreadyEnabled();\\n    error ClusterDoesNotExists();\\n    error ClusterIsLiquidated();\\n    error ClusterNotLiquidatable();\\n    error ExceedValidatorLimit();\\n    error FeeExceedsIncreaseLimit();\\n    error FeeIncreaseNotAllowed();\\n    error FeeTooHigh();\\n    error FeeTooLow();\\n    error IncorrectClusterState();\\n    error IncorrectValidatorState();\\n    error InsufficientBalance();\\n    error InvalidOperatorIdsLength();\\n    error InvalidPublicKeyLength();\\n    error MaxValueExceeded();\\n    error NewBlockPeriodIsBelowMinimum();\\n    error NoFeeDeclared();\\n    error NotAuthorized();\\n    error OperatorAlreadyExists();\\n    error OperatorDoesNotExist();\\n    error OperatorsListNotUnique();\\n    error SameFeeChangeNotAllowed();\\n    error TargetModuleDoesNotExist();\\n    error TokenTransferFailed();\\n    error UnsortedOperatorsList();\\n    error ValidatorAlreadyExists();\\n    error ValidatorDoesNotExist();\\n\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n    event BeaconUpgraded(address indexed beacon);\\n    event ClusterDeposited(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        uint256 value,\\n        Cluster cluster\\n    );\\n    event ClusterLiquidated(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        Cluster cluster\\n    );\\n    event ClusterReactivated(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        Cluster cluster\\n    );\\n    event ClusterWithdrawn(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        uint256 value,\\n        Cluster cluster\\n    );\\n    event DeclareOperatorFeePeriodUpdated(uint64 value);\\n    event ExecuteOperatorFeePeriodUpdated(uint64 value);\\n    event FeeRecipientAddressUpdated(\\n        address indexed owner,\\n        address recipientAddress\\n    );\\n    event Initialized(uint8 version);\\n    event LiquidationThresholdPeriodUpdated(uint64 value);\\n    event MinimumLiquidationCollateralUpdated(uint256 value);\\n    event NetworkEarningsWithdrawn(uint256 value, address recipient);\\n    event NetworkFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event OperatorAdded(\\n        uint64 indexed operatorId,\\n        address indexed owner,\\n        bytes publicKey,\\n        uint256 fee\\n    );\\n    event OperatorFeeDeclarationCancelled(\\n        address indexed owner,\\n        uint64 indexed operatorId\\n    );\\n    event OperatorFeeDeclared(\\n        address indexed owner,\\n        uint64 indexed operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n    event OperatorFeeExecuted(\\n        address indexed owner,\\n        uint64 indexed operatorId,\\n        uint256 blockNumber,\\n        uint256 fee\\n    );\\n    event OperatorFeeIncreaseLimitUpdated(uint64 value);\\n    event OperatorMaximumFeeUpdated(uint64 maxFee);\\n    event OperatorRemoved(uint64 indexed operatorId);\\n    event OperatorWhitelistUpdated(\\n        uint64 indexed operatorId,\\n        address whitelisted\\n    );\\n    event OperatorWithdrawn(\\n        address indexed owner,\\n        uint64 indexed operatorId,\\n        uint256 value\\n    );\\n    event OwnershipTransferStarted(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event Upgraded(address indexed implementation);\\n    event ValidatorAdded(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        bytes publicKey,\\n        bytes shares,\\n        Cluster cluster\\n    );\\n    event ValidatorExited(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        bytes publicKey\\n    );\\n    event ValidatorRemoved(\\n        address indexed owner,\\n        uint64[] operatorIds,\\n        bytes publicKey,\\n        Cluster cluster\\n    );\\n\\n    fallback() external;\\n\\n    function acceptOwnership() external;\\n\\n    function cancelDeclaredOperatorFee(uint64 operatorId) external;\\n\\n    function declareOperatorFee(uint64 operatorId, uint256 fee) external;\\n\\n    function deposit(\\n        address clusterOwner,\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function executeOperatorFee(uint64 operatorId) external;\\n\\n    function exitValidator(bytes memory publicKey, uint64[] memory operatorIds)\\n        external;\\n\\n    function getVersion() external pure returns (string memory version);\\n\\n    function initialize(\\n        address token_,\\n        address ssvOperators_,\\n        address ssvClusters_,\\n        address ssvDAO_,\\n        address ssvViews_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint256 minimumLiquidationCollateral_,\\n        uint32 validatorsPerOperatorLimit_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_,\\n        uint64 operatorMaxFeeIncrease_\\n    ) external;\\n\\n    function liquidate(\\n        address clusterOwner,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function proxiableUUID() external view returns (bytes32);\\n\\n    function reactivate(\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function reduceOperatorFee(uint64 operatorId, uint256 fee) external;\\n\\n    function registerOperator(bytes memory publicKey, uint256 fee)\\n        external\\n        returns (uint64 id);\\n\\n    function registerValidator(\\n        bytes memory publicKey,\\n        uint64[] memory operatorIds,\\n        bytes memory sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function removeOperator(uint64 operatorId) external;\\n\\n    function removeValidator(\\n        bytes memory publicKey,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function renounceOwnership() external;\\n\\n    function setFeeRecipientAddress(address recipientAddress) external;\\n\\n    function setOperatorWhitelist(uint64 operatorId, address whitelisted)\\n        external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function updateDeclareOperatorFeePeriod(uint64 timeInSeconds) external;\\n\\n    function updateExecuteOperatorFeePeriod(uint64 timeInSeconds) external;\\n\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external;\\n\\n    function updateMaximumOperatorFee(uint64 maxFee) external;\\n\\n    function updateMinimumLiquidationCollateral(uint256 amount) external;\\n\\n    function updateModule(uint8 moduleId, address moduleAddress) external;\\n\\n    function updateNetworkFee(uint256 fee) external;\\n\\n    function updateOperatorFeeIncreaseLimit(uint64 percentage) external;\\n\\n    function upgradeTo(address newImplementation) external;\\n\\n    function upgradeToAndCall(address newImplementation, bytes memory data)\\n        external\\n        payable;\\n\\n    function withdraw(\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    function withdrawAllOperatorEarnings(uint64 operatorId) external;\\n\\n    function withdrawNetworkEarnings(uint256 amount) external;\\n\\n    function withdrawOperatorEarnings(uint64 operatorId, uint256 amount)\\n        external;\\n}\\n\",\"keccak256\":\"0x76e2c5148727b72752939b06fee7abc1f732c18970b8c7db7fe7cdfe74629d36\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n\\n    function weth() external view returns (address);\\n\\n    function cacheWETHAssetIndex() external;\\n\\n    function wethAssetIndex() external view returns (uint256);\\n\\n    function initialize(address, address) external;\\n\\n    function setAdminImpl(address) external;\\n}\\n\",\"keccak256\":\"0xe8ab2f09127dc86bda14d2ad7f58d4f5ef214959101742f0dd977be3599f9d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x05b7dce6c24d3cd4e48b5c6346d86e5e40ecc3291bcdf3f3ef091c98fc826519\",\"license\":\"MIT\"},\"contracts/strategies/NativeStaking/FeeAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Governable } from \\\"../../governance/Governable.sol\\\";\\n\\n/**\\n * @title Fee Accumulator for Native Staking SSV Strategy\\n * @notice Receives execution rewards which includes tx fees and\\n * MEV rewards like tx priority and tx ordering.\\n * It does NOT include swept ETH from beacon chain consensus rewards or full validator withdrawals.\\n * @author Origin Protocol Inc\\n */\\ncontract FeeAccumulator is Governable {\\n    /// @notice The address of the Native Staking Strategy\\n    address public immutable STRATEGY;\\n\\n    /**\\n     * @param _strategy Address of the Native Staking Strategy\\n     */\\n    constructor(address _strategy) {\\n        STRATEGY = _strategy;\\n    }\\n\\n    /**\\n     * @notice sends all ETH in this FeeAccumulator contract to the Native Staking Strategy.\\n     * @return eth The amount of execution rewards that were sent to the Native Staking Strategy\\n     */\\n    function collect() external returns (uint256 eth) {\\n        require(msg.sender == STRATEGY, \\\"Caller is not the Strategy\\\");\\n\\n        eth = address(this).balance;\\n        if (eth > 0) {\\n            // Send the ETH to the Native Staking Strategy\\n            Address.sendValue(payable(STRATEGY), eth);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf47bcc46ce70f649f061bec3d2303f376a15700ba18fe471fba823f60bdfed8b\",\"license\":\"MIT\"},\"contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { InitializableAbstractStrategy } from \\\"../../utils/InitializableAbstractStrategy.sol\\\";\\nimport { ISSVNetwork, Cluster } from \\\"../../interfaces/ISSVNetwork.sol\\\";\\nimport { IWETH9 } from \\\"../../interfaces/IWETH9.sol\\\";\\nimport { FeeAccumulator } from \\\"./FeeAccumulator.sol\\\";\\nimport { ValidatorAccountant } from \\\"./ValidatorAccountant.sol\\\";\\nimport { Cluster } from \\\"../../interfaces/ISSVNetwork.sol\\\";\\n\\nstruct ValidatorStakeData {\\n    bytes pubkey;\\n    bytes signature;\\n    bytes32 depositDataRoot;\\n}\\n\\n/// @title Native Staking SSV Strategy\\n/// @notice Strategy to deploy funds into DVT validators powered by the SSV Network\\n/// @author Origin Protocol Inc\\ncontract NativeStakingSSVStrategy is\\n    ValidatorAccountant,\\n    InitializableAbstractStrategy\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice SSV ERC20 token that serves as a payment for operating SSV validators\\n    address public immutable SSV_TOKEN_ADDRESS;\\n    /// @notice Fee collector address\\n    /// @dev this address will receive Execution layer rewards - These are rewards earned for\\n    /// executing transactions on the Ethereum network as part of block proposals. They include\\n    /// priority fees (fees paid by users for their transactions to be included) and MEV rewards\\n    /// (rewards for arranging transactions in a way that benefits the validator).\\n    address public immutable FEE_ACCUMULATOR_ADDRESS;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /// @param _baseConfig Base strategy config with platformAddress (ERC-4626 Vault contract), eg sfrxETH or sDAI,\\n    /// and vaultAddress (OToken Vault contract), eg VaultProxy or OETHVaultProxy\\n    /// @param _wethAddress Address of the Erc20 WETH Token contract\\n    /// @param _ssvToken Address of the Erc20 SSV Token contract\\n    /// @param _ssvNetwork Address of the SSV Network contract\\n    /// @param _feeAccumulator Address of the fee accumulator receiving execution layer validator rewards\\n    /// @param _beaconChainDepositContract Address of the beacon chain deposit contract\\n    constructor(\\n        BaseStrategyConfig memory _baseConfig,\\n        address _wethAddress,\\n        address _ssvToken,\\n        address _ssvNetwork,\\n        address _feeAccumulator,\\n        address _beaconChainDepositContract\\n    )\\n        InitializableAbstractStrategy(_baseConfig)\\n        ValidatorAccountant(\\n            _wethAddress,\\n            _baseConfig.vaultAddress,\\n            _beaconChainDepositContract,\\n            _ssvNetwork\\n        )\\n    {\\n        SSV_TOKEN_ADDRESS = _ssvToken;\\n        FEE_ACCUMULATOR_ADDRESS = _feeAccumulator;\\n    }\\n\\n    /// @notice initialize function, to set up initial internal state\\n    /// @param _rewardTokenAddresses Address of reward token for platform\\n    /// @param _assets Addresses of initial supported assets\\n    /// @param _pTokens Platform Token corresponding addresses\\n    function initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    /// @dev Convert accumulated ETH to WETH and send to the Harvester.\\n    /// Will revert if the strategy is paused for accounting.\\n    function _collectRewardTokens() internal override whenNotPaused {\\n        // collect ETH from execution rewards from the fee accumulator\\n        uint256 executionRewards = FeeAccumulator(FEE_ACCUMULATOR_ADDRESS)\\n            .collect();\\n\\n        // total ETH rewards to be harvested = execution rewards + consensus rewards\\n        uint256 ethRewards = executionRewards + consensusRewards;\\n\\n        require(\\n            address(this).balance >= ethRewards,\\n            \\\"insufficient eth balance\\\"\\n        );\\n\\n        if (ethRewards > 0) {\\n            // reset the counter keeping track of beacon chain consensus rewards\\n            consensusRewards = 0;\\n\\n            // Convert ETH rewards to WETH\\n            IWETH9(WETH_TOKEN_ADDRESS).deposit{ value: ethRewards }();\\n\\n            emit RewardTokenCollected(\\n                harvesterAddress,\\n                WETH_TOKEN_ADDRESS,\\n                ethRewards\\n            );\\n            IERC20(WETH_TOKEN_ADDRESS).safeTransfer(\\n                harvesterAddress,\\n                ethRewards\\n            );\\n        }\\n    }\\n\\n    /// @notice Unlike other strategies, this does not deposit assets into the underlying platform.\\n    /// It just checks the asset is WETH and emits the Deposit event.\\n    /// To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used.\\n    /// Will NOT revert if the strategy is paused from an accounting failure.\\n    /// @param _asset Address of asset to deposit. Has to be WETH.\\n    /// @param _amount Amount of assets that were transferred to the strategy by the vault.\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_asset == WETH_TOKEN_ADDRESS, \\\"Unsupported asset\\\");\\n        _deposit(_asset, _amount);\\n    }\\n\\n    /// @dev Deposit WETH to this strategy so it can later be staked into a validator.\\n    /// @param _asset Address of WETH\\n    /// @param _amount Amount of WETH to deposit\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n        /*\\n         * We could do a check here that would revert when \\\"_amount % 32 ether != 0\\\". With the idea of\\n         * not allowing deposits that will result in WETH sitting on the strategy after all the possible batches\\n         * of 32ETH have been staked.\\n         * But someone could mess with our strategy by sending some WETH to it. And we might want to deposit just\\n         * enough WETH to add it up to 32 so it can be staked. For that reason the check is left out.\\n         *\\n         * WETH sitting on the strategy won't interfere with the accounting since accounting only operates on ETH.\\n         */\\n        emit Deposit(_asset, address(0), _amount);\\n    }\\n\\n    /// @notice Unlike other strategies, this does not deposit assets into the underlying platform.\\n    /// It just emits the Deposit event.\\n    /// To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used.\\n    /// Will NOT revert if the strategy is paused from an accounting failure.\\n    function depositAll() external override onlyVault nonReentrant {\\n        uint256 wethBalance = IERC20(WETH_TOKEN_ADDRESS).balanceOf(\\n            address(this)\\n        );\\n        if (wethBalance > 0) {\\n            _deposit(WETH_TOKEN_ADDRESS, wethBalance);\\n        }\\n    }\\n\\n    /// @notice Withdraw WETH from this contract. Used only if some WETH for is lingering on the contract. That\\n    /// can happen when:\\n    ///   - the deposit was not a multiple of 32 WETH\\n    ///   - someone sent WETH directly to this contract\\n    /// Will NOT revert if the strategy is paused from an accounting failure.\\n    /// @param _recipient Address to receive withdrawn assets\\n    /// @param _asset WETH to withdraw\\n    /// @param _amount Amount of WETH to withdraw\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        _withdraw(_recipient, _asset, _amount);\\n    }\\n\\n    function _withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) internal {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\n\\n        emit Withdrawal(_asset, address(0), _amount);\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\n    }\\n\\n    /// @notice transfer all WETH deposits back to the vault.\\n    /// This does not withdraw from the validators. That has to be done separately with the\\n    /// `exitSsvValidator` and `removeSsvValidator` operations.\\n    /// This does not withdraw any execution rewards from the FeeAccumulator or\\n    /// consensus rewards in this strategy.\\n    /// Any ETH in this strategy that was swept from a full validator withdrawal will not be withdrawn.\\n    /// ETH from full validator withdrawals is sent to the Vault using `doAccounting`.\\n    /// Will NOT revert if the strategy is paused from an accounting failure.\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        uint256 wethBalance = IERC20(WETH_TOKEN_ADDRESS).balanceOf(\\n            address(this)\\n        );\\n        if (wethBalance > 0) {\\n            _withdraw(vaultAddress, WETH_TOKEN_ADDRESS, wethBalance);\\n        }\\n    }\\n\\n    function _abstractSetPToken(address _asset, address) internal override {}\\n\\n    /// @notice Returns the total value of (W)ETH that is staked to the validators\\n    /// and WETH deposits that are still to be staked.\\n    /// This does not include ETH from consensus rewards sitting in this strategy\\n    /// or ETH from MEV rewards in the FeeAccumulator. These rewards are harvested\\n    /// and sent to the Dripper so will eventually be sent to the Vault as WETH.\\n    /// @param _asset      Address of weth asset\\n    /// @return balance    Total value of (W)ETH\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        require(_asset == WETH_TOKEN_ADDRESS, \\\"Unsupported asset\\\");\\n\\n        balance =\\n            // add the ETH that has been staked in validators\\n            activeDepositedValidators *\\n            32 ether +\\n            // add the WETH in the strategy from deposits that are still to be staked\\n            IERC20(WETH_TOKEN_ADDRESS).balanceOf(address(this));\\n    }\\n\\n    function pause() external onlyStrategist {\\n        _pause();\\n    }\\n\\n    /// @notice Returns bool indicating whether asset is supported by strategy.\\n    /// @param _asset The address of the asset token.\\n    function supportsAsset(address _asset) public view override returns (bool) {\\n        return _asset == WETH_TOKEN_ADDRESS;\\n    }\\n\\n    /// @notice Approves the SSV Network contract to transfer SSV tokens for deposits\\n    function safeApproveAllTokens() external override {\\n        /// @dev Approves the SSV Network contract to transfer SSV tokens for deposits\\n        IERC20(SSV_TOKEN_ADDRESS).approve(\\n            SSV_NETWORK_ADDRESS,\\n            type(uint256).max\\n        );\\n    }\\n\\n    /**\\n     * @notice Only accept ETH from the FeeAccumulator and the WETH contract - required when \\n     * unwrapping WETH just before staking it to the validator\\n     * @dev don't want to receive donations from anyone else as this will\\n     * mess with the accounting of the consensus rewards and validator full withdrawals\\n     */\\n    receive() external payable {\\n        require(\\n            msg.sender == FEE_ACCUMULATOR_ADDRESS || msg.sender == WETH_TOKEN_ADDRESS,\\n            \\\"eth not from allowed contracts\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf591c47516bc68b9b0a220b7d7c6b96f87315b03ea8636b47ca5c6540e59fb85\",\"license\":\"MIT\"},\"contracts/strategies/NativeStaking/ValidatorAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ValidatorRegistrator } from \\\"./ValidatorRegistrator.sol\\\";\\nimport { IWETH9 } from \\\"../../interfaces/IWETH9.sol\\\";\\n\\n/// @title Validator Accountant\\n/// @notice Attributes the ETH swept from beacon chain validators to this strategy contract\\n/// as either full or partial withdrawals. Partial withdrawals being consensus rewards.\\n/// Full withdrawals are from exited validators.\\n/// @author Origin Protocol Inc\\nabstract contract ValidatorAccountant is ValidatorRegistrator {\\n    /// @notice The maximum amount of ETH that can be staked by a validator\\n    /// @dev this can change in the future with EIP-7251, Increase the MAX_EFFECTIVE_BALANCE\\n    uint256 public constant MAX_STAKE = 32 ether;\\n\\n    /// @notice Keeps track of the total consensus rewards swept from the beacon chain\\n    uint256 public consensusRewards = 0;\\n\\n    /// @notice start of fuse interval\\n    uint256 public fuseIntervalStart = 0;\\n    /// @notice end of fuse interval\\n    uint256 public fuseIntervalEnd = 0;\\n    /// @notice Governor that can manually correct the accounting\\n    address public accountingGovernor;\\n\\n    uint256[50] private __gap;\\n\\n    event FuseIntervalUpdated(uint256 start, uint256 end);\\n    event AccountingFullyWithdrawnValidator(\\n        uint256 noOfValidators,\\n        uint256 remainingValidators,\\n        uint256 wethSentToVault\\n    );\\n    event AccountingValidatorSlashed(\\n        uint256 remainingValidators,\\n        uint256 wethSentToVault\\n    );\\n    event AccountingGovernorChanged(address newAddress);\\n    event AccountingConsensusRewards(uint256 amount);\\n\\n    event AccountingManuallyFixed(\\n        uint256 oldActiveDepositedValidators,\\n        uint256 activeDepositedValidators,\\n        uint256 oldBeaconChainRewards,\\n        uint256 beaconChainRewards,\\n        uint256 ethToWeth,\\n        uint256 wethToBeSentToVault\\n    );\\n\\n    /// @dev Throws if called by any account other than the Accounting Governor\\n    modifier onlyAccountingGovernor() {\\n        require(\\n            msg.sender == accountingGovernor,\\n            \\\"Caller is not the Accounting Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _wethAddress Address of the Erc20 WETH Token contract\\n    /// @param _vaultAddress Address of the Vault\\n    /// @param _beaconChainDepositContract Address of the beacon chain deposit contract\\n    /// @param _ssvNetwork Address of the SSV Network contract\\n    constructor(\\n        address _wethAddress,\\n        address _vaultAddress,\\n        address _beaconChainDepositContract,\\n        address _ssvNetwork\\n    )\\n        ValidatorRegistrator(\\n            _wethAddress,\\n            _vaultAddress,\\n            _beaconChainDepositContract,\\n            _ssvNetwork\\n        )\\n    {}\\n\\n    function setAccountingGovernor(address _address) external onlyGovernor {\\n        emit AccountingGovernorChanged(_address);\\n        accountingGovernor = _address;\\n    }\\n\\n    /// @notice set fuse interval values\\n    function setFuseInterval(\\n        uint256 _fuseIntervalStart,\\n        uint256 _fuseIntervalEnd\\n    ) external onlyGovernor {\\n        require(\\n            _fuseIntervalStart < _fuseIntervalEnd &&\\n                _fuseIntervalStart < 32 ether &&\\n                _fuseIntervalEnd < 32 ether &&\\n                _fuseIntervalEnd - _fuseIntervalStart >= 4 ether,\\n            \\\"incorrect fuse interval\\\"\\n        );\\n\\n        emit FuseIntervalUpdated(_fuseIntervalStart, _fuseIntervalEnd);\\n\\n        fuseIntervalStart = _fuseIntervalStart;\\n        fuseIntervalEnd = _fuseIntervalEnd;\\n    }\\n\\n    /* solhint-disable max-line-length */\\n    /// This notion page offers a good explanation of how the accounting functions\\n    /// https://www.notion.so/originprotocol/Limited-simplified-native-staking-accounting-67a217c8420d40678eb943b9da0ee77d\\n    /// In short, after dividing by 32, if the ETH remaining on the contract falls between 0 and fuseIntervalStart,\\n    /// the accounting function will treat that ETH as Beacon chain consensus rewards.\\n    /// On the contrary, if after dividing by 32, the ETH remaining on the contract falls between fuseIntervalEnd and 32,\\n    /// the accounting function will treat that as a validator slashing.\\n    /// @notice Perform the accounting attributing beacon chain ETH to either full or partial withdrawals. Returns true when\\n    /// accounting is valid and fuse isn't \\\"blown\\\". Returns false when fuse is blown.\\n    /// @dev This function could in theory be permission-less but lets allow only the Registrator (Defender Action) to call it\\n    /// for now.\\n    /* solhint-enable max-line-length */\\n    function doAccounting()\\n        external\\n        onlyRegistrator\\n        whenNotPaused\\n        returns (bool accountingValid)\\n    {\\n        if (address(this).balance < consensusRewards) {\\n            // pause and fail the accounting\\n            _pause();\\n            return false;\\n        }\\n\\n        // Calculate all the new ETH that has been swept to the contract since the last accounting\\n        uint256 newSweptETH = address(this).balance - consensusRewards;\\n        accountingValid = true;\\n\\n        // send the ETH that is from fully withdrawn validators to the Vault\\n        if (newSweptETH >= MAX_STAKE) {\\n            uint256 fullyWithdrawnValidators = newSweptETH / MAX_STAKE;\\n            activeDepositedValidators -= fullyWithdrawnValidators;\\n\\n            uint256 wethToVault = MAX_STAKE * fullyWithdrawnValidators;\\n            IWETH9(WETH_TOKEN_ADDRESS).deposit{ value: wethToVault }();\\n            IWETH9(WETH_TOKEN_ADDRESS).transfer(VAULT_ADDRESS, wethToVault);\\n\\n            emit AccountingFullyWithdrawnValidator(\\n                fullyWithdrawnValidators,\\n                activeDepositedValidators,\\n                wethToVault\\n            );\\n        }\\n\\n        uint256 ethRemaining = address(this).balance - consensusRewards;\\n        // should be less than a whole validator stake\\n        require(ethRemaining < 32 ether, \\\"unexpected accounting\\\");\\n\\n        // If no Beacon chain consensus rewards swept\\n        if (ethRemaining == 0) {\\n            // do nothing\\n            return accountingValid;\\n        }\\n        // Beacon chain consensus rewards swept (partial validator withdrawals)\\n        else if (ethRemaining < fuseIntervalStart) {\\n            // solhint-disable-next-line reentrancy\\n            consensusRewards += ethRemaining;\\n            emit AccountingConsensusRewards(ethRemaining);\\n        }\\n        // Beacon chain consensus rewards swept but also a slashed validator fully exited\\n        else if (ethRemaining > fuseIntervalEnd) {\\n            IWETH9(WETH_TOKEN_ADDRESS).deposit{ value: ethRemaining }();\\n            IWETH9(WETH_TOKEN_ADDRESS).transfer(VAULT_ADDRESS, ethRemaining);\\n            activeDepositedValidators -= 1;\\n\\n            emit AccountingValidatorSlashed(\\n                activeDepositedValidators,\\n                ethRemaining\\n            );\\n        }\\n        // Oh no... Fuse is blown. The governor (Multisig not OGV Governor) needs to set the\\n        // record straight by manually set the accounting values.\\n        else {\\n            // will emit a paused event\\n            _pause();\\n            accountingValid = false;\\n        }\\n    }\\n\\n    /// @dev allow the accounting governor to fix the accounting of this strategy and unpause\\n    /// @param _activeDepositedValidators the override value of activeDepositedValidators\\n    /// @param _ethToWeth the amount of ETH to be converted to WETH\\n    /// @param _wethToBeSentToVault the amount of WETH to be sent to the Vault\\n    /// @param _consensusRewards the override value for consensusRewards\\n    /// @param _ethThresholdCheck maximum allowed ETH balance on the contract for the function to run\\n    /// @param _wethThresholdCheck maximum allowed WETH balance on the contract for the function to run\\n    ///        the above 2 checks are done so transaction doesn't get front run and cause\\n    ///        unexpected behaviour\\n    function manuallyFixAccounting(\\n        uint256 _activeDepositedValidators,\\n        uint256 _ethToWeth,\\n        uint256 _wethToBeSentToVault,\\n        uint256 _consensusRewards,\\n        uint256 _ethThresholdCheck,\\n        uint256 _wethThresholdCheck\\n    ) external onlyAccountingGovernor whenPaused {\\n        uint256 ethBalance = address(this).balance;\\n        uint256 wethBalance = IWETH9(WETH_TOKEN_ADDRESS).balanceOf(\\n            address(this)\\n        );\\n\\n        require(\\n            ethBalance <= _ethThresholdCheck &&\\n                wethBalance <= _wethThresholdCheck,\\n            \\\"over accounting threshold\\\"\\n        );\\n\\n        emit AccountingManuallyFixed(\\n            activeDepositedValidators,\\n            _activeDepositedValidators,\\n            consensusRewards,\\n            _consensusRewards,\\n            _ethToWeth,\\n            _wethToBeSentToVault\\n        );\\n\\n        activeDepositedValidators = _activeDepositedValidators;\\n        consensusRewards = _consensusRewards;\\n        if (_ethToWeth > 0) {\\n            require(_ethToWeth <= ethBalance, \\\"insufficient ETH\\\");\\n\\n            IWETH9(WETH_TOKEN_ADDRESS).deposit{ value: _ethToWeth }();\\n        }\\n        if (_wethToBeSentToVault > 0) {\\n            IWETH9(WETH_TOKEN_ADDRESS).transfer(\\n                VAULT_ADDRESS,\\n                _wethToBeSentToVault\\n            );\\n        }\\n\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x44a1fc3a3e324b3ae63b39d2c5ae0a3e8a1b71b8dbf7e604b70d81ef5b170754\",\"license\":\"MIT\"},\"contracts/strategies/NativeStaking/ValidatorRegistrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { Governable } from \\\"../../governance/Governable.sol\\\";\\nimport { IDepositContract } from \\\"../../interfaces/IDepositContract.sol\\\";\\nimport { IVault } from \\\"../../interfaces/IVault.sol\\\";\\nimport { IWETH9 } from \\\"../../interfaces/IWETH9.sol\\\";\\nimport { ISSVNetwork, Cluster } from \\\"../../interfaces/ISSVNetwork.sol\\\";\\n\\nstruct ValidatorStakeData {\\n    bytes pubkey;\\n    bytes signature;\\n    bytes32 depositDataRoot;\\n}\\n\\n/**\\n * @title Registrator of the validators\\n * @notice This contract implements all the required functionality to register, exit and remove validators.\\n * @author Origin Protocol Inc\\n */\\nabstract contract ValidatorRegistrator is Governable, Pausable {\\n    /// @notice The address of the Wrapped ETH (WETH) token contract\\n    address public immutable WETH_TOKEN_ADDRESS;\\n    /// @notice The address of the beacon chain deposit contract\\n    address public immutable BEACON_CHAIN_DEPOSIT_CONTRACT;\\n    /// @notice The address of the SSV Network contract used to interface with\\n    address public immutable SSV_NETWORK_ADDRESS;\\n    /// @notice Address of the OETH Vault proxy contract\\n    address public immutable VAULT_ADDRESS;\\n\\n    /// @notice Address of the registrator - allowed to register, exit and remove validators\\n    address public validatorRegistrator;\\n    /// @notice The number of validators that have 32 (!) ETH actively deposited. When a new deposit\\n    /// to a validator happens this number increases, when a validator exit is detected this number\\n    /// decreases.\\n    uint256 activeDepositedValidators;\\n    /// @notice State of the validators keccak256(pubKey) => state\\n    mapping(bytes32 => VALIDATOR_STATE) public validatorsStates;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    enum VALIDATOR_STATE {\\n        REGISTERED, // validator is registered on the SSV network\\n        STAKED, // validator has funds staked\\n        EXITING, // exit message has been posted and validator is in the process of exiting\\n        EXIT_COMPLETE // validator has funds withdrawn to the EigenPod and is removed from the SSV\\n    }\\n\\n    event RegistratorChanged(address newAddress);\\n    event ETHStaked(bytes pubkey, uint256 amount, bytes withdrawal_credentials);\\n    event SSVValidatorRegistered(bytes pubkey, uint64[] operatorIds);\\n    event SSVValidatorExitInitiated(bytes pubkey, uint64[] operatorIds);\\n    event SSVValidatorExitCompleted(bytes pubkey, uint64[] operatorIds);\\n\\n    /// @dev Throws if called by any account other than the Registrator\\n    modifier onlyRegistrator() {\\n        require(\\n            msg.sender == validatorRegistrator,\\n            \\\"Caller is not the Registrator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the Strategist\\n    modifier onlyStrategist() {\\n        require(\\n            msg.sender == IVault(VAULT_ADDRESS).strategistAddr(),\\n            \\\"Caller is not the Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _wethAddress Address of the Erc20 WETH Token contract\\n    /// @param _vaultAddress Address of the Vault\\n    /// @param _beaconChainDepositContract Address of the beacon chain deposit contract\\n    /// @param _ssvNetwork Address of the SSV Network contract\\n    constructor(\\n        address _wethAddress,\\n        address _vaultAddress,\\n        address _beaconChainDepositContract,\\n        address _ssvNetwork\\n    ) {\\n        WETH_TOKEN_ADDRESS = _wethAddress;\\n        BEACON_CHAIN_DEPOSIT_CONTRACT = _beaconChainDepositContract;\\n        SSV_NETWORK_ADDRESS = _ssvNetwork;\\n        VAULT_ADDRESS = _vaultAddress;\\n    }\\n\\n    /// @notice Set the address of the registrator which can register, exit and remove validators\\n    function setRegistrator(address _address) external onlyGovernor {\\n        emit RegistratorChanged(_address);\\n        validatorRegistrator = _address;\\n    }\\n\\n    /// @notice Stakes WETH to the node validators\\n    /// @param validators A list of validator data needed to stake.\\n    /// The `ValidatorStakeData` struct contains the pubkey, signature and depositDataRoot.\\n    /// Only the registrator can call this function.\\n    function stakeEth(ValidatorStakeData[] calldata validators)\\n        external\\n        onlyRegistrator\\n        whenNotPaused\\n    {\\n        uint256 requiredETH = validators.length * 32 ether;\\n\\n        // Check there is enough WETH from the deposits sitting in this strategy contract\\n        require(\\n            requiredETH <= IWETH9(WETH_TOKEN_ADDRESS).balanceOf(address(this)),\\n            \\\"insufficient WETH\\\"\\n        );\\n\\n        // Convert required ETH from WETH\\n        IWETH9(WETH_TOKEN_ADDRESS).withdraw(requiredETH);\\n\\n        // For each validator\\n        for (uint256 i = 0; i < validators.length; ) {\\n            bytes32 pubkeyHash = keccak256(validators[i].pubkey);\\n            VALIDATOR_STATE currentState = validatorsStates[pubkeyHash];\\n\\n            require(\\n                currentState == VALIDATOR_STATE.REGISTERED,\\n                \\\"Validator not registered\\\"\\n            );\\n\\n            /* 0x01 to indicate that withdrawal credentials will contain an EOA address that the sweeping function\\n             * can sweep funds to.\\n             * bytes11(0) to fill up the required zeros\\n             * remaining bytes20 are for the address\\n             */\\n            bytes memory withdrawal_credentials = abi.encodePacked(\\n                bytes1(0x01),\\n                bytes11(0),\\n                address(this)\\n            );\\n            IDepositContract(BEACON_CHAIN_DEPOSIT_CONTRACT).deposit(\\n                validators[i].pubkey,\\n                withdrawal_credentials,\\n                validators[i].signature,\\n                validators[i].depositDataRoot\\n            );\\n\\n            activeDepositedValidators += 1;\\n            emit ETHStaked(\\n                validators[i].pubkey,\\n                32 ether,\\n                withdrawal_credentials\\n            );\\n\\n            validatorsStates[pubkeyHash] = VALIDATOR_STATE.STAKED;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Registers a new validator in the SSV Cluster.\\n    /// Only the registrator can call this function.\\n    function registerSsvValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        Cluster calldata cluster\\n    ) external onlyRegistrator whenNotPaused {\\n        ISSVNetwork(SSV_NETWORK_ADDRESS).registerValidator(\\n            publicKey,\\n            operatorIds,\\n            sharesData,\\n            amount,\\n            cluster\\n        );\\n        validatorsStates[keccak256(publicKey)] = VALIDATOR_STATE.REGISTERED;\\n        emit SSVValidatorRegistered(publicKey, operatorIds);\\n    }\\n\\n    /// @notice Exit a validator from the Beacon chain.\\n    /// The staked ETH will eventually swept to this native staking strategy.\\n    /// Only the registrator can call this function.\\n    function exitSsvValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds\\n    ) external onlyRegistrator whenNotPaused {\\n        VALIDATOR_STATE currentState = validatorsStates[keccak256(publicKey)];\\n        require(currentState == VALIDATOR_STATE.STAKED, \\\"Validator not staked\\\");\\n\\n        ISSVNetwork(SSV_NETWORK_ADDRESS).exitValidator(publicKey, operatorIds);\\n        emit SSVValidatorExitInitiated(publicKey, operatorIds);\\n\\n        validatorsStates[keccak256(publicKey)] = VALIDATOR_STATE.EXITING;\\n    }\\n\\n    /// @notice Remove a validator from the SSV Cluster.\\n    /// Make sure `exitSsvValidator` is called before and the validate has exited the Beacon chain.\\n    /// If removed before the validator has exited the beacon chain will result in the validator being slashed.\\n    /// Only the registrator can call this function.\\n    function removeSsvValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds,\\n        Cluster calldata cluster\\n    ) external onlyRegistrator whenNotPaused {\\n        VALIDATOR_STATE currentState = validatorsStates[keccak256(publicKey)];\\n        require(\\n            currentState == VALIDATOR_STATE.EXITING,\\n            \\\"Validator not exiting\\\"\\n        );\\n\\n        ISSVNetwork(SSV_NETWORK_ADDRESS).removeValidator(\\n            publicKey,\\n            operatorIds,\\n            cluster\\n        );\\n        emit SSVValidatorExitCompleted(publicKey, operatorIds);\\n\\n        validatorsStates[keccak256(publicKey)] = VALIDATOR_STATE.EXIT_COMPLETE;\\n    }\\n\\n    /// @notice Deposits more SSV Tokens to the SSV Network contract which is used to pay the SSV Operators.\\n    /// @dev A SSV cluster is defined by the SSVOwnerAddress and the set of operatorIds.\\n    /// uses \\\"onlyStrategist\\\" modifier so continuous front-running can't DOS our maintenance service\\n    /// that tries to top up SSV tokens.\\n    /// @param cluster The SSV cluster details that must be derived from emitted events from the SSVNetwork contract.\\n    function depositSSV(\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external onlyStrategist {\\n        ISSVNetwork(SSV_NETWORK_ADDRESS).deposit(\\n            address(this),\\n            operatorIds,\\n            amount,\\n            cluster\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3caea29d952f616674ae0c9c80a161cc5d07b956b2dd219f8674119e41141c53\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    event AccountRebasingEnabled(address account);\\n    event AccountRebasingDisabled(address account);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            emit AccountRebasingDisabled(_account);\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable rebasing for an account.\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account)\\n        public\\n        nonReentrant\\n        onlyGovernor\\n    {\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        require(_isNonRebasingAccount(_account), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[_account]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(_account));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(_account));\\n\\n        _creditBalances[_account] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[_account]);\\n\\n        rebaseState[_account] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[_account];\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n        emit AccountRebasingDisabled(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2dc66b1ba02716d64eb47dd9117fda62650d8b57669e6c351437e0ad29ad5f19\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Harvester\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x5e17bb3db9f9e1014b7c5c836547f8fa81e02af7568c0bb8f2a2e0e7c2192db4\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n * @author Origin Protocol Inc\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xe35ac2d813a30d845a3b52bba72588d7e936c2b3f3373d15568c14db46aeed60\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configiration\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n    address public ousdMetaStrategy = address(0);\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy = 0;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold = 0;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbcefeb5e2b88d99a54dbe6542dc25d0a68eeaf3adfe6e12fb70049cc024b1a79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600060685560006069556000606a553480156200002157600080fd5b5060405162004ce338038062004ce3833981016040819052620000449162000147565b8585876020015183868383838362000062336200011760201b60201c565b60008051602062004cc3833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36033805460ff191690556001600160601b0319606094851b811660805291841b821660a052831b811660c05290821b811660e0528651821b811661010052602090960151811b86166101205298891b851661014052505050509190931b1661016052506200022292505050565b60008051602062004cc383398151915255565b80516001600160a01b03811681146200014257600080fd5b919050565b60008060008060008086880360e08112156200016257600080fd5b60408112156200017157600080fd5b50604080519081016001600160401b0381118282101715620001a357634e487b7160e01b600052604160045260246000fd5b604052620001b1886200012a565b8152620001c1602089016200012a565b60208201529550620001d6604088016200012a565b9450620001e6606088016200012a565b9350620001f6608088016200012a565b92506200020660a088016200012a565b91506200021660c088016200012a565b90509295509295509295565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c614904620003bf600039600081816102c2015281816109b301526132ee01526000818161059801526127ba01526000818161046c01528181610db601528181611d0301528181611e7c01528181612b9b0152612e230152600061097f0152600081816106f101528181610b4e01528181611b4001528181611c010152818161231601526125650152600081816109fc01528181610c540152818161172b0152818161278a015281816128a20152612d190152600081816108cb015261147c0152600081816102f4015281816104f6015281816107c201528181610ab501528181610e2b01528181610ffa01528181611082015281816112310152818161130c0152818161192201528181611ab001528181611b6f01528181611ded01528181611e9d0152818161229001528181612345015281816124df0152818161259401528181612eae01528181612f3d015281816133f30152818161347801526134ec01526149046000f3fe6080604052600436106102b25760003560e01c8063853828b611610175578063c2e1e3f4116100dc578063d9caed1211610095578063dd505df61161006f578063dd505df6146109a1578063de5f6268146109d5578063f1188e40146109ea578063f6ca71b014610a1e57600080fd5b8063d9caed121461092d578063d9f00ec71461094d578063dbe55e561461096d57600080fd5b8063c2e1e3f414610867578063c7af335214610887578063c98517c51461089c578063cceab750146108b9578063d38bfff4146108ed578063d5c360f61461090d57600080fd5b8063a4f98af41161012e578063a4f98af414610790578063aa388af6146107a5578063ab12edf5146107f2578063ad1728cb14610812578063af37dcbe14610827578063bb1b918d1461084757600080fd5b8063853828b6146106a557806387bae867146106ba5780639092c31c146106df5780639136616a1461071357806396d538bb146107335780639da0e4621461075357600080fd5b80635c975abb116102195780636ef38795116101d25780636ef38795146105fa57806371a735f31461061a5780637b2d9b2c1461063a5780637e20fffa1461065a578063842f5c461461067a5780638456cb591461069057600080fd5b80635c975abb1461052d5780635d36b190146105515780635f515226146105665780636093d3801461058657806367c7066c146105ba5780636e811d38146105da57600080fd5b8063430bf08a1161026b578063430bf08a1461045a578063435356d11461048e57806347e7ef24146104ae578063484be812146104ce578063579a7e1a146104e45780635a063f631461051857600080fd5b80630c340a241461036e5780630ed57b3a146103a05780630fc3b4c4146103c05780631072cbea146103f657806322495dc8146104165780633c8649591461043657600080fd5b3661036957336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806103165750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6103675760405162461bcd60e51b815260206004820152601e60248201527f657468206e6f742066726f6d20616c6c6f77656420636f6e747261637473000060448201526064015b60405180910390fd5b005b600080fd5b34801561037a57600080fd5b50610383610a40565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103ac57600080fd5b506103676103bb366004613ce6565b610a5d565b3480156103cc57600080fd5b506103836103db366004613cac565b60a0602052600090815260409020546001600160a01b031681565b34801561040257600080fd5b50610367610411366004613d60565b610a8f565b34801561042257600080fd5b50610367610431366004613e54565b610b4c565b34801561044257600080fd5b5061044c60695481565b604051908152602001610397565b34801561046657600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b34801561049a57600080fd5b506103676104a9366004613dcd565b610cc6565b3480156104ba57600080fd5b506103676104c9366004613d60565b610dab565b3480156104da57600080fd5b5061044c606a5481565b3480156104f057600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b34801561052457600080fd5b50610367610eb1565b34801561053957600080fd5b5060335460ff165b6040519015158152602001610397565b34801561055d57600080fd5b50610367610f50565b34801561057257600080fd5b5061044c610581366004613cac565b610ff6565b34801561059257600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c657600080fd5b5060a454610383906001600160a01b031681565b3480156105e657600080fd5b506103676105f5366004613cac565b61112a565b34801561060657600080fd5b50610367610615366004613d8c565b6111b2565b34801561062657600080fd5b50610367610635366004614062565b611634565b34801561064657600080fd5b50610383610655366004613f2a565b61182d565b34801561066657600080fd5b5061036761067536600461411e565b611857565b34801561068657600080fd5b5061044c60685481565b34801561069c57600080fd5b50610367611bff565b3480156106b157600080fd5b50610367611cf8565b3480156106c657600080fd5b506033546103839061010090046001600160a01b031681565b3480156106eb57600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b34801561071f57600080fd5b5061036761072e366004613f2a565b611eca565b34801561073f57600080fd5b5061036761074e366004613d8c565b612095565b34801561075f57600080fd5b5061078361076e366004613f2a565b60356020526000908152604090205460ff1681565b6040516103979190614565565b34801561079c57600080fd5b506105416121b5565b3480156107b157600080fd5b506105416107c0366004613cac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156107fe57600080fd5b5061036761080d3660046140fc565b612677565b34801561081e57600080fd5b50610367612773565b34801561083357600080fd5b50606b54610383906001600160a01b031681565b34801561085357600080fd5b50610367610862366004613fae565b612839565b34801561087357600080fd5b50610367610882366004613cac565b6129ac565b34801561089357600080fd5b50610541612a39565b3480156108a857600080fd5b5061044c6801bc16d674ec80000081565b3480156108c557600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156108f957600080fd5b50610367610908366004613cac565b612a6a565b34801561091957600080fd5b50610367610928366004613cac565b612b0e565b34801561093957600080fd5b50610367610948366004613d1f565b612b90565b34801561095957600080fd5b50610367610968366004613f43565b612c23565b34801561097957600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156109ad57600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156109e157600080fd5b50610367612e18565b3480156109f657600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b348015610a2a57600080fd5b50610a33612f62565b604051610397919061433b565b6000610a586000805160206148af8339815191525490565b905090565b610a65612a39565b610a815760405162461bcd60e51b815260040161035e906145d7565b610a8b8282612fc4565b5050565b610a97612a39565b610ab35760405162461bcd60e51b815260040161035e906145d7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169083161415610b305760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f7274656420617373657400604482015260640161035e565b610a8b610b3b610a40565b6001600160a01b0384169083613123565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd9190613cc9565b6001600160a01b0316336001600160a01b031614610c3d5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f7420746865205374726174656769737400000000604482015260640161035e565b60405163bc26e7e560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bc26e7e590610c8f90309087908790879060040161428b565b600060405180830381600087803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b50505050505050565b610cce612a39565b610cea5760405162461bcd60e51b815260040161035e906145d7565b600054610100900460ff1680610d03575060005460ff16155b610d665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161035e565b600054610100900460ff16158015610d88576000805461ffff19166101011790555b610d9384848461317a565b8015610da5576000805461ff00191690555b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610df35760405162461bcd60e51b815260040161035e906145a0565b60008051602061488f83398151915280546002811415610e255760405162461bcd60e51b815260040161035e9061466f565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614610e9e5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015260640161035e565b610ea88484613235565b50600190555050565b60a4546001600160a01b03163314610f0b5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f7420746865204861727665737465720000000000604482015260640161035e565b60008051602061488f83398151915280546002811415610f3d5760405162461bcd60e51b815260040161035e9061466f565b60028255610f496132c7565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610feb5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161035e565b610ff433613515565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161461106d5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015260640161035e565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156110cc57600080fd5b505afa1580156110e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110491906140e3565b60345461111a906801bc16d674ec800000614780565b6111249190614746565b92915050565b611132612a39565b61114e5760405162461bcd60e51b815260040161035e906145d7565b6040516001600160a01b03821681527f83f29c79feb71f8fba9d0fbc4ba5f0982a28b6b1e868b3fc50e6400d100bca0f9060200160405180910390a1603380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60335461010090046001600160a01b031633146111e15760405162461bcd60e51b815260040161035e90614638565b60335460ff16156112045760405162461bcd60e51b815260040161035e9061460e565b6000611219826801bc16d674ec800000614780565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b391906140e3565b8111156112f65760405162461bcd60e51b81526020600482015260116024820152700d2dce6eaccccd2c6d2cadce840ae8aa89607b1b604482015260640161035e565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561135857600080fd5b505af115801561136c573d6000803e3d6000fd5b5050505060005b82811015610da557600084848381811061138f5761138f61483f565b90506020028101906113a191906146dd565b6113ab9080614697565b6040516113b992919061425f565b6040805191829003909120600081815260356020529182205490925060ff16908160038111156113eb576113eb614813565b146114385760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f72206e6f7420726567697374657265640000000000000000604482015260640161035e565b60408051600160f81b60208201526000602182018190526bffffffffffffffffffffffff193060601b16602c830152910160405160208183030381529060405290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228951188888878181106114bb576114bb61483f565b90506020028101906114cd91906146dd565b6114d79080614697565b848b8b8a8181106114ea576114ea61483f565b90506020028101906114fc91906146dd565b61150a906020810190614697565b8d8d8c81811061151c5761151c61483f565b905060200281019061152e91906146dd565b604001356040518763ffffffff1660e01b8152600401611553969594939291906144ea565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050506001603460008282546115989190614746565b909155507ffeb31a79d38edb1b090d516e4df3e273651179c6f2c2ec53a9a22ae015b70ba990508787868181106115d1576115d161483f565b90506020028101906115e391906146dd565b6115ed9080614697565b6801bc16d674ec800000846040516116089493929190614539565b60405180910390a150506000908152603560205260409020805460ff1916600190811790915501611373565b60335461010090046001600160a01b031633146116635760405162461bcd60e51b815260040161035e90614638565b60335460ff16156116865760405162461bcd60e51b815260040161035e9061460e565b600060356000878760405161169c92919061425f565b604080519182900390912082526020820192909252016000205460ff16905060028160038111156116cf576116cf614813565b146117145760405162461bcd60e51b815260206004820152601560248201527456616c696461746f72206e6f742065786974696e6760581b604482015260640161035e565b6040516312b3fc1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906312b3fc199061176890899089908990899089906004016144a9565b600060405180830381600087803b15801561178257600080fd5b505af1158015611796573d6000803e3d6000fd5b505050507ff72821b8777f002ccdf6326f1242d9e0f762eb077668b67bebe640535378066d868686866040516117cf9493929190614420565b60405180910390a160036035600088886040516117ed92919061425f565b60408051918290039091208252602082019290925201600020805460ff1916600183600381111561182057611820614813565b0217905550505050505050565b60a5818154811061183d57600080fd5b6000918252602090912001546001600160a01b0316905081565b606b546001600160a01b031633146118bf5760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206973206e6f7420746865204163636f756e74696e6720476f7660448201526432b93737b960d91b606482015260840161035e565b60335460ff166119085760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161035e565b6040516370a0823160e01b815230600482015247906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561196c57600080fd5b505afa158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a491906140e3565b90508382111580156119b65750828111155b611a025760405162461bcd60e51b815260206004820152601960248201527f6f766572206163636f756e74696e67207468726573686f6c6400000000000000604482015260640161035e565b60345460685460408051928352602083018b9052820152606081018690526080810188905260a081018790527fb2c41d2aedabd456081f30f3b116ce88de1c795a7d4ca787fef373a393f3c5db9060c00160405180910390a1603488905560688590558615611b235781871115611aae5760405162461bcd60e51b815260206004820152601060248201526f0d2dce6eaccccd2c6d2cadce8408aa8960831b604482015260640161035e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015611b0957600080fd5b505af1158015611b1d573d6000803e3d6000fd5b50505050505b8515611bed5760405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018890527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190613f0d565b505b611bf56135d6565b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190613cc9565b6001600160a01b0316336001600160a01b031614611cf05760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f7420746865205374726174656769737400000000604482015260640161035e565b610ff4613669565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611d475750611d32610a40565b6001600160a01b0316336001600160a01b0316145b611d9f5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b606482015260840161035e565b60008051602061488f83398151915280546002811415611dd15760405162461bcd60e51b815260040161035e9061466f565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611e3757600080fd5b505afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f91906140e3565b90508015611ec257611ec27f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836136c1565b505060019055565b611ed2612a39565b611eee5760405162461bcd60e51b815260040161035e906145d7565b60a1548110611f2f5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161035e565b600060a18281548110611f4457611f4461483f565b60009182526020808320909101546001600160a01b0390811680845260a090925260409092205460a15491935090911690611f819060019061479f565b8310156120035760a18054611f989060019061479f565b81548110611fa857611fa861483f565b60009182526020909120015460a180546001600160a01b039092169185908110611fd457611fd461483f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60a180548061201457612014614829565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b0385811680835260a0855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b61209d612a39565b6120b95760405162461bcd60e51b815260040161035e906145d7565b8060005b8181101561216c5760008484838181106120d9576120d961483f565b90506020020160208101906120ee9190613cac565b6001600160a01b0316141561215c5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b606482015260840161035e565b612165816147e2565b90506120bd565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc60a584846040516121a193929190614388565b60405180910390a1610da560a58484613a05565b60335460009061010090046001600160a01b031633146121e75760405162461bcd60e51b815260040161035e90614638565b60335460ff161561220a5760405162461bcd60e51b815260040161035e9061460e565b6068544710156122225761221c613669565b50600090565b600060685447612232919061479f565b9050600191506801bc16d674ec800000811061240d57600061225d6801bc16d674ec8000008361475e565b90508060346000828254612271919061479f565b909155506000905061228c826801bc16d674ec800000614780565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156122e957600080fd5b505af11580156122fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b15801561238d57600080fd5b505af11580156123a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c59190613f0d565b5060345460408051848152602081019290925281018290527fbe7040030ff7b347853214bf49820c6d455fedf58f3815f85c7bc5216993682b9060600160405180910390a150505b60006068544761241d919061479f565b90506801bc16d674ec800000811061246f5760405162461bcd60e51b8152602060048201526015602482015274756e6578706563746564206163636f756e74696e6760581b604482015260640161035e565b8061247957505090565b6069548110156124d35780606860008282546124959190614746565b90915550506040518181527f7a745a2c63a535068f52ceca27debd5297bbad5f7f37ec53d044a59d0362445d906020015b60405180910390a1505090565b606a54811115612666577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561253857600080fd5b505af115801561254c573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b1580156125dc57600080fd5b505af11580156125f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126149190613f0d565b50600160346000828254612628919061479f565b909155505060345460408051918252602082018390527f6aa7e30787b26429ced603a7aba8b19c4b5d5bcf29a3257da953c8d53bcaa3a691016124c6565b61266e613669565b60009250505090565b61267f612a39565b61269b5760405162461bcd60e51b815260040161035e906145d7565b80821080156126b257506801bc16d674ec80000082105b80156126c657506801bc16d674ec80000081105b80156126e35750673782dace9d9000006126e0838361479f565b10155b61272f5760405162461bcd60e51b815260206004820152601760248201527f696e636f7272656374206675736520696e74657276616c000000000000000000604482015260640161035e565b60408051838152602081018390527fcb8d24e46eb3c402bf344ee60a6576cba9ef2f59ea1af3b311520704924e901a910160405180910390a1606991909155606a55565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b1580156127fe57600080fd5b505af1158015612812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128369190613f0d565b50565b60335461010090046001600160a01b031633146128685760405162461bcd60e51b815260040161035e90614638565b60335460ff161561288b5760405162461bcd60e51b815260040161035e9061460e565b6040516301ba3ee760e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906306e8fb9c906128e5908b908b908b908b908b908b908b908b90600401614447565b600060405180830381600087803b1580156128ff57600080fd5b505af1158015612913573d6000803e3d6000fd5b505050506000603560008a8a60405161292d92919061425f565b60408051918290039091208252602082019290925201600020805460ff1916600183600381111561296057612960614813565b02179055507f75c4a66b2c6c28cf46db7131182a812e4fbbb2f0591377aa83a737909a9b68c38888888860405161299a9493929190614420565b60405180910390a15050505050505050565b6129b4612a39565b6129d05760405162461bcd60e51b815260040161035e906145d7565b60a454604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a160a480546001600160a01b0319166001600160a01b0392909216919091179055565b6000612a516000805160206148af8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b612a72612a39565b612a8e5760405162461bcd60e51b815260040161035e906145d7565b612ab6817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316612ad66000805160206148af8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b612b16612a39565b612b325760405162461bcd60e51b815260040161035e906145d7565b6040516001600160a01b03821681527ff3dd2b598e2a94dd3f46b414f7c960f8e10a0b0efd00df97d27cdd0fee5c87539060200160405180910390a1606b80546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612bd85760405162461bcd60e51b815260040161035e906145a0565b60008051602061488f83398151915280546002811415612c0a5760405162461bcd60e51b815260040161035e9061466f565b60028255612c198585856136c1565b5060019055505050565b60335461010090046001600160a01b03163314612c525760405162461bcd60e51b815260040161035e90614638565b60335460ff1615612c755760405162461bcd60e51b815260040161035e9061460e565b6000603560008686604051612c8b92919061425f565b604080519182900390912082526020820192909252016000205460ff1690506001816003811115612cbe57612cbe614813565b14612d025760405162461bcd60e51b815260206004820152601460248201527315985b1a59185d1bdc881b9bdd081cdd185ad95960621b604482015260640161035e565b604051633877322b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633877322b90612d54908890889088908890600401614420565b600060405180830381600087803b158015612d6e57600080fd5b505af1158015612d82573d6000803e3d6000fd5b505050507ff8821da16f5ed966b41e0343c3eff9903af782d74f99f1689dd9d4562b6545b385858585604051612dbb9493929190614420565b60405180910390a16002603560008787604051612dd992919061425f565b60408051918290039091208252602082019290925201600020805460ff19166001836003811115612e0c57612e0c614813565b02179055505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612e605760405162461bcd60e51b815260040161035e906145a0565b60008051602061488f83398151915280546002811415612e925760405162461bcd60e51b815260040161035e9061466f565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612ef857600080fd5b505afa158015612f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3091906140e3565b90508015611ec257611ec27f000000000000000000000000000000000000000000000000000000000000000082613235565b606060a5805480602002602001604051908101604052809291908181526020018280548015612fba57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f9c575b5050505050905090565b6001600160a01b03828116600090815260a0602052604090205416156130215760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015260640161035e565b6001600160a01b0382161580159061304157506001600160a01b03811615155b6130815760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015260640161035e565b6001600160a01b03828116600081815260a06020908152604080832080549587166001600160a01b0319968716811790915560a1805460018101825594527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526131759084906137b9565b505050565b825161318d9060a5906020860190613a68565b508151815181146131d75760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015260640161035e565b60005b8181101561322e5761321e8482815181106131f7576131f761483f565b60200260200101518483815181106132115761321161483f565b6020026020010151612fc4565b613227816147e2565b90506131da565b5050505050565b6000811161327e5760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015260640161035e565b6040805160008152602081018390526001600160a01b038416917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a25050565b60335460ff16156132ea5760405162461bcd60e51b815260040161035e9061460e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e52253816040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561334757600080fd5b505af115801561335b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337f91906140e3565b90506000606854826133919190614746565b9050804710156133e35760405162461bcd60e51b815260206004820152601860248201527f696e73756666696369656e74206574682062616c616e63650000000000000000604482015260640161035e565b8015610a8b5760006068819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561344c57600080fd5b505af1158015613460573d6000803e3d6000fd5b505060a454604080516001600160a01b0392831681527f0000000000000000000000000000000000000000000000000000000000000000909216602083015281018590527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353935060600191506134d39050565b60405180910390a160a454610a8b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613123565b6001600160a01b03811661356b5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161035e565b806001600160a01b031661358b6000805160206148af8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612836816000805160206148af83398151915255565b60335460ff1661361f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161035e565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60335460ff161561368c5760405162461bcd60e51b815260040161035e9061460e565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861364c3390565b600081116137115760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e67000000000000000000604482015260640161035e565b6001600160a01b0383166137605760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b604482015260640161035e565b6040805160008152602081018390526001600160a01b038416917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a26131756001600160a01b0383168483613123565b600061380e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661388b9092919063ffffffff16565b805190915015613175578080602001905181019061382c9190613f0d565b6131755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161035e565b606061389a84846000856138a4565b90505b9392505050565b6060824710156139055760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161035e565b843b6139535760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161035e565b600080866001600160a01b0316858760405161396f919061426f565b60006040518083038185875af1925050503d80600081146139ac576040519150601f19603f3d011682016040523d82523d6000602084013e6139b1565b606091505b50915091506139c18282866139cc565b979650505050505050565b606083156139db57508161389d565b8251156139eb5782518084602001fd5b8160405162461bcd60e51b815260040161035e919061458d565b828054828255906000526020600020908101928215613a58579160200282015b82811115613a585781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613a25565b50613a64929150613abd565b5090565b828054828255906000526020600020908101928215613a58579160200282015b82811115613a5857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613a88565b5b80821115613a645760008155600101613abe565b60008083601f840112613ae457600080fd5b5081356001600160401b03811115613afb57600080fd5b6020830191508360208260051b8501011115613b1657600080fd5b9250929050565b600082601f830112613b2e57600080fd5b81356020613b43613b3e83614723565b6146f3565b80838252828201915082860187848660051b8901011115613b6357600080fd5b60005b85811015613b8b578135613b798161486b565b84529284019290840190600101613b66565b5090979650505050505050565b60008083601f840112613baa57600080fd5b5081356001600160401b03811115613bc157600080fd5b602083019150836020828501011115613b1657600080fd5b600060a08284031215613beb57600080fd5b50919050565b600060a08284031215613c0357600080fd5b60405160a081018181106001600160401b0382111715613c2557613c25614855565b604052905080613c3483613c7c565b8152613c4260208401613c95565b6020820152613c5360408401613c95565b60408201526060830135613c6681614880565b6060820152608092830135920191909152919050565b803563ffffffff81168114613c9057600080fd5b919050565b80356001600160401b0381168114613c9057600080fd5b600060208284031215613cbe57600080fd5b813561389d8161486b565b600060208284031215613cdb57600080fd5b815161389d8161486b565b60008060408385031215613cf957600080fd5b8235613d048161486b565b91506020830135613d148161486b565b809150509250929050565b600080600060608486031215613d3457600080fd5b8335613d3f8161486b565b92506020840135613d4f8161486b565b929592945050506040919091013590565b60008060408385031215613d7357600080fd5b8235613d7e8161486b565b946020939093013593505050565b60008060208385031215613d9f57600080fd5b82356001600160401b03811115613db557600080fd5b613dc185828601613ad2565b90969095509350505050565b600080600060608486031215613de257600080fd5b83356001600160401b0380821115613df957600080fd5b613e0587838801613b1d565b94506020860135915080821115613e1b57600080fd5b613e2787838801613b1d565b93506040860135915080821115613e3d57600080fd5b50613e4a86828701613b1d565b9150509250925092565b600080600060e08486031215613e6957600080fd5b83356001600160401b03811115613e7f57600080fd5b8401601f81018613613e9057600080fd5b80356020613ea0613b3e83614723565b8083825282820191508285018a848660051b8801011115613ec057600080fd5b600095505b84861015613eea57613ed681613c95565b835260019590950194918301918301613ec5565b509650508601359350613f04915086905060408601613bf1565b90509250925092565b600060208284031215613f1f57600080fd5b815161389d81614880565b600060208284031215613f3c57600080fd5b5035919050565b60008060008060408587031215613f5957600080fd5b84356001600160401b0380821115613f7057600080fd5b613f7c88838901613b98565b90965094506020870135915080821115613f9557600080fd5b50613fa287828801613ad2565b95989497509550505050565b600080600080600080600080610120898b031215613fcb57600080fd5b88356001600160401b0380821115613fe257600080fd5b613fee8c838d01613b98565b909a50985060208b013591508082111561400757600080fd5b6140138c838d01613ad2565b909850965060408b013591508082111561402c57600080fd5b506140398b828c01613b98565b909550935050606089013591506140538a60808b01613bd9565b90509295985092959890939650565b600080600080600060e0868803121561407a57600080fd5b85356001600160401b038082111561409157600080fd5b61409d89838a01613b98565b909750955060208801359150808211156140b657600080fd5b506140c388828901613ad2565b90945092506140d790508760408801613bd9565b90509295509295909350565b6000602082840312156140f557600080fd5b5051919050565b6000806040838503121561410f57600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561413757600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b8183526000602080850194508260005b8581101561419d576001600160401b0361418a83613c95565b1687529582019590820190600101614171565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526141e98160208601602086016147b6565b601f01601f19169290920160200192915050565b63ffffffff61420b82613c7c565b16825261421a60208201613c95565b6001600160401b0380821660208501528061423760408501613c95565b1660408501525050606081013561424d81614880565b15156060830152608090810135910152565b8183823760009101908152919050565b600082516142818184602087016147b6565b9190910192915050565b6001600160a01b03851681526101006020808301829052855191830182905260009161012084019187810191845b818110156142de5783516001600160401b0316855293820193928201926001016142b9565b505082935086604086015263ffffffff865116606086015280860151925050506001600160401b0380821660808501528060408601511660a085015250506060830151151560c0830152608083015160e083015295945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561437c5783516001600160a01b031683529284019291840191600101614357565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156143d25781546001600160a01b0316845292840192600191820191016143ad565b505050838103828501528481528590820160005b868110156144145782356143f98161486b565b6001600160a01b0316825291830191908301906001016143e6565b50979650505050505050565b6040815260006144346040830186886141a8565b82810360208401526139c1818587614161565b600061012080835261445c8184018b8d6141a8565b9050828103602084015261447181898b614161565b905082810360408401526144868187896141a8565b91505083606083015261449c60808301846141fd565b9998505050505050505050565b60e0815260006144bd60e0830187896141a8565b82810360208401526144d0818688614161565b9150506144e060408301846141fd565b9695505050505050565b6080815260006144fe60808301888a6141a8565b828103602084015261451081886141d1565b905082810360408401526145258186886141a8565b915050826060830152979650505050505050565b60608152600061454d6060830186886141a8565b84602084015282810360408401526139c181856141d1565b602081016004831061458757634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061389d60208301846141d1565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f43616c6c6572206973206e6f7420746865205265676973747261746f72000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000808335601e198436030181126146ae57600080fd5b8301803591506001600160401b038211156146c857600080fd5b602001915036819003821315613b1657600080fd5b60008235605e1983360301811261428157600080fd5b604051601f8201601f191681016001600160401b038111828210171561471b5761471b614855565b604052919050565b60006001600160401b0382111561473c5761473c614855565b5060051b60200190565b60008219821115614759576147596147fd565b500190565b60008261477b57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561479a5761479a6147fd565b500290565b6000828210156147b1576147b16147fd565b500390565b60005b838110156147d15781810151838201526020016147b9565b83811115610da55750506000910152565b60006000198214156147f6576147f66147fd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461283657600080fd5b801515811461283657600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212204292636866460b0a0ebdd872cc7401407e5a3bdd212181fd3cea747a97b6379e64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x6080604052600436106102b25760003560e01c8063853828b611610175578063c2e1e3f4116100dc578063d9caed1211610095578063dd505df61161006f578063dd505df6146109a1578063de5f6268146109d5578063f1188e40146109ea578063f6ca71b014610a1e57600080fd5b8063d9caed121461092d578063d9f00ec71461094d578063dbe55e561461096d57600080fd5b8063c2e1e3f414610867578063c7af335214610887578063c98517c51461089c578063cceab750146108b9578063d38bfff4146108ed578063d5c360f61461090d57600080fd5b8063a4f98af41161012e578063a4f98af414610790578063aa388af6146107a5578063ab12edf5146107f2578063ad1728cb14610812578063af37dcbe14610827578063bb1b918d1461084757600080fd5b8063853828b6146106a557806387bae867146106ba5780639092c31c146106df5780639136616a1461071357806396d538bb146107335780639da0e4621461075357600080fd5b80635c975abb116102195780636ef38795116101d25780636ef38795146105fa57806371a735f31461061a5780637b2d9b2c1461063a5780637e20fffa1461065a578063842f5c461461067a5780638456cb591461069057600080fd5b80635c975abb1461052d5780635d36b190146105515780635f515226146105665780636093d3801461058657806367c7066c146105ba5780636e811d38146105da57600080fd5b8063430bf08a1161026b578063430bf08a1461045a578063435356d11461048e57806347e7ef24146104ae578063484be812146104ce578063579a7e1a146104e45780635a063f631461051857600080fd5b80630c340a241461036e5780630ed57b3a146103a05780630fc3b4c4146103c05780631072cbea146103f657806322495dc8146104165780633c8649591461043657600080fd5b3661036957336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806103165750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6103675760405162461bcd60e51b815260206004820152601e60248201527f657468206e6f742066726f6d20616c6c6f77656420636f6e747261637473000060448201526064015b60405180910390fd5b005b600080fd5b34801561037a57600080fd5b50610383610a40565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103ac57600080fd5b506103676103bb366004613ce6565b610a5d565b3480156103cc57600080fd5b506103836103db366004613cac565b60a0602052600090815260409020546001600160a01b031681565b34801561040257600080fd5b50610367610411366004613d60565b610a8f565b34801561042257600080fd5b50610367610431366004613e54565b610b4c565b34801561044257600080fd5b5061044c60695481565b604051908152602001610397565b34801561046657600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b34801561049a57600080fd5b506103676104a9366004613dcd565b610cc6565b3480156104ba57600080fd5b506103676104c9366004613d60565b610dab565b3480156104da57600080fd5b5061044c606a5481565b3480156104f057600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b34801561052457600080fd5b50610367610eb1565b34801561053957600080fd5b5060335460ff165b6040519015158152602001610397565b34801561055d57600080fd5b50610367610f50565b34801561057257600080fd5b5061044c610581366004613cac565b610ff6565b34801561059257600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156105c657600080fd5b5060a454610383906001600160a01b031681565b3480156105e657600080fd5b506103676105f5366004613cac565b61112a565b34801561060657600080fd5b50610367610615366004613d8c565b6111b2565b34801561062657600080fd5b50610367610635366004614062565b611634565b34801561064657600080fd5b50610383610655366004613f2a565b61182d565b34801561066657600080fd5b5061036761067536600461411e565b611857565b34801561068657600080fd5b5061044c60685481565b34801561069c57600080fd5b50610367611bff565b3480156106b157600080fd5b50610367611cf8565b3480156106c657600080fd5b506033546103839061010090046001600160a01b031681565b3480156106eb57600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b34801561071f57600080fd5b5061036761072e366004613f2a565b611eca565b34801561073f57600080fd5b5061036761074e366004613d8c565b612095565b34801561075f57600080fd5b5061078361076e366004613f2a565b60356020526000908152604090205460ff1681565b6040516103979190614565565b34801561079c57600080fd5b506105416121b5565b3480156107b157600080fd5b506105416107c0366004613cac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156107fe57600080fd5b5061036761080d3660046140fc565b612677565b34801561081e57600080fd5b50610367612773565b34801561083357600080fd5b50606b54610383906001600160a01b031681565b34801561085357600080fd5b50610367610862366004613fae565b612839565b34801561087357600080fd5b50610367610882366004613cac565b6129ac565b34801561089357600080fd5b50610541612a39565b3480156108a857600080fd5b5061044c6801bc16d674ec80000081565b3480156108c557600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156108f957600080fd5b50610367610908366004613cac565b612a6a565b34801561091957600080fd5b50610367610928366004613cac565b612b0e565b34801561093957600080fd5b50610367610948366004613d1f565b612b90565b34801561095957600080fd5b50610367610968366004613f43565b612c23565b34801561097957600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156109ad57600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b3480156109e157600080fd5b50610367612e18565b3480156109f657600080fd5b506103837f000000000000000000000000000000000000000000000000000000000000000081565b348015610a2a57600080fd5b50610a33612f62565b604051610397919061433b565b6000610a586000805160206148af8339815191525490565b905090565b610a65612a39565b610a815760405162461bcd60e51b815260040161035e906145d7565b610a8b8282612fc4565b5050565b610a97612a39565b610ab35760405162461bcd60e51b815260040161035e906145d7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081169083161415610b305760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f7274656420617373657400604482015260640161035e565b610a8b610b3b610a40565b6001600160a01b0384169083613123565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd9190613cc9565b6001600160a01b0316336001600160a01b031614610c3d5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f7420746865205374726174656769737400000000604482015260640161035e565b60405163bc26e7e560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bc26e7e590610c8f90309087908790879060040161428b565b600060405180830381600087803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b50505050505050565b610cce612a39565b610cea5760405162461bcd60e51b815260040161035e906145d7565b600054610100900460ff1680610d03575060005460ff16155b610d665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161035e565b600054610100900460ff16158015610d88576000805461ffff19166101011790555b610d9384848461317a565b8015610da5576000805461ff00191690555b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610df35760405162461bcd60e51b815260040161035e906145a0565b60008051602061488f83398151915280546002811415610e255760405162461bcd60e51b815260040161035e9061466f565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614610e9e5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015260640161035e565b610ea88484613235565b50600190555050565b60a4546001600160a01b03163314610f0b5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f7420746865204861727665737465720000000000604482015260640161035e565b60008051602061488f83398151915280546002811415610f3d5760405162461bcd60e51b815260040161035e9061466f565b60028255610f496132c7565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610feb5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161035e565b610ff433613515565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161461106d5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015260640161035e565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156110cc57600080fd5b505afa1580156110e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110491906140e3565b60345461111a906801bc16d674ec800000614780565b6111249190614746565b92915050565b611132612a39565b61114e5760405162461bcd60e51b815260040161035e906145d7565b6040516001600160a01b03821681527f83f29c79feb71f8fba9d0fbc4ba5f0982a28b6b1e868b3fc50e6400d100bca0f9060200160405180910390a1603380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60335461010090046001600160a01b031633146111e15760405162461bcd60e51b815260040161035e90614638565b60335460ff16156112045760405162461bcd60e51b815260040161035e9061460e565b6000611219826801bc16d674ec800000614780565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b391906140e3565b8111156112f65760405162461bcd60e51b81526020600482015260116024820152700d2dce6eaccccd2c6d2cadce840ae8aa89607b1b604482015260640161035e565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561135857600080fd5b505af115801561136c573d6000803e3d6000fd5b5050505060005b82811015610da557600084848381811061138f5761138f61483f565b90506020028101906113a191906146dd565b6113ab9080614697565b6040516113b992919061425f565b6040805191829003909120600081815260356020529182205490925060ff16908160038111156113eb576113eb614813565b146114385760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f72206e6f7420726567697374657265640000000000000000604482015260640161035e565b60408051600160f81b60208201526000602182018190526bffffffffffffffffffffffff193060601b16602c830152910160405160208183030381529060405290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228951188888878181106114bb576114bb61483f565b90506020028101906114cd91906146dd565b6114d79080614697565b848b8b8a8181106114ea576114ea61483f565b90506020028101906114fc91906146dd565b61150a906020810190614697565b8d8d8c81811061151c5761151c61483f565b905060200281019061152e91906146dd565b604001356040518763ffffffff1660e01b8152600401611553969594939291906144ea565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050506001603460008282546115989190614746565b909155507ffeb31a79d38edb1b090d516e4df3e273651179c6f2c2ec53a9a22ae015b70ba990508787868181106115d1576115d161483f565b90506020028101906115e391906146dd565b6115ed9080614697565b6801bc16d674ec800000846040516116089493929190614539565b60405180910390a150506000908152603560205260409020805460ff1916600190811790915501611373565b60335461010090046001600160a01b031633146116635760405162461bcd60e51b815260040161035e90614638565b60335460ff16156116865760405162461bcd60e51b815260040161035e9061460e565b600060356000878760405161169c92919061425f565b604080519182900390912082526020820192909252016000205460ff16905060028160038111156116cf576116cf614813565b146117145760405162461bcd60e51b815260206004820152601560248201527456616c696461746f72206e6f742065786974696e6760581b604482015260640161035e565b6040516312b3fc1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906312b3fc199061176890899089908990899089906004016144a9565b600060405180830381600087803b15801561178257600080fd5b505af1158015611796573d6000803e3d6000fd5b505050507ff72821b8777f002ccdf6326f1242d9e0f762eb077668b67bebe640535378066d868686866040516117cf9493929190614420565b60405180910390a160036035600088886040516117ed92919061425f565b60408051918290039091208252602082019290925201600020805460ff1916600183600381111561182057611820614813565b0217905550505050505050565b60a5818154811061183d57600080fd5b6000918252602090912001546001600160a01b0316905081565b606b546001600160a01b031633146118bf5760405162461bcd60e51b815260206004820152602560248201527f43616c6c6572206973206e6f7420746865204163636f756e74696e6720476f7660448201526432b93737b960d91b606482015260840161035e565b60335460ff166119085760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161035e565b6040516370a0823160e01b815230600482015247906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561196c57600080fd5b505afa158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a491906140e3565b90508382111580156119b65750828111155b611a025760405162461bcd60e51b815260206004820152601960248201527f6f766572206163636f756e74696e67207468726573686f6c6400000000000000604482015260640161035e565b60345460685460408051928352602083018b9052820152606081018690526080810188905260a081018790527fb2c41d2aedabd456081f30f3b116ce88de1c795a7d4ca787fef373a393f3c5db9060c00160405180910390a1603488905560688590558615611b235781871115611aae5760405162461bcd60e51b815260206004820152601060248201526f0d2dce6eaccccd2c6d2cadce8408aa8960831b604482015260640161035e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b158015611b0957600080fd5b505af1158015611b1d573d6000803e3d6000fd5b50505050505b8515611bed5760405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018890527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015611bb357600080fd5b505af1158015611bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611beb9190613f0d565b505b611bf56135d6565b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190613cc9565b6001600160a01b0316336001600160a01b031614611cf05760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f7420746865205374726174656769737400000000604482015260640161035e565b610ff4613669565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611d475750611d32610a40565b6001600160a01b0316336001600160a01b0316145b611d9f5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b606482015260840161035e565b60008051602061488f83398151915280546002811415611dd15760405162461bcd60e51b815260040161035e9061466f565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611e3757600080fd5b505afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f91906140e3565b90508015611ec257611ec27f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836136c1565b505060019055565b611ed2612a39565b611eee5760405162461bcd60e51b815260040161035e906145d7565b60a1548110611f2f5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161035e565b600060a18281548110611f4457611f4461483f565b60009182526020808320909101546001600160a01b0390811680845260a090925260409092205460a15491935090911690611f819060019061479f565b8310156120035760a18054611f989060019061479f565b81548110611fa857611fa861483f565b60009182526020909120015460a180546001600160a01b039092169185908110611fd457611fd461483f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60a180548061201457612014614829565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b0385811680835260a0855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b61209d612a39565b6120b95760405162461bcd60e51b815260040161035e906145d7565b8060005b8181101561216c5760008484838181106120d9576120d961483f565b90506020020160208101906120ee9190613cac565b6001600160a01b0316141561215c5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b606482015260840161035e565b612165816147e2565b90506120bd565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc60a584846040516121a193929190614388565b60405180910390a1610da560a58484613a05565b60335460009061010090046001600160a01b031633146121e75760405162461bcd60e51b815260040161035e90614638565b60335460ff161561220a5760405162461bcd60e51b815260040161035e9061460e565b6068544710156122225761221c613669565b50600090565b600060685447612232919061479f565b9050600191506801bc16d674ec800000811061240d57600061225d6801bc16d674ec8000008361475e565b90508060346000828254612271919061479f565b909155506000905061228c826801bc16d674ec800000614780565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156122e957600080fd5b505af11580156122fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b15801561238d57600080fd5b505af11580156123a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c59190613f0d565b5060345460408051848152602081019290925281018290527fbe7040030ff7b347853214bf49820c6d455fedf58f3815f85c7bc5216993682b9060600160405180910390a150505b60006068544761241d919061479f565b90506801bc16d674ec800000811061246f5760405162461bcd60e51b8152602060048201526015602482015274756e6578706563746564206163636f756e74696e6760581b604482015260640161035e565b8061247957505090565b6069548110156124d35780606860008282546124959190614746565b90915550506040518181527f7a745a2c63a535068f52ceca27debd5297bbad5f7f37ec53d044a59d0362445d906020015b60405180910390a1505090565b606a54811115612666577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561253857600080fd5b505af115801561254c573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b1580156125dc57600080fd5b505af11580156125f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126149190613f0d565b50600160346000828254612628919061479f565b909155505060345460408051918252602082018390527f6aa7e30787b26429ced603a7aba8b19c4b5d5bcf29a3257da953c8d53bcaa3a691016124c6565b61266e613669565b60009250505090565b61267f612a39565b61269b5760405162461bcd60e51b815260040161035e906145d7565b80821080156126b257506801bc16d674ec80000082105b80156126c657506801bc16d674ec80000081105b80156126e35750673782dace9d9000006126e0838361479f565b10155b61272f5760405162461bcd60e51b815260206004820152601760248201527f696e636f7272656374206675736520696e74657276616c000000000000000000604482015260640161035e565b60408051838152602081018390527fcb8d24e46eb3c402bf344ee60a6576cba9ef2f59ea1af3b311520704924e901a910160405180910390a1606991909155606a55565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b1580156127fe57600080fd5b505af1158015612812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128369190613f0d565b50565b60335461010090046001600160a01b031633146128685760405162461bcd60e51b815260040161035e90614638565b60335460ff161561288b5760405162461bcd60e51b815260040161035e9061460e565b6040516301ba3ee760e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906306e8fb9c906128e5908b908b908b908b908b908b908b908b90600401614447565b600060405180830381600087803b1580156128ff57600080fd5b505af1158015612913573d6000803e3d6000fd5b505050506000603560008a8a60405161292d92919061425f565b60408051918290039091208252602082019290925201600020805460ff1916600183600381111561296057612960614813565b02179055507f75c4a66b2c6c28cf46db7131182a812e4fbbb2f0591377aa83a737909a9b68c38888888860405161299a9493929190614420565b60405180910390a15050505050505050565b6129b4612a39565b6129d05760405162461bcd60e51b815260040161035e906145d7565b60a454604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a160a480546001600160a01b0319166001600160a01b0392909216919091179055565b6000612a516000805160206148af8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b612a72612a39565b612a8e5760405162461bcd60e51b815260040161035e906145d7565b612ab6817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316612ad66000805160206148af8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b612b16612a39565b612b325760405162461bcd60e51b815260040161035e906145d7565b6040516001600160a01b03821681527ff3dd2b598e2a94dd3f46b414f7c960f8e10a0b0efd00df97d27cdd0fee5c87539060200160405180910390a1606b80546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612bd85760405162461bcd60e51b815260040161035e906145a0565b60008051602061488f83398151915280546002811415612c0a5760405162461bcd60e51b815260040161035e9061466f565b60028255612c198585856136c1565b5060019055505050565b60335461010090046001600160a01b03163314612c525760405162461bcd60e51b815260040161035e90614638565b60335460ff1615612c755760405162461bcd60e51b815260040161035e9061460e565b6000603560008686604051612c8b92919061425f565b604080519182900390912082526020820192909252016000205460ff1690506001816003811115612cbe57612cbe614813565b14612d025760405162461bcd60e51b815260206004820152601460248201527315985b1a59185d1bdc881b9bdd081cdd185ad95960621b604482015260640161035e565b604051633877322b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633877322b90612d54908890889088908890600401614420565b600060405180830381600087803b158015612d6e57600080fd5b505af1158015612d82573d6000803e3d6000fd5b505050507ff8821da16f5ed966b41e0343c3eff9903af782d74f99f1689dd9d4562b6545b385858585604051612dbb9493929190614420565b60405180910390a16002603560008787604051612dd992919061425f565b60408051918290039091208252602082019290925201600020805460ff19166001836003811115612e0c57612e0c614813565b02179055505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612e605760405162461bcd60e51b815260040161035e906145a0565b60008051602061488f83398151915280546002811415612e925760405162461bcd60e51b815260040161035e9061466f565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612ef857600080fd5b505afa158015612f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3091906140e3565b90508015611ec257611ec27f000000000000000000000000000000000000000000000000000000000000000082613235565b606060a5805480602002602001604051908101604052809291908181526020018280548015612fba57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f9c575b5050505050905090565b6001600160a01b03828116600090815260a0602052604090205416156130215760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015260640161035e565b6001600160a01b0382161580159061304157506001600160a01b03811615155b6130815760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015260640161035e565b6001600160a01b03828116600081815260a06020908152604080832080549587166001600160a01b0319968716811790915560a1805460018101825594527faadc37b8ba5645e62f4546802db221593a94729ccbfc5a97d01365a88f64987890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526131759084906137b9565b505050565b825161318d9060a5906020860190613a68565b508151815181146131d75760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015260640161035e565b60005b8181101561322e5761321e8482815181106131f7576131f761483f565b60200260200101518483815181106132115761321161483f565b6020026020010151612fc4565b613227816147e2565b90506131da565b5050505050565b6000811161327e5760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015260640161035e565b6040805160008152602081018390526001600160a01b038416917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a25050565b60335460ff16156132ea5760405162461bcd60e51b815260040161035e9061460e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e52253816040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561334757600080fd5b505af115801561335b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337f91906140e3565b90506000606854826133919190614746565b9050804710156133e35760405162461bcd60e51b815260206004820152601860248201527f696e73756666696369656e74206574682062616c616e63650000000000000000604482015260640161035e565b8015610a8b5760006068819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561344c57600080fd5b505af1158015613460573d6000803e3d6000fd5b505060a454604080516001600160a01b0392831681527f0000000000000000000000000000000000000000000000000000000000000000909216602083015281018590527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353935060600191506134d39050565b60405180910390a160a454610a8b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613123565b6001600160a01b03811661356b5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161035e565b806001600160a01b031661358b6000805160206148af8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612836816000805160206148af83398151915255565b60335460ff1661361f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161035e565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60335460ff161561368c5760405162461bcd60e51b815260040161035e9061460e565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861364c3390565b600081116137115760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e67000000000000000000604482015260640161035e565b6001600160a01b0383166137605760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b604482015260640161035e565b6040805160008152602081018390526001600160a01b038416917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a26131756001600160a01b0383168483613123565b600061380e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661388b9092919063ffffffff16565b805190915015613175578080602001905181019061382c9190613f0d565b6131755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161035e565b606061389a84846000856138a4565b90505b9392505050565b6060824710156139055760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161035e565b843b6139535760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161035e565b600080866001600160a01b0316858760405161396f919061426f565b60006040518083038185875af1925050503d80600081146139ac576040519150601f19603f3d011682016040523d82523d6000602084013e6139b1565b606091505b50915091506139c18282866139cc565b979650505050505050565b606083156139db57508161389d565b8251156139eb5782518084602001fd5b8160405162461bcd60e51b815260040161035e919061458d565b828054828255906000526020600020908101928215613a58579160200282015b82811115613a585781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613a25565b50613a64929150613abd565b5090565b828054828255906000526020600020908101928215613a58579160200282015b82811115613a5857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613a88565b5b80821115613a645760008155600101613abe565b60008083601f840112613ae457600080fd5b5081356001600160401b03811115613afb57600080fd5b6020830191508360208260051b8501011115613b1657600080fd5b9250929050565b600082601f830112613b2e57600080fd5b81356020613b43613b3e83614723565b6146f3565b80838252828201915082860187848660051b8901011115613b6357600080fd5b60005b85811015613b8b578135613b798161486b565b84529284019290840190600101613b66565b5090979650505050505050565b60008083601f840112613baa57600080fd5b5081356001600160401b03811115613bc157600080fd5b602083019150836020828501011115613b1657600080fd5b600060a08284031215613beb57600080fd5b50919050565b600060a08284031215613c0357600080fd5b60405160a081018181106001600160401b0382111715613c2557613c25614855565b604052905080613c3483613c7c565b8152613c4260208401613c95565b6020820152613c5360408401613c95565b60408201526060830135613c6681614880565b6060820152608092830135920191909152919050565b803563ffffffff81168114613c9057600080fd5b919050565b80356001600160401b0381168114613c9057600080fd5b600060208284031215613cbe57600080fd5b813561389d8161486b565b600060208284031215613cdb57600080fd5b815161389d8161486b565b60008060408385031215613cf957600080fd5b8235613d048161486b565b91506020830135613d148161486b565b809150509250929050565b600080600060608486031215613d3457600080fd5b8335613d3f8161486b565b92506020840135613d4f8161486b565b929592945050506040919091013590565b60008060408385031215613d7357600080fd5b8235613d7e8161486b565b946020939093013593505050565b60008060208385031215613d9f57600080fd5b82356001600160401b03811115613db557600080fd5b613dc185828601613ad2565b90969095509350505050565b600080600060608486031215613de257600080fd5b83356001600160401b0380821115613df957600080fd5b613e0587838801613b1d565b94506020860135915080821115613e1b57600080fd5b613e2787838801613b1d565b93506040860135915080821115613e3d57600080fd5b50613e4a86828701613b1d565b9150509250925092565b600080600060e08486031215613e6957600080fd5b83356001600160401b03811115613e7f57600080fd5b8401601f81018613613e9057600080fd5b80356020613ea0613b3e83614723565b8083825282820191508285018a848660051b8801011115613ec057600080fd5b600095505b84861015613eea57613ed681613c95565b835260019590950194918301918301613ec5565b509650508601359350613f04915086905060408601613bf1565b90509250925092565b600060208284031215613f1f57600080fd5b815161389d81614880565b600060208284031215613f3c57600080fd5b5035919050565b60008060008060408587031215613f5957600080fd5b84356001600160401b0380821115613f7057600080fd5b613f7c88838901613b98565b90965094506020870135915080821115613f9557600080fd5b50613fa287828801613ad2565b95989497509550505050565b600080600080600080600080610120898b031215613fcb57600080fd5b88356001600160401b0380821115613fe257600080fd5b613fee8c838d01613b98565b909a50985060208b013591508082111561400757600080fd5b6140138c838d01613ad2565b909850965060408b013591508082111561402c57600080fd5b506140398b828c01613b98565b909550935050606089013591506140538a60808b01613bd9565b90509295985092959890939650565b600080600080600060e0868803121561407a57600080fd5b85356001600160401b038082111561409157600080fd5b61409d89838a01613b98565b909750955060208801359150808211156140b657600080fd5b506140c388828901613ad2565b90945092506140d790508760408801613bd9565b90509295509295909350565b6000602082840312156140f557600080fd5b5051919050565b6000806040838503121561410f57600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561413757600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b8183526000602080850194508260005b8581101561419d576001600160401b0361418a83613c95565b1687529582019590820190600101614171565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526141e98160208601602086016147b6565b601f01601f19169290920160200192915050565b63ffffffff61420b82613c7c565b16825261421a60208201613c95565b6001600160401b0380821660208501528061423760408501613c95565b1660408501525050606081013561424d81614880565b15156060830152608090810135910152565b8183823760009101908152919050565b600082516142818184602087016147b6565b9190910192915050565b6001600160a01b03851681526101006020808301829052855191830182905260009161012084019187810191845b818110156142de5783516001600160401b0316855293820193928201926001016142b9565b505082935086604086015263ffffffff865116606086015280860151925050506001600160401b0380821660808501528060408601511660a085015250506060830151151560c0830152608083015160e083015295945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561437c5783516001600160a01b031683529284019291840191600101614357565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156143d25781546001600160a01b0316845292840192600191820191016143ad565b505050838103828501528481528590820160005b868110156144145782356143f98161486b565b6001600160a01b0316825291830191908301906001016143e6565b50979650505050505050565b6040815260006144346040830186886141a8565b82810360208401526139c1818587614161565b600061012080835261445c8184018b8d6141a8565b9050828103602084015261447181898b614161565b905082810360408401526144868187896141a8565b91505083606083015261449c60808301846141fd565b9998505050505050505050565b60e0815260006144bd60e0830187896141a8565b82810360208401526144d0818688614161565b9150506144e060408301846141fd565b9695505050505050565b6080815260006144fe60808301888a6141a8565b828103602084015261451081886141d1565b905082810360408401526145258186886141a8565b915050826060830152979650505050505050565b60608152600061454d6060830186886141a8565b84602084015282810360408401526139c181856141d1565b602081016004831061458757634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061389d60208301846141d1565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601d908201527f43616c6c6572206973206e6f7420746865205265676973747261746f72000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000808335601e198436030181126146ae57600080fd5b8301803591506001600160401b038211156146c857600080fd5b602001915036819003821315613b1657600080fd5b60008235605e1983360301811261428157600080fd5b604051601f8201601f191681016001600160401b038111828210171561471b5761471b614855565b604052919050565b60006001600160401b0382111561473c5761473c614855565b5060051b60200190565b60008219821115614759576147596147fd565b500190565b60008261477b57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561479a5761479a6147fd565b500290565b6000828210156147b1576147b16147fd565b500390565b60005b838110156147d15781810151838201526020016147b9565b83811115610da55750506000910152565b60006000198214156147f6576147f66147fd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461283657600080fd5b801515811461283657600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212204292636866460b0a0ebdd872cc7401407e5a3bdd212181fd3cea747a97b6379e64736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of weth asset"
        },
        "returns": {
          "balance": "   Total value of (W)ETH"
        }
      },
      "constructor": {
        "params": {
          "_baseConfig": "Base strategy config with platformAddress (ERC-4626 Vault contract), eg sfrxETH or sDAI, and vaultAddress (OToken Vault contract), eg VaultProxy or OETHVaultProxy",
          "_beaconChainDepositContract": "Address of the beacon chain deposit contract",
          "_feeAccumulator": "Address of the fee accumulator receiving execution layer validator rewards",
          "_ssvNetwork": "Address of the SSV Network contract",
          "_ssvToken": "Address of the Erc20 SSV Token contract",
          "_wethAddress": "Address of the Erc20 WETH Token contract"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "Amount of assets that were transferred to the strategy by the vault.",
          "_asset": "Address of asset to deposit. Has to be WETH."
        }
      },
      "depositSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))": {
        "details": "A SSV cluster is defined by the SSVOwnerAddress and the set of operatorIds. uses \"onlyStrategist\" modifier so continuous front-running can't DOS our maintenance service that tries to top up SSV tokens.",
        "params": {
          "cluster": "The SSV cluster details that must be derived from emitted events from the SSVNetwork contract."
        }
      },
      "doAccounting()": {
        "details": "This function could in theory be permission-less but lets allow only the Registrator (Defender Action) to call it for now."
      },
      "getRewardTokenAddresses()": {
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "initialize(address[],address[],address[])": {
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_rewardTokenAddresses": "Address of reward token for platform"
        }
      },
      "manuallyFixAccounting(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "allow the accounting governor to fix the accounting of this strategy and unpause",
        "params": {
          "_activeDepositedValidators": "the override value of activeDepositedValidators",
          "_consensusRewards": "the override value for consensusRewards",
          "_ethThresholdCheck": "maximum allowed ETH balance on the contract for the function to run",
          "_ethToWeth": "the amount of ETH to be converted to WETH",
          "_wethThresholdCheck": "maximum allowed WETH balance on the contract for the function to run        the above 2 checks are done so transaction doesn't get front run and cause        unexpected behaviour",
          "_wethToBeSentToVault": "the amount of WETH to be sent to the Vault"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removePToken(uint256)": {
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "setHarvesterAddress(address)": {
        "params": {
          "_harvesterAddress": "Address of the harvester contract."
        }
      },
      "setPTokenAddress(address,address)": {
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "params": {
          "_rewardTokenAddresses": "Array of reward token addresses"
        }
      },
      "stakeEth((bytes,bytes,bytes32)[])": {
        "params": {
          "validators": "A list of validator data needed to stake. The `ValidatorStakeData` struct contains the pubkey, signature and depositDataRoot. Only the registrator can call this function."
        }
      },
      "supportsAsset(address)": {
        "params": {
          "_asset": "The address of the asset token."
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "Amount of WETH to withdraw",
          "_asset": "WETH to withdraw",
          "_recipient": "Address to receive withdrawn assets"
        }
      }
    },
    "stateVariables": {
      "FEE_ACCUMULATOR_ADDRESS": {
        "details": "this address will receive Execution layer rewards - These are rewards earned for executing transactions on the Ethereum network as part of block proposals. They include priority fees (fees paid by users for their transactions to be included) and MEV rewards (rewards for arranging transactions in a way that benefits the validator)."
      }
    },
    "title": "Native Staking SSV Strategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BEACON_CHAIN_DEPOSIT_CONTRACT()": {
        "notice": "The address of the beacon chain deposit contract"
      },
      "FEE_ACCUMULATOR_ADDRESS()": {
        "notice": "Fee collector address"
      },
      "MAX_STAKE()": {
        "notice": "The maximum amount of ETH that can be staked by a validator"
      },
      "SSV_NETWORK_ADDRESS()": {
        "notice": "The address of the SSV Network contract used to interface with"
      },
      "SSV_TOKEN_ADDRESS()": {
        "notice": "SSV ERC20 token that serves as a payment for operating SSV validators"
      },
      "VAULT_ADDRESS()": {
        "notice": "Address of the OETH Vault proxy contract"
      },
      "WETH_TOKEN_ADDRESS()": {
        "notice": "The address of the Wrapped ETH (WETH) token contract"
      },
      "accountingGovernor()": {
        "notice": "Governor that can manually correct the accounting"
      },
      "assetToPToken(address)": {
        "notice": "asset => pToken (Platform Specific Token Address)"
      },
      "checkBalance(address)": {
        "notice": "Returns the total value of (W)ETH that is staked to the validators and WETH deposits that are still to be staked. This does not include ETH from consensus rewards sitting in this strategy or ETH from MEV rewards in the FeeAccumulator. These rewards are harvested and sent to the Dripper so will eventually be sent to the Vault as WETH."
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "notice": "Collect accumulated reward token and send to Vault."
      },
      "consensusRewards()": {
        "notice": "Keeps track of the total consensus rewards swept from the beacon chain"
      },
      "deposit(address,uint256)": {
        "notice": "Unlike other strategies, this does not deposit assets into the underlying platform. It just checks the asset is WETH and emits the Deposit event. To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used. Will NOT revert if the strategy is paused from an accounting failure."
      },
      "depositAll()": {
        "notice": "Unlike other strategies, this does not deposit assets into the underlying platform. It just emits the Deposit event. To deposit WETH into validators `registerSsvValidator` and `stakeEth` must be used. Will NOT revert if the strategy is paused from an accounting failure."
      },
      "depositSSV(uint64[],uint256,(uint32,uint64,uint64,bool,uint256))": {
        "notice": "Deposits more SSV Tokens to the SSV Network contract which is used to pay the SSV Operators."
      },
      "doAccounting()": {
        "notice": "This notion page offers a good explanation of how the accounting functions https://www.notion.so/originprotocol/Limited-simplified-native-staking-accounting-67a217c8420d40678eb943b9da0ee77d In short, after dividing by 32, if the ETH remaining on the contract falls between 0 and fuseIntervalStart, the accounting function will treat that ETH as Beacon chain consensus rewards. On the contrary, if after dividing by 32, the ETH remaining on the contract falls between fuseIntervalEnd and 32, the accounting function will treat that as a validator slashing.Perform the accounting attributing beacon chain ETH to either full or partial withdrawals. Returns true when accounting is valid and fuse isn't \"blown\". Returns false when fuse is blown."
      },
      "exitSsvValidator(bytes,uint64[])": {
        "notice": "Exit a validator from the Beacon chain. The staked ETH will eventually swept to this native staking strategy. Only the registrator can call this function."
      },
      "fuseIntervalEnd()": {
        "notice": "end of fuse interval"
      },
      "fuseIntervalStart()": {
        "notice": "start of fuse interval"
      },
      "getRewardTokenAddresses()": {
        "notice": "Get the reward token addresses."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "harvesterAddress()": {
        "notice": "Address of the Harvester contract allowed to collect reward tokens"
      },
      "initialize(address[],address[],address[])": {
        "notice": "initialize function, to set up initial internal state"
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "platformAddress()": {
        "notice": "Address of the underlying platform"
      },
      "registerSsvValidator(bytes,uint64[],bytes,uint256,(uint32,uint64,uint64,bool,uint256))": {
        "notice": "Registers a new validator in the SSV Cluster. Only the registrator can call this function."
      },
      "removePToken(uint256)": {
        "notice": "Remove a supported asset by passing its index.      This method can only be called by the system Governor"
      },
      "removeSsvValidator(bytes,uint64[],(uint32,uint64,uint64,bool,uint256))": {
        "notice": "Remove a validator from the SSV Cluster. Make sure `exitSsvValidator` is called before and the validate has exited the Beacon chain. If removed before the validator has exited the beacon chain will result in the validator being slashed. Only the registrator can call this function."
      },
      "rewardTokenAddresses(uint256)": {
        "notice": "Address of the reward tokens. eg CRV, BAL, CVX, AURA"
      },
      "safeApproveAllTokens()": {
        "notice": "Approves the SSV Network contract to transfer SSV tokens for deposits"
      },
      "setFuseInterval(uint256,uint256)": {
        "notice": "set fuse interval values"
      },
      "setHarvesterAddress(address)": {
        "notice": "Set the Harvester contract that can collect rewards."
      },
      "setPTokenAddress(address,address)": {
        "notice": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor"
      },
      "setRegistrator(address)": {
        "notice": "Set the address of the registrator which can register, exit and remove validators"
      },
      "setRewardTokenAddresses(address[])": {
        "notice": "Set the reward token addresses. Any old addresses will be overwritten."
      },
      "stakeEth((bytes,bytes,bytes32)[])": {
        "notice": "Stakes WETH to the node validators"
      },
      "supportsAsset(address)": {
        "notice": "Returns bool indicating whether asset is supported by strategy."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends."
      },
      "validatorRegistrator()": {
        "notice": "Address of the registrator - allowed to register, exit and remove validators"
      },
      "validatorsStates(bytes32)": {
        "notice": "State of the validators keccak256(pubKey) => state"
      },
      "vaultAddress()": {
        "notice": "Address of the OToken vault"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraw WETH from this contract. Used only if some WETH for is lingering on the contract. That can happen when:   - the deposit was not a multiple of 32 WETH   - someone sent WETH directly to this contract Will NOT revert if the strategy is paused from an accounting failure."
      },
      "withdrawAll()": {
        "notice": "transfer all WETH deposits back to the vault. This does not withdraw from the validators. That has to be done separately with the `exitSsvValidator` and `removeSsvValidator` operations. This does not withdraw any execution rewards from the FeeAccumulator or consensus rewards in this strategy. Any ETH in this strategy that was swept from a full validator withdrawal will not be withdrawn. ETH from full validator withdrawals is sent to the Vault using `doAccounting`. Will NOT revert if the strategy is paused from an accounting failure."
      }
    },
    "notice": "Strategy to deploy funds into DVT validators powered by the SSV Network",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5232,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5235,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5275,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 3497,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "validatorRegistrator",
        "offset": 1,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3500,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "activeDepositedValidators",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 3506,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "validatorsStates",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_enum(VALIDATOR_STATE)3515)"
      },
      {
        "astId": 3510,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3042,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "consensusRewards",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 3046,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "fuseIntervalStart",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 3050,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "fuseIntervalEnd",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 3053,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "accountingGovernor",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 3057,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5355,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "_deprecated_platformAddress",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 5358,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "_deprecated_vaultAddress",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 5363,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5367,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "161",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5369,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 5371,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 5374,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "164",
        "type": "t_address"
      },
      {
        "astId": 5378,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "165",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5382,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "166",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 2613,
        "contract": "contracts/strategies/NativeStaking/NativeStakingSSVStrategy.sol:NativeStakingSSVStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "264",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(VALIDATOR_STATE)3515": {
        "encoding": "inplace",
        "label": "enum ValidatorRegistrator.VALIDATOR_STATE",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_enum(VALIDATOR_STATE)3515)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum ValidatorRegistrator.VALIDATOR_STATE)",
        "numberOfBytes": "32",
        "value": "t_enum(VALIDATOR_STATE)3515"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
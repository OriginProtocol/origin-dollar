{
  "address": "0xE1644803415c7E5d9E4c956DE78d9eB91946b46f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bribePool",
          "type": "address"
        }
      ],
      "name": "BribePoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bribePool",
          "type": "address"
        }
      ],
      "name": "BribePoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "NFTIdAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "NFTIdRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isVotingContract",
          "type": "bool"
        }
      ],
      "name": "addBribePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "addNFTIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bribePool",
          "type": "address"
        }
      ],
      "name": "bribePoolExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftIndexStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftIndexEnd",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "silent",
          "type": "bool"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchNFTIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNFTIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBribePoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTIdsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "nftIdExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeAllNFTIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "removeBribePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "removeNFTIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeContract",
      "outputs": [
        {
          "internalType": "contract ISafe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "contract IAerodromeVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6dc31ce1cc6770715d385068605e12696993f319eae62d51aabc40dc86e0bcb9",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0xE1644803415c7E5d9E4c956DE78d9eB91946b46f",
    "transactionIndex": 215,
    "gasUsed": "2427067",
    "logsBloom": "0x00000004000001000000000000000000000000000000000000000000000000000200000000000000000040000000000000000000000000000080000000000000000000000000000000000000000000020002008000000000000000000000000000000000020000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000008000001000100000000000008000000000000000000000000000000000000000000100000000000020000000000000000000000000800000000000000000000000000000000000000000",
    "blockHash": "0xa1bc6b3ab7e158389a9da86f4bbed01a531b3cddd216a58ebea0078b3e0b55ba",
    "transactionHash": "0x6dc31ce1cc6770715d385068605e12696993f319eae62d51aabc40dc86e0bcb9",
    "logs": [
      {
        "transactionIndex": 215,
        "blockNumber": 32030762,
        "transactionHash": "0x6dc31ce1cc6770715d385068605e12696993f319eae62d51aabc40dc86e0bcb9",
        "address": "0xE1644803415c7E5d9E4c956DE78d9eB91946b46f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ff1b9d9ba8558f5eafcec096318ea0d8b541971",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 1004,
        "blockHash": "0xa1bc6b3ab7e158389a9da86f4bbed01a531b3cddd216a58ebea0078b3e0b55ba"
      },
      {
        "transactionIndex": 215,
        "blockNumber": 32030762,
        "transactionHash": "0x6dc31ce1cc6770715d385068605e12696993f319eae62d51aabc40dc86e0bcb9",
        "address": "0xE1644803415c7E5d9E4c956DE78d9eB91946b46f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000004ff1b9d9ba8558f5eafcec096318ea0d8b541971",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 1005,
        "blockHash": "0xa1bc6b3ab7e158389a9da86f4bbed01a531b3cddd216a58ebea0078b3e0b55ba"
      }
    ],
    "blockNumber": 32030762,
    "cumulativeGasUsed": "47589191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4FF1b9D9ba8558F5EAfCec096318eA0d8b541971",
    "0x16613524e02ad97eDfeF371bC883F2F5d6C480A5",
    "0xebf418fe2512e7e6bd9b87a8f0f294acdc67e6b4"
  ],
  "numDeployments": 1,
  "solcInputHash": "6dec141f93805a485f5f204b82b0c2f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribePool\",\"type\":\"address\"}],\"name\":\"BribePoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribePool\",\"type\":\"address\"}],\"name\":\"BribePoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NFTIdAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NFTIdRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isVotingContract\",\"type\":\"bool\"}],\"name\":\"addBribePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"addNFTIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bribePool\",\"type\":\"address\"}],\"name\":\"bribePoolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftIndexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftIndexEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"silent\",\"type\":\"bool\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchNFTIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNFTIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBribePoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTIdsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"nftIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllNFTIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"removeBribePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"removeNFTIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeContract\",\"outputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IAerodromeVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addNFTIds(uint256[])\":{\"details\":\"Add NFT IDs to the list\",\"params\":{\"_nftIds\":\"The NFT IDs to add\"}},\"bribePoolExists(address)\":{\"details\":\"Check if a bribe pool exists\",\"params\":{\"bribePool\":\"The address of the pool to check\"},\"returns\":{\"_0\":\"true if the pool exists, false otherwise\"}},\"claimBribes(uint256,uint256,bool)\":{\"details\":\"Claim bribes for a range of NFTs\",\"params\":{\"nftIndexEnd\":\"The end index of the NFTs\",\"nftIndexStart\":\"The start index of the NFTs\",\"silent\":\"Doesn't revert if the claim fails when true\"}},\"fetchNFTIds()\":{\"details\":\"Fetch all NFT IDs from the veNFT contract\"},\"getAllNFTIds()\":{\"details\":\"Get all NFT IDs\",\"returns\":{\"_0\":\"The NFT IDs\"}},\"getBribePoolsLength()\":{\"details\":\"Get the length of the bribe pools list\",\"returns\":{\"_0\":\"The length of the bribe pools list\"}},\"getNFTIdsLength()\":{\"details\":\"Get the length of the nftIds list\",\"returns\":{\"_0\":\"The length of the nftIds list\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"nftIdExists(uint256)\":{\"details\":\"Check if a NFT exists on the list\",\"params\":{\"nftId\":\"The NFT ID to check\"},\"returns\":{\"_0\":\"true if the NFT ID exists, false otherwise\"}},\"removeAllNFTIds()\":{\"details\":\"Remove all NFT IDs from the list\"},\"removeBribePool(address)\":{\"details\":\"Remove a bribe pool from the list\",\"params\":{\"_poolAddress\":\"The address of the pool to remove\"}},\"removeNFTIds(uint256[])\":{\"details\":\"Remove NFT IDs from the list\",\"params\":{\"_nftIds\":\"The NFT IDs to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferTokens(address,uint256)\":{\"details\":\"Helps recovering any tokens accidentally sent to this module.\",\"params\":{\"amount\":\"Amount to transfer. 0 to transfer all balance.\",\"token\":\"Token to transfer. 0x0 to transfer Native token.\"}},\"updateRewardTokenAddresses()\":{\"details\":\"Update the reward token addresses for all pools\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fetchNFTIds()\":{\"notice\":\"This can revert if Safe owns too many NFTs since tx will be huge.         This function is public, anyone can call it, since it only fetches         the NFT IDs owned by the Safe. It shouldn't cause us any issues.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automation/ClaimBribesSafeModule.sol\":\"ClaimBribesSafeModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x1304796e9cdc64294735b4222849a240363b2aff374bb58b7c728f8dc0f4aa75\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/automation/AbstractSafeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISafe } from \\\"../interfaces/ISafe.sol\\\";\\n\\nabstract contract AbstractSafeModule is AccessControlEnumerable {\\n    ISafe public immutable safeContract;\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    modifier onlySafe() {\\n        require(\\n            msg.sender == address(safeContract),\\n            \\\"Caller is not the safe contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            hasRole(OPERATOR_ROLE, msg.sender),\\n            \\\"Caller is not an operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _safeContract) {\\n        safeContract = ISafe(_safeContract);\\n        _grantRole(DEFAULT_ADMIN_ROLE, address(safeContract));\\n        _grantRole(OPERATOR_ROLE, address(safeContract));\\n    }\\n\\n    /**\\n     * @dev Helps recovering any tokens accidentally sent to this module.\\n     * @param token Token to transfer. 0x0 to transfer Native token.\\n     * @param amount Amount to transfer. 0 to transfer all balance.\\n     */\\n    function transferTokens(address token, uint256 amount) external onlySafe {\\n        if (address(token) == address(0)) {\\n            // Move ETH\\n            amount = amount > 0 ? amount : address(this).balance;\\n            payable(address(safeContract)).transfer(amount);\\n            return;\\n        }\\n\\n        // Move all balance if amount set to 0\\n        amount = amount > 0 ? amount : IERC20(token).balanceOf(address(this));\\n\\n        // Transfer to Safe contract\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        IERC20(token).transfer(address(safeContract), amount);\\n    }\\n\\n    receive() external payable {\\n        // Accept ETH to pay for bridge fees\\n    }\\n}\\n\",\"keccak256\":\"0x02f5cebee3ef21afb1e5dafe15a9160017dde1b7361653e6285f884124d15af5\",\"license\":\"BUSL-1.1\"},\"contracts/automation/ClaimBribesSafeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AbstractSafeModule } from \\\"./AbstractSafeModule.sol\\\";\\nimport { ICLGauge } from \\\"../interfaces/aerodrome/ICLGauge.sol\\\";\\nimport { ICLPool } from \\\"../interfaces/aerodrome/ICLPool.sol\\\";\\n\\nstruct BribePoolInfo {\\n    address poolAddress;\\n    address rewardContractAddress;\\n    address[] rewardTokens;\\n}\\n\\ninterface IAerodromeVoter {\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n}\\n\\ninterface IVeNFT {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function ownerToNFTokenIdList(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface ICLRewardContract {\\n    function rewards(uint256 index) external view returns (address);\\n\\n    function rewardsListLength() external view returns (uint256);\\n}\\n\\ncontract ClaimBribesSafeModule is AbstractSafeModule {\\n    IAerodromeVoter public immutable voter;\\n    address public immutable veNFT;\\n\\n    uint256[] nftIds;\\n    mapping(uint256 => uint256) nftIdIndex;\\n\\n    BribePoolInfo[] bribePools;\\n    mapping(address => uint256) bribePoolIndex;\\n\\n    event NFTIdAdded(uint256 nftId);\\n    event NFTIdRemoved(uint256 nftId);\\n\\n    event BribePoolAdded(address bribePool);\\n    event BribePoolRemoved(address bribePool);\\n\\n    constructor(\\n        address _safeContract,\\n        address _voter,\\n        address _veNFT\\n    ) AbstractSafeModule(_safeContract) {\\n        voter = IAerodromeVoter(_voter);\\n        veNFT = _veNFT;\\n    }\\n\\n    /**\\n     * @dev Claim bribes for a range of NFTs\\n     * @param nftIndexStart The start index of the NFTs\\n     * @param nftIndexEnd The end index of the NFTs\\n     * @param silent Doesn't revert if the claim fails when true\\n     */\\n    function claimBribes(\\n        uint256 nftIndexStart,\\n        uint256 nftIndexEnd,\\n        bool silent\\n    ) external onlyOperator {\\n        if (nftIndexEnd < nftIndexStart) {\\n            (nftIndexStart, nftIndexEnd) = (nftIndexEnd, nftIndexStart);\\n        }\\n        uint256 nftCount = nftIds.length;\\n        nftIndexEnd = nftCount < nftIndexEnd ? nftCount : nftIndexEnd;\\n\\n        (\\n            address[] memory rewardContractAddresses,\\n            address[][] memory rewardTokens\\n        ) = _getRewardsInfoArray();\\n\\n        for (uint256 i = nftIndexStart; i < nftIndexEnd; i++) {\\n            uint256 nftId = nftIds[i];\\n            bool success = safeContract.execTransactionFromModule(\\n                address(voter),\\n                0, // Value\\n                abi.encodeWithSelector(\\n                    IAerodromeVoter.claimBribes.selector,\\n                    rewardContractAddresses,\\n                    rewardTokens,\\n                    nftId\\n                ),\\n                0 // Call\\n            );\\n\\n            require(success || silent, \\\"ClaimBribes failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the reward contract address and reward tokens for all pools\\n     * @return rewardContractAddresses The reward contract addresses\\n     * @return rewardTokens The reward tokens\\n     */\\n    function _getRewardsInfoArray()\\n        internal\\n        view\\n        returns (\\n            address[] memory rewardContractAddresses,\\n            address[][] memory rewardTokens\\n        )\\n    {\\n        BribePoolInfo[] memory _bribePools = bribePools;\\n        uint256 bribePoolCount = _bribePools.length;\\n        rewardContractAddresses = new address[](bribePoolCount);\\n        rewardTokens = new address[][](bribePoolCount);\\n\\n        for (uint256 i = 0; i < bribePoolCount; i++) {\\n            rewardContractAddresses[i] = _bribePools[i].rewardContractAddress;\\n            rewardTokens[i] = _bribePools[i].rewardTokens;\\n        }\\n    }\\n\\n    /***************************************\\n                NFT Management\\n    ****************************************/\\n    /**\\n     * @dev Add NFT IDs to the list\\n     * @param _nftIds The NFT IDs to add\\n     */\\n    function addNFTIds(uint256[] memory _nftIds) external onlyOperator {\\n        for (uint256 i = 0; i < _nftIds.length; i++) {\\n            uint256 nftId = _nftIds[i];\\n            if (nftIdExists(nftId)) {\\n                // If it already exists, skip\\n                continue;\\n            }\\n\\n            // Make sure the NFT is owned by the Safe\\n            require(\\n                IVeNFT(veNFT).ownerOf(nftId) == address(safeContract),\\n                \\\"NFT not owned by safe\\\"\\n            );\\n\\n            nftIdIndex[nftId] = nftIds.length;\\n            nftIds.push(nftId);\\n\\n            emit NFTIdAdded(nftId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove NFT IDs from the list\\n     * @param _nftIds The NFT IDs to remove\\n     */\\n    function removeNFTIds(uint256[] memory _nftIds) external onlyOperator {\\n        for (uint256 i = 0; i < _nftIds.length; i++) {\\n            uint256 nftId = _nftIds[i];\\n            if (!nftIdExists(nftId)) {\\n                // If it doesn't exist, skip\\n                continue;\\n            }\\n\\n            uint256 index = nftIdIndex[nftId];\\n            uint256 lastNftId = nftIds[nftIds.length - 1];\\n            nftIds[index] = lastNftId;\\n            nftIdIndex[lastNftId] = index;\\n            nftIds.pop();\\n\\n            emit NFTIdRemoved(nftId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if a NFT exists on the list\\n     * @param nftId The NFT ID to check\\n     * @return true if the NFT ID exists, false otherwise\\n     */\\n    function nftIdExists(uint256 nftId) public view returns (bool) {\\n        uint256 index = nftIdIndex[nftId];\\n        uint256[] memory _nftIds = nftIds;\\n        return (index < _nftIds.length) && _nftIds[index] == nftId;\\n    }\\n\\n    /**\\n     * @dev Get the length of the nftIds list\\n     * @return The length of the nftIds list\\n     */\\n    function getNFTIdsLength() external view returns (uint256) {\\n        return nftIds.length;\\n    }\\n\\n    /**\\n     * @dev Get all NFT IDs\\n     * @return The NFT IDs\\n     */\\n    function getAllNFTIds() external view returns (uint256[] memory) {\\n        return nftIds;\\n    }\\n\\n    /**\\n     * @dev Fetch all NFT IDs from the veNFT contract\\n     * @notice This can revert if Safe owns too many NFTs since tx will be huge.\\n     *         This function is public, anyone can call it, since it only fetches\\n     *         the NFT IDs owned by the Safe. It shouldn't cause us any issues.\\n     */\\n    function fetchNFTIds() external {\\n        // Purge the array\\n        delete nftIds;\\n\\n        uint256 i = 0;\\n        while (true) {\\n            uint256 nftId = IVeNFT(veNFT).ownerToNFTokenIdList(\\n                address(safeContract),\\n                i\\n            );\\n            if (nftId == 0) {\\n                break;\\n            }\\n\\n            nftIdIndex[nftId] = nftIds.length;\\n            nftIds.push(nftId);\\n            i++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove all NFT IDs from the list\\n     */\\n    function removeAllNFTIds() external onlyOperator {\\n        uint256 length = nftIds.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 nftId = nftIds[i];\\n            delete nftIdIndex[nftId];\\n            emit NFTIdRemoved(nftId);\\n        }\\n\\n        delete nftIds;\\n    }\\n\\n    /***************************************\\n            Bribe Pool Management\\n    ****************************************/\\n    // @dev Whitelist a pool to claim bribes from\\n    // @param _poolAddress The address of the pool to whitelist\\n    function addBribePool(address _poolAddress, bool _isVotingContract)\\n        external\\n        onlySafe\\n    {\\n        BribePoolInfo memory bribePool;\\n\\n        if (_isVotingContract) {\\n            bribePool = BribePoolInfo({\\n                poolAddress: _poolAddress,\\n                rewardContractAddress: _poolAddress,\\n                rewardTokens: _getRewardTokenAddresses(_poolAddress)\\n            });\\n        } else {\\n            // Find the gauge address\\n            address _gaugeAddress = ICLPool(_poolAddress).gauge();\\n            // And the reward contract address\\n            address _rewardContractAddress = ICLGauge(_gaugeAddress)\\n                .feesVotingReward();\\n\\n            bribePool = BribePoolInfo({\\n                poolAddress: _poolAddress,\\n                rewardContractAddress: _rewardContractAddress,\\n                rewardTokens: _getRewardTokenAddresses(_rewardContractAddress)\\n            });\\n        }\\n\\n        if (bribePoolExists(_poolAddress)) {\\n            // Update if it already exists\\n            bribePools[bribePoolIndex[_poolAddress]] = bribePool;\\n        } else {\\n            // If not, Append to the list\\n            bribePoolIndex[_poolAddress] = bribePools.length;\\n            bribePools.push(bribePool);\\n        }\\n\\n        emit BribePoolAdded(_poolAddress);\\n    }\\n\\n    /**\\n     * @dev Update the reward token addresses for all pools\\n     */\\n    function updateRewardTokenAddresses() external onlyOperator {\\n        BribePoolInfo[] storage _bribePools = bribePools;\\n        for (uint256 i = 0; i < _bribePools.length; i++) {\\n            BribePoolInfo storage bribePool = _bribePools[i];\\n            bribePool.rewardTokens = _getRewardTokenAddresses(\\n                bribePool.rewardContractAddress == bribePool.poolAddress\\n                    ? bribePool.poolAddress\\n                    : bribePool.rewardContractAddress\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the reward token addresses for a given reward contract address\\n     * @param _rewardContractAddress The address of the reward contract\\n     * @return _rewardTokens The reward token addresses\\n     */\\n    function _getRewardTokenAddresses(address _rewardContractAddress)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory _rewardTokens = new address[](\\n            ICLRewardContract(_rewardContractAddress).rewardsListLength()\\n        );\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            _rewardTokens[i] = ICLRewardContract(_rewardContractAddress)\\n                .rewards(i);\\n        }\\n\\n        return _rewardTokens;\\n    }\\n\\n    /**\\n     * @dev Remove a bribe pool from the list\\n     * @param _poolAddress The address of the pool to remove\\n     */\\n    function removeBribePool(address _poolAddress) external onlySafe {\\n        if (!bribePoolExists(_poolAddress)) {\\n            // If it doesn't exist, skip\\n            return;\\n        }\\n\\n        uint256 index = bribePoolIndex[_poolAddress];\\n        BribePoolInfo memory lastBribePool = bribePools[bribePools.length - 1];\\n        bribePools[index] = lastBribePool;\\n        bribePoolIndex[lastBribePool.poolAddress] = index;\\n        bribePools.pop();\\n\\n        emit BribePoolRemoved(_poolAddress);\\n    }\\n\\n    /**\\n     * @dev Check if a bribe pool exists\\n     * @param bribePool The address of the pool to check\\n     * @return true if the pool exists, false otherwise\\n     */\\n    function bribePoolExists(address bribePool) public view returns (bool) {\\n        BribePoolInfo[] memory _bribePools = bribePools;\\n        uint256 poolIndex = bribePoolIndex[bribePool];\\n        return\\n            poolIndex < _bribePools.length &&\\n            _bribePools[poolIndex].poolAddress == bribePool;\\n    }\\n\\n    /**\\n     * @dev Get the length of the bribe pools list\\n     * @return The length of the bribe pools list\\n     */\\n    function getBribePoolsLength() external view returns (uint256) {\\n        return bribePools.length;\\n    }\\n}\\n\",\"keccak256\":\"0x172bff9eac27f40dcd5047887393706d31fd624a38c4c41c1a97b5d2a74b3061\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address,\\n        uint256,\\n        bytes memory,\\n        uint8\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6d5fb3512c4fab418222023fb1b482891906eae8d2bda9d1eb2ef3d3c7653dee\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/aerodrome/ICLGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ICLGauge {\\n    /// @notice Returns the claimable rewards for a given account and tokenId\\n    /// @dev Throws if account is not the position owner\\n    /// @dev pool.updateRewardsGrowthGlobal() needs to be called first, to return the correct claimable rewards\\n    /// @param account The address of the user\\n    /// @param tokenId The tokenId of the position\\n    /// @return The amount of claimable reward\\n    function earned(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Retrieve rewards for all tokens owned by an account\\n    /// @dev Throws if not called by the voter\\n    /// @param account The account of the user\\n    function getReward(address account) external;\\n\\n    /// @notice Retrieve rewards for a tokenId\\n    /// @dev Throws if not called by the position owner\\n    /// @param tokenId The tokenId of the position\\n    function getReward(uint256 tokenId) external;\\n\\n    /// @notice Notifies gauge of gauge rewards.\\n    /// @param amount Amount of gauge rewards (emissions) to notify. Must be greater than 604_800.\\n    function notifyRewardAmount(uint256 amount) external;\\n\\n    /// @dev Notifies gauge of gauge rewards without distributing its fees.\\n    ///      Assumes gauge reward tokens is 18 decimals.\\n    ///      If not 18 decimals, rewardRate may have rounding issues.\\n    /// @param amount Amount of gauge rewards (emissions) to notify. Must be greater than 604_800.\\n    function notifyRewardWithoutClaim(uint256 amount) external;\\n\\n    /// @notice Used to deposit a CL position into the gauge\\n    /// @notice Allows the user to receive emissions instead of fees\\n    /// @param tokenId The tokenId of the position\\n    function deposit(uint256 tokenId) external;\\n\\n    /// @notice Used to withdraw a CL position from the gauge\\n    /// @notice Allows the user to receive fees instead of emissions\\n    /// @notice Outstanding emissions will be collected on withdrawal\\n    /// @param tokenId The tokenId of the position\\n    function withdraw(uint256 tokenId) external;\\n\\n    // /// @notice Fetch all tokenIds staked by a given account\\n    // /// @param depositor The address of the user\\n    // /// @return The tokenIds of the staked positions\\n    // function stakedValues(address depositor) external view returns (uint256[] memory);\\n\\n    // /// @notice Fetch a staked tokenId by index\\n    // /// @param depositor The address of the user\\n    // /// @param index The index of the staked tokenId\\n    // /// @return The tokenId of the staked position\\n    // function stakedByIndex(address depositor, uint256 index) external view returns (uint256);\\n\\n    // /// @notice Check whether a position is staked in the gauge by a certain user\\n    // /// @param depositor The address of the user\\n    // /// @param tokenId The tokenId of the position\\n    // /// @return Whether the position is staked in the gauge\\n    // function stakedContains(address depositor, uint256 tokenId) external view returns (bool);\\n\\n    // /// @notice The amount of positions staked in the gauge by a certain user\\n    // /// @param depositor The address of the user\\n    // /// @return The amount of positions staked in the gauge\\n    // function stakedLength(address depositor) external view returns (uint256);\\n\\n    function feesVotingReward() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3269108fabb9d276e1477fa063571ff0918b9ba16c86859dcbeb26a07fb42bca\",\"license\":\"MIT\"},\"contracts/interfaces/aerodrome/ICLPool.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title The interface for a CL Pool\\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface ICLPool {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            bool unlocked\\n        );\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The gauge corresponding to this pool\\n    /// @return The gauge contract address\\n    function gauge() external view returns (address);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @dev This value includes staked liquidity\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from\\n    /// the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise\\n    /// equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xbc17eee10486bad6fd3fb0f28c3bdb03521c579487e34b2ad0185b041ebdce95\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c806385cbb1de116100ec578063bed0c8cd1161008a578063e3ebc1d811610064578063e3ebc1d8146104c1578063e80d3bec146104e1578063f5b541a614610501578063f9081ba21461052357600080fd5b8063bed0c8cd14610461578063ca15c87314610481578063d547741f146104a157600080fd5b806396269198116100c657806396269198146103d857806396b096bf146103f8578063a217fddf1461042c578063bec3fa171461044157600080fd5b806385cbb1de146103785780639010d07c1461039857806391d14854146103b857600080fd5b80633218861f116101595780633caeec13116101335780633caeec13146102e257806346c96aac146102f75780636359cfd7146103435780637ad72e921461035857600080fd5b80633218861f1461029857806336568abe146102ad578063366ff143146102cd57600080fd5b806301ffc9a7146101ac5780630d5b6218146101e15780630f1dbc63146101f8578063248a9ca3146102185780632dbefa23146102565780632f2ff15d1461027857600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004612156565b610557565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b506101f6610582565b005b34801561020457600080fd5b506101f661021336600461218e565b610658565b34801561022457600080fd5b506102486102333660046121c7565b60009081526020819052604090206001015490565b6040519081526020016101d8565b34801561026257600080fd5b5061026b610845565b6040516101d891906121e0565b34801561028457600080fd5b506101f6610293366004612238565b61089d565b3480156102a457600080fd5b50600454610248565b3480156102b957600080fd5b506101f66102c8366004612238565b6108c8565b3480156102d957600080fd5b506101f6610942565b3480156102ee57600080fd5b506101f6610a0f565b34801561030357600080fd5b5061032b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d8565b34801561034f57600080fd5b50600254610248565b34801561036457600080fd5b506101f6610373366004612268565b610b39565b34801561038457600080fd5b506101cc6103933660046121c7565b610e99565b3480156103a457600080fd5b5061032b6103b3366004612296565b610f2a565b3480156103c457600080fd5b506101cc6103d3366004612238565b610f49565b3480156103e457600080fd5b506101f66103f33660046122b8565b610f72565b34801561040457600080fd5b5061032b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561043857600080fd5b50610248600081565b34801561044d57600080fd5b506101f661045c3660046122d5565b6111b8565b34801561046d57600080fd5b506101f661047c366004612317565b611385565b34801561048d57600080fd5b5061024861049c3660046121c7565b611584565b3480156104ad57600080fd5b506101f66104bc366004612238565b61159b565b3480156104cd57600080fd5b506101cc6104dc3660046122b8565b6115c1565b3480156104ed57600080fd5b506101f66104fc366004612317565b6116f7565b34801561050d57600080fd5b5061024860008051602061272d83398151915281565b34801561052f57600080fd5b5061032b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216635a05180f60e01b148061057c575061057c82611847565b92915050565b61059a60008051602061272d83398151915233610f49565b6105bf5760405162461bcd60e51b81526004016105b6906123e4565b60405180910390fd5b600460005b81548110156106545760008282815481106105e1576105e161241b565b6000918252602090912060039091020180546001820154919250610634916001600160a01b039081169116146106245760018201546001600160a01b031661187c565b81546001600160a01b031661187c565b805161064a9160028401916020909101906120c2565b50506001016105c4565b5050565b61067060008051602061272d83398151915233610f49565b61068c5760405162461bcd60e51b81526004016105b6906123e4565b82821015610698579091905b6002548281106106a857826106aa565b805b92506000806106b76119d4565b9092509050855b8581101561083c576000600282815481106106db576106db61241b565b9060005260206000200154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77f00000000000000000000000000000000000000000000000000000000000000006000637715ee7560e01b89898860405160240161075993929190612476565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b90921682526107a3939291600090600401612546565b6020604051808303816000875af11580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190612581565b905080806107f15750865b6108325760405162461bcd60e51b815260206004820152601260248201527110db185a5b509c9a58995cc819985a5b195960721b60448201526064016105b6565b50506001016106be565b50505050505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561089357602002820191906000526020600020905b81548152602001906001019080831161087f575b5050505050905090565b6000828152602081905260409020600101546108b98133611be9565b6108c38383611c4d565b505050565b6001600160a01b03811633146109385760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105b6565b6106548282611c6f565b61095a60008051602061272d83398151915233610f49565b6109765760405162461bcd60e51b81526004016105b6906123e4565b60025460005b818110156109ff576000600282815481106109995761099961241b565b9060005260206000200154905060036000828152602001908152602001600020600090557f79246bc6e0aae098ed0639837e8404e2e0a8ed69330b640329110dd8dbaa49d9816040516109ee91815260200190565b60405180910390a15060010161097c565b50610a0c60026000612127565b50565b610a1b60026000612127565b60005b6040516322fe761360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690638bf9d84c90604401602060405180830381865afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad4919061259e565b905080600003610ae2575050565b600280546000838152600360205260408120829055600182018355919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0181905581610b30816125cd565b92505050610a1e565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b815760405162461bcd60e51b81526004016105b6906125e6565b604080516060808201835260008083526020830152918101919091528115610bd457604080516060810182526001600160a01b0385168082526020820152908101610bcb8561187c565b90529050610cd9565b6000836001600160a01b031663a6f19c846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c38919061261d565b90506000816001600160a01b0316630fe2f7116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e919061261d565b90506040518060600160405280866001600160a01b03168152602001826001600160a01b03168152602001610cd28361187c565b9052925050505b610ce2836115c1565b15610d7c576001600160a01b038316600090815260056020526040902054600480548392908110610d1557610d1561241b565b6000918252602091829020835160039092020180546001600160a01b039283166001600160a01b03199182161782558484015160018301805491909416911617909155604083015180519192610d73926002850192909101906120c2565b50905050610e57565b600480546001600160a01b03808616600090815260056020908152604080832085905560018501865594909152845160039093027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810180549484166001600160a01b0319958616178155868301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c83018054919095169516949094179092559284015180518594610e53937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d019201906120c2565b5050505b6040516001600160a01b03841681527f04ac231d3bf53fe932a340af339ec54fbb3da7fc1a0d222c55d26e8f890d2424906020015b60405180910390a1505050565b60008181526003602090815260408083205460028054835181860281018601909452808452919385939290830182828015610ef357602002820191906000526020600020905b815481526020019060010190808311610edf575b50505050509050805182108015610f22575083818381518110610f1857610f1861241b565b6020026020010151145b949350505050565b6000828152600160205260408120610f429083611c91565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fba5760405162461bcd60e51b81526004016105b6906125e6565b610fc3816115c1565b15610a0c576001600160a01b03811660009081526005602052604081205460048054919291610ff49060019061263a565b815481106110045761100461241b565b600091825260209182902060408051606081018252600390930290910180546001600160a01b03908116845260018201541683850152600281018054835181870281018701855281815294959294938601939283018282801561109057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611072575b505050505081525050905080600483815481106110af576110af61241b565b6000918252602091829020835160039092020180546001600160a01b039283166001600160a01b0319918216178255848401516001830180549190941691161790915560408301518051919261110d926002850192909101906120c2565b505081516001600160a01b0316600090815260056020526040902083905550600480548061113d5761113d61264d565b60008281526020812060036000199093019283020180546001600160a01b0319908116825560018201805490911690559061117b6002830182612127565b505090556040516001600160a01b03841681527f62c49c687b2520927b470628236b60ea30e2d1b819783be5b3b4bbdc6f331dcd90602001610e8c565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112005760405162461bcd60e51b81526004016105b6906125e6565b6001600160a01b038216611277576000811161121c574761121e565b805b6040519091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f193505050501580156108c3573d6000803e3d6000fd5b600081116112ec576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e7919061259e565b6112ee565b805b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190612581565b61139d60008051602061272d83398151915233610f49565b6113b95760405162461bcd60e51b81526004016105b6906123e4565b60005b81518110156106545760008282815181106113d9576113d961241b565b602002602001015190506113ec81610e99565b156113f7575061157c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e836040518263ffffffff1660e01b815260040161146f91815260200190565b602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b0919061261d565b6001600160a01b0316146114fe5760405162461bcd60e51b81526020600482015260156024820152744e4654206e6f74206f776e6564206279207361666560581b60448201526064016105b6565b600280546000838152600360205260408082208390556001830184559290527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01829055517f902ae6d9a7af3a2a1fa490511404d9a6128e3b4fb5ee47a09cc93bd1663e1fb2906115729083815260200190565b60405180910390a1505b6001016113bc565b600081815260016020526040812061057c90611c9d565b6000828152602081905260409020600101546115b78133611be9565b6108c38383611c6f565b6000806004805480602002602001604051908101604052809291908181526020016000905b82821015611691576000848152602090819020604080516060810182526003860290920180546001600160a01b03908116845260018201541683850152600281018054835181870281018701855281815294959294938601939283018282801561167957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161165b575b505050505081525050815260200190600101906115e6565b505050506001600160a01b03841660009081526005602052604090205481519192509081108015610f225750836001600160a01b03168282815181106116d9576116d961241b565b6020026020010151600001516001600160a01b031614949350505050565b61170f60008051602061272d83398151915233610f49565b61172b5760405162461bcd60e51b81526004016105b6906123e4565b60005b815181101561065457600082828151811061174b5761174b61241b565b6020026020010151905061175e81610e99565b611768575061183f565b6000818152600360205260408120546002805491929161178a9060019061263a565b8154811061179a5761179a61241b565b9060005260206000200154905080600283815481106117bb576117bb61241b565b600091825260208083209091019290925582815260039091526040902082905560028054806117ec576117ec61264d565b600190038181906000526020600020016000905590557f79246bc6e0aae098ed0639837e8404e2e0a8ed69330b640329110dd8dbaa49d98360405161183391815260200190565b60405180910390a15050505b60010161172e565b60006001600160e01b03198216637965db0b60e01b148061057c57506301ffc9a760e01b6001600160e01b031983161461057c565b60606000826001600160a01b031663e68863966040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e2919061259e565b67ffffffffffffffff8111156118fa576118fa612301565b604051908082528060200260200182016040528015611923578160200160208202803683370190505b50905060005b81518110156119cd57604051637980d7a160e11b8152600481018290526001600160a01b0385169063f301af4290602401602060405180830381865afa158015611977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199b919061261d565b8282815181106119ad576119ad61241b565b6001600160a01b0390921660209283029190910190910152600101611929565b5092915050565b60608060006004805480602002602001604051908101604052809291908181526020016000905b82821015611aa6576000848152602090819020604080516060810182526003860290920180546001600160a01b039081168452600182015416838501526002810180548351818702810187018552818152949592949386019392830182828015611a8e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a70575b505050505081525050815260200190600101906119fb565b505082519293508291505067ffffffffffffffff811115611ac957611ac9612301565b604051908082528060200260200182016040528015611af2578160200160208202803683370190505b5093508067ffffffffffffffff811115611b0e57611b0e612301565b604051908082528060200260200182016040528015611b4157816020015b6060815260200190600190039081611b2c5790505b50925060005b81811015611be257828181518110611b6157611b6161241b565b602002602001015160200151858281518110611b7f57611b7f61241b565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110611bb157611bb161241b565b602002602001015160400151848281518110611bcf57611bcf61241b565b6020908102919091010152600101611b47565b5050509091565b611bf38282610f49565b61065457611c0b816001600160a01b03166014611ca7565b611c16836020611ca7565b604051602001611c27929190612663565b60408051601f198184030181529082905262461bcd60e51b82526105b6916004016126d8565b611c578282611e43565b60008281526001602052604090206108c39082611ec7565b611c798282611edc565b60008281526001602052604090206108c39082611f41565b6000610f428383611f56565b600061057c825490565b60606000611cb68360026126eb565b611cc1906002612702565b67ffffffffffffffff811115611cd957611cd9612301565b6040519080825280601f01601f191660200182016040528015611d03576020820181803683370190505b509050600360fc1b81600081518110611d1e57611d1e61241b565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d4d57611d4d61241b565b60200101906001600160f81b031916908160001a9053506000611d718460026126eb565b611d7c906001612702565b90505b6001811115611df4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611db057611db061241b565b1a60f81b828281518110611dc657611dc661241b565b60200101906001600160f81b031916908160001a90535060049490941c93611ded81612715565b9050611d7f565b508315610f425760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105b6565b611e4d8282610f49565b610654576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e833390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f42836001600160a01b038416611f80565b611ee68282610f49565b15610654576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f42836001600160a01b038416611fcf565b6000826000018281548110611f6d57611f6d61241b565b9060005260206000200154905092915050565b6000818152600183016020526040812054611fc75750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561057c565b50600061057c565b600081815260018301602052604081205480156120b8576000611ff360018361263a565b85549091506000906120079060019061263a565b905081811461206c5760008660000182815481106120275761202761241b565b906000526020600020015490508087600001848154811061204a5761204a61241b565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061207d5761207d61264d565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061057c565b600091505061057c565b828054828255906000526020600020908101928215612117579160200282015b8281111561211757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906120e2565b50612123929150612141565b5090565b5080546000825590600052602060002090810190610a0c91905b5b808211156121235760008155600101612142565b60006020828403121561216857600080fd5b81356001600160e01b031981168114610f4257600080fd5b8015158114610a0c57600080fd5b6000806000606084860312156121a357600080fd5b833592506020840135915060408401356121bc81612180565b809150509250925092565b6000602082840312156121d957600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b818110156122185783518352602093840193909201916001016121fa565b509095945050505050565b6001600160a01b0381168114610a0c57600080fd5b6000806040838503121561224b57600080fd5b82359150602083013561225d81612223565b809150509250929050565b6000806040838503121561227b57600080fd5b823561228681612223565b9150602083013561225d81612180565b600080604083850312156122a957600080fd5b50508035926020909101359150565b6000602082840312156122ca57600080fd5b8135610f4281612223565b600080604083850312156122e857600080fd5b82356122f381612223565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561232957600080fd5b813567ffffffffffffffff81111561234057600080fd5b8201601f8101841361235157600080fd5b803567ffffffffffffffff81111561236b5761236b612301565b8060051b604051601f19603f830116810181811067ffffffffffffffff8211171561239857612398612301565b6040529182526020818401810192908101878411156123b657600080fd5b6020850194505b838510156123d9578435808252602095860195909350016123bd565b509695505050505050565b60208082526019908201527f43616c6c6572206973206e6f7420616e206f70657261746f7200000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600081518084526020840193506020830160005b8281101561246c5781516001600160a01b0316865260209586019590910190600101612445565b5093949350505050565b6060815260006124896060830186612431565b828103602084015280855180835260208301915060208160051b8401016020880160005b838110156124df57601f198684030185526124c9838351612431565b60209586019590935091909101906001016124ad565b505080945050505050826040830152949350505050565b60005b838110156125115781810151838201526020016124f9565b50506000910152565b600081518084526125328160208601602086016124f6565b601f01601f19169290920160200192915050565b60018060a01b038516815283602082015260806040820152600061256d608083018561251a565b905060ff8316606083015295945050505050565b60006020828403121561259357600080fd5b8151610f4281612180565b6000602082840312156125b057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016125df576125df6125b7565b5060010190565b6020808252601f908201527f43616c6c6572206973206e6f7420746865207361666520636f6e747261637400604082015260600190565b60006020828403121561262f57600080fd5b8151610f4281612223565b8181038181111561057c5761057c6125b7565b634e487b7160e01b600052603160045260246000fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161269b8160178501602088016124f6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126cc8160288401602088016124f6565b01602801949350505050565b602081526000610f42602083018461251a565b808202811582820484141761057c5761057c6125b7565b8082018082111561057c5761057c6125b7565b600081612724576127246125b7565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a2646970667358221220c3b05c2dfa9ee0658a89cfaadd8012c2ce3978278f539d546e8366293688214d64736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addNFTIds(uint256[])": {
        "details": "Add NFT IDs to the list",
        "params": {
          "_nftIds": "The NFT IDs to add"
        }
      },
      "bribePoolExists(address)": {
        "details": "Check if a bribe pool exists",
        "params": {
          "bribePool": "The address of the pool to check"
        },
        "returns": {
          "_0": "true if the pool exists, false otherwise"
        }
      },
      "claimBribes(uint256,uint256,bool)": {
        "details": "Claim bribes for a range of NFTs",
        "params": {
          "nftIndexEnd": "The end index of the NFTs",
          "nftIndexStart": "The start index of the NFTs",
          "silent": "Doesn't revert if the claim fails when true"
        }
      },
      "fetchNFTIds()": {
        "details": "Fetch all NFT IDs from the veNFT contract"
      },
      "getAllNFTIds()": {
        "details": "Get all NFT IDs",
        "returns": {
          "_0": "The NFT IDs"
        }
      },
      "getBribePoolsLength()": {
        "details": "Get the length of the bribe pools list",
        "returns": {
          "_0": "The length of the bribe pools list"
        }
      },
      "getNFTIdsLength()": {
        "details": "Get the length of the nftIds list",
        "returns": {
          "_0": "The length of the nftIds list"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "nftIdExists(uint256)": {
        "details": "Check if a NFT exists on the list",
        "params": {
          "nftId": "The NFT ID to check"
        },
        "returns": {
          "_0": "true if the NFT ID exists, false otherwise"
        }
      },
      "removeAllNFTIds()": {
        "details": "Remove all NFT IDs from the list"
      },
      "removeBribePool(address)": {
        "details": "Remove a bribe pool from the list",
        "params": {
          "_poolAddress": "The address of the pool to remove"
        }
      },
      "removeNFTIds(uint256[])": {
        "details": "Remove NFT IDs from the list",
        "params": {
          "_nftIds": "The NFT IDs to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferTokens(address,uint256)": {
        "details": "Helps recovering any tokens accidentally sent to this module.",
        "params": {
          "amount": "Amount to transfer. 0 to transfer all balance.",
          "token": "Token to transfer. 0x0 to transfer Native token."
        }
      },
      "updateRewardTokenAddresses()": {
        "details": "Update the reward token addresses for all pools"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fetchNFTIds()": {
        "notice": "This can revert if Safe owns too many NFTs since tx will be huge.         This function is public, anyone can call it, since it only fetches         the NFT IDs owned by the Safe. It shouldn't cause us any issues."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1182_storage)"
      },
      {
        "astId": 1692,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "nftIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1696,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "nftIdIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1700,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "bribePools",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(BribePoolInfo)1639_storage)dyn_storage"
      },
      {
        "astId": 1704,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "bribePoolIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(BribePoolInfo)1639_storage)dyn_storage": {
        "base": "t_struct(BribePoolInfo)1639_storage",
        "encoding": "dynamic_array",
        "label": "struct BribePoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1182_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1182_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1182_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1181,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)881_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BribePoolInfo)1639_storage": {
        "encoding": "inplace",
        "label": "struct BribePoolInfo",
        "members": [
          {
            "astId": 1633,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1635,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "rewardContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1638,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "rewardTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)881_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 876,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 880,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x8A42E623b04258A006E455ed2244e490d492f255",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "AllocateThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "AssetDefaultStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplyDiffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "NetOusdMintForStrategyThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_ousdMetaStrategy",
          "type": "address"
        }
      ],
      "name": "OusdMetaStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebasePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "RebaseThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebaseUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyAddedToMintWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRemovedFromMintWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "SwapAllowedUndervalueChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "SwapSlippageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "SwapperChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "TrusteeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "TrusteeFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "VaultBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "YieldDistribution",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetDefaultStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cacheWETHAssetIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemOutputs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAssetConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSupported",
              "type": "bool"
            },
            {
              "internalType": "enum VaultStorage.UnitConversion",
              "name": "unitConversion",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "allowedOracleSlippageBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct VaultStorage.Asset",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMintWhitelistedStrategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumOusdAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netOusdMintForStrategyThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netOusdMintedForStrategy",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ousdMetaStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUnitMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUnitRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAssetIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fc2c4fd1c6755fecd303623fa284c59b08732e1f9296a529e3e20d0209430dc",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0x8A42E623b04258A006E455ed2244e490d492f255",
    "transactionIndex": 46,
    "gasUsed": "2982112",
    "logsBloom": "0x
    "blockHash": "0x28f3e92abf4491dda031e492e585b6099b73e756c91c7f8cc194c62647940dc7",
    "transactionHash": "0x9fc2c4fd1c6755fecd303623fa284c59b08732e1f9296a529e3e20d0209430dc",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 17819735,
        "transactionHash": "0x9fc2c4fd1c6755fecd303623fa284c59b08732e1f9296a529e3e20d0209430dc",
        "address": "0x8A42E623b04258A006E455ed2244e490d492f255",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x28f3e92abf4491dda031e492e585b6099b73e756c91c7f8cc194c62647940dc7"
      }
    ],
    "blockNumber": 17819735,
    "cumulativeGasUsed": "15122605",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "b945fb8cc2e5244491b93263adf4bfae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"AllocateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AssetDefaultStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyDiffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"NetOusdMintForStrategyThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ousdMetaStrategy\",\"type\":\"address\"}],\"name\":\"OusdMetaStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"RebaseThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebaseUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedToMintWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedFromMintWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"SwapAllowedUndervalueChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"SwapSlippageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toAssetAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SwapperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TrusteeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"TrusteeFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"VaultBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDefaultStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cacheWETHAssetIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutputs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"enum VaultStorage.UnitConversion\",\"name\":\"unitConversion\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"allowedOracleSlippageBps\",\"type\":\"uint16\"}],\"internalType\":\"struct VaultStorage.Asset\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintWhitelistedStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOusdAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netOusdMintForStrategyThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netOusdMintedForStrategy\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ousdMetaStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUnitMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUnitRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAssetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Origin Protocol Inc\",\"kind\":\"dev\",\"methods\":{\"cacheWETHAssetIndex()\":{\"details\":\"Caches WETH's index in `allAssets` variable.      Reduces gas usage by redeem by caching that.\"},\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of asset\"},\"returns\":{\"_0\":\"uint256 Balance of asset in decimals of asset\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"address of the asset\"},\"returns\":{\"_0\":\"true if supported\"}},\"mint(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset being deposited\",\"_asset\":\"Address of the asset being deposited\",\"_minimumOusdAmount\":\"Minimum OTokens to mint\"}},\"priceUnitMint(address)\":{\"params\":{\"asset\":\"address of the asset\"},\"returns\":{\"price\":\"uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\"}},\"priceUnitRedeem(address)\":{\"params\":{\"asset\":\"Address of the asset\"},\"returns\":{\"price\":\"uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\"}},\"redeem(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of OTokens to burn\",\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"redeemAll(uint256)\":{\"params\":{\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"setAdminImpl(address)\":{\"params\":{\"newImpl\":\"address of the implementation\"}},\"totalValue()\":{\"returns\":{\"value\":\"Total value in USD/ETH (1e18)\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"title\":\"OETH Base VaultCore Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocate()\":{\"notice\":\"Allocate unallocated funds on Vault to strategies.*\"},\"assetDefaultStrategies(address)\":{\"notice\":\"Mapping of asset address to the Strategy that they should automatically\"},\"autoAllocateThreshold()\":{\"notice\":\"OToken mints over this amount automatically allocate funds. 18 decimals.\"},\"calculateRedeemOutputs(uint256)\":{\"notice\":\"Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned\"},\"capitalPaused()\":{\"notice\":\"pause operations that change the OToken supply. eg mint, redeem, allocate, mint/burn for strategy\"},\"checkBalance(address)\":{\"notice\":\"Get the balance of an asset held in Vault and all strategies.\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"getAllAssets()\":{\"notice\":\"Return all vault asset addresses in order\"},\"getAllStrategies()\":{\"notice\":\"Return the array of all strategies\"},\"getAssetConfig(address)\":{\"notice\":\"Gets the vault configuration of a supported asset.\"},\"getAssetCount()\":{\"notice\":\"Return the number of assets supported by the Vault.\"},\"getStrategyCount()\":{\"notice\":\"Return the number of strategies active on the Vault.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"isSupportedAsset(address)\":{\"notice\":\"Returns whether the vault supports the asset\"},\"maxSupplyDiff()\":{\"notice\":\"Max difference between total supply and total value of assets. 18 decimals.\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Deposit a supported asset and mint OTokens.\"},\"netOusdMintForStrategyThreshold()\":{\"notice\":\"How much net total OTokens are allowed to be minted by all strategies\"},\"netOusdMintedForStrategy()\":{\"notice\":\"How much OTokens are currently minted by the strategy\"},\"ousdMetaStrategy()\":{\"notice\":\"Metapool strategy that is allowed to mint/burn OTokens without changing collateral\"},\"priceProvider()\":{\"notice\":\"Address of the Oracle price provider contract\"},\"priceUnitMint(address)\":{\"notice\":\"Returns the total price in 18 digit units for a given asset.      Never goes above 1, since that is how we price mints.\"},\"priceUnitRedeem(address)\":{\"notice\":\"Returns the total price in 18 digit unit for a given asset.      Never goes below 1, since that is how we price redeems\"},\"rebase()\":{\"notice\":\"Calculate the total value of assets held by the Vault and all      strategies and update the supply of OTokens.\"},\"rebasePaused()\":{\"notice\":\"pause rebasing if true\"},\"rebaseThreshold()\":{\"notice\":\"OToken mints over this amount automatically rebase. 18 decimals.\"},\"redeem(uint256,uint256)\":{\"notice\":\"Withdraw a supported asset and burn OTokens.\"},\"redeemAll(uint256)\":{\"notice\":\"Withdraw a supported asset and burn all OTokens.\"},\"redeemFeeBps()\":{\"notice\":\"Redemption fee in basis points. eg 50 = 0.5%\"},\"setAdminImpl(address)\":{\"notice\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\"},\"strategistAddr()\":{\"notice\":\"Address of the Strategist\"},\"totalValue()\":{\"notice\":\"Determine the total value of assets held by the vault and its         strategies.\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"trusteeAddress()\":{\"notice\":\"Trustee contract that can collect a percentage of yield\"},\"trusteeFeeBps()\":{\"notice\":\"Amount of yield collected in basis points. eg 2000 = 20%\"},\"vaultBuffer()\":{\"notice\":\"Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/OETHBaseVaultCore.sol\":\"OETHBaseVaultCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IGetExchangeRateToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGetExchangeRateToken {\\n    function getExchangeRate() external view returns (uint256 _exchangeRate);\\n}\\n\",\"keccak256\":\"0x243be4dffe1eb453d25cae22b6c172bb64c574d80943cef058fdc30a4b9c9bfd\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9eabf152389f145c9c23ed71972af73fb1708cbc4b26e524a9ba29a557b7cfe5\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    event AccountRebasingEnabled(address account);\\n    event AccountRebasingDisabled(address account);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            emit AccountRebasingDisabled(_account);\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable rebasing for an account.\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account)\\n        public\\n        nonReentrant\\n        onlyGovernor\\n    {\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        require(_isNonRebasingAccount(_account), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[_account]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(_account));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(_account));\\n\\n        _creditBalances[_account] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[_account]);\\n\\n        rebaseState[_account] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[_account];\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n        emit AccountRebasingDisabled(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2dc66b1ba02716d64eb47dd9117fda62650d8b57669e6c351437e0ad29ad5f19\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n * @author Origin Protocol Inc\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xe35ac2d813a30d845a3b52bba72588d7e936c2b3f3373d15568c14db46aeed60\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/OETHBaseVaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { OETHVaultCore } from \\\"./OETHVaultCore.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\n\\n/**\\n * @title OETH Base VaultCore Contract\\n * @author Origin Protocol Inc\\n */\\ncontract OETHBaseVaultCore is OETHVaultCore {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    constructor(address _weth) OETHVaultCore(_weth) {}\\n\\n    // @inheritdoc VaultCore\\n    function mintForStrategy(uint256 amount)\\n        external\\n        override\\n        whenNotCapitalPaused\\n    {\\n        require(\\n            strategies[msg.sender].isSupported == true,\\n            \\\"Unsupported strategy\\\"\\n        );\\n        require(\\n            isMintWhitelistedStrategy[msg.sender] == true,\\n            \\\"Not whitelisted strategy\\\"\\n        );\\n\\n        require(amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Mint(msg.sender, amount);\\n\\n        // Mint matching amount of OTokens\\n        oUSD.mint(msg.sender, amount);\\n    }\\n\\n    function burnForStrategy(uint256 amount)\\n        external\\n        override\\n        whenNotCapitalPaused\\n    {\\n        require(\\n            strategies[msg.sender].isSupported == true,\\n            \\\"Unsupported strategy\\\"\\n        );\\n        require(\\n            isMintWhitelistedStrategy[msg.sender] == true,\\n            \\\"Not whitelisted strategy\\\"\\n        );\\n\\n        require(amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Redeem(msg.sender, amount);\\n\\n        // Burn OTokens\\n        oUSD.burn(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf4c58711deb1b5b212ea2ce9de8b6e2d721bafe37a73deddf57083872281e7f6\",\"license\":\"MIT\"},\"contracts/vault/OETHVaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { VaultCore } from \\\"./VaultCore.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\n\\n/**\\n * @title OETH VaultCore Contract\\n * @author Origin Protocol Inc\\n */\\ncontract OETHVaultCore is VaultCore {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n\\n    address public immutable weth;\\n    uint256 public wethAssetIndex;\\n\\n    // For future use (because OETHBaseVaultCore inherits from this)\\n    uint256[50] private __gap;\\n\\n    constructor(address _weth) {\\n        weth = _weth;\\n    }\\n\\n    /**\\n     * @dev Caches WETH's index in `allAssets` variable.\\n     *      Reduces gas usage by redeem by caching that.\\n     */\\n    function cacheWETHAssetIndex() external onlyGovernor {\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            if (allAssets[i] == weth) {\\n                wethAssetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        require(allAssets[wethAssetIndex] == weth, \\\"Invalid WETH Asset Index\\\");\\n    }\\n\\n    // @inheritdoc VaultCore\\n    function _mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) internal virtual override {\\n        require(_asset == weth, \\\"Unsupported asset for minting\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            _amount >= _minimumOusdAmount,\\n            \\\"Mint amount lower than minimum\\\"\\n        );\\n\\n        emit Mint(msg.sender, _amount);\\n\\n        // Rebase must happen before any transfers occur.\\n        if (!rebasePaused && _amount >= rebaseThreshold) {\\n            _rebase();\\n        }\\n\\n        // Mint oTokens\\n        oUSD.mint(msg.sender, _amount);\\n\\n        // Transfer the deposited coins to the vault\\n        IERC20(_asset).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Auto-allocate if necessary\\n        if (_amount >= autoAllocateThreshold) {\\n            _allocate();\\n        }\\n    }\\n\\n    // @inheritdoc VaultCore\\n    function _calculateRedeemOutputs(uint256 _amount)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory outputs)\\n    {\\n        // Overrides `VaultCore._calculateRedeemOutputs` to redeem with only\\n        // WETH instead of LST-mix. Doesn't change the function signature\\n        // for backward compatibility\\n\\n        // Calculate redeem fee\\n        if (redeemFeeBps > 0) {\\n            uint256 redeemFee = _amount.mulTruncateScale(redeemFeeBps, 1e4);\\n            _amount = _amount - redeemFee;\\n        }\\n\\n        // Ensure that the WETH index is cached\\n        uint256 _wethAssetIndex = wethAssetIndex;\\n        require(\\n            allAssets[_wethAssetIndex] == weth,\\n            \\\"WETH Asset index not cached\\\"\\n        );\\n\\n        outputs = new uint256[](allAssets.length);\\n        outputs[_wethAssetIndex] = _amount;\\n    }\\n\\n    // @inheritdoc VaultCore\\n    function _redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        internal\\n        virtual\\n        override\\n    {\\n        // Override `VaultCore._redeem` to simplify it. Gets rid of oracle\\n        // usage and looping through all assets for LST-mix redeem. Instead\\n        // does a simple WETH-only redeem.\\n        emit Redeem(msg.sender, _amount);\\n\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // Amount excluding fees\\n        uint256 amountMinusFee = _calculateRedeemOutputs(_amount)[\\n            wethAssetIndex\\n        ];\\n\\n        require(\\n            amountMinusFee >= _minimumUnitAmount,\\n            \\\"Redeem amount lower than minimum\\\"\\n        );\\n\\n        if (IERC20(weth).balanceOf(address(this)) >= amountMinusFee) {\\n            // Use Vault funds first if sufficient\\n            IERC20(weth).safeTransfer(msg.sender, amountMinusFee);\\n        } else {\\n            address strategyAddr = assetDefaultStrategies[weth];\\n            if (strategyAddr != address(0)) {\\n                // Nothing in Vault, but something in Strategy, send from there\\n                IStrategy strategy = IStrategy(strategyAddr);\\n                strategy.withdraw(msg.sender, weth, amountMinusFee);\\n            } else {\\n                // Cant find funds anywhere\\n                revert(\\\"Liquidity error\\\");\\n            }\\n        }\\n\\n        // Burn OETH from user (including fees)\\n        oUSD.burn(msg.sender, _amount);\\n\\n        _postRedeem(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc698b33292c9b75fb875d46634f0a8079068ebbada439daf0be2d859e479e223\",\"license\":\"MIT\"},\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultCore contract\\n * @notice The Vault contract stores assets. On a deposit, OTokens will be minted\\n           and sent to the depositor. On a withdrawal, OTokens will be burned and\\n           assets will be sent to the withdrawer. The Vault accepts deposits of\\n           interest from yield bearing strategies which will modify the supply\\n           of OTokens.\\n * @author Origin Protocol Inc\\n */\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IGetExchangeRateToken } from \\\"../interfaces/IGetExchangeRateToken.sol\\\";\\n\\nimport \\\"./VaultInitializer.sol\\\";\\n\\ncontract VaultCore is VaultInitializer {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n    // max signed int\\n    uint256 internal constant MAX_INT = 2**255 - 1;\\n    // max un-signed int\\n    uint256 internal constant MAX_UINT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @dev Verifies that the rebasing is not paused.\\n     */\\n    modifier whenNotRebasePaused() {\\n        require(!rebasePaused, \\\"Rebasing paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the deposits are not paused.\\n     */\\n    modifier whenNotCapitalPaused() {\\n        require(!capitalPaused, \\\"Capital paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyOusdMetaStrategy() {\\n        require(\\n            msg.sender == ousdMetaStrategy,\\n            \\\"Caller is not the OUSD meta strategy\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit a supported asset and mint OTokens.\\n     * @param _asset Address of the asset being deposited\\n     * @param _amount Amount of the asset being deposited\\n     * @param _minimumOusdAmount Minimum OTokens to mint\\n     */\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external whenNotCapitalPaused nonReentrant {\\n        _mint(_asset, _amount, _minimumOusdAmount);\\n    }\\n\\n    function _mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) internal virtual {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        uint256 units = _toUnits(_amount, _asset);\\n        uint256 unitPrice = _toUnitPrice(_asset, true);\\n        uint256 priceAdjustedDeposit = (units * unitPrice) / 1e18;\\n\\n        if (_minimumOusdAmount > 0) {\\n            require(\\n                priceAdjustedDeposit >= _minimumOusdAmount,\\n                \\\"Mint amount lower than minimum\\\"\\n            );\\n        }\\n\\n        emit Mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Rebase must happen before any transfers occur.\\n        if (priceAdjustedDeposit >= rebaseThreshold && !rebasePaused) {\\n            _rebase();\\n        }\\n\\n        // Mint matching amount of OTokens\\n        oUSD.mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Transfer the deposited coins to the vault\\n        IERC20 asset = IERC20(_asset);\\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (priceAdjustedDeposit >= autoAllocateThreshold) {\\n            _allocate();\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint OTokens for a Metapool Strategy\\n     * @param _amount Amount of the asset being deposited\\n     *\\n     * Notice: can't use `nonReentrant` modifier since the `mint` function can\\n     * call `allocate`, and that can trigger `ConvexOUSDMetaStrategy` to call this function\\n     * while the execution of the `mint` has not yet completed -> causing a `nonReentrant` collision.\\n     *\\n     * Also important to understand is that this is a limitation imposed by the test suite.\\n     * Production / mainnet contracts should never be configured in a way where mint/redeem functions\\n     * that are moving funds between the Vault and end user wallets can influence strategies\\n     * utilizing this function.\\n     */\\n    function mintForStrategy(uint256 _amount)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        onlyOusdMetaStrategy\\n    {\\n        require(_amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Mint(msg.sender, _amount);\\n\\n        // safe to cast because of the require check at the beginning of the function\\n        netOusdMintedForStrategy += int256(_amount);\\n\\n        require(\\n            abs(netOusdMintedForStrategy) < netOusdMintForStrategyThreshold,\\n            \\\"Minted ousd surpassed netOusdMintForStrategyThreshold.\\\"\\n        );\\n\\n        // Mint matching amount of OTokens\\n        oUSD.mint(msg.sender, _amount);\\n    }\\n\\n    // In memoriam\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn OTokens.\\n     * @param _amount Amount of OTokens to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        external\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(_amount, _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn OTokens.\\n     * @param _amount Amount of OTokens to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function _redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        internal\\n        virtual\\n    {\\n        // Calculate redemption outputs\\n        uint256[] memory outputs = _calculateRedeemOutputs(_amount);\\n\\n        emit Redeem(msg.sender, _amount);\\n\\n        // Send outputs\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            if (outputs[i] == 0) continue;\\n\\n            address assetAddr = allAssets[i];\\n\\n            if (IERC20(assetAddr).balanceOf(address(this)) >= outputs[i]) {\\n                // Use Vault funds first if sufficient\\n                IERC20(assetAddr).safeTransfer(msg.sender, outputs[i]);\\n            } else {\\n                address strategyAddr = assetDefaultStrategies[assetAddr];\\n                if (strategyAddr != address(0)) {\\n                    // Nothing in Vault, but something in Strategy, send from there\\n                    IStrategy strategy = IStrategy(strategyAddr);\\n                    strategy.withdraw(msg.sender, assetAddr, outputs[i]);\\n                } else {\\n                    // Cant find funds anywhere\\n                    revert(\\\"Liquidity error\\\");\\n                }\\n            }\\n        }\\n\\n        if (_minimumUnitAmount > 0) {\\n            uint256 unitTotal = 0;\\n            for (uint256 i = 0; i < outputs.length; ++i) {\\n                unitTotal += _toUnits(outputs[i], allAssets[i]);\\n            }\\n            require(\\n                unitTotal >= _minimumUnitAmount,\\n                \\\"Redeem amount lower than minimum\\\"\\n            );\\n        }\\n\\n        oUSD.burn(msg.sender, _amount);\\n\\n        _postRedeem(_amount);\\n    }\\n\\n    function _postRedeem(uint256 _amount) internal {\\n        // Until we can prove that we won't affect the prices of our assets\\n        // by withdrawing them, this should be here.\\n        // It's possible that a strategy was off on its asset total, perhaps\\n        // a reward token sold for more or for less than anticipated.\\n        uint256 totalUnits = 0;\\n        if (_amount >= rebaseThreshold && !rebasePaused) {\\n            totalUnits = _rebase();\\n        } else {\\n            totalUnits = _totalValue();\\n        }\\n\\n        // Check that the OTokens are backed by enough assets\\n        if (maxSupplyDiff > 0) {\\n            // Allow a max difference of maxSupplyDiff% between\\n            // backing assets value and OUSD total supply\\n            uint256 diff = oUSD.totalSupply().divPrecisely(totalUnits);\\n            require(\\n                (diff > 1e18 ? diff - 1e18 : 1e18 - diff) <= maxSupplyDiff,\\n                \\\"Backing supply liquidity error\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn OTokens for Metapool Strategy\\n     * @param _amount Amount of OUSD to burn\\n     *\\n     * @dev Notice: can't use `nonReentrant` modifier since the `redeem` function could\\n     * require withdrawal on `ConvexOUSDMetaStrategy` and that one can call `burnForStrategy`\\n     * while the execution of the `redeem` has not yet completed -> causing a `nonReentrant` collision.\\n     *\\n     * Also important to understand is that this is a limitation imposed by the test suite.\\n     * Production / mainnet contracts should never be configured in a way where mint/redeem functions\\n     * that are moving funds between the Vault and end user wallets can influence strategies\\n     * utilizing this function.\\n     */\\n    function burnForStrategy(uint256 _amount)\\n        external\\n        virtual\\n        whenNotCapitalPaused\\n        onlyOusdMetaStrategy\\n    {\\n        require(_amount < MAX_INT, \\\"Amount too high\\\");\\n\\n        emit Redeem(msg.sender, _amount);\\n\\n        // safe to cast because of the require check at the beginning of the function\\n        netOusdMintedForStrategy -= int256(_amount);\\n\\n        require(\\n            abs(netOusdMintedForStrategy) < netOusdMintForStrategyThreshold,\\n            \\\"Attempting to burn too much OUSD.\\\"\\n        );\\n\\n        // Burn OTokens\\n        oUSD.burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn all OTokens.\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeemAll(uint256 _minimumUnitAmount)\\n        external\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(oUSD.balanceOf(msg.sender), _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function allocate() external whenNotCapitalPaused nonReentrant {\\n        _allocate();\\n    }\\n\\n    /**\\n     * @dev Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function _allocate() internal {\\n        uint256 vaultValue = _totalValueInVault();\\n        // Nothing in vault to allocate\\n        if (vaultValue == 0) return;\\n        uint256 strategiesValue = _totalValueInStrategies();\\n        // We have a method that does the same as this, gas optimisation\\n        uint256 calculatedTotalValue = vaultValue + strategiesValue;\\n\\n        // We want to maintain a buffer on the Vault so calculate a percentage\\n        // modifier to multiply each amount being allocated by to enforce the\\n        // vault buffer\\n        uint256 vaultBufferModifier;\\n        if (strategiesValue == 0) {\\n            // Nothing in Strategies, allocate 100% minus the vault buffer to\\n            // strategies\\n            vaultBufferModifier = uint256(1e18) - vaultBuffer;\\n        } else {\\n            vaultBufferModifier =\\n                (vaultBuffer * calculatedTotalValue) /\\n                vaultValue;\\n            if (1e18 > vaultBufferModifier) {\\n                // E.g. 1e18 - (1e17 * 10e18)/5e18 = 8e17\\n                // (5e18 * 8e17) / 1e18 = 4e18 allocated from Vault\\n                vaultBufferModifier = uint256(1e18) - vaultBufferModifier;\\n            } else {\\n                // We need to let the buffer fill\\n                return;\\n            }\\n        }\\n        if (vaultBufferModifier == 0) return;\\n\\n        // Iterate over all assets in the Vault and allocate to the appropriate\\n        // strategy\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            // No balance, nothing to do here\\n            if (assetBalance == 0) continue;\\n\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance.mulTruncate(\\n                vaultBufferModifier\\n            );\\n\\n            address depositStrategyAddr = assetDefaultStrategies[\\n                address(asset)\\n            ];\\n\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\n                // Transfer asset to Strategy and call deposit method to\\n                // mint or take required action\\n                asset.safeTransfer(address(strategy), allocateAmount);\\n                strategy.deposit(address(asset), allocateAmount);\\n                emit AssetAllocated(\\n                    address(asset),\\n                    depositStrategyAddr,\\n                    allocateAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of OTokens.\\n     */\\n    function rebase() external virtual nonReentrant {\\n        _rebase();\\n    }\\n\\n    /**\\n     * @dev Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of OTokens, optionally sending a\\n     *      portion of the yield to the trustee.\\n     * @return totalUnits Total balance of Vault in units\\n     */\\n    function _rebase() internal whenNotRebasePaused returns (uint256) {\\n        uint256 ousdSupply = oUSD.totalSupply();\\n        uint256 vaultValue = _totalValue();\\n        if (ousdSupply == 0) {\\n            return vaultValue;\\n        }\\n\\n        // Yield fee collection\\n        address _trusteeAddress = trusteeAddress; // gas savings\\n        if (_trusteeAddress != address(0) && (vaultValue > ousdSupply)) {\\n            uint256 yield = vaultValue - ousdSupply;\\n            uint256 fee = yield.mulTruncateScale(trusteeFeeBps, 1e4);\\n            require(yield > fee, \\\"Fee must not be greater than yield\\\");\\n            if (fee > 0) {\\n                oUSD.mint(_trusteeAddress, fee);\\n            }\\n            emit YieldDistribution(_trusteeAddress, yield, fee);\\n        }\\n\\n        // Only rachet OToken supply upwards\\n        ousdSupply = oUSD.totalSupply(); // Final check should use latest value\\n        if (vaultValue > ousdSupply) {\\n            oUSD.changeSupply(vaultValue);\\n        }\\n        return vaultValue;\\n    }\\n\\n    /**\\n     * @notice Determine the total value of assets held by the vault and its\\n     *         strategies.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function totalValue() external view virtual returns (uint256 value) {\\n        value = _totalValue();\\n    }\\n\\n    /**\\n     * @dev Internal Calculate the total value of the assets held by the\\n     *         vault and its strategies.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValue() internal view virtual returns (uint256 value) {\\n        return _totalValueInVault() + _totalValueInStrategies();\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Vault.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValueInVault() internal view returns (uint256 value) {\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 y = 0; y < assetCount; ++y) {\\n            address assetAddr = allAssets[y];\\n            uint256 balance = IERC20(assetAddr).balanceOf(address(this));\\n            if (balance > 0) {\\n                value += _toUnits(balance, assetAddr);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Strategies.\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValueInStrategies() internal view returns (uint256 value) {\\n        uint256 stratCount = allStrategies.length;\\n        for (uint256 i = 0; i < stratCount; ++i) {\\n            value = value + _totalValueInStrategy(allStrategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held by strategy.\\n     * @param _strategyAddr Address of the strategy\\n     * @return value Total value in USD/ETH (1e18)\\n     */\\n    function _totalValueInStrategy(address _strategyAddr)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        uint256 assetCount = allAssets.length;\\n        for (uint256 y = 0; y < assetCount; ++y) {\\n            address assetAddr = allAssets[y];\\n            if (strategy.supportsAsset(assetAddr)) {\\n                uint256 balance = strategy.checkBalance(assetAddr);\\n                if (balance > 0) {\\n                    value += _toUnits(balance, assetAddr);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return uint256 Balance of asset in decimals of asset\\n     */\\n    function checkBalance(address _asset) external view returns (uint256) {\\n        return _checkBalance(_asset);\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return balance Balance of asset in decimals of asset\\n     */\\n    function _checkBalance(address _asset)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 balance)\\n    {\\n        IERC20 asset = IERC20(_asset);\\n        balance = asset.balanceOf(address(this));\\n        uint256 stratCount = allStrategies.length;\\n        for (uint256 i = 0; i < stratCount; ++i) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            if (strategy.supportsAsset(_asset)) {\\n                balance = balance + strategy.checkBalance(_asset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned\\n     */\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _calculateRedeemOutputs(_amount);\\n    }\\n\\n    /**\\n     * @dev Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned.\\n     * @return outputs Array of amounts respective to the supported assets\\n     */\\n    function _calculateRedeemOutputs(uint256 _amount)\\n        internal\\n        view\\n        virtual\\n        returns (uint256[] memory outputs)\\n    {\\n        // We always give out coins in proportion to how many we have,\\n        // Now if all coins were the same value, this math would easy,\\n        // just take the percentage of each coin, and multiply by the\\n        // value to be given out. But if coins are worth more than $1,\\n        // then we would end up handing out too many coins. We need to\\n        // adjust by the total value of coins.\\n        //\\n        // To do this, we total up the value of our coins, by their\\n        // percentages. Then divide what we would otherwise give out by\\n        // this number.\\n        //\\n        // Let say we have 100 DAI at $1.06  and 200 USDT at $1.00.\\n        // So for every 1 DAI we give out, we'll be handing out 2 USDT\\n        // Our total output ratio is: 33% * 1.06 + 66% * 1.00 = 1.02\\n        //\\n        // So when calculating the output, we take the percentage of\\n        // each coin, times the desired output value, divided by the\\n        // totalOutputRatio.\\n        //\\n        // For example, withdrawing: 30 OUSD:\\n        // DAI 33% * 30 / 1.02 = 9.80 DAI\\n        // USDT = 66 % * 30 / 1.02 = 19.60 USDT\\n        //\\n        // Checking these numbers:\\n        // 9.80 DAI * 1.06 = $10.40\\n        // 19.60 USDT * 1.00 = $19.60\\n        //\\n        // And so the user gets $10.40 + $19.60 = $30 worth of value.\\n\\n        uint256 assetCount = allAssets.length;\\n        uint256[] memory assetUnits = new uint256[](assetCount);\\n        uint256[] memory assetBalances = new uint256[](assetCount);\\n        outputs = new uint256[](assetCount);\\n\\n        // Calculate redeem fee\\n        if (redeemFeeBps > 0) {\\n            uint256 redeemFee = _amount.mulTruncateScale(redeemFeeBps, 1e4);\\n            _amount = _amount - redeemFee;\\n        }\\n\\n        // Calculate assets balances and decimals once,\\n        // for a large gas savings.\\n        uint256 totalUnits = 0;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            address assetAddr = allAssets[i];\\n            uint256 balance = _checkBalance(assetAddr);\\n            assetBalances[i] = balance;\\n            assetUnits[i] = _toUnits(balance, assetAddr);\\n            totalUnits = totalUnits + assetUnits[i];\\n        }\\n        // Calculate totalOutputRatio\\n        uint256 totalOutputRatio = 0;\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            uint256 unitPrice = _toUnitPrice(allAssets[i], false);\\n            uint256 ratio = (assetUnits[i] * unitPrice) / totalUnits;\\n            totalOutputRatio = totalOutputRatio + ratio;\\n        }\\n        // Calculate final outputs\\n        uint256 factor = _amount.divPrecisely(totalOutputRatio);\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            outputs[i] = (assetBalances[i] * factor) / totalUnits;\\n        }\\n    }\\n\\n    /***************************************\\n                    Pricing\\n    ****************************************/\\n\\n    /**\\n     * @notice Returns the total price in 18 digit units for a given asset.\\n     *      Never goes above 1, since that is how we price mints.\\n     * @param asset address of the asset\\n     * @return price uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\\n     */\\n    function priceUnitMint(address asset)\\n        external\\n        view\\n        returns (uint256 price)\\n    {\\n        /* need to supply 1 asset unit in asset's decimals and can not just hard-code\\n         * to 1e18 and ignore calling `_toUnits` since we need to consider assets\\n         * with the exchange rate\\n         */\\n        uint256 units = _toUnits(\\n            uint256(1e18).scaleBy(_getDecimals(asset), 18),\\n            asset\\n        );\\n        price = (_toUnitPrice(asset, true) * units) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Returns the total price in 18 digit unit for a given asset.\\n     *      Never goes below 1, since that is how we price redeems\\n     * @param asset Address of the asset\\n     * @return price uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed\\n     */\\n    function priceUnitRedeem(address asset)\\n        external\\n        view\\n        returns (uint256 price)\\n    {\\n        /* need to supply 1 asset unit in asset's decimals and can not just hard-code\\n         * to 1e18 and ignore calling `_toUnits` since we need to consider assets\\n         * with the exchange rate\\n         */\\n        uint256 units = _toUnits(\\n            uint256(1e18).scaleBy(_getDecimals(asset), 18),\\n            asset\\n        );\\n        price = (_toUnitPrice(asset, false) * units) / 1e18;\\n    }\\n\\n    /***************************************\\n                    Utils\\n    ****************************************/\\n\\n    /**\\n     * @dev Convert a quantity of a token into 1e18 fixed decimal \\\"units\\\"\\n     * in the underlying base (USD/ETH) used by the vault.\\n     * Price is not taken into account, only quantity.\\n     *\\n     * Examples of this conversion:\\n     *\\n     * - 1e18 DAI becomes 1e18 units (same decimals)\\n     * - 1e6 USDC becomes 1e18 units (decimal conversion)\\n     * - 1e18 rETH becomes 1.2e18 units (exchange rate conversion)\\n     *\\n     * @param _raw Quantity of asset\\n     * @param _asset Core Asset address\\n     * @return value 1e18 normalized quantity of units\\n     */\\n    function _toUnits(uint256 _raw, address _asset)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        UnitConversion conversion = assets[_asset].unitConversion;\\n        if (conversion == UnitConversion.DECIMALS) {\\n            return _raw.scaleBy(18, _getDecimals(_asset));\\n        } else if (conversion == UnitConversion.GETEXCHANGERATE) {\\n            uint256 exchangeRate = IGetExchangeRateToken(_asset)\\n                .getExchangeRate();\\n            return (_raw * exchangeRate) / 1e18;\\n        } else {\\n            revert(\\\"Unsupported conversion type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns asset's unit price accounting for different asset types\\n     *      and takes into account the context in which that price exists -\\n     *      - mint or redeem.\\n     *\\n     * Note: since we are returning the price of the unit and not the one of the\\n     * asset (see comment above how 1 rETH exchanges for 1.2 units) we need\\n     * to make the Oracle price adjustment as well since we are pricing the\\n     * units and not the assets.\\n     *\\n     * The price also snaps to a \\\"full unit price\\\" in case a mint or redeem\\n     * action would be unfavourable to the protocol.\\n     *\\n     */\\n    function _toUnitPrice(address _asset, bool isMint)\\n        internal\\n        view\\n        returns (uint256 price)\\n    {\\n        UnitConversion conversion = assets[_asset].unitConversion;\\n        price = IOracle(priceProvider).price(_asset);\\n\\n        if (conversion == UnitConversion.GETEXCHANGERATE) {\\n            uint256 exchangeRate = IGetExchangeRateToken(_asset)\\n                .getExchangeRate();\\n            price = (price * 1e18) / exchangeRate;\\n        } else if (conversion != UnitConversion.DECIMALS) {\\n            revert(\\\"Unsupported conversion type\\\");\\n        }\\n\\n        /* At this stage the price is already adjusted to the unit\\n         * so the price checks are agnostic to underlying asset being\\n         * pegged to a USD or to an ETH or having a custom exchange rate.\\n         */\\n        require(price <= MAX_UNIT_PRICE_DRIFT, \\\"Vault: Price exceeds max\\\");\\n        require(price >= MIN_UNIT_PRICE_DRIFT, \\\"Vault: Price under min\\\");\\n\\n        if (isMint) {\\n            /* Never price a normalized unit price for more than one\\n             * unit of OETH/OUSD when minting.\\n             */\\n            if (price > 1e18) {\\n                price = 1e18;\\n            }\\n            require(price >= MINT_MINIMUM_UNIT_PRICE, \\\"Asset price below peg\\\");\\n        } else {\\n            /* Never give out more than 1 normalized unit amount of assets\\n             * for one unit of OETH/OUSD when redeeming.\\n             */\\n            if (price < 1e18) {\\n                price = 1e18;\\n            }\\n        }\\n    }\\n\\n    function _getDecimals(address _asset)\\n        internal\\n        view\\n        returns (uint256 decimals)\\n    {\\n        decimals = assets[_asset].decimals;\\n        require(decimals > 0, \\\"Decimals not cached\\\");\\n    }\\n\\n    /**\\n     * @notice Return the number of assets supported by the Vault.\\n     */\\n    function getAssetCount() public view returns (uint256) {\\n        return allAssets.length;\\n    }\\n\\n    /**\\n     * @notice Gets the vault configuration of a supported asset.\\n     */\\n    function getAssetConfig(address _asset)\\n        public\\n        view\\n        returns (Asset memory config)\\n    {\\n        config = assets[_asset];\\n    }\\n\\n    /**\\n     * @notice Return all vault asset addresses in order\\n     */\\n    function getAllAssets() external view returns (address[] memory) {\\n        return allAssets;\\n    }\\n\\n    /**\\n     * @notice Return the number of strategies active on the Vault.\\n     */\\n    function getStrategyCount() external view returns (uint256) {\\n        return allStrategies.length;\\n    }\\n\\n    /**\\n     * @notice Return the array of all strategies\\n     */\\n    function getAllStrategies() external view returns (address[] memory) {\\n        return allStrategies;\\n    }\\n\\n    /**\\n     * @notice Returns whether the vault supports the asset\\n     * @param _asset address of the asset\\n     * @return true if supported\\n     */\\n    function isSupportedAsset(address _asset) external view returns (bool) {\\n        return assets[_asset].isSupported;\\n    }\\n\\n    /**\\n     * @dev Falldown to the admin implementation\\n     * @notice This is a catch all for all functions not declared in core\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                sload(slot),\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function abs(int256 x) private pure returns (uint256) {\\n        require(x < int256(MAX_INT), \\\"Amount too high\\\");\\n        return x >= 0 ? uint256(x) : uint256(-x);\\n    }\\n}\\n\",\"keccak256\":\"0x392079ae0c49bc27dd44c1b32bfb9ed5019e7f7d1c7c5965ef76132e0856b777\",\"license\":\"MIT\"},\"contracts/vault/VaultInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultInitializer contract\\n * @notice The Vault contract initializes the vault.\\n * @author Origin Protocol Inc\\n */\\n\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract VaultInitializer is VaultStorage {\\n    function initialize(address _priceProvider, address _oToken)\\n        external\\n        onlyGovernor\\n        initializer\\n    {\\n        require(_priceProvider != address(0), \\\"PriceProvider address is zero\\\");\\n        require(_oToken != address(0), \\\"oToken address is zero\\\");\\n\\n        oUSD = OUSD(_oToken);\\n\\n        priceProvider = _priceProvider;\\n\\n        rebasePaused = false;\\n        capitalPaused = true;\\n\\n        // Initial redeem fee of 0 basis points\\n        redeemFeeBps = 0;\\n        // Initial Vault buffer of 0%\\n        vaultBuffer = 0;\\n        // Initial allocate threshold of 25,000 OUSD\\n        autoAllocateThreshold = 25000e18;\\n        // Threshold for rebasing\\n        rebaseThreshold = 1000e18;\\n        // Initialize all strategies\\n        allStrategies = new address[](0);\\n    }\\n}\\n\",\"keccak256\":\"0x5b9676307bbabe14b5278f00ec7edc557b84debbfa1391902d78100cb9cd467e\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetRemoved(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configiration\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n    address public ousdMetaStrategy = address(0);\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy = 0;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold = 0;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // List of strategies that can mint oTokens directly\\n    // Used in OETHBaseVaultCore\\n    mapping(address => bool) public isMintWhitelistedStrategy;\\n\\n    // For future use\\n    uint256[49] private __gap;\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf07c0e6af5f193781e433770f9f2fad335434da5e736f1d6a5a96a117d55b76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6037805461ffff60a01b1916600160a81b179055603d80546001600160a01b0319908116909155603e805482169055603f80548216905560458054909116905560006046819055604781905560e060405260a081905260c052604880546001600160b01b03191690553480156200007557600080fd5b506040516200358638038062003586833981016040819052620000989162000110565b80620000b1336000805160206200356683398151915255565b60008051602062003566833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a360601b6001600160601b0319166080525062000142565b6000602082840312156200012357600080fd5b81516001600160a01b03811681146200013b57600080fd5b9392505050565b60805160601c6133cd620001996000396000818161035a01528181610752015281816107c50152818161135301528181611d4301528181611f1d01528181611fb101528181611fe7015261203b01526133cd6000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80636217f3ea11610151578063ab80dafb116100c3578063c7af335211610087578063c7af335214610573578063d38bfff41461057b578063d4c3eea01461058e578063e45cc9f014610596578063e6cc54321461059f578063fc0cfeee146105b357610269565b8063ab80dafb14610535578063abaa991614610548578063af14052c14610550578063b888879e14610558578063c3b288641461056b57610269565b80637cbc2373116101155780637cbc2373146104b35780638e510b52146104c65780639be918e6146104cf5780639fa1826e146104fb578063a0aead4d14610504578063a403e4d51461050c57610269565b80636217f3ea1461044457806367bd7ba3146104575780636ec3ab67146104775780637136a7a6146104975780637a2202f3146104aa57610269565b806344c54707116101ea57806353ca9f24116101ae57806353ca9f24146103e657806354c6d858146103fa578063570d8e1d146104035780635b60f9fc146104165780635d36b190146104295780635f5152261461043157610269565b806344c547071461037c5780634530820a14610384578063485cc955146103b757806349c1d54d146103ca57806352d38e5d146103dd57610269565b8063207134b011610231578063207134b01461031c5780632acada4d1461032557806331e19cfa1461033a5780633b8fe28d146103425780633fc8cef31461035557610269565b806309f6442c146102af5780630c340a24146102cb578063156e29f6146102eb57806318ce56bd146103005780631edfe3da14610313575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e8080156102aa573d6000f35b3d6000fd5b6102b860385481565b6040519081526020015b60405180910390f35b6102d36105c6565b6040516001600160a01b0390911681526020016102c2565b6102fe6102f9366004612eea565b6105e3565b005b6045546102d3906001600160a01b031681565b6102b860395481565b6102b860435481565b61032d610661565b6040516102c29190612fc8565b6036546102b8565b6102b8610350366004612e9c565b6106c3565b6102d37f000000000000000000000000000000000000000000000000000000000000000081565b6102fe61071e565b6103a7610392366004612e9c565b60496020526000908152604090205460ff1681565b60405190151581526020016102c2565b6102fe6103c5366004612eb7565b610867565b6042546102d3906001600160a01b031681565b6102b8603b5481565b6037546103a790600160a01b900460ff1681565b6102b8607b5481565b603f546102d3906001600160a01b031681565b6102b8610424366004612e9c565b610a69565b6102fe610a92565b6102b861043f366004612e9c565b610b38565b6102fe610452366004612f3f565b610b49565b61046a610465366004612f3f565b610d15565b6040516102c29190613015565b61048a610485366004612e9c565b610d20565b6040516102c29190613107565b6102fe6104a5366004612f3f565b610dc6565b6102b860475481565b6102fe6104c1366004612f71565b610eb1565b6102b860415481565b6103a76104dd366004612e9c565b6001600160a01b031660009081526033602052604090205460ff1690565b6102b8603a5481565b6034546102b8565b6102d361051a366004612e9c565b6040602081905260009182529020546001600160a01b031681565b6102fe610543366004612f3f565b610f24565b6102fe6110bb565b6102fe61112a565b6037546102d3906001600160a01b031681565b61032d611170565b6103a76111d0565b6102fe610589366004612e9c565b611201565b6102b86112a5565b6102b860465481565b6037546103a790600160a81b900460ff1681565b6102fe6105c1366004612e9c565b6112af565b60006105de6000805160206133788339815191525490565b905090565b603754600160a81b900460ff16156106165760405162461bcd60e51b815260040161060d906130b7565b60405180910390fd5b600080516020613358833981519152805460028114156106485760405162461bcd60e51b815260040161060d906130df565b60028255610657858585611351565b5060019055505050565b606060348054806020026020016040519081016040528092919081815260200182805480156106b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161069b575b5050505050905090565b6000806106ec6106e66106d585611561565b670de0b6b3a76400009060126115cb565b8461162d565b9050670de0b6b3a764000081610703856001611789565b61070d9190613282565b6107179190613175565b9392505050565b6107266111d0565b6107425760405162461bcd60e51b815260040161060d90613080565b60345460005b818110156107c2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034828154811061078d5761078d61332b565b6000918252602090912001546001600160a01b031614156107b257607b8190556107c2565b6107bb816132e4565b9050610748565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034607b54815481106108025761080261332b565b6000918252602090912001546001600160a01b0316146108645760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205745544820417373657420496e6465780000000000000000604482015260640161060d565b50565b61086f6111d0565b61088b5760405162461bcd60e51b815260040161060d90613080565b600054610100900460ff16806108a4575060005460ff16155b6109075760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161060d565b600054610100900460ff16158015610929576000805461ffff19166101011790555b6001600160a01b03831661097f5760405162461bcd60e51b815260206004820152601d60248201527f507269636550726f76696465722061646472657373206973207a65726f000000604482015260640161060d565b6001600160a01b0382166109ce5760405162461bcd60e51b81526020600482015260166024820152756f546f6b656e2061646472657373206973207a65726f60501b604482015260640161060d565b603c80546001600160a01b038481166001600160a01b031990921691909117909155603780546001600160b01b03191691851691909117600160a81b17905560006038819055603981905569054b40b1f852bda00000603a55683635c9adc5dea00000603b556040805191825260208201908190529051610a5191603691612e0b565b508015610a64576000805461ff00191690555b505050565b600080610a7b6106e66106d585611561565b9050670de0b6b3a764000081610703856000611789565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610b2d5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161060d565b610b3633611a7b565b565b6000610b4382611b3c565b92915050565b603754600160a81b900460ff1615610b735760405162461bcd60e51b815260040161060d906130b7565b3360009081526035602052604090205460ff161515600114610bce5760405162461bcd60e51b8152602060048201526014602482015273556e737570706f7274656420737472617465677960601b604482015260640161060d565b3360009081526049602052604090205460ff161515600114610c2d5760405162461bcd60e51b81526020600482015260186024820152774e6f742077686974656c697374656420737472617465677960401b604482015260640161060d565b6001600160ff1b038110610c755760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b604482015260640161060d565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63382604051610ca6929190612faf565b60405180910390a1603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90610ce09033908590600401612faf565b600060405180830381600087803b158015610cfa57600080fd5b505af1158015610d0e573d6000803e3d6000fd5b5050505050565b6060610b4382611d0b565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160a01b038616825260338152908490208451928301909452835460ff808216151584529394929391840191610100909104166001811115610d8c57610d8c613315565b6001811115610d9d57610d9d613315565b8152905462010000810460ff1660208301526301000000900461ffff1660409091015292915050565b603754600160a81b900460ff1615610df05760405162461bcd60e51b815260040161060d906130b7565b60008051602061335883398151915280546002811415610e225760405162461bcd60e51b815260040161060d906130df565b60028255603c546040516370a0823160e01b8152336004820152610ea9916001600160a01b0316906370a082319060240160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190612f58565b84611e4c565b506001905550565b603754600160a81b900460ff1615610edb5760405162461bcd60e51b815260040161060d906130b7565b60008051602061335883398151915280546002811415610f0d5760405162461bcd60e51b815260040161060d906130df565b60028255610f1b8484611e4c565b50600190555050565b603754600160a81b900460ff1615610f4e5760405162461bcd60e51b815260040161060d906130b7565b3360009081526035602052604090205460ff161515600114610fa95760405162461bcd60e51b8152602060048201526014602482015273556e737570706f7274656420737472617465677960601b604482015260640161060d565b3360009081526049602052604090205460ff1615156001146110085760405162461bcd60e51b81526020600482015260186024820152774e6f742077686974656c697374656420737472617465677960401b604482015260640161060d565b6001600160ff1b0381106110505760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b604482015260640161060d565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853382604051611081929190612faf565b60405180910390a1603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610ce09033908590600401612faf565b603754600160a81b900460ff16156110e55760405162461bcd60e51b815260040161060d906130b7565b600080516020613358833981519152805460028114156111175760405162461bcd60e51b815260040161060d906130df565b60028255611123612158565b5060019055565b6000805160206133588339815191528054600281141561115c5760405162461bcd60e51b815260040161060d906130df565b600282556111686123cc565b505060019055565b606060368054806020026020016040519081016040528092919081815260200182805480156106b9576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161069b575050505050905090565b60006111e86000805160206133788339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6112096111d0565b6112255760405162461bcd60e51b815260040161060d90613080565b61124d817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661126d6000805160206133788339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006105de612707565b6112b76111d0565b6112d35760405162461bcd60e51b815260040161060d90613080565b803b61132d5760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b606482015260840161060d565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146113d25760405162461bcd60e51b815260206004820152601d60248201527f556e737570706f7274656420617373657420666f72206d696e74696e67000000604482015260640161060d565b600082116114225760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161060d565b808210156114725760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d0000604482015260640161060d565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688533836040516114a3929190612faf565b60405180910390a1603754600160a01b900460ff161580156114c75750603b548210155b156114d6576114d46123cc565b505b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906115089033908690600401612faf565b600060405180830381600087803b15801561152257600080fd5b505af1158015611536573d6000803e3d6000fd5b50611550925050506001600160a01b038416333085612723565b603a548210610a6457610a64612158565b6001600160a01b03811660009081526033602052604090205462010000900460ff16806115c65760405162461bcd60e51b8152602060048201526013602482015272111958da5b585b1cc81b9bdd0818d858da1959606a1b604482015260640161060d565b919050565b6000818311156115fb576115f46115e283856132a1565b6115ed90600a6131da565b859061278e565b9350611625565b818310156116255761162261161084846132a1565b61161b90600a6131da565b859061279a565b93505b509192915050565b6001600160a01b038116600090815260336020526040812054610100900460ff168181600181111561166157611661613315565b14156116855761167d601261167585611561565b8691906115cb565b915050610b43565b600181600181111561169957611699613315565b141561173a576000836001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116da57600080fd5b505afa1580156116ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117129190612f58565b9050670de0b6b3a76400006117278287613282565b6117319190613175565b92505050610b43565b60405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161060d565b5092915050565b6001600160a01b038281166000818152603360205260408082205460375491516315d5220f60e31b81526004810194909452919361010090920460ff169291169063aea910789060240160206040518083038186803b1580156117eb57600080fd5b505afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190612f58565b9150600181600181111561183957611839613315565b14156118d9576000846001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561187a57600080fd5b505afa15801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b29190612f58565b9050806118c784670de0b6b3a7640000613282565b6118d19190613175565b92505061193a565b60008160018111156118ed576118ed613315565b1461193a5760405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161060d565b67120a871cc00200008211156119925760405162461bcd60e51b815260206004820152601860248201527f5661756c743a2050726963652065786365656473206d61780000000000000000604482015260640161060d565b6709b6e64a8ec600008210156119e35760405162461bcd60e51b81526020600482015260166024820152752b30bab63a1d10283934b1b2903ab73232b91036b4b760511b604482015260640161060d565b8215611a5a57670de0b6b3a7640000821115611a0557670de0b6b3a764000091505b670dd99bb65dd70000821015611a555760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b604482015260640161060d565b611782565b670de0b6b3a76400008210156117825750670de0b6b3a76400009392505050565b6001600160a01b038116611ad15760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161060d565b806001600160a01b0316611af16000805160206133788339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36108648160008051602061337883398151915255565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a082319060240160206040518083038186803b158015611b8057600080fd5b505afa158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb89190612f58565b60365490925060005b81811015611d0357600060368281548110611bde57611bde61332b565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0388811660048301529091169150819063aa388af69060240160206040518083038186803b158015611c2f57600080fd5b505afa158015611c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c679190612f1d565b15611cf257604051632fa8a91360e11b81526001600160a01b038781166004830152821690635f5152269060240160206040518083038186803b158015611cad57600080fd5b505afa158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce59190612f58565b611cef908661315d565b94505b50611cfc816132e4565b9050611bc1565b505050919050565b60385460609015611d3a57603854600090611d2a9084906127106127a6565b9050611d3681846132a1565b9250505b6000607b5490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660348281548110611d7e57611d7e61332b565b6000918252602090912001546001600160a01b031614611de05760405162461bcd60e51b815260206004820152601b60248201527f5745544820417373657420696e646578206e6f74206361636865640000000000604482015260640161060d565b60345467ffffffffffffffff811115611dfb57611dfb613341565b604051908082528060200260200182016040528015611e24578160200160208202803683370190505b50915082828281518110611e3a57611e3a61332b565b60200260200101818152505050919050565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63383604051611e7d929190612faf565b60405180910390a181611e8e575050565b6000611e9983611d0b565b607b5481518110611eac57611eac61332b565b6020026020010151905081811015611f065760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d604482015260640161060d565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611f6757600080fd5b505afa158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f9190612f58565b10611fdd57611fd86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836127c8565b6120eb565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152604060208190529020541680156120af57604051636ce5768960e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905282919082169063d9caed1290606401600060405180830381600087803b15801561209157600080fd5b505af11580156120a5573d6000803e3d6000fd5b50505050506120e9565b60405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015260640161060d565b505b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061211d9033908790600401612faf565b600060405180830381600087803b15801561213757600080fd5b505af115801561214b573d6000803e3d6000fd5b50505050610a64836127e7565b600061216261294d565b90508061216c5750565b6000612176612a2f565b90506000612184828461315d565b90506000826121a9576039546121a290670de0b6b3a76400006132a1565b90506121ec565b83826039546121b89190613282565b6121c29190613175565b905080670de0b6b3a764000011156121e6576121a281670de0b6b3a76400006132a1565b50505050565b806121f75750505050565b60345460005b818110156123c45760006034828154811061221a5761221a61332b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561226857600080fd5b505afa15801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a09190612f58565b9050806122ae5750506123b4565b60006122ba8287612a8b565b6001600160a01b038085166000908152604060208190529020549192501680158015906122e75750600082115b156123af57806123016001600160a01b03861682856127c8565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef249061232f9088908790600401612faf565b600060405180830381600087803b15801561234957600080fd5b505af115801561235d573d6000803e3d6000fd5b5050604080516001600160a01b03808a168252861660208201529081018690527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505b505050505b6123bd816132e4565b90506121fd565b505050505050565b603754600090600160a01b900460ff161561241b5760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015260640161060d565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561246057600080fd5b505afa158015612474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124989190612f58565b905060006124a4612707565b9050816124b45791506127049050565b6042546001600160a01b031680158015906124ce57508282115b156126105760006124df84846132a1565b905060006124fc604354612710846127a69092919063ffffffff16565b90508082116125585760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b606482015260840161060d565b80156125c357603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906125909086908590600401612faf565b600060405180830381600087803b1580156125aa57600080fd5b505af11580156125be573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190612f58565b9250828211156126ff57603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b505050505b509150505b90565b6000612711612a2f565b61271961294d565b6105de919061315d565b6040516001600160a01b03808516602483015283166044820152606481018290526121e69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612aa0565b60006107178284613282565b60006107178284613175565b6000806127b3858561278e565b90506127bf818461279a565b95945050505050565b610a648363a9059cbb60e01b8484604051602401612757929190612faf565b6000603b5482101580156128055750603754600160a01b900460ff16155b15612819576128126123cc565b9050612824565b612821612707565b90505b604154156129495760006128be82603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561288057600080fd5b505afa158015612894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b89190612f58565b90612b72565b9050604154670de0b6b3a764000082116128e9576128e482670de0b6b3a76400006132a1565b6128fb565b6128fb670de0b6b3a7640000836132a1565b1115610a645760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f720000604482015260640161060d565b5050565b603454600090815b81811015612a2a576000603482815481106129725761297261332b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156129c057600080fd5b505afa1580156129d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f89190612f58565b90508015612a1757612a0a818361162d565b612a14908661315d565b94505b505080612a23906132e4565b9050612955565b505090565b603654600090815b81811015612a2a57612a6f60368281548110612a5557612a5561332b565b6000918252602090912001546001600160a01b0316612b9b565b612a79908461315d565b9250612a84816132e4565b9050612a37565b60006107178383670de0b6b3a76400006127a6565b6000612af5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d009092919063ffffffff16565b805190915015610a645780806020019051810190612b139190612f1d565b610a645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060d565b600080612b8784670de0b6b3a764000061278e565b9050612b93818461279a565b949350505050565b6034546000908290825b81811015611d0357600060348281548110612bc257612bc261332b565b60009182526020909120015460405163551c457b60e11b81526001600160a01b039182166004820181905292509085169063aa388af69060240160206040518083038186803b158015612c1457600080fd5b505afa158015612c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4c9190612f1d565b15612cef57604051632fa8a91360e11b81526001600160a01b03828116600483015260009190861690635f5152269060240160206040518083038186803b158015612c9657600080fd5b505afa158015612caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cce9190612f58565b90508015612ced57612ce0818361162d565b612cea908761315d565b95505b505b50612cf9816132e4565b9050612ba5565b6060612b93848460008585843b612d595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060d565b600080866001600160a01b03168587604051612d759190612f93565b60006040518083038185875af1925050503d8060008114612db2576040519150601f19603f3d011682016040523d82523d6000602084013e612db7565b606091505b5091509150612dc7828286612dd2565b979650505050505050565b60608315612de1575081610717565b825115612df15782518084602001fd5b8160405162461bcd60e51b815260040161060d919061304d565b828054828255906000526020600020908101928215612e60579160200282015b82811115612e6057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612e2b565b50612e6c929150612e70565b5090565b5b80821115612e6c5760008155600101612e71565b80356001600160a01b03811681146115c657600080fd5b600060208284031215612eae57600080fd5b61071782612e85565b60008060408385031215612eca57600080fd5b612ed383612e85565b9150612ee160208401612e85565b90509250929050565b600080600060608486031215612eff57600080fd5b612f0884612e85565b95602085013595506040909401359392505050565b600060208284031215612f2f57600080fd5b8151801515811461071757600080fd5b600060208284031215612f5157600080fd5b5035919050565b600060208284031215612f6a57600080fd5b5051919050565b60008060408385031215612f8457600080fd5b50508035926020909101359150565b60008251612fa58184602087016132b8565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156130095783516001600160a01b031683529284019291840191600101612fe4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561300957835183529284019291840191600101613031565b602081526000825180602084015261306c8160408501602087016132b8565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b815115158152602082015160808201906002811061313557634e487b7160e01b600052602160045260246000fd5b8060208401525060ff604084015116604083015261ffff606084015116606083015292915050565b60008219821115613170576131706132ff565b500190565b60008261319257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156131d25781600019048211156131b8576131b86132ff565b808516156131c557918102915b93841c939080029061319c565b509250929050565b600061071783836000826131f057506001610b43565b816131fd57506000610b43565b8160018114613213576002811461321d57613239565b6001915050610b43565b60ff84111561322e5761322e6132ff565b50506001821b610b43565b5060208310610133831016604e8410600b841016171561325c575081810a610b43565b6132668383613197565b806000190482111561327a5761327a6132ff565b029392505050565b600081600019048311821515161561329c5761329c6132ff565b500290565b6000828210156132b3576132b36132ff565b500390565b60005b838110156132d35781810151838201526020016132bb565b838111156121e65750506000910152565b60006000198214156132f8576132f86132ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220d9d51a53aeeffb5a7dc4e8b31f398457ea5e0c69e6cb6273cf1af6acf717396064736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c80636217f3ea11610151578063ab80dafb116100c3578063c7af335211610087578063c7af335214610573578063d38bfff41461057b578063d4c3eea01461058e578063e45cc9f014610596578063e6cc54321461059f578063fc0cfeee146105b357610269565b8063ab80dafb14610535578063abaa991614610548578063af14052c14610550578063b888879e14610558578063c3b288641461056b57610269565b80637cbc2373116101155780637cbc2373146104b35780638e510b52146104c65780639be918e6146104cf5780639fa1826e146104fb578063a0aead4d14610504578063a403e4d51461050c57610269565b80636217f3ea1461044457806367bd7ba3146104575780636ec3ab67146104775780637136a7a6146104975780637a2202f3146104aa57610269565b806344c54707116101ea57806353ca9f24116101ae57806353ca9f24146103e657806354c6d858146103fa578063570d8e1d146104035780635b60f9fc146104165780635d36b190146104295780635f5152261461043157610269565b806344c547071461037c5780634530820a14610384578063485cc955146103b757806349c1d54d146103ca57806352d38e5d146103dd57610269565b8063207134b011610231578063207134b01461031c5780632acada4d1461032557806331e19cfa1461033a5780633b8fe28d146103425780633fc8cef31461035557610269565b806309f6442c146102af5780630c340a24146102cb578063156e29f6146102eb57806318ce56bd146103005780631edfe3da14610313575b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9366000803760008036600084545af43d6000803e8080156102aa573d6000f35b3d6000fd5b6102b860385481565b6040519081526020015b60405180910390f35b6102d36105c6565b6040516001600160a01b0390911681526020016102c2565b6102fe6102f9366004612eea565b6105e3565b005b6045546102d3906001600160a01b031681565b6102b860395481565b6102b860435481565b61032d610661565b6040516102c29190612fc8565b6036546102b8565b6102b8610350366004612e9c565b6106c3565b6102d37f000000000000000000000000000000000000000000000000000000000000000081565b6102fe61071e565b6103a7610392366004612e9c565b60496020526000908152604090205460ff1681565b60405190151581526020016102c2565b6102fe6103c5366004612eb7565b610867565b6042546102d3906001600160a01b031681565b6102b8603b5481565b6037546103a790600160a01b900460ff1681565b6102b8607b5481565b603f546102d3906001600160a01b031681565b6102b8610424366004612e9c565b610a69565b6102fe610a92565b6102b861043f366004612e9c565b610b38565b6102fe610452366004612f3f565b610b49565b61046a610465366004612f3f565b610d15565b6040516102c29190613015565b61048a610485366004612e9c565b610d20565b6040516102c29190613107565b6102fe6104a5366004612f3f565b610dc6565b6102b860475481565b6102fe6104c1366004612f71565b610eb1565b6102b860415481565b6103a76104dd366004612e9c565b6001600160a01b031660009081526033602052604090205460ff1690565b6102b8603a5481565b6034546102b8565b6102d361051a366004612e9c565b6040602081905260009182529020546001600160a01b031681565b6102fe610543366004612f3f565b610f24565b6102fe6110bb565b6102fe61112a565b6037546102d3906001600160a01b031681565b61032d611170565b6103a76111d0565b6102fe610589366004612e9c565b611201565b6102b86112a5565b6102b860465481565b6037546103a790600160a81b900460ff1681565b6102fe6105c1366004612e9c565b6112af565b60006105de6000805160206133788339815191525490565b905090565b603754600160a81b900460ff16156106165760405162461bcd60e51b815260040161060d906130b7565b60405180910390fd5b600080516020613358833981519152805460028114156106485760405162461bcd60e51b815260040161060d906130df565b60028255610657858585611351565b5060019055505050565b606060348054806020026020016040519081016040528092919081815260200182805480156106b957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161069b575b5050505050905090565b6000806106ec6106e66106d585611561565b670de0b6b3a76400009060126115cb565b8461162d565b9050670de0b6b3a764000081610703856001611789565b61070d9190613282565b6107179190613175565b9392505050565b6107266111d0565b6107425760405162461bcd60e51b815260040161060d90613080565b60345460005b818110156107c2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034828154811061078d5761078d61332b565b6000918252602090912001546001600160a01b031614156107b257607b8190556107c2565b6107bb816132e4565b9050610748565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166034607b54815481106108025761080261332b565b6000918252602090912001546001600160a01b0316146108645760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205745544820417373657420496e6465780000000000000000604482015260640161060d565b50565b61086f6111d0565b61088b5760405162461bcd60e51b815260040161060d90613080565b600054610100900460ff16806108a4575060005460ff16155b6109075760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161060d565b600054610100900460ff16158015610929576000805461ffff19166101011790555b6001600160a01b03831661097f5760405162461bcd60e51b815260206004820152601d60248201527f507269636550726f76696465722061646472657373206973207a65726f000000604482015260640161060d565b6001600160a01b0382166109ce5760405162461bcd60e51b81526020600482015260166024820152756f546f6b656e2061646472657373206973207a65726f60501b604482015260640161060d565b603c80546001600160a01b038481166001600160a01b031990921691909117909155603780546001600160b01b03191691851691909117600160a81b17905560006038819055603981905569054b40b1f852bda00000603a55683635c9adc5dea00000603b556040805191825260208201908190529051610a5191603691612e0b565b508015610a64576000805461ff00191690555b505050565b600080610a7b6106e66106d585611561565b9050670de0b6b3a764000081610703856000611789565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610b2d5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161060d565b610b3633611a7b565b565b6000610b4382611b3c565b92915050565b603754600160a81b900460ff1615610b735760405162461bcd60e51b815260040161060d906130b7565b3360009081526035602052604090205460ff161515600114610bce5760405162461bcd60e51b8152602060048201526014602482015273556e737570706f7274656420737472617465677960601b604482015260640161060d565b3360009081526049602052604090205460ff161515600114610c2d5760405162461bcd60e51b81526020600482015260186024820152774e6f742077686974656c697374656420737472617465677960401b604482015260640161060d565b6001600160ff1b038110610c755760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b604482015260640161060d565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63382604051610ca6929190612faf565b60405180910390a1603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90610ce09033908590600401612faf565b600060405180830381600087803b158015610cfa57600080fd5b505af1158015610d0e573d6000803e3d6000fd5b5050505050565b6060610b4382611d0b565b604080516080808201835260008083526020808401829052838501829052606084018290526001600160a01b038616825260338152908490208451928301909452835460ff808216151584529394929391840191610100909104166001811115610d8c57610d8c613315565b6001811115610d9d57610d9d613315565b8152905462010000810460ff1660208301526301000000900461ffff1660409091015292915050565b603754600160a81b900460ff1615610df05760405162461bcd60e51b815260040161060d906130b7565b60008051602061335883398151915280546002811415610e225760405162461bcd60e51b815260040161060d906130df565b60028255603c546040516370a0823160e01b8152336004820152610ea9916001600160a01b0316906370a082319060240160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190612f58565b84611e4c565b506001905550565b603754600160a81b900460ff1615610edb5760405162461bcd60e51b815260040161060d906130b7565b60008051602061335883398151915280546002811415610f0d5760405162461bcd60e51b815260040161060d906130df565b60028255610f1b8484611e4c565b50600190555050565b603754600160a81b900460ff1615610f4e5760405162461bcd60e51b815260040161060d906130b7565b3360009081526035602052604090205460ff161515600114610fa95760405162461bcd60e51b8152602060048201526014602482015273556e737570706f7274656420737472617465677960601b604482015260640161060d565b3360009081526049602052604090205460ff1615156001146110085760405162461bcd60e51b81526020600482015260186024820152774e6f742077686974656c697374656420737472617465677960401b604482015260640161060d565b6001600160ff1b0381106110505760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b604482015260640161060d565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853382604051611081929190612faf565b60405180910390a1603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610ce09033908590600401612faf565b603754600160a81b900460ff16156110e55760405162461bcd60e51b815260040161060d906130b7565b600080516020613358833981519152805460028114156111175760405162461bcd60e51b815260040161060d906130df565b60028255611123612158565b5060019055565b6000805160206133588339815191528054600281141561115c5760405162461bcd60e51b815260040161060d906130df565b600282556111686123cc565b505060019055565b606060368054806020026020016040519081016040528092919081815260200182805480156106b9576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161069b575050505050905090565b60006111e86000805160206133788339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6112096111d0565b6112255760405162461bcd60e51b815260040161060d90613080565b61124d817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661126d6000805160206133788339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006105de612707565b6112b76111d0565b6112d35760405162461bcd60e51b815260040161060d90613080565b803b61132d5760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b606482015260840161060d565b7fa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd955565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146113d25760405162461bcd60e51b815260206004820152601d60248201527f556e737570706f7274656420617373657420666f72206d696e74696e67000000604482015260640161060d565b600082116114225760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161060d565b808210156114725760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d0000604482015260640161060d565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688533836040516114a3929190612faf565b60405180910390a1603754600160a01b900460ff161580156114c75750603b548210155b156114d6576114d46123cc565b505b603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906115089033908690600401612faf565b600060405180830381600087803b15801561152257600080fd5b505af1158015611536573d6000803e3d6000fd5b50611550925050506001600160a01b038416333085612723565b603a548210610a6457610a64612158565b6001600160a01b03811660009081526033602052604090205462010000900460ff16806115c65760405162461bcd60e51b8152602060048201526013602482015272111958da5b585b1cc81b9bdd0818d858da1959606a1b604482015260640161060d565b919050565b6000818311156115fb576115f46115e283856132a1565b6115ed90600a6131da565b859061278e565b9350611625565b818310156116255761162261161084846132a1565b61161b90600a6131da565b859061279a565b93505b509192915050565b6001600160a01b038116600090815260336020526040812054610100900460ff168181600181111561166157611661613315565b14156116855761167d601261167585611561565b8691906115cb565b915050610b43565b600181600181111561169957611699613315565b141561173a576000836001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116da57600080fd5b505afa1580156116ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117129190612f58565b9050670de0b6b3a76400006117278287613282565b6117319190613175565b92505050610b43565b60405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161060d565b5092915050565b6001600160a01b038281166000818152603360205260408082205460375491516315d5220f60e31b81526004810194909452919361010090920460ff169291169063aea910789060240160206040518083038186803b1580156117eb57600080fd5b505afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190612f58565b9150600181600181111561183957611839613315565b14156118d9576000846001600160a01b031663e6aa216c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561187a57600080fd5b505afa15801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b29190612f58565b9050806118c784670de0b6b3a7640000613282565b6118d19190613175565b92505061193a565b60008160018111156118ed576118ed613315565b1461193a5760405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6e76657273696f6e20747970650000000000604482015260640161060d565b67120a871cc00200008211156119925760405162461bcd60e51b815260206004820152601860248201527f5661756c743a2050726963652065786365656473206d61780000000000000000604482015260640161060d565b6709b6e64a8ec600008210156119e35760405162461bcd60e51b81526020600482015260166024820152752b30bab63a1d10283934b1b2903ab73232b91036b4b760511b604482015260640161060d565b8215611a5a57670de0b6b3a7640000821115611a0557670de0b6b3a764000091505b670dd99bb65dd70000821015611a555760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b604482015260640161060d565b611782565b670de0b6b3a76400008210156117825750670de0b6b3a76400009392505050565b6001600160a01b038116611ad15760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161060d565b806001600160a01b0316611af16000805160206133788339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36108648160008051602061337883398151915255565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a082319060240160206040518083038186803b158015611b8057600080fd5b505afa158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb89190612f58565b60365490925060005b81811015611d0357600060368281548110611bde57611bde61332b565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0388811660048301529091169150819063aa388af69060240160206040518083038186803b158015611c2f57600080fd5b505afa158015611c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c679190612f1d565b15611cf257604051632fa8a91360e11b81526001600160a01b038781166004830152821690635f5152269060240160206040518083038186803b158015611cad57600080fd5b505afa158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce59190612f58565b611cef908661315d565b94505b50611cfc816132e4565b9050611bc1565b505050919050565b60385460609015611d3a57603854600090611d2a9084906127106127a6565b9050611d3681846132a1565b9250505b6000607b5490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660348281548110611d7e57611d7e61332b565b6000918252602090912001546001600160a01b031614611de05760405162461bcd60e51b815260206004820152601b60248201527f5745544820417373657420696e646578206e6f74206361636865640000000000604482015260640161060d565b60345467ffffffffffffffff811115611dfb57611dfb613341565b604051908082528060200260200182016040528015611e24578160200160208202803683370190505b50915082828281518110611e3a57611e3a61332b565b60200260200101818152505050919050565b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63383604051611e7d929190612faf565b60405180910390a181611e8e575050565b6000611e9983611d0b565b607b5481518110611eac57611eac61332b565b6020026020010151905081811015611f065760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d604482015260640161060d565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611f6757600080fd5b505afa158015611f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9f9190612f58565b10611fdd57611fd86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836127c8565b6120eb565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152604060208190529020541680156120af57604051636ce5768960e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905282919082169063d9caed1290606401600060405180830381600087803b15801561209157600080fd5b505af11580156120a5573d6000803e3d6000fd5b50505050506120e9565b60405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015260640161060d565b505b603c54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061211d9033908790600401612faf565b600060405180830381600087803b15801561213757600080fd5b505af115801561214b573d6000803e3d6000fd5b50505050610a64836127e7565b600061216261294d565b90508061216c5750565b6000612176612a2f565b90506000612184828461315d565b90506000826121a9576039546121a290670de0b6b3a76400006132a1565b90506121ec565b83826039546121b89190613282565b6121c29190613175565b905080670de0b6b3a764000011156121e6576121a281670de0b6b3a76400006132a1565b50505050565b806121f75750505050565b60345460005b818110156123c45760006034828154811061221a5761221a61332b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561226857600080fd5b505afa15801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a09190612f58565b9050806122ae5750506123b4565b60006122ba8287612a8b565b6001600160a01b038085166000908152604060208190529020549192501680158015906122e75750600082115b156123af57806123016001600160a01b03861682856127c8565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef249061232f9088908790600401612faf565b600060405180830381600087803b15801561234957600080fd5b505af115801561235d573d6000803e3d6000fd5b5050604080516001600160a01b03808a168252861660208201529081018690527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505b505050505b6123bd816132e4565b90506121fd565b505050505050565b603754600090600160a01b900460ff161561241b5760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015260640161060d565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561246057600080fd5b505afa158015612474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124989190612f58565b905060006124a4612707565b9050816124b45791506127049050565b6042546001600160a01b031680158015906124ce57508282115b156126105760006124df84846132a1565b905060006124fc604354612710846127a69092919063ffffffff16565b90508082116125585760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b606482015260840161060d565b80156125c357603c546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906125909086908590600401612faf565b600060405180830381600087803b1580156125aa57600080fd5b505af11580156125be573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190612f58565b9250828211156126ff57603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b505050505b509150505b90565b6000612711612a2f565b61271961294d565b6105de919061315d565b6040516001600160a01b03808516602483015283166044820152606481018290526121e69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612aa0565b60006107178284613282565b60006107178284613175565b6000806127b3858561278e565b90506127bf818461279a565b95945050505050565b610a648363a9059cbb60e01b8484604051602401612757929190612faf565b6000603b5482101580156128055750603754600160a01b900460ff16155b15612819576128126123cc565b9050612824565b612821612707565b90505b604154156129495760006128be82603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561288057600080fd5b505afa158015612894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b89190612f58565b90612b72565b9050604154670de0b6b3a764000082116128e9576128e482670de0b6b3a76400006132a1565b6128fb565b6128fb670de0b6b3a7640000836132a1565b1115610a645760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f720000604482015260640161060d565b5050565b603454600090815b81811015612a2a576000603482815481106129725761297261332b565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156129c057600080fd5b505afa1580156129d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f89190612f58565b90508015612a1757612a0a818361162d565b612a14908661315d565b94505b505080612a23906132e4565b9050612955565b505090565b603654600090815b81811015612a2a57612a6f60368281548110612a5557612a5561332b565b6000918252602090912001546001600160a01b0316612b9b565b612a79908461315d565b9250612a84816132e4565b9050612a37565b60006107178383670de0b6b3a76400006127a6565b6000612af5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d009092919063ffffffff16565b805190915015610a645780806020019051810190612b139190612f1d565b610a645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060d565b600080612b8784670de0b6b3a764000061278e565b9050612b93818461279a565b949350505050565b6034546000908290825b81811015611d0357600060348281548110612bc257612bc261332b565b60009182526020909120015460405163551c457b60e11b81526001600160a01b039182166004820181905292509085169063aa388af69060240160206040518083038186803b158015612c1457600080fd5b505afa158015612c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4c9190612f1d565b15612cef57604051632fa8a91360e11b81526001600160a01b03828116600483015260009190861690635f5152269060240160206040518083038186803b158015612c9657600080fd5b505afa158015612caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cce9190612f58565b90508015612ced57612ce0818361162d565b612cea908761315d565b95505b505b50612cf9816132e4565b9050612ba5565b6060612b93848460008585843b612d595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060d565b600080866001600160a01b03168587604051612d759190612f93565b60006040518083038185875af1925050503d8060008114612db2576040519150601f19603f3d011682016040523d82523d6000602084013e612db7565b606091505b5091509150612dc7828286612dd2565b979650505050505050565b60608315612de1575081610717565b825115612df15782518084602001fd5b8160405162461bcd60e51b815260040161060d919061304d565b828054828255906000526020600020908101928215612e60579160200282015b82811115612e6057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612e2b565b50612e6c929150612e70565b5090565b5b80821115612e6c5760008155600101612e71565b80356001600160a01b03811681146115c657600080fd5b600060208284031215612eae57600080fd5b61071782612e85565b60008060408385031215612eca57600080fd5b612ed383612e85565b9150612ee160208401612e85565b90509250929050565b600080600060608486031215612eff57600080fd5b612f0884612e85565b95602085013595506040909401359392505050565b600060208284031215612f2f57600080fd5b8151801515811461071757600080fd5b600060208284031215612f5157600080fd5b5035919050565b600060208284031215612f6a57600080fd5b5051919050565b60008060408385031215612f8457600080fd5b50508035926020909101359150565b60008251612fa58184602087016132b8565b9190910192915050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156130095783516001600160a01b031683529284019291840191600101612fe4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561300957835183529284019291840191600101613031565b602081526000825180602084015261306c8160408501602087016132b8565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b815115158152602082015160808201906002811061313557634e487b7160e01b600052602160045260246000fd5b8060208401525060ff604084015116604083015261ffff606084015116606083015292915050565b60008219821115613170576131706132ff565b500190565b60008261319257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156131d25781600019048211156131b8576131b86132ff565b808516156131c557918102915b93841c939080029061319c565b509250929050565b600061071783836000826131f057506001610b43565b816131fd57506000610b43565b8160018114613213576002811461321d57613239565b6001915050610b43565b60ff84111561322e5761322e6132ff565b50506001821b610b43565b5060208310610133831016604e8410600b841016171561325c575081810a610b43565b6132668383613197565b806000190482111561327a5761327a6132ff565b029392505050565b600081600019048311821515161561329c5761329c6132ff565b500290565b6000828210156132b3576132b36132ff565b500390565b60005b838110156132d35781810151838201526020016132bb565b838111156121e65750506000910152565b60006000198214156132f8576132f86132ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa2646970667358221220d9d51a53aeeffb5a7dc4e8b31f398457ea5e0c69e6cb6273cf1af6acf717396064736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "author": "Origin Protocol Inc",
    "kind": "dev",
    "methods": {
      "cacheWETHAssetIndex()": {
        "details": "Caches WETH's index in `allAssets` variable.      Reduces gas usage by redeem by caching that."
      },
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of asset"
        },
        "returns": {
          "_0": "uint256 Balance of asset in decimals of asset"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "address of the asset"
        },
        "returns": {
          "_0": "true if supported"
        }
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of the asset being deposited",
          "_asset": "Address of the asset being deposited",
          "_minimumOusdAmount": "Minimum OTokens to mint"
        }
      },
      "priceUnitMint(address)": {
        "params": {
          "asset": "address of the asset"
        },
        "returns": {
          "price": "uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed"
        }
      },
      "priceUnitRedeem(address)": {
        "params": {
          "asset": "Address of the asset"
        },
        "returns": {
          "price": "uint256: unit (USD / ETH) price for 1 unit of the asset, in 18 decimal fixed"
        }
      },
      "redeem(uint256,uint256)": {
        "params": {
          "_amount": "Amount of OTokens to burn",
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "redeemAll(uint256)": {
        "params": {
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "setAdminImpl(address)": {
        "params": {
          "newImpl": "address of the implementation"
        }
      },
      "totalValue()": {
        "returns": {
          "value": "Total value in USD/ETH (1e18)"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "title": "OETH Base VaultCore Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocate()": {
        "notice": "Allocate unallocated funds on Vault to strategies.*"
      },
      "assetDefaultStrategies(address)": {
        "notice": "Mapping of asset address to the Strategy that they should automatically"
      },
      "autoAllocateThreshold()": {
        "notice": "OToken mints over this amount automatically allocate funds. 18 decimals."
      },
      "calculateRedeemOutputs(uint256)": {
        "notice": "Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned"
      },
      "capitalPaused()": {
        "notice": "pause operations that change the OToken supply. eg mint, redeem, allocate, mint/burn for strategy"
      },
      "checkBalance(address)": {
        "notice": "Get the balance of an asset held in Vault and all strategies."
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "getAllAssets()": {
        "notice": "Return all vault asset addresses in order"
      },
      "getAllStrategies()": {
        "notice": "Return the array of all strategies"
      },
      "getAssetConfig(address)": {
        "notice": "Gets the vault configuration of a supported asset."
      },
      "getAssetCount()": {
        "notice": "Return the number of assets supported by the Vault."
      },
      "getStrategyCount()": {
        "notice": "Return the number of strategies active on the Vault."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "isSupportedAsset(address)": {
        "notice": "Returns whether the vault supports the asset"
      },
      "maxSupplyDiff()": {
        "notice": "Max difference between total supply and total value of assets. 18 decimals."
      },
      "mint(address,uint256,uint256)": {
        "notice": "Deposit a supported asset and mint OTokens."
      },
      "netOusdMintForStrategyThreshold()": {
        "notice": "How much net total OTokens are allowed to be minted by all strategies"
      },
      "netOusdMintedForStrategy()": {
        "notice": "How much OTokens are currently minted by the strategy"
      },
      "ousdMetaStrategy()": {
        "notice": "Metapool strategy that is allowed to mint/burn OTokens without changing collateral"
      },
      "priceProvider()": {
        "notice": "Address of the Oracle price provider contract"
      },
      "priceUnitMint(address)": {
        "notice": "Returns the total price in 18 digit units for a given asset.      Never goes above 1, since that is how we price mints."
      },
      "priceUnitRedeem(address)": {
        "notice": "Returns the total price in 18 digit unit for a given asset.      Never goes below 1, since that is how we price redeems"
      },
      "rebase()": {
        "notice": "Calculate the total value of assets held by the Vault and all      strategies and update the supply of OTokens."
      },
      "rebasePaused()": {
        "notice": "pause rebasing if true"
      },
      "rebaseThreshold()": {
        "notice": "OToken mints over this amount automatically rebase. 18 decimals."
      },
      "redeem(uint256,uint256)": {
        "notice": "Withdraw a supported asset and burn OTokens."
      },
      "redeemAll(uint256)": {
        "notice": "Withdraw a supported asset and burn all OTokens."
      },
      "redeemFeeBps()": {
        "notice": "Redemption fee in basis points. eg 50 = 0.5%"
      },
      "setAdminImpl(address)": {
        "notice": "set the implementation for the admin, this needs to be in a base class else we cannot set it"
      },
      "strategistAddr()": {
        "notice": "Address of the Strategist"
      },
      "totalValue()": {
        "notice": "Determine the total value of assets held by the vault and its         strategies."
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "trusteeAddress()": {
        "notice": "Trustee contract that can collect a percentage of yield"
      },
      "trusteeFeeBps()": {
        "notice": "Amount of yield collected in basis points. eg 2000 = 20%"
      },
      "vaultBuffer()": {
        "notice": "Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25880,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25883,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25923,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30855,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Asset)30849_storage)"
      },
      {
        "astId": 30859,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "allAssets",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30870,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "strategies",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(Strategy)30864_storage)"
      },
      {
        "astId": 30874,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "allStrategies",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30877,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "priceProvider",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 30881,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "rebasePaused",
        "offset": 20,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 30885,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "capitalPaused",
        "offset": 21,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 30888,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30891,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "vaultBuffer",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 30894,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "autoAllocateThreshold",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 30897,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "rebaseThreshold",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 30901,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "oUSD",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(OUSD)24937"
      },
      {
        "astId": 30910,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "_deprecated_rebaseHooksAddr",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 30916,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "_deprecated_uniswapAddr",
        "offset": 0,
        "slot": "62",
        "type": "t_address"
      },
      {
        "astId": 30923,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      },
      {
        "astId": 30928,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "assetDefaultStrategies",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 30931,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "maxSupplyDiff",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 30934,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "trusteeAddress",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 30937,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "trusteeFeeBps",
        "offset": 0,
        "slot": "67",
        "type": "t_uint256"
      },
      {
        "astId": 30941,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "_deprecated_swapTokens",
        "offset": 0,
        "slot": "68",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30951,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "ousdMetaStrategy",
        "offset": 0,
        "slot": "69",
        "type": "t_address"
      },
      {
        "astId": 30955,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "netOusdMintedForStrategy",
        "offset": 0,
        "slot": "70",
        "type": "t_int256"
      },
      {
        "astId": 30959,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "netOusdMintForStrategyThreshold",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 30980,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "swapConfig",
        "offset": 0,
        "slot": "72",
        "type": "t_struct(SwapConfig)30970_storage"
      },
      {
        "astId": 30984,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "isMintWhitelistedStrategy",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 30988,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "__gap",
        "offset": 0,
        "slot": "74",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 27024,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "wethAssetIndex",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 27028,
        "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
        "label": "__gap",
        "offset": 0,
        "slot": "124",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(OUSD)24937": {
        "encoding": "inplace",
        "label": "contract OUSD",
        "numberOfBytes": "20"
      },
      "t_enum(UnitConversion)30839": {
        "encoding": "inplace",
        "label": "enum VaultStorage.UnitConversion",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Asset)30849_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)30849_storage"
      },
      "t_mapping(t_address,t_struct(Strategy)30864_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)30864_storage"
      },
      "t_struct(Asset)30849_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Asset",
        "members": [
          {
            "astId": 30841,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 30844,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "unitConversion",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(UnitConversion)30839"
          },
          {
            "astId": 30846,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "decimals",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 30848,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "allowedOracleSlippageBps",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)30864_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Strategy",
        "members": [
          {
            "astId": 30861,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 30863,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "_deprecated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SwapConfig)30970_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.SwapConfig",
        "members": [
          {
            "astId": 30967,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "swapper",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 30969,
            "contract": "contracts/vault/OETHBaseVaultCore.sol:OETHBaseVaultCore",
            "label": "allowedUndervalueBps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
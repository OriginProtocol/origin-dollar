{
  "address": "0xEA24e9Bac006DE9635Ac7fA4D767fFb64FB5645c",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "platformAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            }
          ],
          "internalType": "struct InitializableAbstractStrategy.BaseStrategyConfig",
          "name": "_baseConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_oeth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeFactory",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_oethCoinIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_wethCoinIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxSlippage",
          "type": "uint256"
        }
      ],
      "name": "MaxSlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SOLVENCY_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePool",
      "outputs": [
        {
          "internalType": "contract ICurveStableSwapNG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract ICurveXChainLiquidityGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeFactory",
      "outputs": [
        {
          "internalType": "contract IChildLiquidityGaugeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oTokens",
          "type": "uint256"
        }
      ],
      "name": "mintAndAddOTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oeth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oethCoinIndex",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokens",
          "type": "uint256"
        }
      ],
      "name": "removeAndBurnOTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokens",
          "type": "uint256"
        }
      ],
      "name": "removeOnlyAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "setMaxSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethCoinIndex",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03fe052048766d21980d2047edc17188384589633bb3507e5941570318a26ab5",
  "receipt": {
    "to": null,
    "from": "0x3Ba227D87c2A7aB89EAaCEFbeD9bfa0D15Ad249A",
    "contractAddress": "0xEA24e9Bac006DE9635Ac7fA4D767fFb64FB5645c",
    "transactionIndex": 109,
    "gasUsed": "4292819",
    "logsBloom": "0x
    "blockHash": "0x7022a15e176ba817daa3693a2ee4695365b047f97e18f997ba1d6f8232293dc0",
    "transactionHash": "0x03fe052048766d21980d2047edc17188384589633bb3507e5941570318a26ab5",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 28390613,
        "transactionHash": "0x03fe052048766d21980d2047edc17188384589633bb3507e5941570318a26ab5",
        "address": "0xEA24e9Bac006DE9635Ac7fA4D767fFb64FB5645c",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 472,
        "blockHash": "0x7022a15e176ba817daa3693a2ee4695365b047f97e18f997ba1d6f8232293dc0"
      }
    ],
    "blockNumber": 28390613,
    "cumulativeGasUsed": "51874062",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x302A94E3C28c290EAF2a4605FC52e11Eb915f378",
      "0x98a0CbeF61bD2D21435f433bE4CD42B56B38CC93"
    ],
    "0xDBFeFD2e8460a6Ee4955A68582F85708BAEA60A3",
    "0x4200000000000000000000000000000000000006",
    "0x9da8420dbEEBDFc4902B356017610259ef7eeDD8",
    "0xe35A879E5EfB4F1Bb7F70dCF3250f2e19f096bd8",
    1,
    0
  ],
  "numDeployments": 2,
  "solcInputHash": "ea5866f942a7edcd1f4e3b18c390601e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct InitializableAbstractStrategy.BaseStrategyConfig\",\"name\":\"_baseConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_oeth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeFactory\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_oethCoinIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_wethCoinIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSlippage\",\"type\":\"uint256\"}],\"name\":\"MaxSlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLVENCY_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"contract ICurveStableSwapNG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract ICurveXChainLiquidityGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFactory\",\"outputs\":[{\"internalType\":\"contract IChildLiquidityGaugeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oTokens\",\"type\":\"uint256\"}],\"name\":\"mintAndAddOTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oeth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oethCoinIndex\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokens\",\"type\":\"uint256\"}],\"name\":\"removeAndBurnOTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokens\",\"type\":\"uint256\"}],\"name\":\"removeOnlyAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"}],\"name\":\"setMaxSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethCoinIndex\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"Amount of WETH to deposit.\",\"_weth\":\"Address of Wrapped ETH (WETH) contract.\"}},\"getRewardTokenAddresses()\":{\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"initialize(address[],uint256)\":{\"params\":{\"_maxSlippage\":\"Maximum slippage allowed for adding/removing liquidity from the Curve pool.\",\"_rewardTokenAddresses\":\"Address of CRV\"}},\"mintAndAddOTokens(uint256)\":{\"params\":{\"_oTokens\":\"The amount of OTokens to be minted and added to the pool.\"}},\"removeAndBurnOTokens(uint256)\":{\"params\":{\"_lpTokens\":\"The amount of Curve pool LP tokens to be burned for OTokens.\"}},\"removeOnlyAssets(uint256)\":{\"details\":\"Curve pool LP tokens is used rather than WETH assets as Curve does not have a way to accurately calculate the amount of LP tokens for a required amount of ETH. Curve's `calc_token_amount` functioun does not include fees. A 3rd party libary can be used that takes into account the fees, but this is a gas intensive process. It's easier for the trusted strategist to caclulate the amount of Curve pool LP tokens required off-chain.\",\"params\":{\"_lpTokens\":\"The amount of Curve pool LP tokens to be burned for ETH.\"}},\"removePToken(uint256)\":{\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"setHarvesterAddress(address)\":{\"params\":{\"_harvesterAddress\":\"Address of the harvester contract.\"}},\"setMaxSlippage(uint256)\":{\"params\":{\"_maxSlippage\":\"Maximum slippage allowed, 1e18 = 100%.\"}},\"setPTokenAddress(address,address)\":{\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"params\":{\"_rewardTokenAddresses\":\"Array of reward token addresses\"}},\"supportsAsset(address)\":{\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of WETH to withdraw.\",\"_recipient\":\"Address to receive withdrawn asset which is normally the Vault.\",\"_weth\":\"Address of the Wrapped ETH (WETH) contract.\"}}},\"stateVariables\":{\"SOLVENCY_THRESHOLD\":{\"details\":\"a threshold under which the contract no longer allows for the protocol to manually rebalance.      Guarding against a strategist / guardian being taken over and with multiple transactions      draining the protocol funds.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetToPToken(address)\":{\"notice\":\"asset => pToken (Platform Specific Token Address)\"},\"checkBalance(address)\":{\"notice\":\"Get the total asset value held in the platform\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"notice\":\"Collect accumulated CRV (and other) rewards and send to the Harvester.\"},\"curvePool()\":{\"notice\":\"Address of the Curve StableSwap NG pool contract.\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit WETH into the Curve pool\"},\"depositAll()\":{\"notice\":\"Deposit the strategy's entire balance of WETH into the Curve pool\"},\"gauge()\":{\"notice\":\"Address of the Curve X-Chain Liquidity Gauge contract.\"},\"gaugeFactory()\":{\"notice\":\"Address of the Child Liquidity Gauge Factory contract.\"},\"getRewardTokenAddresses()\":{\"notice\":\"Get the reward token addresses.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"harvesterAddress()\":{\"notice\":\"Address of the Harvester contract allowed to collect reward tokens\"},\"initialize(address[],uint256)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction.\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"lpToken()\":{\"notice\":\"Address of the LP (Liquidity Provider) token contract.\"},\"maxSlippage()\":{\"notice\":\"Maximum slippage allowed for adding/removing liquidity from the Curve pool.\"},\"mintAndAddOTokens(uint256)\":{\"notice\":\"Mint OTokens and one-sided add to the Curve pool. This is used when the Curve pool does not have enough OTokens and too many ETH. The OToken/Asset, eg OETH/ETH, price with increase. The amount of assets in the vault is unchanged. The total supply of OTokens is increased. The asset value of the strategy and vault is increased.\"},\"oeth()\":{\"notice\":\"Address of the OETH token contract.\"},\"platformAddress()\":{\"notice\":\"Address of the underlying platform\"},\"removeAndBurnOTokens(uint256)\":{\"notice\":\"One-sided remove of OTokens from the Curve pool which are then burned. This is used when the Curve pool has too many OTokens and not enough ETH. The amount of assets in the vault is unchanged. The total supply of OTokens is reduced. The asset value of the strategy and vault is reduced.\"},\"removeOnlyAssets(uint256)\":{\"notice\":\"One-sided remove of ETH from the Curve pool, convert to WETH and transfer to the vault. This is used when the Curve pool does not have enough OTokens and too many ETH. The OToken/Asset, eg OETH/ETH, price with decrease. The amount of assets in the vault increases. The total supply of OTokens does not change. The asset value of the strategy reduces. The asset value of the vault should be close to the same.\"},\"removePToken(uint256)\":{\"notice\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\"},\"rewardTokenAddresses(uint256)\":{\"notice\":\"Address of the reward tokens. eg CRV, BAL, CVX, AURA\"},\"safeApproveAllTokens()\":{\"notice\":\"Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"notice\":\"Set the Harvester contract that can collect rewards.\"},\"setMaxSlippage(uint256)\":{\"notice\":\"Sets the maximum slippage allowed for any swap/liquidity operation\"},\"setPTokenAddress(address,address)\":{\"notice\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\"},\"setRewardTokenAddresses(address[])\":{\"notice\":\"Set the reward token addresses. Any old addresses will be overwritten.\"},\"supportsAsset(address)\":{\"notice\":\"Returns bool indicating whether asset is supported by strategy\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\"},\"vaultAddress()\":{\"notice\":\"Address of the OToken vault\"},\"weth()\":{\"notice\":\"Address of the Wrapped ETH (WETH) contract.\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraw ETH and OETH from the Curve pool, burn the OETH, convert the ETH to WETH and transfer to the recipient.\"},\"withdrawAll()\":{\"notice\":\"Remove all ETH and OETH from the Curve pool, burn the OETH, convert the ETH to WETH and transfer to the Vault contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/BaseCurveAMOStrategy.sol\":\"BaseCurveAMOStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        emit GovernorshipTransferred(_governor(), newGovernor);\\n\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xec8e86e43da98835736de1151b86ca13cd8a1a256adc1382ce7030d825521003\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IChildLiquidityGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IChildLiquidityGaugeFactory {\\n    event DeployedGauge(\\n        address indexed _implementation,\\n        address indexed _lp_token,\\n        address indexed _deployer,\\n        bytes32 _salt,\\n        address _gauge\\n    );\\n    event Minted(\\n        address indexed _user,\\n        address indexed _gauge,\\n        uint256 _new_total\\n    );\\n    event TransferOwnership(address _old_owner, address _new_owner);\\n    event UpdateCallProxy(address _old_call_proxy, address _new_call_proxy);\\n    event UpdateImplementation(\\n        address _old_implementation,\\n        address _new_implementation\\n    );\\n    event UpdateManager(address _manager);\\n    event UpdateMirrored(address indexed _gauge, bool _mirrored);\\n    event UpdateRoot(address _factory, address _implementation);\\n    event UpdateVotingEscrow(\\n        address _old_voting_escrow,\\n        address _new_voting_escrow\\n    );\\n\\n    function accept_transfer_ownership() external;\\n\\n    function call_proxy() external view returns (address);\\n\\n    function commit_transfer_ownership(address _future_owner) external;\\n\\n    function crv() external view returns (address);\\n\\n    function deploy_gauge(address _lp_token, bytes32 _salt)\\n        external\\n        returns (address);\\n\\n    function deploy_gauge(\\n        address _lp_token,\\n        bytes32 _salt,\\n        address _manager\\n    ) external returns (address);\\n\\n    function future_owner() external view returns (address);\\n\\n    function gauge_data(address arg0) external view returns (uint256);\\n\\n    function get_gauge(uint256 arg0) external view returns (address);\\n\\n    function get_gauge_count() external view returns (uint256);\\n\\n    function get_gauge_from_lp_token(address arg0)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_implementation() external view returns (address);\\n\\n    function is_mirrored(address _gauge) external view returns (bool);\\n\\n    function is_valid_gauge(address _gauge) external view returns (bool);\\n\\n    function last_request(address _gauge) external view returns (uint256);\\n\\n    function manager() external view returns (address);\\n\\n    function mint(address _gauge) external;\\n\\n    function mint_many(address[32] memory _gauges) external;\\n\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function root_factory() external view returns (address);\\n\\n    function root_implementation() external view returns (address);\\n\\n    function set_call_proxy(address _new_call_proxy) external;\\n\\n    function set_crv(address _crv) external;\\n\\n    function set_implementation(address _implementation) external;\\n\\n    function set_manager(address _new_manager) external;\\n\\n    function set_mirrored(address _gauge, bool _mirrored) external;\\n\\n    function set_root(address _factory, address _implementation) external;\\n\\n    function set_voting_escrow(address _voting_escrow) external;\\n\\n    function version() external view returns (string memory);\\n\\n    function voting_escrow() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5d2665df717879023f712c849c05553ec2abe7f9a41abae93d3ea3dce6aed715\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICurveStableSwapNG.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface ICurveStableSwapNG {\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event ApplyNewFee(uint256 fee, uint256 offpeg_fee_multiplier);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        int128 token_id,\\n        uint256 token_amount,\\n        uint256 coin_amount,\\n        uint256 token_supply\\n    );\\n    event SetNewMATime(uint256 ma_exp_time, uint256 D_ma_time);\\n    event StopRampA(uint256 A, uint256 t);\\n    event TokenExchange(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event TokenExchangeUnderlying(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event Transfer(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 value\\n    );\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function D_ma_time() external view returns (uint256);\\n\\n    function D_oracle() external view returns (uint256);\\n\\n    function N_COINS() external view returns (uint256);\\n\\n    function add_liquidity(uint256[] memory _amounts, uint256 _min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[] memory _amounts,\\n        uint256 _min_mint_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function admin_balances(uint256 arg0) external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function allowance(address arg0, address arg1)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function dynamic_fee(int128 i, int128 j) external view returns (uint256);\\n\\n    function ema_price(uint256 i) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange_received(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_received(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function future_A() external view returns (uint256);\\n\\n    function future_A_time() external view returns (uint256);\\n\\n    function get_balances() external view returns (uint256[] memory);\\n\\n    function get_dx(\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_p(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function initial_A() external view returns (uint256);\\n\\n    function initial_A_time() external view returns (uint256);\\n\\n    function last_price(uint256 i) external view returns (uint256);\\n\\n    function ma_exp_time() external view returns (uint256);\\n\\n    function ma_last_time() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address arg0) external view returns (uint256);\\n\\n    function offpeg_fee_multiplier() external view returns (uint256);\\n\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (bool);\\n\\n    function price_oracle(uint256 i) external view returns (uint256);\\n\\n    function ramp_A(uint256 _future_A, uint256 _future_time) external;\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[] memory _min_amounts\\n    ) external returns (uint256[] memory);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[] memory _min_amounts,\\n        address _receiver\\n    ) external returns (uint256[] memory);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[] memory _min_amounts,\\n        address _receiver,\\n        bool _claim_admin_fees\\n    ) external returns (uint256[] memory);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[] memory _amounts,\\n        uint256 _max_burn_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function salt() external view returns (bytes32);\\n\\n    function set_ma_exp_time(uint256 _ma_exp_time, uint256 _D_ma_time) external;\\n\\n    function set_new_fee(uint256 _new_fee, uint256 _new_offpeg_fee_multiplier)\\n        external;\\n\\n    function stop_ramp_A() external;\\n\\n    function stored_rates() external view returns (uint256[] memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function withdraw_admin_fees() external;\\n}\\n\",\"keccak256\":\"0x724e1bdf3fc1d37dddc4508cbd5fe18f42ffd2432c94e1a19fb0ef28029b65ef\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICurveXChainLiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface ICurveXChainLiquidityGauge {\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n    event Deposit(address indexed provider, uint256 value);\\n    event SetGaugeManager(address _gauge_manager);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event UpdateLiquidityLimit(\\n        address indexed user,\\n        uint256 original_balance,\\n        uint256 original_supply,\\n        uint256 working_balance,\\n        uint256 working_supply\\n    );\\n    event Withdraw(address indexed provider, uint256 value);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function add_reward(address _reward_token, address _distributor) external;\\n\\n    function allowance(address arg0, address arg1)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function claim_rewards() external;\\n\\n    function claim_rewards(address _addr) external;\\n\\n    function claim_rewards(address _addr, address _receiver) external;\\n\\n    function claimable_reward(address _user, address _reward_token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimed_reward(address _addr, address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function decreaseAllowance(address _spender, uint256 _subtracted_value)\\n        external\\n        returns (bool);\\n\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        bool _claim_rewards\\n    ) external;\\n\\n    function deposit_reward_token(address _reward_token, uint256 _amount)\\n        external;\\n\\n    function deposit_reward_token(\\n        address _reward_token,\\n        uint256 _amount,\\n        uint256 _epoch\\n    ) external;\\n\\n    function factory() external view returns (address);\\n\\n    function increaseAllowance(address _spender, uint256 _added_value)\\n        external\\n        returns (bool);\\n\\n    function inflation_rate(uint256 arg0) external view returns (uint256);\\n\\n    function initialize(\\n        address _lp_token,\\n        address _root,\\n        address _manager\\n    ) external;\\n\\n    function integrate_checkpoint() external view returns (uint256);\\n\\n    function integrate_checkpoint_of(address arg0)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function integrate_fraction(address arg0) external view returns (uint256);\\n\\n    function integrate_inv_supply(int128 arg0) external view returns (uint256);\\n\\n    function integrate_inv_supply_of(address arg0)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function is_killed() external view returns (bool);\\n\\n    function lp_token() external view returns (address);\\n\\n    function manager() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address arg0) external view returns (uint256);\\n\\n    function period() external view returns (int128);\\n\\n    function period_timestamp(int128 arg0) external view returns (uint256);\\n\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (bool);\\n\\n    function recover_remaining(address _reward_token) external;\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_integral_for(address arg0, address arg1)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reward_remaining(address arg0) external view returns (uint256);\\n\\n    function reward_tokens(uint256 arg0) external view returns (address);\\n\\n    function rewards_receiver(address arg0) external view returns (address);\\n\\n    function root_gauge() external view returns (address);\\n\\n    function set_gauge_manager(address _gauge_manager) external;\\n\\n    function set_killed(bool _is_killed) external;\\n\\n    function set_manager(address _gauge_manager) external;\\n\\n    function set_reward_distributor(address _reward_token, address _distributor)\\n        external;\\n\\n    function set_rewards_receiver(address _receiver) external;\\n\\n    function set_root_gauge(address _root) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function update_voting_escrow() external;\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function voting_escrow() external view returns (address);\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool _claim_rewards) external;\\n\\n    function withdraw(\\n        uint256 _value,\\n        bool _claim_rewards,\\n        address _receiver\\n    ) external;\\n\\n    function working_balances(address arg0) external view returns (uint256);\\n\\n    function working_supply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x43fa7f866d8dac41dd5bab8e1e0c2610b26bba211afe7101da95756ce5c57088\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    function ADMIN_IMPLEMENTATION() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _unitConversion) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n\\n    function setDripper(address _dripper) external;\\n\\n    function dripper() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function cacheWETHAssetIndex() external;\\n\\n    function wethAssetIndex() external view returns (uint256);\\n\\n    function initialize(address, address) external;\\n\\n    function setAdminImpl(address) external;\\n\\n    function removeAsset(address _asset) external;\\n\\n    // These are OETH specific functions\\n    function addWithdrawalQueueLiquidity() external;\\n\\n    function requestWithdrawal(uint256 _amount)\\n        external\\n        returns (uint256 requestId, uint256 queued);\\n\\n    function claimWithdrawal(uint256 requestId)\\n        external\\n        returns (uint256 amount);\\n\\n    function claimWithdrawals(uint256[] memory requestIds)\\n        external\\n        returns (uint256[] memory amounts, uint256 totalAmount);\\n\\n    function withdrawalQueueMetadata()\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalQueueMetadata memory);\\n\\n    function withdrawalRequests(uint256 requestId)\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalRequest memory);\\n\\n    // OETHb specific functions\\n    function addStrategyToMintWhitelist(address strategyAddr) external;\\n\\n    function removeStrategyFromMintWhitelist(address strategyAddr) external;\\n\\n    function isMintWhitelistedStrategy(address strategyAddr)\\n        external\\n        view\\n        returns (bool);\\n\\n    function withdrawalClaimDelay() external view returns (uint256);\\n\\n    function setWithdrawalClaimDelay(uint256 newDelay) external;\\n}\\n\",\"keccak256\":\"0x90de40850f126a263dd5a0bf4729c831a536a1f66a232407aab408d1bfb1bb1e\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x05b7dce6c24d3cd4e48b5c6346d86e5e40ecc3291bcdf3f3ef091c98fc826519\",\"license\":\"MIT\"},\"contracts/strategies/BaseCurveAMOStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Curve Automated Market Maker (AMO) Strategy\\n * @notice AMO strategy for the Curve OETH/WETH pool\\n * @author Origin Protocol Inc\\n */\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IWETH9 } from \\\"../interfaces/IWETH9.sol\\\";\\nimport { ICurveStableSwapNG } from \\\"../interfaces/ICurveStableSwapNG.sol\\\";\\nimport { ICurveXChainLiquidityGauge } from \\\"../interfaces/ICurveXChainLiquidityGauge.sol\\\";\\nimport { IChildLiquidityGaugeFactory } from \\\"../interfaces/IChildLiquidityGaugeFactory.sol\\\";\\n\\ncontract BaseCurveAMOStrategy is InitializableAbstractStrategy {\\n    using StableMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /**\\n     * @dev a threshold under which the contract no longer allows for the protocol to manually rebalance.\\n     *      Guarding against a strategist / guardian being taken over and with multiple transactions\\n     *      draining the protocol funds.\\n     */\\n    uint256 public constant SOLVENCY_THRESHOLD = 0.998 ether;\\n\\n    // New immutable variables that must be set in the constructor\\n    /**\\n     * @notice Address of the Wrapped ETH (WETH) contract.\\n     */\\n    IWETH9 public immutable weth;\\n\\n    /**\\n     * @notice Address of the OETH token contract.\\n     */\\n    IERC20 public immutable oeth;\\n\\n    /**\\n     * @notice Address of the LP (Liquidity Provider) token contract.\\n     */\\n    IERC20 public immutable lpToken;\\n\\n    /**\\n     * @notice Address of the Curve StableSwap NG pool contract.\\n     */\\n    ICurveStableSwapNG public immutable curvePool;\\n\\n    /**\\n     * @notice Address of the Curve X-Chain Liquidity Gauge contract.\\n     */\\n    ICurveXChainLiquidityGauge public immutable gauge;\\n\\n    /**\\n     * @notice Address of the Child Liquidity Gauge Factory contract.\\n     */\\n    IChildLiquidityGaugeFactory public immutable gaugeFactory;\\n\\n    // Ordered list of pool assets\\n    uint128 public immutable oethCoinIndex;\\n    uint128 public immutable wethCoinIndex;\\n\\n    /**\\n     * @notice Maximum slippage allowed for adding/removing liquidity from the Curve pool.\\n     */\\n    uint256 public maxSlippage;\\n\\n    event MaxSlippageUpdated(uint256 newMaxSlippage);\\n\\n    /**\\n     * @dev Verifies that the caller is the Strategist.\\n     */\\n    modifier onlyStrategist() {\\n        require(\\n            msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks the Curve pool's balances have improved and the balances\\n     * have not tipped to the other side.\\n     * This modifier is only applied to functions that do a single sided add or remove.\\n     * The standard deposit function adds to both sides of the pool in a way that\\n     * the pool's balance is not worsened.\\n     * Withdrawals are proportional so doesn't change the pools asset balance.\\n     */\\n    modifier improvePoolBalance() {\\n        // Get the asset and OToken balances in the Curve pool\\n        uint256[] memory balancesBefore = curvePool.get_balances();\\n        // diff = ETH balance - OETH balance\\n        int256 diffBefore = balancesBefore[wethCoinIndex].toInt256() -\\n            balancesBefore[oethCoinIndex].toInt256();\\n\\n        _;\\n\\n        // Get the asset and OToken balances in the Curve pool\\n        uint256[] memory balancesAfter = curvePool.get_balances();\\n        // diff = ETH balance - OETH balance\\n        int256 diffAfter = balancesAfter[wethCoinIndex].toInt256() -\\n            balancesAfter[oethCoinIndex].toInt256();\\n\\n        if (diffBefore == 0) {\\n            require(diffAfter == 0, \\\"Position balance is worsened\\\");\\n        } else if (diffBefore < 0) {\\n            // If the pool was originally imbalanced in favor of OETH, then\\n            // we want to check that the pool is now more balanced\\n            require(diffAfter <= 0, \\\"OTokens overshot peg\\\");\\n            require(diffBefore < diffAfter, \\\"OTokens balance worse\\\");\\n        } else if (diffBefore > 0) {\\n            // If the pool was originally imbalanced in favor of ETH, then\\n            // we want to check that the pool is now more balanced\\n            require(diffAfter >= 0, \\\"Assets overshot peg\\\");\\n            require(diffAfter < diffBefore, \\\"Assets balance worse\\\");\\n        }\\n    }\\n\\n    constructor(\\n        BaseStrategyConfig memory _baseConfig,\\n        address _oeth,\\n        address _weth,\\n        address _gauge,\\n        address _gaugeFactory,\\n        uint128 _oethCoinIndex,\\n        uint128 _wethCoinIndex\\n    ) InitializableAbstractStrategy(_baseConfig) {\\n        oethCoinIndex = _oethCoinIndex;\\n        wethCoinIndex = _wethCoinIndex;\\n\\n        lpToken = IERC20(_baseConfig.platformAddress);\\n        curvePool = ICurveStableSwapNG(_baseConfig.platformAddress);\\n\\n        oeth = IERC20(_oeth);\\n        weth = IWETH9(_weth);\\n        gauge = ICurveXChainLiquidityGauge(_gauge);\\n        gaugeFactory = IChildLiquidityGaugeFactory(_gaugeFactory);\\n\\n        _setGovernor(address(0));\\n    }\\n\\n    /**\\n     * Initializer for setting up strategy internal state. This overrides the\\n     * InitializableAbstractStrategy initializer as Curve strategies don't fit\\n     * well within that abstraction.\\n     * @param _rewardTokenAddresses Address of CRV\\n     * @param _maxSlippage Maximum slippage allowed for adding/removing liquidity from the Curve pool.\\n     */\\n    function initialize(\\n        address[] calldata _rewardTokenAddresses, // CRV\\n        uint256 _maxSlippage\\n    ) external onlyGovernor initializer {\\n        address[] memory pTokens = new address[](1);\\n        pTokens[0] = address(curvePool);\\n\\n        address[] memory _assets = new address[](1);\\n        _assets[0] = address(weth);\\n\\n        InitializableAbstractStrategy._initialize(\\n            _rewardTokenAddresses,\\n            _assets,\\n            pTokens\\n        );\\n\\n        _approveBase();\\n        _setMaxSlippage(_maxSlippage);\\n    }\\n\\n    /***************************************\\n                    Deposit\\n    ****************************************/\\n\\n    /**\\n     * @notice Deposit WETH into the Curve pool\\n     * @param _weth Address of Wrapped ETH (WETH) contract.\\n     * @param _amount Amount of WETH to deposit.\\n     */\\n    function deposit(address _weth, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        _deposit(_weth, _amount);\\n    }\\n\\n    function _deposit(address _weth, uint256 _wethAmount) internal {\\n        require(_wethAmount > 0, \\\"Must deposit something\\\");\\n        require(_weth == address(weth), \\\"Can only deposit WETH\\\");\\n\\n        emit Deposit(_weth, address(lpToken), _wethAmount);\\n\\n        // Get the asset and OToken balances in the Curve pool\\n        uint256[] memory balances = curvePool.get_balances();\\n        // safe to cast since min value is at least 0\\n        uint256 oethToAdd = uint256(\\n            _max(\\n                0,\\n                balances[wethCoinIndex].toInt256() +\\n                    _wethAmount.toInt256() -\\n                    balances[oethCoinIndex].toInt256()\\n            )\\n        );\\n\\n        /* Add so much OETH so that the pool ends up being balanced. And at minimum\\n         * add as much OETH as WETH and at maximum twice as much OETH.\\n         */\\n        oethToAdd = Math.max(oethToAdd, _wethAmount);\\n        oethToAdd = Math.min(oethToAdd, _wethAmount * 2);\\n\\n        /* Mint OETH with a strategy that attempts to contribute to stability of OETH/WETH pool. Try\\n         * to mint so much OETH that after deployment of liquidity pool ends up being balanced.\\n         *\\n         * To manage unpredictability minimal OETH minted will always be at least equal or greater\\n         * to WETH amount deployed. And never larger than twice the WETH amount deployed even if\\n         * it would have a further beneficial effect on pool stability.\\n         */\\n        IVault(vaultAddress).mintForStrategy(oethToAdd);\\n\\n        emit Deposit(address(oeth), address(lpToken), oethToAdd);\\n\\n        uint256[] memory _amounts = new uint256[](2);\\n        _amounts[wethCoinIndex] = _wethAmount;\\n        _amounts[oethCoinIndex] = oethToAdd;\\n\\n        uint256 valueInLpTokens = (_wethAmount + oethToAdd).divPrecisely(\\n            curvePool.get_virtual_price()\\n        );\\n        uint256 minMintAmount = valueInLpTokens.mulTruncate(\\n            uint256(1e18) - maxSlippage\\n        );\\n\\n        // Do the deposit to the Curve pool\\n        uint256 lpDeposited = curvePool.add_liquidity(_amounts, minMintAmount);\\n        require(lpDeposited >= minMintAmount, \\\"Min LP amount error\\\");\\n\\n        // Deposit the Curve pool's LP tokens into the Curve gauge\\n        gauge.deposit(lpDeposited);\\n\\n        // Ensure solvency of the vault\\n        _solvencyAssert();\\n    }\\n\\n    /**\\n     * @notice Deposit the strategy's entire balance of WETH into the Curve pool\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        uint256 balance = weth.balanceOf(address(this));\\n        if (balance > 0) {\\n            _deposit(address(weth), balance);\\n        }\\n    }\\n\\n    /***************************************\\n                    Withdraw\\n    ****************************************/\\n\\n    /**\\n     * @notice Withdraw ETH and OETH from the Curve pool, burn the OETH,\\n     * convert the ETH to WETH and transfer to the recipient.\\n     * @param _recipient Address to receive withdrawn asset which is normally the Vault.\\n     * @param _weth Address of the Wrapped ETH (WETH) contract.\\n     * @param _amount Amount of WETH to withdraw.\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _weth,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_weth == address(weth), \\\"Can only withdraw WETH\\\");\\n\\n        emit Withdrawal(_weth, address(lpToken), _amount);\\n\\n        uint256 requiredLpTokens = calcTokenToBurn(_amount);\\n\\n        _lpWithdraw(requiredLpTokens);\\n\\n        /* math in requiredLpTokens should correctly calculate the amount of LP to remove\\n         * in that the strategy receives enough WETH on balanced removal\\n         */\\n        uint256[] memory _minWithdrawalAmounts = new uint256[](2);\\n        _minWithdrawalAmounts[wethCoinIndex] = _amount;\\n        // slither-disable-next-line unused-return\\n        curvePool.remove_liquidity(requiredLpTokens, _minWithdrawalAmounts);\\n\\n        // Burn all the removed OETH and any that was left in the strategy\\n        uint256 oethToBurn = oeth.balanceOf(address(this));\\n        IVault(vaultAddress).burnForStrategy(oethToBurn);\\n\\n        emit Withdrawal(address(oeth), address(lpToken), oethToBurn);\\n\\n        // Transfer WETH to the recipient\\n        require(\\n            weth.transfer(_recipient, _amount),\\n            \\\"Transfer of WETH not successful\\\"\\n        );\\n\\n        // Ensure solvency of the vault\\n        _solvencyAssert();\\n    }\\n\\n    function calcTokenToBurn(uint256 _wethAmount)\\n        internal\\n        view\\n        returns (uint256 lpToBurn)\\n    {\\n        /* The rate between coins in the pool determines the rate at which pool returns\\n         * tokens when doing balanced removal (remove_liquidity call). And by knowing how much WETH\\n         * we want we can determine how much of OETH we receive by removing liquidity.\\n         *\\n         * Because we are doing balanced removal we should be making profit when removing liquidity in a\\n         * pool tilted to either side.\\n         *\\n         * Important: A downside is that the Strategist / Governor needs to be\\n         * cognisant of not removing too much liquidity. And while the proposal to remove liquidity\\n         * is being voted on the pool tilt might change so much that the proposal that has been valid while\\n         * created is no longer valid.\\n         */\\n\\n        uint256 poolWETHBalance = curvePool.balances(wethCoinIndex);\\n        /* K is multiplied by 1e36 which is used for higher precision calculation of required\\n         * pool LP tokens. Without it the end value can have rounding errors up to precision of\\n         * 10 digits. This way we move the decimal point by 36 places when doing the calculation\\n         * and again by 36 places when we are done with it.\\n         */\\n        uint256 k = (1e36 * lpToken.totalSupply()) / poolWETHBalance;\\n        // prettier-ignore\\n        // slither-disable-next-line divide-before-multiply\\n        uint256 diff = (_wethAmount + 1) * k;\\n        lpToBurn = diff / 1e36;\\n    }\\n\\n    /**\\n     * @notice Remove all ETH and OETH from the Curve pool, burn the OETH,\\n     * convert the ETH to WETH and transfer to the Vault contract.\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        uint256 gaugeTokens = gauge.balanceOf(address(this));\\n        // Can not withdraw zero LP tokens from the gauge\\n        if (gaugeTokens == 0) return;\\n        _lpWithdraw(gaugeTokens);\\n\\n        // Withdraws are proportional to assets held by 3Pool\\n        uint256[] memory minWithdrawAmounts = new uint256[](2);\\n\\n        // Remove liquidity\\n        // slither-disable-next-line unused-return\\n        curvePool.remove_liquidity(\\n            lpToken.balanceOf(address(this)),\\n            minWithdrawAmounts\\n        );\\n\\n        // Burn all OETH\\n        uint256 oethToBurn = oeth.balanceOf(address(this));\\n        IVault(vaultAddress).burnForStrategy(oethToBurn);\\n\\n        // Get the strategy contract's WETH balance.\\n        // This includes all that was removed from the Curve pool and\\n        // any ether that was sitting in the strategy contract before the removal.\\n        uint256 ethBalance = weth.balanceOf(address(this));\\n        require(\\n            weth.transfer(vaultAddress, ethBalance),\\n            \\\"Transfer of WETH not successful\\\"\\n        );\\n\\n        emit Withdrawal(address(weth), address(lpToken), ethBalance);\\n        emit Withdrawal(address(oeth), address(lpToken), oethToBurn);\\n    }\\n\\n    /***************************************\\n            Curve pool Rebalancing\\n    ****************************************/\\n\\n    /**\\n     * @notice Mint OTokens and one-sided add to the Curve pool.\\n     * This is used when the Curve pool does not have enough OTokens and too many ETH.\\n     * The OToken/Asset, eg OETH/ETH, price with increase.\\n     * The amount of assets in the vault is unchanged.\\n     * The total supply of OTokens is increased.\\n     * The asset value of the strategy and vault is increased.\\n     * @param _oTokens The amount of OTokens to be minted and added to the pool.\\n     */\\n    function mintAndAddOTokens(uint256 _oTokens)\\n        external\\n        onlyStrategist\\n        nonReentrant\\n        improvePoolBalance\\n    {\\n        IVault(vaultAddress).mintForStrategy(_oTokens);\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[oethCoinIndex] = _oTokens;\\n\\n        // Convert OETH to Curve pool LP tokens\\n        uint256 valueInLpTokens = (_oTokens).divPrecisely(\\n            curvePool.get_virtual_price()\\n        );\\n        // Apply slippage to LP tokens\\n        uint256 minMintAmount = valueInLpTokens.mulTruncate(\\n            uint256(1e18) - maxSlippage\\n        );\\n\\n        // Add the minted OTokens to the Curve pool\\n        uint256 lpDeposited = curvePool.add_liquidity(amounts, minMintAmount);\\n        require(lpDeposited >= minMintAmount, \\\"Min LP amount error\\\");\\n\\n        // Deposit the Curve pool LP tokens to the Curve gauge\\n        gauge.deposit(lpDeposited);\\n\\n        // Ensure solvency of the vault\\n        _solvencyAssert();\\n\\n        emit Deposit(address(oeth), address(lpToken), _oTokens);\\n    }\\n\\n    /**\\n     * @notice One-sided remove of OTokens from the Curve pool which are then burned.\\n     * This is used when the Curve pool has too many OTokens and not enough ETH.\\n     * The amount of assets in the vault is unchanged.\\n     * The total supply of OTokens is reduced.\\n     * The asset value of the strategy and vault is reduced.\\n     * @param _lpTokens The amount of Curve pool LP tokens to be burned for OTokens.\\n     */\\n    function removeAndBurnOTokens(uint256 _lpTokens)\\n        external\\n        onlyStrategist\\n        nonReentrant\\n        improvePoolBalance\\n    {\\n        // Withdraw Curve pool LP tokens from Convex and remove OTokens from the Curve pool\\n        uint256 oethToBurn = _withdrawAndRemoveFromPool(\\n            _lpTokens,\\n            oethCoinIndex\\n        );\\n\\n        // The vault burns the OTokens from this strategy\\n        IVault(vaultAddress).burnForStrategy(oethToBurn);\\n\\n        // Ensure solvency of the vault\\n        _solvencyAssert();\\n\\n        emit Withdrawal(address(oeth), address(lpToken), oethToBurn);\\n    }\\n\\n    /**\\n     * @notice One-sided remove of ETH from the Curve pool, convert to WETH\\n     * and transfer to the vault.\\n     * This is used when the Curve pool does not have enough OTokens and too many ETH.\\n     * The OToken/Asset, eg OETH/ETH, price with decrease.\\n     * The amount of assets in the vault increases.\\n     * The total supply of OTokens does not change.\\n     * The asset value of the strategy reduces.\\n     * The asset value of the vault should be close to the same.\\n     * @param _lpTokens The amount of Curve pool LP tokens to be burned for ETH.\\n     * @dev Curve pool LP tokens is used rather than WETH assets as Curve does not\\n     * have a way to accurately calculate the amount of LP tokens for a required\\n     * amount of ETH. Curve's `calc_token_amount` functioun does not include fees.\\n     * A 3rd party libary can be used that takes into account the fees, but this\\n     * is a gas intensive process. It's easier for the trusted strategist to\\n     * caclulate the amount of Curve pool LP tokens required off-chain.\\n     */\\n    function removeOnlyAssets(uint256 _lpTokens)\\n        external\\n        onlyStrategist\\n        nonReentrant\\n        improvePoolBalance\\n    {\\n        // Withdraw Curve pool LP tokens from Curve gauge and remove ETH from the Curve pool\\n        uint256 ethAmount = _withdrawAndRemoveFromPool(\\n            _lpTokens,\\n            wethCoinIndex\\n        );\\n\\n        // Transfer WETH to the vault\\n        require(\\n            weth.transfer(vaultAddress, ethAmount),\\n            \\\"Transfer of WETH not successful\\\"\\n        );\\n\\n        // Ensure solvency of the vault\\n        _solvencyAssert();\\n\\n        emit Withdrawal(address(weth), address(lpToken), ethAmount);\\n    }\\n\\n    /**\\n     * @dev Remove Curve pool LP tokens from the Convex pool and\\n     * do a one-sided remove of ETH or OETH from the Curve pool.\\n     * @param _lpTokens The amount of Curve pool LP tokens to be removed from the Convex pool.\\n     * @param coinIndex The index of the coin to be removed from the Curve pool. 0 = ETH, 1 = OETH.\\n     * @return coinsRemoved The amount of ETH or OETH removed from the Curve pool.\\n     */\\n    function _withdrawAndRemoveFromPool(uint256 _lpTokens, uint128 coinIndex)\\n        internal\\n        returns (uint256 coinsRemoved)\\n    {\\n        // Withdraw Curve pool LP tokens from Curve gauge\\n        _lpWithdraw(_lpTokens);\\n\\n        // Convert Curve pool LP tokens to ETH value\\n        uint256 valueInEth = _lpTokens.mulTruncate(\\n            curvePool.get_virtual_price()\\n        );\\n        // Apply slippage to ETH value\\n        uint256 minAmount = valueInEth.mulTruncate(uint256(1e18) - maxSlippage);\\n\\n        // Remove just the ETH from the Curve pool\\n        coinsRemoved = curvePool.remove_liquidity_one_coin(\\n            _lpTokens,\\n            int128(coinIndex),\\n            minAmount,\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * Checks that the protocol is solvent, protecting from a rogue Strategist / Guardian that can\\n     * keep rebalancing the pool in both directions making the protocol lose a tiny amount of\\n     * funds each time.\\n     *\\n     * Protocol must be at least SOLVENCY_THRESHOLD (99,8 %) backed in order for the rebalances to\\n     * function.\\n     */\\n    function _solvencyAssert() internal view {\\n        uint256 _totalVaultValue = IVault(vaultAddress).totalValue();\\n        uint256 _totalOethbSupply = oeth.totalSupply();\\n\\n        if (\\n            _totalVaultValue.divPrecisely(_totalOethbSupply) <\\n            SOLVENCY_THRESHOLD\\n        ) {\\n            revert(\\\"Protocol insolvent\\\");\\n        }\\n    }\\n\\n    /***************************************\\n                Assets and Rewards\\n    ****************************************/\\n\\n    /**\\n     * @notice Collect accumulated CRV (and other) rewards and send to the Harvester.\\n     */\\n    function collectRewardTokens()\\n        external\\n        override\\n        onlyHarvester\\n        nonReentrant\\n    {\\n        // CRV rewards flow.\\n        //---\\n        // CRV inflation:\\n        // Gauge receive CRV rewards from inflation.\\n        // Each checkpoint on the gauge send this CRV inflation to gauge factory.\\n        // This strategy should call mint on the gauge factory to collect the CRV rewards.\\n        // ---\\n        // Extra rewards:\\n        // Calling claim_rewards on the gauge will only claim extra rewards (outside of CRV).\\n        // ---\\n\\n        // Mint CRV on Child Liquidity gauge factory\\n        gaugeFactory.mint(address(gauge));\\n        // Collect extra gauge rewards (outside of CRV)\\n        gauge.claim_rewards();\\n\\n        _collectRewardTokens();\\n    }\\n\\n    function _lpWithdraw(uint256 _lpAmount) internal {\\n        // withdraw lp tokens from the gauge without claiming rewards\\n        gauge.withdraw(_lpAmount);\\n    }\\n\\n    /**\\n     * @notice Get the total asset value held in the platform\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        require(_asset == address(weth), \\\"Unsupported asset\\\");\\n\\n        // WETH balance needed here for the balance check that happens from vault during depositing.\\n        balance = weth.balanceOf(address(this));\\n        uint256 lpTokens = gauge.balanceOf(address(this));\\n        if (lpTokens > 0) {\\n            balance += (lpTokens * curvePool.get_virtual_price()) / 1e18;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset) public view override returns (bool) {\\n        return _asset == address(weth);\\n    }\\n\\n    /***************************************\\n                    Approvals\\n    ****************************************/\\n\\n    /**\\n     * @notice Sets the maximum slippage allowed for any swap/liquidity operation\\n     * @param _maxSlippage Maximum slippage allowed, 1e18 = 100%.\\n     */\\n    function setMaxSlippage(uint256 _maxSlippage) external onlyGovernor {\\n        _setMaxSlippage(_maxSlippage);\\n    }\\n\\n    function _setMaxSlippage(uint256 _maxSlippage) internal {\\n        require(_maxSlippage <= 5e16, \\\"Slippage must be less than 100%\\\");\\n        maxSlippage = _maxSlippage;\\n        emit MaxSlippageUpdated(_maxSlippage);\\n    }\\n\\n    /**\\n     * @notice Approve the spending of all assets by their corresponding pool tokens,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens()\\n        external\\n        override\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        _approveBase();\\n    }\\n\\n    /**\\n     * @dev Since we are unwrapping WETH before depositing it to Curve\\n     *      there is no need to set an approval for WETH on the Curve\\n     *      pool\\n     * @param _asset Address of the asset\\n     * @param _pToken Address of the Curve LP token\\n     */\\n    // solhint-disable-next-line no-unused-vars\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        override\\n    {}\\n\\n    function _approveBase() internal {\\n        // Approve Curve pool for OETH (required for adding liquidity)\\n        // slither-disable-next-line unused-return\\n        oeth.approve(platformAddress, type(uint256).max);\\n\\n        // Approve Curve pool for WETH (required for adding liquidity)\\n        // slither-disable-next-line unused-return\\n        weth.approve(platformAddress, type(uint256).max);\\n\\n        // Approve Curve gauge contract to transfer Curve pool LP tokens\\n        // This is needed for deposits if Curve pool LP tokens into the Curve gauge.\\n        // slither-disable-next-line unused-return\\n        lpToken.approve(address(gauge), type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers int256 version\\n     */\\n    function _max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xe71bec7f841d8ce8acb3278f33ab46fee4036767211ca0c2eaed154361003a45\",\"license\":\"BUSL-1.1\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract OUSD is Governable {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Event triggered when the supply changes\\n    /// @param totalSupply Updated token total supply\\n    /// @param rebasingCredits Updated token rebasing credits\\n    /// @param rebasingCreditsPerToken Updated token rebasing credits per token\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    /// @dev Event triggered when an account opts in for rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingEnabled(address account);\\n    /// @dev Event triggered when an account opts out of rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingDisabled(address account);\\n    /// @dev Emitted when `value` tokens are moved from one account `from` to\\n    ///      another `to`.\\n    /// @param from Address of the account tokens are moved from\\n    /// @param to Address of the account tokens are moved to\\n    /// @param value Amount of tokens transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    ///      a call to {approve}. `value` is the new allowance.\\n    /// @param owner Address of the owner approving allowance\\n    /// @param spender Address of the spender allowance is granted to\\n    /// @param value Amount of tokens spender can transfer\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    /// @dev Yield resulting from {changeSupply} that a `source` account would\\n    ///      receive is directed to `target` account.\\n    /// @param source Address of the source forwarding the yield\\n    /// @param target Address of the target receiving the yield\\n    event YieldDelegated(address source, address target);\\n    /// @dev Yield delegation from `source` account to the `target` account is\\n    ///      suspended.\\n    /// @param source Address of the source suspending yield forwarding\\n    /// @param target Address of the target no longer receiving yield from `source`\\n    ///        account\\n    event YieldUndelegated(address source, address target);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        StdNonRebasing,\\n        StdRebasing,\\n        YieldDelegationSource,\\n        YieldDelegationTarget\\n    }\\n\\n    uint256[154] private _gap; // Slots to align with deployed contract\\n    uint256 private constant MAX_SUPPLY = type(uint128).max;\\n    /// @dev The amount of tokens in existence\\n    uint256 public totalSupply;\\n    mapping(address => mapping(address => uint256)) private allowances;\\n    /// @dev The vault with privileges to execute {mint}, {burn}\\n    ///     and {changeSupply}\\n    address public vaultAddress;\\n    mapping(address => uint256) internal creditBalances;\\n    // the 2 storage variables below need trailing underscores to not name collide with public functions\\n    uint256 private rebasingCredits_; // Sum of all rebasing credits (creditBalances for rebasing accounts)\\n    uint256 private rebasingCreditsPerToken_;\\n    /// @dev The amount of tokens that are not rebasing - receiving yield\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) internal alternativeCreditsPerToken;\\n    /// @dev A map of all addresses and their respective RebaseOptions\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) private __deprecated_isUpgraded;\\n    /// @dev A map of addresses that have yields forwarded to. This is an\\n    ///      inverse mapping of {yieldFrom}\\n    /// Key Account forwarding yield\\n    /// Value Account receiving yield\\n    mapping(address => address) public yieldTo;\\n    /// @dev A map of addresses that are receiving the yield. This is an\\n    ///      inverse mapping of {yieldTo}\\n    /// Key Account receiving yield\\n    /// Value Account forwarding yield\\n    mapping(address => address) public yieldFrom;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n    uint256[34] private __gap; // including below gap totals up to 200\\n\\n    /// @dev Initializes the contract and sets necessary variables.\\n    /// @param _vaultAddress Address of the vault contract\\n    /// @param _initialCreditsPerToken The starting rebasing credits per token.\\n    function initialize(address _vaultAddress, uint256 _initialCreditsPerToken)\\n        external\\n        onlyGovernor\\n    {\\n        require(_vaultAddress != address(0), \\\"Zero vault address\\\");\\n        require(vaultAddress == address(0), \\\"Already initialized\\\");\\n\\n        rebasingCreditsPerToken_ = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /// @dev Returns the symbol of the token, a shorter version\\n    ///      of the name.\\n    function symbol() external pure virtual returns (string memory) {\\n        return \\\"OUSD\\\";\\n    }\\n\\n    /// @dev Returns the name of the token.\\n    function name() external pure virtual returns (string memory) {\\n        return \\\"Origin Dollar\\\";\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    function decimals() external pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256) {\\n        return rebasingCreditsPerToken_;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() external view returns (uint256) {\\n        return rebasingCreditsPerToken_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() external view returns (uint256) {\\n        return rebasingCredits_;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() external view returns (uint256) {\\n        return rebasingCredits_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        RebaseOptions state = rebaseState[_account];\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            // Saves a slot read when transferring to or from a yield delegating source\\n            // since we know creditBalances equals the balance.\\n            return creditBalances[_account];\\n        }\\n        uint256 baseBalance = (creditBalances[_account] * 1e18) /\\n            _creditsPerToken(_account);\\n        if (state == RebaseOptions.YieldDelegationTarget) {\\n            // creditBalances of yieldFrom accounts equals token balances\\n            return baseBalance - creditBalances[yieldFrom[_account]];\\n        }\\n        return baseBalance;\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            creditBalances[_account],\\n            _creditsPerToken(_account),\\n            true // all accounts have their resolution \\\"upgraded\\\"\\n        );\\n    }\\n\\n    // Backwards compatible view\\n    function nonRebasingCreditsPerToken(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return alternativeCreditsPerToken[_account];\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     * @return true on success.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        uint256 userAllowance = allowances[_from][msg.sender];\\n        require(_value <= userAllowance, \\\"Allowance exceeded\\\");\\n\\n        unchecked {\\n            allowances[_from][msg.sender] = userAllowance - _value;\\n        }\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        (\\n            int256 fromRebasingCreditsDiff,\\n            int256 fromNonRebasingSupplyDiff\\n        ) = _adjustAccount(_from, -_value.toInt256());\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_to, _value.toInt256());\\n\\n        _adjustGlobals(\\n            fromRebasingCreditsDiff + toRebasingCreditsDiff,\\n            fromNonRebasingSupplyDiff + toNonRebasingSupplyDiff\\n        );\\n    }\\n\\n    function _adjustAccount(address _account, int256 _balanceChange)\\n        internal\\n        returns (int256 rebasingCreditsDiff, int256 nonRebasingSupplyDiff)\\n    {\\n        RebaseOptions state = rebaseState[_account];\\n        int256 currentBalance = balanceOf(_account).toInt256();\\n        if (currentBalance + _balanceChange < 0) {\\n            revert(\\\"Transfer amount exceeds balance\\\");\\n        }\\n        uint256 newBalance = (currentBalance + _balanceChange).toUint256();\\n\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            address target = yieldTo[_account];\\n            uint256 targetOldBalance = balanceOf(target);\\n            uint256 targetNewCredits = _balanceToRebasingCredits(\\n                targetOldBalance + newBalance\\n            );\\n            rebasingCreditsDiff =\\n                targetNewCredits.toInt256() -\\n                creditBalances[target].toInt256();\\n\\n            creditBalances[_account] = newBalance;\\n            creditBalances[target] = targetNewCredits;\\n        } else if (state == RebaseOptions.YieldDelegationTarget) {\\n            uint256 newCredits = _balanceToRebasingCredits(\\n                newBalance + creditBalances[yieldFrom[_account]]\\n            );\\n            rebasingCreditsDiff =\\n                newCredits.toInt256() -\\n                creditBalances[_account].toInt256();\\n            creditBalances[_account] = newCredits;\\n        } else {\\n            _autoMigrate(_account);\\n            uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n                _account\\n            ];\\n            if (alternativeCreditsPerTokenMem > 0) {\\n                nonRebasingSupplyDiff = _balanceChange;\\n                if (alternativeCreditsPerTokenMem != 1e18) {\\n                    alternativeCreditsPerToken[_account] = 1e18;\\n                }\\n                creditBalances[_account] = newBalance;\\n            } else {\\n                uint256 newCredits = _balanceToRebasingCredits(newBalance);\\n                rebasingCreditsDiff =\\n                    newCredits.toInt256() -\\n                    creditBalances[_account].toInt256();\\n                creditBalances[_account] = newCredits;\\n            }\\n        }\\n    }\\n\\n    function _adjustGlobals(\\n        int256 _rebasingCreditsDiff,\\n        int256 _nonRebasingSupplyDiff\\n    ) internal {\\n        if (_rebasingCreditsDiff != 0) {\\n            rebasingCredits_ = (rebasingCredits_.toInt256() +\\n                _rebasingCreditsDiff).toUint256();\\n        }\\n        if (_nonRebasingSupplyDiff != 0) {\\n            nonRebasingSupply = (nonRebasingSupply.toInt256() +\\n                _nonRebasingSupplyDiff).toUint256();\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to check the amount of tokens that _owner has allowed\\n     *      to `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @notice Approve the passed address to spend the specified amount of\\n     *      tokens on behalf of msg.sender.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     * @return true on success.\\n     */\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates `_amount` tokens and assigns them to `_account`,\\n     *     increasing the total supply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, _amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply + _amount;\\n\\n        require(totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @notice Destroys `_amount` tokens from `_account`,\\n     *     reducing the total supply.\\n     */\\n    function burn(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, -_amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply - _amount;\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n            _account\\n        ];\\n        if (alternativeCreditsPerTokenMem != 0) {\\n            return alternativeCreditsPerTokenMem;\\n        } else {\\n            return rebasingCreditsPerToken_;\\n        }\\n    }\\n\\n    /**\\n     * @dev Auto migrate contracts to be non rebasing,\\n     *     unless they have opted into yield.\\n     * @param _account Address of the account.\\n     */\\n    function _autoMigrate(address _account) internal {\\n        bool isContract = _account.code.length > 0;\\n        // In previous code versions, contracts would not have had their\\n        // rebaseState[_account] set to RebaseOptions.NonRebasing when migrated\\n        // therefore we check the actual accounting used on the account instead.\\n        if (\\n            isContract &&\\n            rebaseState[_account] == RebaseOptions.NotSet &&\\n            alternativeCreditsPerToken[_account] == 0\\n        ) {\\n            _rebaseOptOut(_account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates credits from contract's global rebasingCreditsPerToken_, and\\n     *      also balance that corresponds to those credits. The latter is important\\n     *      when adjusting the contract's global nonRebasingSupply to circumvent any\\n     *      possible rounding errors.\\n     *\\n     * @param _balance Balance of the account.\\n     */\\n    function _balanceToRebasingCredits(uint256 _balance)\\n        internal\\n        view\\n        returns (uint256 rebasingCredits)\\n    {\\n        // Rounds up, because we need to ensure that accounts always have\\n        // at least the balance that they should have.\\n        // Note this should always be used on an absolute account value,\\n        // not on a possibly negative diff, because then the rounding would be wrong.\\n        return ((_balance) * rebasingCreditsPerToken_ + 1e18 - 1) / 1e18;\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account) external onlyGovernor {\\n        require(_account != address(0), \\\"Zero address not allowed\\\");\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     */\\n    function rebaseOptIn() external {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        uint256 balance = balanceOf(_account);\\n\\n        // prettier-ignore\\n        require(\\n            alternativeCreditsPerToken[_account] > 0 ||\\n                // Accounts may explicitly `rebaseOptIn` regardless of\\n                // accounting if they have a 0 balance.\\n                creditBalances[_account] == 0\\n            ,\\n            \\\"Account must be non-rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        // prettier-ignore\\n        require(\\n            state == RebaseOptions.StdNonRebasing ||\\n                state == RebaseOptions.NotSet,\\n            \\\"Only standard non-rebasing accounts can opt in\\\"\\n        );\\n\\n        uint256 newCredits = _balanceToRebasingCredits(balance);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdRebasing;\\n        alternativeCreditsPerToken[_account] = 0;\\n        creditBalances[_account] = newCredits;\\n        // Globals\\n        _adjustGlobals(newCredits.toInt256(), -balance.toInt256());\\n\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will no longer receive yield\\n     */\\n    function rebaseOptOut() external {\\n        _rebaseOptOut(msg.sender);\\n    }\\n\\n    function _rebaseOptOut(address _account) internal {\\n        require(\\n            alternativeCreditsPerToken[_account] == 0,\\n            \\\"Account must be rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        require(\\n            state == RebaseOptions.StdRebasing || state == RebaseOptions.NotSet,\\n            \\\"Only standard rebasing accounts can opt out\\\"\\n        );\\n\\n        uint256 oldCredits = creditBalances[_account];\\n        uint256 balance = balanceOf(_account);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdNonRebasing;\\n        alternativeCreditsPerToken[_account] = 1e18;\\n        creditBalances[_account] = balance;\\n        // Globals\\n        _adjustGlobals(-oldCredits.toInt256(), balance.toInt256());\\n\\n        emit AccountRebasingDisabled(_account);\\n    }\\n\\n    /**\\n     * @notice Distribute yield to users. This changes the exchange rate\\n     *  between \\\"credits\\\" and OUSD tokens to change rebasing user's balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply) external onlyVault {\\n        require(totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                totalSupply,\\n                rebasingCredits_,\\n                rebasingCreditsPerToken_\\n            );\\n            return;\\n        }\\n\\n        totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        uint256 rebasingSupply = totalSupply - nonRebasingSupply;\\n        // round up in the favour of the protocol\\n        rebasingCreditsPerToken_ =\\n            (rebasingCredits_ * 1e18 + rebasingSupply - 1) /\\n            rebasingSupply;\\n\\n        require(rebasingCreditsPerToken_ > 0, \\\"Invalid change in supply\\\");\\n\\n        emit TotalSupplyUpdatedHighres(\\n            totalSupply,\\n            rebasingCredits_,\\n            rebasingCreditsPerToken_\\n        );\\n    }\\n\\n    /*\\n     * @notice Send the yield from one account to another account.\\n     *         Each account keeps its own balances.\\n     */\\n    function delegateYield(address _from, address _to) external onlyGovernor {\\n        require(_from != address(0), \\\"Zero from address not allowed\\\");\\n        require(_to != address(0), \\\"Zero to address not allowed\\\");\\n\\n        require(_from != _to, \\\"Cannot delegate to self\\\");\\n        require(\\n            yieldFrom[_to] == address(0) &&\\n                yieldTo[_to] == address(0) &&\\n                yieldFrom[_from] == address(0) &&\\n                yieldTo[_from] == address(0),\\n            \\\"Blocked by existing yield delegation\\\"\\n        );\\n        RebaseOptions stateFrom = rebaseState[_from];\\n        RebaseOptions stateTo = rebaseState[_to];\\n\\n        require(\\n            stateFrom == RebaseOptions.NotSet ||\\n                stateFrom == RebaseOptions.StdNonRebasing ||\\n                stateFrom == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState from\\\"\\n        );\\n\\n        require(\\n            stateTo == RebaseOptions.NotSet ||\\n                stateTo == RebaseOptions.StdNonRebasing ||\\n                stateTo == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState to\\\"\\n        );\\n\\n        if (alternativeCreditsPerToken[_from] == 0) {\\n            _rebaseOptOut(_from);\\n        }\\n        if (alternativeCreditsPerToken[_to] > 0) {\\n            _rebaseOptIn(_to);\\n        }\\n\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(_to);\\n        uint256 oldToCredits = creditBalances[_to];\\n        uint256 newToCredits = _balanceToRebasingCredits(\\n            fromBalance + toBalance\\n        );\\n\\n        // Set up the bidirectional links\\n        yieldTo[_from] = _to;\\n        yieldFrom[_to] = _from;\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.YieldDelegationSource;\\n        alternativeCreditsPerToken[_from] = 1e18;\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[_to] = RebaseOptions.YieldDelegationTarget;\\n        creditBalances[_to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, -(fromBalance).toInt256());\\n        emit YieldDelegated(_from, _to);\\n    }\\n\\n    /*\\n     * @notice Stop sending the yield from one account to another account.\\n     */\\n    function undelegateYield(address _from) external onlyGovernor {\\n        // Require a delegation, which will also ensure a valid delegation\\n        require(yieldTo[_from] != address(0), \\\"Zero address not allowed\\\");\\n\\n        address to = yieldTo[_from];\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(to);\\n        uint256 oldToCredits = creditBalances[to];\\n        uint256 newToCredits = _balanceToRebasingCredits(toBalance);\\n\\n        // Remove the bidirectional links\\n        yieldFrom[to] = address(0);\\n        yieldTo[_from] = address(0);\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.StdNonRebasing;\\n        // alternativeCreditsPerToken[from] already 1e18 from `delegateYield()`\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[to] = RebaseOptions.StdRebasing;\\n        // alternativeCreditsPerToken[to] already 0 from `delegateYield()`\\n        creditBalances[to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, fromBalance.toInt256());\\n        emit YieldUndelegated(_from, to);\\n    }\\n}\\n\",\"keccak256\":\"0x5741d16e48d6031ec92c1e189ea023c78a34956b6bc9642ea9dfc9a6dafe49ca\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Harvester\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        virtual\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x4b6b5a929421e03809ab58240ad85643da74f4f484af503246231576d3158987\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetRemoved(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n    event WithdrawalClaimDelayUpdated(uint256 _newDelay);\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Strategy) public strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD public oUSD;\\n\\n    /// @dev Storage slot for the address of the VaultAdmin contract that is delegated to\\n    // keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 public constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    /// @dev Address of the contract responsible for post rebase syncs with AMMs\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    /// @dev Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public ousdMetaStrategy;\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    // slither-disable-next-line uninitialized-state\\n    int256 public netOusdMintedForStrategy;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public netOusdMintForStrategyThreshold;\\n\\n    // slither-disable-end constable-states\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // List of strategies that can mint oTokens directly\\n    // Used in OETHBaseVaultCore\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => bool) public isMintWhitelistedStrategy;\\n\\n    /// @notice Address of the Dripper contract that streams harvested rewards to the Vault\\n    /// @dev The vault is proxied so needs to be set with setDripper against the proxy contract.\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public dripper;\\n    // slither-disable-end constable-states\\n\\n    /// Withdrawal Queue Storage /////\\n\\n    struct WithdrawalQueueMetadata {\\n        // cumulative total of all withdrawal requests included the ones that have already been claimed\\n        uint128 queued;\\n        // cumulative total of all the requests that can be claimed including the ones that have already been claimed\\n        uint128 claimable;\\n        // total of all the requests that have been claimed\\n        uint128 claimed;\\n        // index of the next withdrawal request starting at 0\\n        uint128 nextWithdrawalIndex;\\n    }\\n\\n    /// @notice Global metadata for the withdrawal queue including:\\n    /// queued - cumulative total of all withdrawal requests included the ones that have already been claimed\\n    /// claimable - cumulative total of all the requests that can be claimed including the ones already claimed\\n    /// claimed - total of all the requests that have been claimed\\n    /// nextWithdrawalIndex - index of the next withdrawal request starting at 0\\n    // slither-disable-next-line uninitialized-state\\n    WithdrawalQueueMetadata public withdrawalQueueMetadata;\\n\\n    struct WithdrawalRequest {\\n        address withdrawer;\\n        bool claimed;\\n        uint40 timestamp; // timestamp of the withdrawal request\\n        // Amount of oTokens to redeem. eg OETH\\n        uint128 amount;\\n        // cumulative total of all withdrawal requests including this one.\\n        // this request can be claimed when this queued amount is less than or equal to the queue's claimable amount.\\n        uint128 queued;\\n    }\\n\\n    /// @notice Mapping of withdrawal request indices to the user withdrawal request data\\n    mapping(uint256 => WithdrawalRequest) public withdrawalRequests;\\n\\n    /// @notice Sets a minimum delay that is required to elapse between\\n    ///     requesting async withdrawals and claiming the request.\\n    ///     When set to 0 async withdrawals are disabled.\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public withdrawalClaimDelay;\\n    // slither-disable-end constable-states\\n\\n    // For future use\\n    uint256[44] private __gap;\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc96eb2e6b540ccdbf7667dbee2ca78053e0e27d865953608a21f25581ca8e1e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806367c7066c11610130578063ad1728cb116100b8578063d9caed121161007c578063d9caed12146105a6578063dbe55e56146105b9578063de5f6268146105e0578063e033193a146105e8578063f6ca71b0146105fb57600080fd5b8063ad1728cb14610549578063c2e1e3f414610551578063c7af335214610564578063ccfe2a691461056c578063d38bfff41461059357600080fd5b80638c04166f116100ff5780638c04166f146104a35780639136616a146104ac57806396d538bb146104bf578063a6f19c84146104d2578063aa388af6146104f957600080fd5b806367c7066c1461044e5780637b2d9b2c146104615780637e489e0514610474578063853828b61461049b57600080fd5b80633fc8cef3116101be5780635d36b190116101825780635d36b190146103ba5780635f515226146103c25780635fcbd285146103d557806360b5bb3f146103fc578063625a91331461040f57600080fd5b80633fc8cef31461033e578063430bf08a1461036557806343f68a491461038c57806347e7ef241461039f5780635a063f63146103b257600080fd5b80630fc3b4c4116102055780630fc3b4c4146102ab5780631072cbea146102d45780631b91d0cc146102e7578063218751b214610304578063371450381461032b57600080fd5b8063012c6383146102375780630c340a241461024c5780630d52333c146102715780630ed57b3a14610298575b600080fd5b61024a610245366004614561565b610610565b005b610254610c42565b6040516001600160a01b0390911681526020015b60405180910390f35b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61024a6102a636600461458f565b610c5f565b6102546102b93660046145c8565b6035602052600090815260409020546001600160a01b031681565b61024a6102e23660046145e5565b610c91565b6102f6670dd99bb65dd7000081565b604051908152602001610268565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61024a610339366004614561565b610d4c565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61024a61039a366004614561565b61133b565b61024a6103ad3660046145e5565b61136b565b61024a6113fc565b61024a6115a9565b6102f66103d03660046145c8565b61164f565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61024a61040a36600461465d565b611896565b6104367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160801b039091168152602001610268565b603954610254906001600160a01b031681565b61025461046f366004614561565b611aaa565b6104367f000000000000000000000000000000000000000000000000000000000000000081565b61024a611ad4565b6102f6609d5481565b61024a6104ba366004614561565b6120df565b61024a6104cd3660046146a9565b6122aa565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6105396105073660046145c8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6040519015158152602001610268565b61024a6123c1565b61024a61055f3660046145c8565b612423565b6105396124b0565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61024a6105a13660046145c8565b6124e1565b61024a6105b43660046146eb565b612585565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b61024a612a6e565b61024a6105f6366004614561565b612bb1565b610603612ec7565b604051610268919061472c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190614778565b6001600160a01b0316336001600160a01b0316146106cb5760405162461bcd60e51b81526004016106c290614795565b60405180910390fd5b600080516020614c46833981519152805460011981016106fd5760405162461bcd60e51b81526004016106c2906147cc565b6002825560007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314f059796040518163ffffffff1660e01b8152600401600060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610789919081019061480a565b905060006107d8827f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b6020026020010151612f29565b610816837f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b6108209190614903565b9050600061084e867f0000000000000000000000000000000000000000000000000000000000000000612f97565b60405163a9059cbb60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906108bf907f000000000000000000000000000000000000000000000000000000000000000090859060040161492a565b6020604051808303816000875af11580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190614943565b61091e5760405162461bcd60e51b81526004016106c290614965565b6109266130fb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600080516020614c868339815191527f00000000000000000000000000000000000000000000000000000000000000008360405161098f92919061492a565b60405180910390a25060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314f059796040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a20919081019061480a565b90506000610a62827f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b610aa0837f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b610aaa9190614903565b905082600003610b07578015610b025760405162461bcd60e51b815260206004820152601c60248201527f506f736974696f6e2062616c616e636520697320776f7273656e65640000000060448201526064016106c2565b610c35565b6000831215610b9f576000811315610b585760405162461bcd60e51b81526020600482015260146024820152734f546f6b656e73206f76657273686f742070656760601b60448201526064016106c2565b808312610b025760405162461bcd60e51b81526020600482015260156024820152744f546f6b656e732062616c616e636520776f72736560581b60448201526064016106c2565b6000831315610c35576000811215610bef5760405162461bcd60e51b8152602060048201526013602482015272417373657473206f76657273686f742070656760681b60448201526064016106c2565b828112610c355760405162461bcd60e51b81526020600482015260146024820152734173736574732062616c616e636520776f72736560601b60448201526064016106c2565b5050505060018255505050565b6000610c5a600080516020614c668339815191525490565b905090565b610c676124b0565b610c835760405162461bcd60e51b81526004016106c29061499c565b610c8d828261325d565b5050565b610c996124b0565b610cb55760405162461bcd60e51b81526004016106c29061499c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603610d305760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f727465642061737365740060448201526064016106c2565b610c8d610d3b610c42565b6001600160a01b03841690836133bc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce9190614778565b6001600160a01b0316336001600160a01b031614610dfe5760405162461bcd60e51b81526004016106c290614795565b600080516020614c4683398151915280546001198101610e305760405162461bcd60e51b81526004016106c2906147cc565b6002825560007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314f059796040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ebc919081019061480a565b90506000610efe827f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b610f3c837f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b610f469190614903565b60405163ab80dafb60e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ab80dafb90602401600060405180830381600087803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b506000925060029150610fcf9050565b604051908082528060200260200182016040528015610ff8578160200160208202803683370190505b50905085817f00000000000000000000000000000000000000000000000000000000000000006001600160801b031681518110611037576110376148d7565b60200260200101818152505060006110d17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca91906149d3565b8890613417565b905060006110f5609d54670de0b6b3a76400006110ee91906149ec565b8390613442565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b72df5de85846040518363ffffffff1660e01b8152600401611147929190614a3b565b6020604051808303816000875af1158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a91906149d3565b9050818110156111d25760405162461bcd60e51b815260206004820152601360248201527226b4b71026281030b6b7bab73a1032b93937b960691b60448201526064016106c2565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b505050506112546130fb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f627f00000000000000000000000000000000000000000000000000000000000000008b6040516112cf92919061492a565b60405180910390a25050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314f059796040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109f8573d6000803e3d6000fd5b6113436124b0565b61135f5760405162461bcd60e51b81526004016106c29061499c565b6113688161345e565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113b35760405162461bcd60e51b81526004016106c290614a5d565b600080516020614c46833981519152805460011981016113e55760405162461bcd60e51b81526004016106c2906147cc565b600282556113f384846134f0565b50600190555050565b6039546001600160a01b031633146114565760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f742074686520486172766573746572000000000060448201526064016106c2565b600080516020614c46833981519152805460011981016114885760405162461bcd60e51b81526004016106c2906147cc565b600282556040516335313c2160e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a62784290602401600060405180830381600087803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561158257600080fd5b505af1158015611596573d6000803e3d6000fd5b505050506115a2613b34565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b0316146116445760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016106c2565b61164d33613c48565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316146116c65760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b60448201526064016106c2565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e91906149d3565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156117b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dc91906149d3565b9050801561189057670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f91906149d3565b6118799083614a94565b6118839190614aab565b61188d9083614acd565b91505b50919050565b61189e6124b0565b6118ba5760405162461bcd60e51b81526004016106c29061499c565b600054610100900460ff16806118d3575060005460ff16155b6119365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c2565b600054610100900460ff16158015611958576000805461ffff19166101011790555b604080516001808252818301909252600091602080830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106119ae576119ae6148d7565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611a1f57611a1f6148d7565b60200260200101906001600160a01b031690816001600160a01b031681525050611a7f868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250869150613ca79050565b611a87613d5a565b611a908461345e565b50508015611aa4576000805461ff00191690555b50505050565b603a8181548110611aba57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611b235750611b0e610c42565b6001600160a01b0316336001600160a01b0316145b611b7b5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b60648201526084016106c2565b600080516020614c4683398151915280546001198101611bad5760405162461bcd60e51b81526004016106c2906147cc565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c91906149d3565b905080600003611c4c57506115a2565b611c5581613f75565b604080516002808252606082018352600092602083019080368337019050506040516370a0823160e01b81523060048201529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163d40ddb8c917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2991906149d3565b836040518363ffffffff1660e01b8152600401611d47929190614ae0565b6000604051808303816000875af1158015611d66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d8e919081019061480a565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1a91906149d3565b60405163310bf9f560e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636217f3ea90602401600060405180830381600087803b158015611e7f57600080fd5b505af1158015611e93573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015611efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2291906149d3565b60405163a9059cbb60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90611f93907f000000000000000000000000000000000000000000000000000000000000000090859060040161492a565b6020604051808303816000875af1158015611fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd69190614943565b611ff25760405162461bcd60e51b81526004016106c290614965565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600080516020614c868339815191527f00000000000000000000000000000000000000000000000000000000000000008360405161205b92919061492a565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600080516020614c868339815191527f0000000000000000000000000000000000000000000000000000000000000000846040516120cc92919061492a565b60405180910390a2505050505060019055565b6120e76124b0565b6121035760405162461bcd60e51b81526004016106c29061499c565b60365481106121445760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016106c2565b600060368281548110612159576121596148d7565b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690612196906001906149ec565b83101561221857603680546121ad906001906149ec565b815481106121bd576121bd6148d7565b600091825260209091200154603680546001600160a01b0390921691859081106121e9576121e96148d7565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061222957612229614af9565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b6122b26124b0565b6122ce5760405162461bcd60e51b81526004016106c29061499c565b8060005b818110156123785760008484838181106122ee576122ee6148d7565b905060200201602081019061230391906145c8565b6001600160a01b0316036123705760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b60648201526084016106c2565b6001016122d2565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a84846040516123ad93929190614b0f565b60405180910390a1611aa4603a8484614498565b6123c96124b0565b6123e55760405162461bcd60e51b81526004016106c29061499c565b600080516020614c46833981519152805460011981016124175760405162461bcd60e51b81526004016106c2906147cc565b600282556115a2613d5a565b61242b6124b0565b6124475760405162461bcd60e51b81526004016106c29061499c565b603954604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a1603980546001600160a01b0319166001600160a01b0392909216919091179055565b60006124c8600080516020614c668339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6124e96124b0565b6125055760405162461bcd60e51b81526004016106c29061499c565b61252d817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b031661254d600080516020614c668339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146125cd5760405162461bcd60e51b81526004016106c290614a5d565b600080516020614c46833981519152805460011981016125ff5760405162461bcd60e51b81526004016106c2906147cc565b60028255600083116126535760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e6700000000000000000060448201526064016106c2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316146126cd5760405162461bcd60e51b8152602060048201526016602482015275086c2dc40dedcd8f240eed2e8d0c8e4c2ee40ae8aa8960531b60448201526064016106c2565b836001600160a01b0316600080516020614c868339815191527f00000000000000000000000000000000000000000000000000000000000000008560405161271692919061492a565b60405180910390a2600061272984613feb565b905061273481613f75565b60408051600280825260608201835260009260208301908036833701905050905084817f00000000000000000000000000000000000000000000000000000000000000006001600160801b031681518110612791576127916148d7565b602090810291909101015260405163350376e360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d40ddb8c906127ea9085908590600401614ae0565b6000604051808303816000875af1158015612809573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612831919081019061480a565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bd91906149d3565b60405163310bf9f560e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636217f3ea90602401600060405180830381600087803b15801561292257600080fd5b505af1158015612936573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600080516020614c868339815191527f0000000000000000000000000000000000000000000000000000000000000000836040516129a392919061492a565b60405180910390a260405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906129f9908b908a9060040161492a565b6020604051808303816000875af1158015612a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3c9190614943565b612a585760405162461bcd60e51b81526004016106c290614965565b612a606130fb565b505050600182555050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612ab65760405162461bcd60e51b81526004016106c290614a5d565b600080516020614c4683398151915280546001198101612ae85760405162461bcd60e51b81526004016106c2906147cc565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7791906149d3565b90508015612ba957612ba97f0000000000000000000000000000000000000000000000000000000000000000826134f0565b505060019055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c339190614778565b6001600160a01b0316336001600160a01b031614612c635760405162461bcd60e51b81526004016106c290614795565b600080516020614c4683398151915280546001198101612c955760405162461bcd60e51b81526004016106c2906147cc565b6002825560007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314f059796040518163ffffffff1660e01b8152600401600060405180830381865afa158015612cf9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d21919081019061480a565b90506000612d63827f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b612da1837f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b612dab9190614903565b90506000612dd9867f0000000000000000000000000000000000000000000000000000000000000000612f97565b60405163310bf9f560e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636217f3ea90602401600060405180830381600087803b158015612e3e57600080fd5b505af1158015612e52573d6000803e3d6000fd5b50505050612e5e6130fb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600080516020614c868339815191527f00000000000000000000000000000000000000000000000000000000000000008360405161098f92919061492a565b6060603a805480602002602001604051908101604052809291908181526020018280548015612f1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f01575b5050505050905090565b60006001600160ff1b03821115612f935760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016106c2565b5090565b6000612fa283613f75565b60006130307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015613005573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302991906149d3565b8590613442565b9050600061304d609d54670de0b6b3a76400006110ee91906149ec565b60405163081579a560e01b815260048101879052600f86900b6024820152604481018290523060648201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063081579a5906084016020604051808303816000875af11580156130ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f291906149d3565b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4c3eea06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561315b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317f91906149d3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320591906149d3565b9050670dd99bb65dd7000061321a8383613417565b1015610c8d5760405162461bcd60e51b8152602060048201526012602482015271141c9bdd1bd8dbdb081a5b9cdbdb1d995b9d60721b60448201526064016106c2565b6001600160a01b0382811660009081526035602052604090205416156132ba5760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b60448201526064016106c2565b6001600160a01b038216158015906132da57506001600160a01b03811615155b61331a5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b60448201526064016106c2565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b6134128363a9059cbb60e01b84846040516024016133db92919061492a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614180565b505050565b60008061342c84670de0b6b3a7640000614252565b9050613438818461425e565b9150505b92915050565b60006134578383670de0b6b3a764000061426a565b9392505050565b66b1a2bc2ec500008111156134b55760405162461bcd60e51b815260206004820152601f60248201527f536c697070616765206d757374206265206c657373207468616e20313030250060448201526064016106c2565b609d8190556040518181527f9c922f6d0c990b250e9dd0a427a5c8da7f44b960f697fecb31cbbd8ba79ec8c29060200160405180910390a150565b600081116135395760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b60448201526064016106c2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316146135b25760405162461bcd60e51b8152602060048201526015602482015274086c2dc40dedcd8f240c8cae0dee6d2e840ae8aa89605b1b60448201526064016106c2565b816001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f627f00000000000000000000000000000000000000000000000000000000000000008360405161360d92919061492a565b60405180910390a260007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314f059796040518163ffffffff1660e01b8152600401600060405180830381865afa158015613675573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261369d919081019061480a565b9050600061374460006136e4847f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b6136ed86612f29565b61372b867f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106107cb576107cb6148d7565b6137359190614baa565b61373f9190614903565b614283565b9050613750818461429a565b905061376681613761856002614a94565b6142aa565b60405163ab80dafb60e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ab80dafb90602401600060405180830381600087803b1580156137cb57600080fd5b505af11580156137df573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f627f00000000000000000000000000000000000000000000000000000000000000008360405161385e92919061492a565b60405180910390a260408051600280825260608201835260009260208301908036833701905050905083817f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316815181106138c3576138c36148d7565b60200260200101818152505081817f00000000000000000000000000000000000000000000000000000000000000006001600160801b03168151811061390b5761390b6148d7565b60200260200101818152505060006139ae7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa15801561397a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399e91906149d3565b6139a88588614acd565b90613417565b905060006139cb609d54670de0b6b3a76400006110ee91906149ec565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b72df5de85846040518363ffffffff1660e01b8152600401613a1d929190614a3b565b6020604051808303816000875af1158015613a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6091906149d3565b905081811015613aa85760405162461bcd60e51b815260206004820152601360248201527226b4b71026281030b6b7bab73a1032b93937b960691b60448201526064016106c2565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015613b0a57600080fd5b505af1158015613b1e573d6000803e3d6000fd5b50505050613b2a6130fb565b5050505050505050565b603a5460005b81811015610c8d576000603a8281548110613b5757613b576148d7565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015613baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bce91906149d3565b90508015613c3e57603954604080516001600160a01b039283168152918416602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a1603954613c3e906001600160a01b038481169116836133bc565b5050600101613b3a565b6001600160a01b038116613c9e5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016106c2565b611368816142b9565b8251613cba90603a9060208601906144f7565b50815181518114613d045760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b60448201526064016106c2565b60005b81811015613d5357613d4b848281518110613d2457613d246148d7565b6020026020010151848381518110613d3e57613d3e6148d7565b602002602001015161325d565b600101613d07565b5050505050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390613dca907f0000000000000000000000000000000000000000000000000000000000000000906000199060040161492a565b6020604051808303816000875af1158015613de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0d9190614943565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390613e7e907f0000000000000000000000000000000000000000000000000000000000000000906000199060040161492a565b6020604051808303816000875af1158015613e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ec19190614943565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390613f32907f0000000000000000000000000000000000000000000000000000000000000000906000199060040161492a565b6020604051808303816000875af1158015613f51573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113689190614943565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015613fd757600080fd5b505af1158015613d53573d6000803e3d6000fd5b604051634903b0d160e01b81526001600160801b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634903b0d190602401602060405180830381865afa15801561407d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a191906149d3565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412891906149d3565b614141906ec097ce7bc90715b34b9f1000000000614a94565b61414b9190614aab565b905060008161415b866001614acd565b6141659190614a94565b90506130f26ec097ce7bc90715b34b9f100000000082614aab565b60006141d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143209092919063ffffffff16565b80519091501561341257808060200190518101906141f39190614943565b6134125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c2565b60006134578284614a94565b60006134578284614aab565b6000806142778585614252565b90506130f2818461425e565b6000818312156142935781613457565b5090919050565b6000818310156142935781613457565b60008183106142935781613457565b806001600160a01b03166142d9600080516020614c668339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3600080516020614c6683398151915255565b606061432f8484600085614337565b949350505050565b6060824710156143985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106c2565b843b6143e65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c2565b600080866001600160a01b031685876040516144029190614bf6565b60006040518083038185875af1925050503d806000811461443f576040519150601f19603f3d011682016040523d82523d6000602084013e614444565b606091505b509150915061445482828661445f565b979650505050505050565b6060831561446e575081613457565b82511561447e5782518084602001fd5b8160405162461bcd60e51b81526004016106c29190614c12565b8280548282559060005260206000209081019282156144eb579160200282015b828111156144eb5781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906144b8565b50612f9392915061454c565b8280548282559060005260206000209081019282156144eb579160200282015b828111156144eb57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614517565b5b80821115612f93576000815560010161454d565b60006020828403121561457357600080fd5b5035919050565b6001600160a01b038116811461136857600080fd5b600080604083850312156145a257600080fd5b82356145ad8161457a565b915060208301356145bd8161457a565b809150509250929050565b6000602082840312156145da57600080fd5b81356134578161457a565b600080604083850312156145f857600080fd5b82356146038161457a565b946020939093013593505050565b60008083601f84011261462357600080fd5b50813567ffffffffffffffff81111561463b57600080fd5b6020830191508360208260051b850101111561465657600080fd5b9250929050565b60008060006040848603121561467257600080fd5b833567ffffffffffffffff81111561468957600080fd5b61469586828701614611565b909790965060209590950135949350505050565b600080602083850312156146bc57600080fd5b823567ffffffffffffffff8111156146d357600080fd5b6146df85828601614611565b90969095509350505050565b60008060006060848603121561470057600080fd5b833561470b8161457a565b9250602084013561471b8161457a565b929592945050506040919091013590565b602080825282518282018190526000918401906040840190835b8181101561476d5783516001600160a01b0316835260209384019390920191600101614746565b509095945050505050565b60006020828403121561478a57600080fd5b81516134578161457a565b6020808252601c908201527f43616c6c6572206973206e6f7420746865205374726174656769737400000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561481c57600080fd5b815167ffffffffffffffff81111561483357600080fd5b8201601f8101841361484457600080fd5b805167ffffffffffffffff81111561485e5761485e6147f4565b8060051b604051601f19603f830116810181811067ffffffffffffffff8211171561488b5761488b6147f4565b6040529182526020818401810192908101878411156148a957600080fd5b6020850194505b838510156148cc578451808252602095860195909350016148b0565b509695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181036000831280158383131683831282161715614923576149236148ed565b5092915050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561495557600080fd5b8151801515811461345757600080fd5b6020808252601f908201527f5472616e73666572206f662057455448206e6f74207375636365737366756c00604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6000602082840312156149e557600080fd5b5051919050565b8181038181111561343c5761343c6148ed565b600081518084526020840193506020830160005b82811015614a31578151865260209586019590910190600101614a13565b5093949350505050565b604081526000614a4e60408301856149ff565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b808202811582820484141761343c5761343c6148ed565b600082614ac857634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561343c5761343c6148ed565b82815260406020820152600061432f60408301846149ff565b634e487b7160e01b600052603160045260246000fd5b6040808252845490820181905260008581526020812090916060840190835b81811015614b555783546001600160a01b0316835260019384019360209093019201614b2e565b50508381036020808601919091528582520190508460005b85811015614b9e578135614b808161457a565b6001600160a01b031683526020928301929190910190600101614b6d565b50909695505050505050565b8082018281126000831280158216821582161715614bca57614bca6148ed565b505092915050565b60005b83811015614bed578181015183820152602001614bd5565b50506000910152565b60008251614c08818460208701614bd2565b9190910192915050565b6020815260008251806020840152614c31816040850160208701614bd2565b601f01601f1916919091016040019291505056fe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398a264697066735822122055dd601a455a9c7ebfab8e587f73018b3f13c093c8790f7eca671f94c505785264736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "Amount of WETH to deposit.",
          "_weth": "Address of Wrapped ETH (WETH) contract."
        }
      },
      "getRewardTokenAddresses()": {
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "initialize(address[],uint256)": {
        "params": {
          "_maxSlippage": "Maximum slippage allowed for adding/removing liquidity from the Curve pool.",
          "_rewardTokenAddresses": "Address of CRV"
        }
      },
      "mintAndAddOTokens(uint256)": {
        "params": {
          "_oTokens": "The amount of OTokens to be minted and added to the pool."
        }
      },
      "removeAndBurnOTokens(uint256)": {
        "params": {
          "_lpTokens": "The amount of Curve pool LP tokens to be burned for OTokens."
        }
      },
      "removeOnlyAssets(uint256)": {
        "details": "Curve pool LP tokens is used rather than WETH assets as Curve does not have a way to accurately calculate the amount of LP tokens for a required amount of ETH. Curve's `calc_token_amount` functioun does not include fees. A 3rd party libary can be used that takes into account the fees, but this is a gas intensive process. It's easier for the trusted strategist to caclulate the amount of Curve pool LP tokens required off-chain.",
        "params": {
          "_lpTokens": "The amount of Curve pool LP tokens to be burned for ETH."
        }
      },
      "removePToken(uint256)": {
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "setHarvesterAddress(address)": {
        "params": {
          "_harvesterAddress": "Address of the harvester contract."
        }
      },
      "setMaxSlippage(uint256)": {
        "params": {
          "_maxSlippage": "Maximum slippage allowed, 1e18 = 100%."
        }
      },
      "setPTokenAddress(address,address)": {
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "params": {
          "_rewardTokenAddresses": "Array of reward token addresses"
        }
      },
      "supportsAsset(address)": {
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "Amount of WETH to withdraw.",
          "_recipient": "Address to receive withdrawn asset which is normally the Vault.",
          "_weth": "Address of the Wrapped ETH (WETH) contract."
        }
      }
    },
    "stateVariables": {
      "SOLVENCY_THRESHOLD": {
        "details": "a threshold under which the contract no longer allows for the protocol to manually rebalance.      Guarding against a strategist / guardian being taken over and with multiple transactions      draining the protocol funds."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetToPToken(address)": {
        "notice": "asset => pToken (Platform Specific Token Address)"
      },
      "checkBalance(address)": {
        "notice": "Get the total asset value held in the platform"
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "notice": "Collect accumulated CRV (and other) rewards and send to the Harvester."
      },
      "curvePool()": {
        "notice": "Address of the Curve StableSwap NG pool contract."
      },
      "deposit(address,uint256)": {
        "notice": "Deposit WETH into the Curve pool"
      },
      "depositAll()": {
        "notice": "Deposit the strategy's entire balance of WETH into the Curve pool"
      },
      "gauge()": {
        "notice": "Address of the Curve X-Chain Liquidity Gauge contract."
      },
      "gaugeFactory()": {
        "notice": "Address of the Child Liquidity Gauge Factory contract."
      },
      "getRewardTokenAddresses()": {
        "notice": "Get the reward token addresses."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "harvesterAddress()": {
        "notice": "Address of the Harvester contract allowed to collect reward tokens"
      },
      "initialize(address[],uint256)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction."
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "lpToken()": {
        "notice": "Address of the LP (Liquidity Provider) token contract."
      },
      "maxSlippage()": {
        "notice": "Maximum slippage allowed for adding/removing liquidity from the Curve pool."
      },
      "mintAndAddOTokens(uint256)": {
        "notice": "Mint OTokens and one-sided add to the Curve pool. This is used when the Curve pool does not have enough OTokens and too many ETH. The OToken/Asset, eg OETH/ETH, price with increase. The amount of assets in the vault is unchanged. The total supply of OTokens is increased. The asset value of the strategy and vault is increased."
      },
      "oeth()": {
        "notice": "Address of the OETH token contract."
      },
      "platformAddress()": {
        "notice": "Address of the underlying platform"
      },
      "removeAndBurnOTokens(uint256)": {
        "notice": "One-sided remove of OTokens from the Curve pool which are then burned. This is used when the Curve pool has too many OTokens and not enough ETH. The amount of assets in the vault is unchanged. The total supply of OTokens is reduced. The asset value of the strategy and vault is reduced."
      },
      "removeOnlyAssets(uint256)": {
        "notice": "One-sided remove of ETH from the Curve pool, convert to WETH and transfer to the vault. This is used when the Curve pool does not have enough OTokens and too many ETH. The OToken/Asset, eg OETH/ETH, price with decrease. The amount of assets in the vault increases. The total supply of OTokens does not change. The asset value of the strategy reduces. The asset value of the vault should be close to the same."
      },
      "removePToken(uint256)": {
        "notice": "Remove a supported asset by passing its index.      This method can only be called by the system Governor"
      },
      "rewardTokenAddresses(uint256)": {
        "notice": "Address of the reward tokens. eg CRV, BAL, CVX, AURA"
      },
      "safeApproveAllTokens()": {
        "notice": "Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "notice": "Set the Harvester contract that can collect rewards."
      },
      "setMaxSlippage(uint256)": {
        "notice": "Sets the maximum slippage allowed for any swap/liquidity operation"
      },
      "setPTokenAddress(address,address)": {
        "notice": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor"
      },
      "setRewardTokenAddresses(address[])": {
        "notice": "Set the reward token addresses. Any old addresses will be overwritten."
      },
      "supportsAsset(address)": {
        "notice": "Returns bool indicating whether asset is supported by strategy"
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends."
      },
      "vaultAddress()": {
        "notice": "Address of the OToken vault"
      },
      "weth()": {
        "notice": "Address of the Wrapped ETH (WETH) contract."
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraw ETH and OETH from the Curve pool, burn the OETH, convert the ETH to WETH and transfer to the recipient."
      },
      "withdrawAll()": {
        "notice": "Remove all ETH and OETH from the Curve pool, burn the OETH, convert the ETH to WETH and transfer to the Vault contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53792,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53795,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53835,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 53915,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "_deprecated_platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 53918,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "_deprecated_vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 53923,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 53927,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 53929,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 53931,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 53934,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 53938,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 53942,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 30287,
        "contract": "contracts/strategies/BaseCurveAMOStrategy.sol:BaseCurveAMOStrategy",
        "label": "maxSlippage",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x362DBD4Ff662b2E2b05b9cEDC91da2Dd2c655b26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CCIP_ETHEREUM_CHAIN_SELECTOR",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CCIP_ROUTER",
      "outputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        }
      ],
      "name": "bridgeWETHToEthereum",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "woethAmount",
          "type": "uint256"
        }
      ],
      "name": "bridgeWOETHToEthereum",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgedWOETH",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgedWOETHStrategy",
      "outputs": [
        {
          "internalType": "contract BridgedWOETHStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        }
      ],
      "name": "depositWETHAndBridgeWOETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        }
      ],
      "name": "depositWETHAndRedeemWOETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "woethAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "redeemWithVault",
          "type": "bool"
        }
      ],
      "name": "depositWOETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "woethAmount",
          "type": "uint256"
        }
      ],
      "name": "depositWOETHAndBridgeWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oethb",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeContract",
      "outputs": [
        {
          "internalType": "contract ISafe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb9aaf85971c4fa3de537503414fc4c97345850181c2386f52bc8c1a38c4eef08",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0x362DBD4Ff662b2E2b05b9cEDC91da2Dd2c655b26",
    "transactionIndex": 70,
    "gasUsed": "2265131",
    "logsBloom": "0x
    "blockHash": "0x4363a7e69580f65ebcf691ad9a285e666b4f6956e9d4fb816bfcc6eaad296f26",
    "transactionHash": "0xb9aaf85971c4fa3de537503414fc4c97345850181c2386f52bc8c1a38c4eef08",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 31994305,
        "transactionHash": "0xb9aaf85971c4fa3de537503414fc4c97345850181c2386f52bc8c1a38c4eef08",
        "address": "0x362DBD4Ff662b2E2b05b9cEDC91da2Dd2c655b26",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ff1b9d9ba8558f5eafcec096318ea0d8b541971",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 445,
        "blockHash": "0x4363a7e69580f65ebcf691ad9a285e666b4f6956e9d4fb816bfcc6eaad296f26"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 31994305,
        "transactionHash": "0xb9aaf85971c4fa3de537503414fc4c97345850181c2386f52bc8c1a38c4eef08",
        "address": "0x362DBD4Ff662b2E2b05b9cEDC91da2Dd2c655b26",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000004ff1b9d9ba8558f5eafcec096318ea0d8b541971",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 446,
        "blockHash": "0x4363a7e69580f65ebcf691ad9a285e666b4f6956e9d4fb816bfcc6eaad296f26"
      }
    ],
    "blockNumber": 31994305,
    "cumulativeGasUsed": "24679540",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4FF1b9D9ba8558F5EAfCec096318eA0d8b541971"
  ],
  "numDeployments": 1,
  "solcInputHash": "c75c39016611b3947292bba016867c27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CCIP_ETHEREUM_CHAIN_SELECTOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCIP_ROUTER\",\"outputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"bridgeWETHToEthereum\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"woethAmount\",\"type\":\"uint256\"}],\"name\":\"bridgeWOETHToEthereum\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgedWOETH\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgedWOETHStrategy\",\"outputs\":[{\"internalType\":\"contract BridgedWOETHStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"depositWETHAndBridgeWOETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"depositWETHAndRedeemWOETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"woethAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemWithVault\",\"type\":\"bool\"}],\"name\":\"depositWOETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"woethAmount\",\"type\":\"uint256\"}],\"name\":\"depositWOETHAndBridgeWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oethb\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeContract\",\"outputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bridgeWETHToEthereum(uint256)\":{\"details\":\"Bridges WETH to Ethereum.\",\"params\":{\"wethAmount\":\"Amount of WETH to bridge.\"}},\"bridgeWOETHToEthereum(uint256)\":{\"details\":\"Bridges wOETH to Ethereum.\",\"params\":{\"woethAmount\":\"Amount of wOETH to bridge.\"}},\"depositWETHAndRedeemWOETH(uint256)\":{\"details\":\"Deposits WETH into the Vault and redeems wOETH from the bridgedWOETH strategy.\",\"params\":{\"wethAmount\":\"Amount of WETH to deposit.\"},\"returns\":{\"_0\":\"Amount of wOETH received.\"}},\"depositWOETH(uint256,bool)\":{\"details\":\"Deposits wOETH into the bridgedWOETH strategy.\",\"params\":{\"redeemWithVault\":\"Whether to redeem the wOETH for WETH using the Vault.\",\"woethAmount\":\"Amount of wOETH to deposit.\"},\"returns\":{\"_0\":\"Amount of WETH received.\"}},\"depositWOETHAndBridgeWETH(uint256)\":{\"details\":\"Deposits wOETH into the bridgedWOETH strategy and bridges it to Ethereum.\",\"params\":{\"woethAmount\":\"Amount of wOETH to deposit.\"},\"returns\":{\"_0\":\"Amount of WETH received.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferTokens(address,uint256)\":{\"details\":\"Helps recovering any tokens accidentally sent to this module.\",\"params\":{\"amount\":\"Amount to transfer. 0 to transfer all balance.\",\"token\":\"Token to transfer. 0x0 to transfer Native token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automation/BaseBridgeHelperModule.sol\":\"BaseBridgeHelperModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x1304796e9cdc64294735b4222849a240363b2aff374bb58b7c728f8dc0f4aa75\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/automation/AbstractCCIPBridgeHelperModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AbstractSafeModule } from \\\"./AbstractSafeModule.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\n\\nabstract contract AbstractCCIPBridgeHelperModule is AbstractSafeModule {\\n    /**\\n     * @notice Bridges a token from the source chain to the destination chain using CCIP\\n     * @param ccipRouter The CCIP router contract\\n     * @param destinationChainSelector The selector for the destination chain\\n     * @param token The token to bridge\\n     * @param amount The amount of token to bridge\\n     */\\n    function _bridgeTokenWithCCIP(\\n        IRouterClient ccipRouter,\\n        uint64 destinationChainSelector,\\n        IERC20 token,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        // Approve CCIP Router to move the token\\n        success = safeContract.execTransactionFromModule(\\n            address(token),\\n            0, // Value\\n            abi.encodeWithSelector(token.approve.selector, ccipRouter, amount),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to approve token\\\");\\n\\n        Client.EVMTokenAmount[]\\n            memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        Client.EVMTokenAmount memory tokenAmount = Client.EVMTokenAmount({\\n            token: address(token),\\n            amount: amount\\n        });\\n        tokenAmounts[0] = tokenAmount;\\n\\n        Client.EVM2AnyMessage memory ccipMessage = Client.EVM2AnyMessage({\\n            receiver: abi.encode(address(safeContract)), // ABI-encoded receiver address\\n            data: abi.encode(\\\"\\\"),\\n            tokenAmounts: tokenAmounts,\\n            extraArgs: Client._argsToBytes(\\n                Client.EVMExtraArgsV1({ gasLimit: 0 })\\n            ),\\n            feeToken: address(0)\\n        });\\n\\n        // Get CCIP fee\\n        uint256 ccipFee = ccipRouter.getFee(\\n            destinationChainSelector,\\n            ccipMessage\\n        );\\n\\n        // Send CCIP message\\n        success = safeContract.execTransactionFromModule(\\n            address(ccipRouter),\\n            ccipFee, // Value\\n            abi.encodeWithSelector(\\n                ccipRouter.ccipSend.selector,\\n                destinationChainSelector,\\n                ccipMessage\\n            ),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to send CCIP message\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe28e457ca7d6f028677656ec009dd329b34a47e16855e78a0d62aed1a14276d3\",\"license\":\"BUSL-1.1\"},\"contracts/automation/AbstractSafeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISafe } from \\\"../interfaces/ISafe.sol\\\";\\n\\nabstract contract AbstractSafeModule is AccessControlEnumerable {\\n    ISafe public immutable safeContract;\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    modifier onlySafe() {\\n        require(\\n            msg.sender == address(safeContract),\\n            \\\"Caller is not the safe contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            hasRole(OPERATOR_ROLE, msg.sender),\\n            \\\"Caller is not an operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _safeContract) {\\n        safeContract = ISafe(_safeContract);\\n        _grantRole(DEFAULT_ADMIN_ROLE, address(safeContract));\\n        _grantRole(OPERATOR_ROLE, address(safeContract));\\n    }\\n\\n    /**\\n     * @dev Helps recovering any tokens accidentally sent to this module.\\n     * @param token Token to transfer. 0x0 to transfer Native token.\\n     * @param amount Amount to transfer. 0 to transfer all balance.\\n     */\\n    function transferTokens(address token, uint256 amount) external onlySafe {\\n        if (address(token) == address(0)) {\\n            // Move ETH\\n            amount = amount > 0 ? amount : address(this).balance;\\n            payable(address(safeContract)).transfer(amount);\\n            return;\\n        }\\n\\n        // Move all balance if amount set to 0\\n        amount = amount > 0 ? amount : IERC20(token).balanceOf(address(this));\\n\\n        // Transfer to Safe contract\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        IERC20(token).transfer(address(safeContract), amount);\\n    }\\n\\n    receive() external payable {\\n        // Accept ETH to pay for bridge fees\\n    }\\n}\\n\",\"keccak256\":\"0x02f5cebee3ef21afb1e5dafe15a9160017dde1b7361653e6285f884124d15af5\",\"license\":\"BUSL-1.1\"},\"contracts/automation/BaseBridgeHelperModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line max-line-length\\nimport { AbstractCCIPBridgeHelperModule, AbstractSafeModule, IRouterClient } from \\\"./AbstractCCIPBridgeHelperModule.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC4626 } from \\\"../../lib/openzeppelin/interfaces/IERC4626.sol\\\";\\nimport { IWETH9 } from \\\"../interfaces/IWETH9.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nimport { BridgedWOETHStrategy } from \\\"../strategies/BridgedWOETHStrategy.sol\\\";\\n\\ncontract BaseBridgeHelperModule is\\n    AccessControlEnumerable,\\n    AbstractCCIPBridgeHelperModule\\n{\\n    IVault public constant vault =\\n        IVault(0x98a0CbeF61bD2D21435f433bE4CD42B56B38CC93);\\n    IWETH9 public constant weth =\\n        IWETH9(0x4200000000000000000000000000000000000006);\\n    IERC20 public constant oethb =\\n        IERC20(0xDBFeFD2e8460a6Ee4955A68582F85708BAEA60A3);\\n    IERC4626 public constant bridgedWOETH =\\n        IERC4626(0xD8724322f44E5c58D7A815F542036fb17DbbF839);\\n\\n    BridgedWOETHStrategy public constant bridgedWOETHStrategy =\\n        BridgedWOETHStrategy(0x80c864704DD06C3693ed5179190786EE38ACf835);\\n\\n    IRouterClient public constant CCIP_ROUTER =\\n        IRouterClient(0x881e3A65B4d4a04dD529061dd0071cf975F58bCD);\\n\\n    uint64 public constant CCIP_ETHEREUM_CHAIN_SELECTOR = 5009297550715157269;\\n\\n    constructor(address _safeContract) AbstractSafeModule(_safeContract) {}\\n\\n    /**\\n     * @dev Bridges wOETH to Ethereum.\\n     * @param woethAmount Amount of wOETH to bridge.\\n     */\\n    function bridgeWOETHToEthereum(uint256 woethAmount)\\n        public\\n        payable\\n        onlyOperator\\n    {\\n        _bridgeTokenWithCCIP(\\n            CCIP_ROUTER,\\n            CCIP_ETHEREUM_CHAIN_SELECTOR,\\n            IERC20(address(bridgedWOETH)),\\n            woethAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Bridges WETH to Ethereum.\\n     * @param wethAmount Amount of WETH to bridge.\\n     */\\n    function bridgeWETHToEthereum(uint256 wethAmount)\\n        public\\n        payable\\n        onlyOperator\\n    {\\n        _bridgeTokenWithCCIP(\\n            CCIP_ROUTER,\\n            CCIP_ETHEREUM_CHAIN_SELECTOR,\\n            IERC20(address(weth)),\\n            wethAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Deposits wOETH into the bridgedWOETH strategy.\\n     * @param woethAmount Amount of wOETH to deposit.\\n     * @param redeemWithVault Whether to redeem the wOETH for WETH using the Vault.\\n     * @return Amount of WETH received.\\n     */\\n    function depositWOETH(uint256 woethAmount, bool redeemWithVault)\\n        external\\n        onlyOperator\\n        returns (uint256)\\n    {\\n        return _depositWOETH(woethAmount, redeemWithVault);\\n    }\\n\\n    /**\\n     * @dev Deposits wOETH into the bridgedWOETH strategy and bridges it to Ethereum.\\n     * @param woethAmount Amount of wOETH to deposit.\\n     * @return Amount of WETH received.\\n     */\\n    function depositWOETHAndBridgeWETH(uint256 woethAmount)\\n        external\\n        onlyOperator\\n        returns (uint256)\\n    {\\n        uint256 wethAmount = _depositWOETH(woethAmount, true);\\n        bridgeWETHToEthereum(wethAmount);\\n        return wethAmount;\\n    }\\n\\n    /**\\n     * @dev Deposits wOETH into the bridgedWOETH strategy.\\n     * @param woethAmount Amount of wOETH to deposit.\\n     * @param redeemWithVault Whether to redeem the wOETH for WETH using the Vault.\\n     * @return Amount of WETH received.\\n     */\\n    function _depositWOETH(uint256 woethAmount, bool redeemWithVault)\\n        internal\\n        returns (uint256)\\n    {\\n        // Update oracle price\\n        bridgedWOETHStrategy.updateWOETHOraclePrice();\\n\\n        // Rebase to account for any yields from price update\\n        vault.rebase();\\n\\n        uint256 oethbAmount = oethb.balanceOf(address(safeContract));\\n\\n        // Approve bridgedWOETH strategy to move wOETH\\n        bool success = safeContract.execTransactionFromModule(\\n            address(bridgedWOETH),\\n            0, // Value\\n            abi.encodeWithSelector(\\n                bridgedWOETH.approve.selector,\\n                address(bridgedWOETHStrategy),\\n                woethAmount\\n            ),\\n            0 // Call\\n        );\\n\\n        // Deposit to bridgedWOETH strategy\\n        success = safeContract.execTransactionFromModule(\\n            address(bridgedWOETHStrategy),\\n            0, // Value\\n            abi.encodeWithSelector(\\n                bridgedWOETHStrategy.depositBridgedWOETH.selector,\\n                woethAmount\\n            ),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to deposit bridged WOETH\\\");\\n\\n        oethbAmount = oethb.balanceOf(address(safeContract)) - oethbAmount;\\n\\n        // Rebase to account for any yields from price update\\n        // and backing asset change from deposit\\n        vault.rebase();\\n\\n        if (!redeemWithVault) {\\n            return oethbAmount;\\n        }\\n\\n        // Redeem for WETH using Vault\\n        success = safeContract.execTransactionFromModule(\\n            address(vault),\\n            0, // Value\\n            abi.encodeWithSelector(\\n                vault.redeem.selector,\\n                oethbAmount,\\n                oethbAmount\\n            ),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to redeem OETHb\\\");\\n\\n        return oethbAmount;\\n    }\\n\\n    /**\\n     * @dev Deposits WETH into the Vault and redeems wOETH from the bridgedWOETH strategy.\\n     * @param wethAmount Amount of WETH to deposit.\\n     * @return Amount of wOETH received.\\n     */\\n    function depositWETHAndRedeemWOETH(uint256 wethAmount)\\n        external\\n        onlyOperator\\n        returns (uint256)\\n    {\\n        return _withdrawWOETH(wethAmount);\\n    }\\n\\n    function depositWETHAndBridgeWOETH(uint256 wethAmount)\\n        external\\n        onlyOperator\\n        returns (uint256)\\n    {\\n        uint256 woethAmount = _withdrawWOETH(wethAmount);\\n        bridgeWOETHToEthereum(woethAmount);\\n        return woethAmount;\\n    }\\n\\n    /**\\n     * @dev Withdraws wOETH from the bridgedWOETH strategy.\\n     * @param wethAmount Amount of WETH to use to withdraw.\\n     * @return Amount of wOETH received.\\n     */\\n    function _withdrawWOETH(uint256 wethAmount) internal returns (uint256) {\\n        // Approve Vault to move WETH\\n        bool success = safeContract.execTransactionFromModule(\\n            address(weth),\\n            0, // Value\\n            abi.encodeWithSelector(\\n                weth.approve.selector,\\n                address(vault),\\n                wethAmount\\n            ),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to approve WETH\\\");\\n\\n        // Mint OETHb with WETH\\n        success = safeContract.execTransactionFromModule(\\n            address(vault),\\n            0, // Value\\n            abi.encodeWithSelector(\\n                vault.mint.selector,\\n                address(weth),\\n                wethAmount,\\n                wethAmount\\n            ),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to mint OETHb\\\");\\n\\n        // Approve bridgedWOETH strategy to move OETHb\\n        success = safeContract.execTransactionFromModule(\\n            address(oethb),\\n            0, // Value\\n            abi.encodeWithSelector(\\n                oethb.approve.selector,\\n                address(bridgedWOETHStrategy),\\n                wethAmount\\n            ),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to approve OETHb\\\");\\n\\n        uint256 woethAmount = bridgedWOETH.balanceOf(address(safeContract));\\n\\n        // Withdraw from bridgedWOETH strategy\\n        success = safeContract.execTransactionFromModule(\\n            address(bridgedWOETHStrategy),\\n            0, // Value\\n            abi.encodeWithSelector(\\n                bridgedWOETHStrategy.withdrawBridgedWOETH.selector,\\n                wethAmount\\n            ),\\n            0 // Call\\n        );\\n        require(success, \\\"Failed to withdraw bridged WOETH\\\");\\n\\n        woethAmount =\\n            bridgedWOETH.balanceOf(address(safeContract)) -\\n            woethAmount;\\n\\n        return woethAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xfd908a58382ada4424c62ffb97506b91633e8adbf030b7238637e9f0087562e5\",\"license\":\"BUSL-1.1\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        emit GovernorshipTransferred(_governor(), newGovernor);\\n\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xf32f873c8bfbacf2e5f01d0cf37bc7f54fbd5aa656e95c8a599114229946f107\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, in 8 decimal digits.\\n     *\\n     * The version of priceProvider deployed for OETH has 18 decimal digits\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa5f765f5b22cd5426803b22a7344d4c34c4d4016a0b6e9d799862133253f77b2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address,\\n        uint256,\\n        bytes memory,\\n        uint8\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6d5fb3512c4fab418222023fb1b482891906eae8d2bda9d1eb2ef3d3c7653dee\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n\\n    function harvesterAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3e9fcd1bfb6f82fd8e04284d0d728a932ffbb88fe52dd89fdeb45b6b17eedae5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    // slither-disable-start constable-states\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    function ADMIN_IMPLEMENTATION() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _unitConversion) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n\\n    function setDripper(address _dripper) external;\\n\\n    function dripper() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function cacheWETHAssetIndex() external;\\n\\n    function wethAssetIndex() external view returns (uint256);\\n\\n    function initialize(address, address) external;\\n\\n    function setAdminImpl(address) external;\\n\\n    function removeAsset(address _asset) external;\\n\\n    // These are OETH specific functions\\n    function addWithdrawalQueueLiquidity() external;\\n\\n    function requestWithdrawal(uint256 _amount)\\n        external\\n        returns (uint256 requestId, uint256 queued);\\n\\n    function claimWithdrawal(uint256 requestId)\\n        external\\n        returns (uint256 amount);\\n\\n    function claimWithdrawals(uint256[] memory requestIds)\\n        external\\n        returns (uint256[] memory amounts, uint256 totalAmount);\\n\\n    function withdrawalQueueMetadata()\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalQueueMetadata memory);\\n\\n    function withdrawalRequests(uint256 requestId)\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalRequest memory);\\n\\n    // OETHb specific functions\\n    function addStrategyToMintWhitelist(address strategyAddr) external;\\n\\n    function removeStrategyFromMintWhitelist(address strategyAddr) external;\\n\\n    function isMintWhitelistedStrategy(address strategyAddr)\\n        external\\n        view\\n        returns (bool);\\n\\n    function withdrawalClaimDelay() external view returns (uint256);\\n\\n    function setWithdrawalClaimDelay(uint256 newDelay) external;\\n\\n    function lastRebase() external view returns (uint64);\\n\\n    function dripDuration() external view returns (uint64);\\n\\n    function setDripDuration(uint256 _dripDuration) external;\\n\\n    function rebasePerSecondMax() external view returns (uint64);\\n\\n    function setRebaseRateMax(uint256 yearlyApr) external;\\n\\n    function rebasePerSecondTarget() external view returns (uint64);\\n\\n    function previewYield() external view returns (uint256 yield);\\n\\n    // slither-disable-end constable-states\\n}\\n\",\"keccak256\":\"0x8d0a60f594d97578b0513b4da3d8fcafaa601950c6c4c016bf60b1344733269c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH9 {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x05b7dce6c24d3cd4e48b5c6346d86e5e40ecc3291bcdf3f3ef091c98fc826519\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x18fb68de95136c49f3874fe7795a7bda730339198b2816690ddbdf1eacd4e273\",\"license\":\"MIT\"},\"contracts/strategies/BridgedWOETHStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IERC20, SafeERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { IWETH9 } from \\\"../interfaces/IWETH9.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { AggregatorV3Interface } from \\\"../interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract BridgedWOETHStrategy is InitializableAbstractStrategy {\\n    using StableMath for uint256;\\n    using StableMath for uint128;\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event MaxPriceDiffBpsUpdated(uint128 oldValue, uint128 newValue);\\n    event WOETHPriceUpdated(uint128 oldValue, uint128 newValue);\\n\\n    IWETH9 public immutable weth;\\n    IERC20 public immutable bridgedWOETH;\\n    IERC20 public immutable oethb;\\n\\n    uint256 public constant MAX_PRICE_STALENESS = 2 days;\\n\\n    uint128 public lastOraclePrice;\\n    uint128 public maxPriceDiffBps;\\n\\n    /**\\n     * @dev Verifies that the caller is the Governor or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            isGovernor() || msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        BaseStrategyConfig memory _stratConfig,\\n        address _weth,\\n        address _bridgedWOETH,\\n        address _oethb\\n    ) InitializableAbstractStrategy(_stratConfig) {\\n        weth = IWETH9(_weth);\\n        bridgedWOETH = IERC20(_bridgedWOETH);\\n        oethb = IERC20(_oethb);\\n    }\\n\\n    function initialize(uint128 _maxPriceDiffBps)\\n        external\\n        onlyGovernor\\n        initializer\\n    {\\n        InitializableAbstractStrategy._initialize(\\n            new address[](0), // No reward tokens\\n            new address[](0), // No assets\\n            new address[](0) // No pTokens\\n        );\\n\\n        _setMaxPriceDiffBps(_maxPriceDiffBps);\\n    }\\n\\n    /**\\n     * @dev Sets the max price diff bps for the wOETH value appreciation\\n     * @param _maxPriceDiffBps Bps value, 10k == 100%\\n     */\\n    function setMaxPriceDiffBps(uint128 _maxPriceDiffBps)\\n        external\\n        onlyGovernor\\n    {\\n        _setMaxPriceDiffBps(_maxPriceDiffBps);\\n    }\\n\\n    /**\\n     * @dev Sets the max price diff bps for the wOETH value appreciation\\n     * @param _maxPriceDiffBps Bps value, 10k == 100%\\n     */\\n    function _setMaxPriceDiffBps(uint128 _maxPriceDiffBps) internal {\\n        require(\\n            _maxPriceDiffBps > 0 && _maxPriceDiffBps <= 10000,\\n            \\\"Invalid bps value\\\"\\n        );\\n\\n        emit MaxPriceDiffBpsUpdated(maxPriceDiffBps, _maxPriceDiffBps);\\n\\n        maxPriceDiffBps = _maxPriceDiffBps;\\n    }\\n\\n    /**\\n     * @dev Wrapper for _updateWOETHOraclePrice with nonReentrant flag\\n     * @return The latest price of wOETH from Oracle\\n     */\\n    function updateWOETHOraclePrice() external nonReentrant returns (uint256) {\\n        return _updateWOETHOraclePrice();\\n    }\\n\\n    /**\\n     * @dev Finds the value of bridged wOETH from the Oracle.\\n     *      Ensures that it's within the bounds and reasonable.\\n     *      And stores it.\\n     *\\n     *      NOTE: Intentionally not caching `Vault.priceProvider` here,\\n     *      since doing so would mean that we also have to update this\\n     *      strategy every time there's a change in oracle router.\\n     *      Besides on L2, the gas is considerably cheaper than mainnet.\\n     *\\n     * @return Latest price from oracle\\n     */\\n    function _updateWOETHOraclePrice() internal returns (uint256) {\\n        // WETH price per unit of bridged wOETH\\n        uint256 oraclePrice = IOracle(IVault(vaultAddress).priceProvider())\\n            .price(address(bridgedWOETH));\\n\\n        // 1 wOETH > 1 WETH, always\\n        require(oraclePrice > 1 ether, \\\"Invalid wOETH value\\\");\\n\\n        uint128 oraclePrice128 = oraclePrice.toUint128();\\n\\n        // Do some checks\\n        if (lastOraclePrice > 0) {\\n            // Make sure the value only goes up\\n            require(oraclePrice128 >= lastOraclePrice, \\\"Negative wOETH yield\\\");\\n\\n            // lastOraclePrice * (1 + maxPriceDiffBps)\\n            uint256 maxPrice = (lastOraclePrice * (1e4 + maxPriceDiffBps)) /\\n                1e4;\\n\\n            // And that it's within the bounds.\\n            require(oraclePrice128 <= maxPrice, \\\"Price diff beyond threshold\\\");\\n        }\\n\\n        emit WOETHPriceUpdated(lastOraclePrice, oraclePrice128);\\n\\n        // Store the price\\n        lastOraclePrice = oraclePrice128;\\n\\n        return oraclePrice;\\n    }\\n\\n    /**\\n     * @dev Computes & returns the value of given wOETH in WETH\\n     * @param woethAmount Amount of wOETH\\n     * @return Value of wOETH in WETH (using the last stored oracle price)\\n     */\\n    function getBridgedWOETHValue(uint256 woethAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (woethAmount * lastOraclePrice) / 1 ether;\\n    }\\n\\n    /**\\n     * @dev Takes in bridged wOETH and mints & returns\\n     *      equivalent amount of OETHb.\\n     * @param woethAmount Amount of bridged wOETH to transfer in\\n     */\\n    function depositBridgedWOETH(uint256 woethAmount)\\n        external\\n        onlyGovernorOrStrategist\\n        nonReentrant\\n    {\\n        // Update wOETH price\\n        uint256 oraclePrice = _updateWOETHOraclePrice();\\n\\n        // Figure out how much they are worth\\n        uint256 oethToMint = (woethAmount * oraclePrice) / 1 ether;\\n\\n        require(oethToMint > 0, \\\"Invalid deposit amount\\\");\\n\\n        // There's no pToken, however, it just uses WOETH address in the event\\n        emit Deposit(address(weth), address(bridgedWOETH), oethToMint);\\n\\n        // Mint OETHb tokens and transfer it to the caller\\n        IVault(vaultAddress).mintForStrategy(oethToMint);\\n\\n        // Transfer out minted OETHb\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        oethb.transfer(msg.sender, oethToMint);\\n\\n        // Transfer in all bridged wOETH tokens\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        bridgedWOETH.transferFrom(msg.sender, address(this), woethAmount);\\n    }\\n\\n    /**\\n     * @dev Takes in OETHb and burns it and returns\\n     *      equivalent amount of bridged wOETH.\\n     * @param oethToBurn Amount of OETHb to burn\\n     */\\n    function withdrawBridgedWOETH(uint256 oethToBurn)\\n        external\\n        onlyGovernorOrStrategist\\n        nonReentrant\\n    {\\n        // Update wOETH price\\n        uint256 oraclePrice = _updateWOETHOraclePrice();\\n\\n        // Figure out how much they are worth\\n        uint256 woethAmount = (oethToBurn * 1 ether) / oraclePrice;\\n\\n        require(woethAmount > 0, \\\"Invalid withdraw amount\\\");\\n\\n        // There's no pToken, however, it just uses WOETH address in the event\\n        emit Withdrawal(address(weth), address(bridgedWOETH), oethToBurn);\\n\\n        // Transfer WOETH back\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        bridgedWOETH.transfer(msg.sender, woethAmount);\\n\\n        // Transfer in OETHb\\n        // slither-disable-next-line unchecked-transfer unused-return\\n        oethb.transferFrom(msg.sender, address(this), oethToBurn);\\n\\n        // Burn OETHb\\n        IVault(vaultAddress).burnForStrategy(oethToBurn);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of backing WETH the strategy holds\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        require(_asset == address(weth), \\\"Unsupported asset\\\");\\n\\n        // Figure out how much wOETH is worth at the time.\\n        // Always uses the last stored oracle price.\\n        // Call updateWOETHOraclePrice manually to pull in latest yields.\\n\\n        // NOTE: If the contract has been deployed but the call to\\n        // `updateWOETHOraclePrice()` has never been made, then this\\n        // will return zero. It should be fine because the strategy\\n        // should update the price whenever a deposit/withdraw happens.\\n\\n        // If `updateWOETHOraclePrice()` hasn't been called in a while,\\n        // the strategy will underreport its holdings but never overreport it.\\n\\n        balance =\\n            (bridgedWOETH.balanceOf(address(this)) * lastOraclePrice) /\\n            1 ether;\\n    }\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view override returns (bool) {\\n        // Strategist deposits bridged wOETH but the contract only\\n        // reports the balance in WETH. As far as Vault is concerned,\\n        // it isn't aware of bridged wOETH token\\n        return _asset == address(weth);\\n    }\\n\\n    /***************************************\\n               Overridden methods\\n    ****************************************/\\n    /**\\n     * @inheritdoc InitializableAbstractStrategy\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        override\\n        onlyGovernor\\n    {\\n        require(\\n            _asset != address(bridgedWOETH) && _asset != address(weth),\\n            \\\"Cannot transfer supported asset\\\"\\n        );\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice deposit() function not used for this strategy\\n     */\\n    function deposit(address, uint256)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        // Use depositBridgedWOETH() instead\\n        require(false, \\\"Deposit disabled\\\");\\n    }\\n\\n    /**\\n     * @notice depositAll() function not used for this strategy\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        // Use depositBridgedWOETH() instead\\n        require(false, \\\"Deposit disabled\\\");\\n    }\\n\\n    /**\\n     * @notice withdraw() function not used for this strategy\\n     */\\n    function withdraw(\\n        // solhint-disable-next-line no-unused-vars\\n        address _recipient,\\n        // solhint-disable-next-line no-unused-vars\\n        address _asset,\\n        // solhint-disable-next-line no-unused-vars\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(false, \\\"Withdrawal disabled\\\");\\n    }\\n\\n    /**\\n     * @notice withdrawAll() function not used for this strategy\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        // Withdrawal disabled\\n    }\\n\\n    function _abstractSetPToken(address, address) internal override {\\n        revert(\\\"No pTokens are used\\\");\\n    }\\n\\n    function safeApproveAllTokens() external override {}\\n\\n    /**\\n     * @inheritdoc InitializableAbstractStrategy\\n     */\\n    function removePToken(uint256) external override {\\n        revert(\\\"No pTokens are used\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc InitializableAbstractStrategy\\n     */\\n    function collectRewardTokens() external override {}\\n}\\n\",\"keccak256\":\"0xd2ace2cc632d2d472154529c11ab5f8859d5fc211c337dda1e20151bc93e4788\",\"license\":\"BUSL-1.1\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract OUSD is Governable {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Event triggered when the supply changes\\n    /// @param totalSupply Updated token total supply\\n    /// @param rebasingCredits Updated token rebasing credits\\n    /// @param rebasingCreditsPerToken Updated token rebasing credits per token\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    /// @dev Event triggered when an account opts in for rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingEnabled(address account);\\n    /// @dev Event triggered when an account opts out of rebasing\\n    /// @param account Address of the account\\n    event AccountRebasingDisabled(address account);\\n    /// @dev Emitted when `value` tokens are moved from one account `from` to\\n    ///      another `to`.\\n    /// @param from Address of the account tokens are moved from\\n    /// @param to Address of the account tokens are moved to\\n    /// @param value Amount of tokens transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    ///      a call to {approve}. `value` is the new allowance.\\n    /// @param owner Address of the owner approving allowance\\n    /// @param spender Address of the spender allowance is granted to\\n    /// @param value Amount of tokens spender can transfer\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    /// @dev Yield resulting from {changeSupply} that a `source` account would\\n    ///      receive is directed to `target` account.\\n    /// @param source Address of the source forwarding the yield\\n    /// @param target Address of the target receiving the yield\\n    event YieldDelegated(address source, address target);\\n    /// @dev Yield delegation from `source` account to the `target` account is\\n    ///      suspended.\\n    /// @param source Address of the source suspending yield forwarding\\n    /// @param target Address of the target no longer receiving yield from `source`\\n    ///        account\\n    event YieldUndelegated(address source, address target);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        StdNonRebasing,\\n        StdRebasing,\\n        YieldDelegationSource,\\n        YieldDelegationTarget\\n    }\\n\\n    uint256[154] private _gap; // Slots to align with deployed contract\\n    uint256 private constant MAX_SUPPLY = type(uint128).max;\\n    /// @dev The amount of tokens in existence\\n    uint256 public totalSupply;\\n    mapping(address => mapping(address => uint256)) private allowances;\\n    /// @dev The vault with privileges to execute {mint}, {burn}\\n    ///     and {changeSupply}\\n    address public vaultAddress;\\n    mapping(address => uint256) internal creditBalances;\\n    // the 2 storage variables below need trailing underscores to not name collide with public functions\\n    uint256 private rebasingCredits_; // Sum of all rebasing credits (creditBalances for rebasing accounts)\\n    uint256 private rebasingCreditsPerToken_;\\n    /// @dev The amount of tokens that are not rebasing - receiving yield\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) internal alternativeCreditsPerToken;\\n    /// @dev A map of all addresses and their respective RebaseOptions\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) private __deprecated_isUpgraded;\\n    /// @dev A map of addresses that have yields forwarded to. This is an\\n    ///      inverse mapping of {yieldFrom}\\n    /// Key Account forwarding yield\\n    /// Value Account receiving yield\\n    mapping(address => address) public yieldTo;\\n    /// @dev A map of addresses that are receiving the yield. This is an\\n    ///      inverse mapping of {yieldTo}\\n    /// Key Account receiving yield\\n    /// Value Account forwarding yield\\n    mapping(address => address) public yieldFrom;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n    uint256[34] private __gap; // including below gap totals up to 200\\n\\n    /// @dev Initializes the contract and sets necessary variables.\\n    /// @param _vaultAddress Address of the vault contract\\n    /// @param _initialCreditsPerToken The starting rebasing credits per token.\\n    function initialize(address _vaultAddress, uint256 _initialCreditsPerToken)\\n        external\\n        onlyGovernor\\n    {\\n        require(_vaultAddress != address(0), \\\"Zero vault address\\\");\\n        require(vaultAddress == address(0), \\\"Already initialized\\\");\\n\\n        rebasingCreditsPerToken_ = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /// @dev Returns the symbol of the token, a shorter version\\n    ///      of the name.\\n    function symbol() external pure virtual returns (string memory) {\\n        return \\\"OUSD\\\";\\n    }\\n\\n    /// @dev Returns the name of the token.\\n    function name() external pure virtual returns (string memory) {\\n        return \\\"Origin Dollar\\\";\\n    }\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    function decimals() external pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() external view returns (uint256) {\\n        return rebasingCreditsPerToken_;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() external view returns (uint256) {\\n        return rebasingCreditsPerToken_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() external view returns (uint256) {\\n        return rebasingCredits_;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() external view returns (uint256) {\\n        return rebasingCredits_ / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        RebaseOptions state = rebaseState[_account];\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            // Saves a slot read when transferring to or from a yield delegating source\\n            // since we know creditBalances equals the balance.\\n            return creditBalances[_account];\\n        }\\n        uint256 baseBalance = (creditBalances[_account] * 1e18) /\\n            _creditsPerToken(_account);\\n        if (state == RebaseOptions.YieldDelegationTarget) {\\n            // creditBalances of yieldFrom accounts equals token balances\\n            return baseBalance - creditBalances[yieldFrom[_account]];\\n        }\\n        return baseBalance;\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            creditBalances[_account],\\n            _creditsPerToken(_account),\\n            true // all accounts have their resolution \\\"upgraded\\\"\\n        );\\n    }\\n\\n    // Backwards compatible view\\n    function nonRebasingCreditsPerToken(address _account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return alternativeCreditsPerToken[_account];\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     * @return true on success.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        uint256 userAllowance = allowances[_from][msg.sender];\\n        require(_value <= userAllowance, \\\"Allowance exceeded\\\");\\n\\n        unchecked {\\n            allowances[_from][msg.sender] = userAllowance - _value;\\n        }\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        (\\n            int256 fromRebasingCreditsDiff,\\n            int256 fromNonRebasingSupplyDiff\\n        ) = _adjustAccount(_from, -_value.toInt256());\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_to, _value.toInt256());\\n\\n        _adjustGlobals(\\n            fromRebasingCreditsDiff + toRebasingCreditsDiff,\\n            fromNonRebasingSupplyDiff + toNonRebasingSupplyDiff\\n        );\\n    }\\n\\n    function _adjustAccount(address _account, int256 _balanceChange)\\n        internal\\n        returns (int256 rebasingCreditsDiff, int256 nonRebasingSupplyDiff)\\n    {\\n        RebaseOptions state = rebaseState[_account];\\n        int256 currentBalance = balanceOf(_account).toInt256();\\n        if (currentBalance + _balanceChange < 0) {\\n            revert(\\\"Transfer amount exceeds balance\\\");\\n        }\\n        uint256 newBalance = (currentBalance + _balanceChange).toUint256();\\n\\n        if (state == RebaseOptions.YieldDelegationSource) {\\n            address target = yieldTo[_account];\\n            uint256 targetOldBalance = balanceOf(target);\\n            uint256 targetNewCredits = _balanceToRebasingCredits(\\n                targetOldBalance + newBalance\\n            );\\n            rebasingCreditsDiff =\\n                targetNewCredits.toInt256() -\\n                creditBalances[target].toInt256();\\n\\n            creditBalances[_account] = newBalance;\\n            creditBalances[target] = targetNewCredits;\\n        } else if (state == RebaseOptions.YieldDelegationTarget) {\\n            uint256 newCredits = _balanceToRebasingCredits(\\n                newBalance + creditBalances[yieldFrom[_account]]\\n            );\\n            rebasingCreditsDiff =\\n                newCredits.toInt256() -\\n                creditBalances[_account].toInt256();\\n            creditBalances[_account] = newCredits;\\n        } else {\\n            _autoMigrate(_account);\\n            uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n                _account\\n            ];\\n            if (alternativeCreditsPerTokenMem > 0) {\\n                nonRebasingSupplyDiff = _balanceChange;\\n                if (alternativeCreditsPerTokenMem != 1e18) {\\n                    alternativeCreditsPerToken[_account] = 1e18;\\n                }\\n                creditBalances[_account] = newBalance;\\n            } else {\\n                uint256 newCredits = _balanceToRebasingCredits(newBalance);\\n                rebasingCreditsDiff =\\n                    newCredits.toInt256() -\\n                    creditBalances[_account].toInt256();\\n                creditBalances[_account] = newCredits;\\n            }\\n        }\\n    }\\n\\n    function _adjustGlobals(\\n        int256 _rebasingCreditsDiff,\\n        int256 _nonRebasingSupplyDiff\\n    ) internal {\\n        if (_rebasingCreditsDiff != 0) {\\n            rebasingCredits_ = (rebasingCredits_.toInt256() +\\n                _rebasingCreditsDiff).toUint256();\\n        }\\n        if (_nonRebasingSupplyDiff != 0) {\\n            nonRebasingSupply = (nonRebasingSupply.toInt256() +\\n                _nonRebasingSupplyDiff).toUint256();\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to check the amount of tokens that _owner has allowed\\n     *      to `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @notice Approve the passed address to spend the specified amount of\\n     *      tokens on behalf of msg.sender.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     * @return true on success.\\n     */\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates `_amount` tokens and assigns them to `_account`,\\n     *     increasing the total supply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, _amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply + _amount;\\n\\n        require(totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @notice Destroys `_amount` tokens from `_account`,\\n     *     reducing the total supply.\\n     */\\n    function burn(address _account, uint256 _amount) external onlyVault {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        // Account\\n        (\\n            int256 toRebasingCreditsDiff,\\n            int256 toNonRebasingSupplyDiff\\n        ) = _adjustAccount(_account, -_amount.toInt256());\\n        // Globals\\n        _adjustGlobals(toRebasingCreditsDiff, toNonRebasingSupplyDiff);\\n        totalSupply = totalSupply - _amount;\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 alternativeCreditsPerTokenMem = alternativeCreditsPerToken[\\n            _account\\n        ];\\n        if (alternativeCreditsPerTokenMem != 0) {\\n            return alternativeCreditsPerTokenMem;\\n        } else {\\n            return rebasingCreditsPerToken_;\\n        }\\n    }\\n\\n    /**\\n     * @dev Auto migrate contracts to be non rebasing,\\n     *     unless they have opted into yield.\\n     * @param _account Address of the account.\\n     */\\n    function _autoMigrate(address _account) internal {\\n        bool isContract = _account.code.length > 0;\\n        // In previous code versions, contracts would not have had their\\n        // rebaseState[_account] set to RebaseOptions.NonRebasing when migrated\\n        // therefore we check the actual accounting used on the account instead.\\n        if (\\n            isContract &&\\n            rebaseState[_account] == RebaseOptions.NotSet &&\\n            alternativeCreditsPerToken[_account] == 0\\n        ) {\\n            _rebaseOptOut(_account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates credits from contract's global rebasingCreditsPerToken_, and\\n     *      also balance that corresponds to those credits. The latter is important\\n     *      when adjusting the contract's global nonRebasingSupply to circumvent any\\n     *      possible rounding errors.\\n     *\\n     * @param _balance Balance of the account.\\n     */\\n    function _balanceToRebasingCredits(uint256 _balance)\\n        internal\\n        view\\n        returns (uint256 rebasingCredits)\\n    {\\n        // Rounds up, because we need to ensure that accounts always have\\n        // at least the balance that they should have.\\n        // Note this should always be used on an absolute account value,\\n        // not on a possibly negative diff, because then the rounding would be wrong.\\n        return ((_balance) * rebasingCreditsPerToken_ + 1e18 - 1) / 1e18;\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account) external onlyGovernor {\\n        require(_account != address(0), \\\"Zero address not allowed\\\");\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will start receiving yield after a successful call.\\n     */\\n    function rebaseOptIn() external {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        uint256 balance = balanceOf(_account);\\n\\n        // prettier-ignore\\n        require(\\n            alternativeCreditsPerToken[_account] > 0 ||\\n                // Accounts may explicitly `rebaseOptIn` regardless of\\n                // accounting if they have a 0 balance.\\n                creditBalances[_account] == 0\\n            ,\\n            \\\"Account must be non-rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        // prettier-ignore\\n        require(\\n            state == RebaseOptions.StdNonRebasing ||\\n                state == RebaseOptions.NotSet,\\n            \\\"Only standard non-rebasing accounts can opt in\\\"\\n        );\\n\\n        uint256 newCredits = _balanceToRebasingCredits(balance);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdRebasing;\\n        alternativeCreditsPerToken[_account] = 0;\\n        creditBalances[_account] = newCredits;\\n        // Globals\\n        _adjustGlobals(newCredits.toInt256(), -balance.toInt256());\\n\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @notice The calling account will no longer receive yield\\n     */\\n    function rebaseOptOut() external {\\n        _rebaseOptOut(msg.sender);\\n    }\\n\\n    function _rebaseOptOut(address _account) internal {\\n        require(\\n            alternativeCreditsPerToken[_account] == 0,\\n            \\\"Account must be rebasing\\\"\\n        );\\n        RebaseOptions state = rebaseState[_account];\\n        require(\\n            state == RebaseOptions.StdRebasing || state == RebaseOptions.NotSet,\\n            \\\"Only standard rebasing accounts can opt out\\\"\\n        );\\n\\n        uint256 oldCredits = creditBalances[_account];\\n        uint256 balance = balanceOf(_account);\\n\\n        // Account\\n        rebaseState[_account] = RebaseOptions.StdNonRebasing;\\n        alternativeCreditsPerToken[_account] = 1e18;\\n        creditBalances[_account] = balance;\\n        // Globals\\n        _adjustGlobals(-oldCredits.toInt256(), balance.toInt256());\\n\\n        emit AccountRebasingDisabled(_account);\\n    }\\n\\n    /**\\n     * @notice Distribute yield to users. This changes the exchange rate\\n     *  between \\\"credits\\\" and OUSD tokens to change rebasing user's balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply) external onlyVault {\\n        require(totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                totalSupply,\\n                rebasingCredits_,\\n                rebasingCreditsPerToken_\\n            );\\n            return;\\n        }\\n\\n        totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        uint256 rebasingSupply = totalSupply - nonRebasingSupply;\\n        // round up in the favour of the protocol\\n        rebasingCreditsPerToken_ =\\n            (rebasingCredits_ * 1e18 + rebasingSupply - 1) /\\n            rebasingSupply;\\n\\n        require(rebasingCreditsPerToken_ > 0, \\\"Invalid change in supply\\\");\\n\\n        emit TotalSupplyUpdatedHighres(\\n            totalSupply,\\n            rebasingCredits_,\\n            rebasingCreditsPerToken_\\n        );\\n    }\\n\\n    /*\\n     * @notice Send the yield from one account to another account.\\n     *         Each account keeps its own balances.\\n     */\\n    function delegateYield(address _from, address _to) external onlyGovernor {\\n        require(_from != address(0), \\\"Zero from address not allowed\\\");\\n        require(_to != address(0), \\\"Zero to address not allowed\\\");\\n\\n        require(_from != _to, \\\"Cannot delegate to self\\\");\\n        require(\\n            yieldFrom[_to] == address(0) &&\\n                yieldTo[_to] == address(0) &&\\n                yieldFrom[_from] == address(0) &&\\n                yieldTo[_from] == address(0),\\n            \\\"Blocked by existing yield delegation\\\"\\n        );\\n        RebaseOptions stateFrom = rebaseState[_from];\\n        RebaseOptions stateTo = rebaseState[_to];\\n\\n        require(\\n            stateFrom == RebaseOptions.NotSet ||\\n                stateFrom == RebaseOptions.StdNonRebasing ||\\n                stateFrom == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState from\\\"\\n        );\\n\\n        require(\\n            stateTo == RebaseOptions.NotSet ||\\n                stateTo == RebaseOptions.StdNonRebasing ||\\n                stateTo == RebaseOptions.StdRebasing,\\n            \\\"Invalid rebaseState to\\\"\\n        );\\n\\n        if (alternativeCreditsPerToken[_from] == 0) {\\n            _rebaseOptOut(_from);\\n        }\\n        if (alternativeCreditsPerToken[_to] > 0) {\\n            _rebaseOptIn(_to);\\n        }\\n\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(_to);\\n        uint256 oldToCredits = creditBalances[_to];\\n        uint256 newToCredits = _balanceToRebasingCredits(\\n            fromBalance + toBalance\\n        );\\n\\n        // Set up the bidirectional links\\n        yieldTo[_from] = _to;\\n        yieldFrom[_to] = _from;\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.YieldDelegationSource;\\n        alternativeCreditsPerToken[_from] = 1e18;\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[_to] = RebaseOptions.YieldDelegationTarget;\\n        creditBalances[_to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, -(fromBalance).toInt256());\\n        emit YieldDelegated(_from, _to);\\n    }\\n\\n    /*\\n     * @notice Stop sending the yield from one account to another account.\\n     */\\n    function undelegateYield(address _from) external onlyGovernor {\\n        // Require a delegation, which will also ensure a valid delegation\\n        require(yieldTo[_from] != address(0), \\\"Zero address not allowed\\\");\\n\\n        address to = yieldTo[_from];\\n        uint256 fromBalance = balanceOf(_from);\\n        uint256 toBalance = balanceOf(to);\\n        uint256 oldToCredits = creditBalances[to];\\n        uint256 newToCredits = _balanceToRebasingCredits(toBalance);\\n\\n        // Remove the bidirectional links\\n        yieldFrom[to] = address(0);\\n        yieldTo[_from] = address(0);\\n\\n        // Local\\n        rebaseState[_from] = RebaseOptions.StdNonRebasing;\\n        // alternativeCreditsPerToken[from] already 1e18 from `delegateYield()`\\n        creditBalances[_from] = fromBalance;\\n        rebaseState[to] = RebaseOptions.StdRebasing;\\n        // alternativeCreditsPerToken[to] already 0 from `delegateYield()`\\n        creditBalances[to] = newToCredits;\\n\\n        // Global\\n        int256 creditsChange = newToCredits.toInt256() -\\n            oldToCredits.toInt256();\\n        _adjustGlobals(creditsChange, fromBalance.toInt256());\\n        emit YieldUndelegated(_from, to);\\n    }\\n}\\n\",\"keccak256\":\"0x5741d16e48d6031ec92c1e189ea023c78a34956b6bc9642ea9dfc9a6dafe49ca\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x4366f8d90b34c1eef8bbaaf369b1e5cd59f04027bb3c111f208eaee65bbc0346\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x50d39ebf38a3d3111f2b77a6c75ece1d4ae731552fec4697ab16fcf6c0d4d5e8\",\"license\":\"BUSL-1.1\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Harvester\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        virtual\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x5bc292f46e4b9727edab74696f992b7c815e17e1aff109ce9dbdd2dd679bf6df\",\"license\":\"BUSL-1.1\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x71d6ed0053a1e5ef018d27c3b6d024f336d8157ab6f6859e400b3243a50a71b7\",\"license\":\"BUSL-1.1\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetRemoved(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event RebasePerSecondMaxChanged(uint256 rebaseRatePerSecond);\\n    event DripDurationChanged(uint256 dripDuration);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n    event WithdrawalClaimDelayUpdated(uint256 _newDelay);\\n\\n    // Since we are proxy, all state should be uninitalized.\\n    // Since this storage contract does not have logic directly on it\\n    // we should not be checking for to see if these variables can be constant.\\n    // slither-disable-start uninitialized-state\\n    // slither-disable-start constable-states\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configuration\\n    mapping(address => Strategy) public strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    OUSD public oUSD;\\n\\n    /// @dev Storage slot for the address of the VaultAdmin contract that is delegated to\\n    // keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 public constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    /// @dev Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    /// @dev Deprecated: Address of Uniswap\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n\\n    address public ousdMetaStrategy;\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    int256 public netOusdMintedForStrategy;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    uint256 public netOusdMintForStrategyThreshold;\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // List of strategies that can mint oTokens directly\\n    // Used in OETHBaseVaultCore\\n    mapping(address => bool) public isMintWhitelistedStrategy;\\n\\n    /// @notice Address of the Dripper contract that streams harvested rewards to the Vault\\n    /// @dev The vault is proxied so needs to be set with setDripper against the proxy contract.\\n    address public dripper;\\n\\n    /// Withdrawal Queue Storage /////\\n\\n    struct WithdrawalQueueMetadata {\\n        // cumulative total of all withdrawal requests included the ones that have already been claimed\\n        uint128 queued;\\n        // cumulative total of all the requests that can be claimed including the ones that have already been claimed\\n        uint128 claimable;\\n        // total of all the requests that have been claimed\\n        uint128 claimed;\\n        // index of the next withdrawal request starting at 0\\n        uint128 nextWithdrawalIndex;\\n    }\\n\\n    /// @notice Global metadata for the withdrawal queue including:\\n    /// queued - cumulative total of all withdrawal requests included the ones that have already been claimed\\n    /// claimable - cumulative total of all the requests that can be claimed including the ones already claimed\\n    /// claimed - total of all the requests that have been claimed\\n    /// nextWithdrawalIndex - index of the next withdrawal request starting at 0\\n    WithdrawalQueueMetadata public withdrawalQueueMetadata;\\n\\n    struct WithdrawalRequest {\\n        address withdrawer;\\n        bool claimed;\\n        uint40 timestamp; // timestamp of the withdrawal request\\n        // Amount of oTokens to redeem. eg OETH\\n        uint128 amount;\\n        // cumulative total of all withdrawal requests including this one.\\n        // this request can be claimed when this queued amount is less than or equal to the queue's claimable amount.\\n        uint128 queued;\\n    }\\n\\n    /// @notice Mapping of withdrawal request indices to the user withdrawal request data\\n    mapping(uint256 => WithdrawalRequest) public withdrawalRequests;\\n\\n    /// @notice Sets a minimum delay that is required to elapse between\\n    ///     requesting async withdrawals and claiming the request.\\n    ///     When set to 0 async withdrawals are disabled.\\n    uint256 public withdrawalClaimDelay;\\n\\n    /// @notice Time in seconds that the vault last rebased yield.\\n    uint64 public lastRebase;\\n\\n    /// @notice Automatic rebase yield calculations. In seconds. Set to 0 or 1 to disable.\\n    uint64 public dripDuration;\\n\\n    /// @notice max rebase percentage per second\\n    ///   Can be used to set maximum yield of the protocol,\\n    ///   spreading out yield over time\\n    uint64 public rebasePerSecondMax;\\n\\n    /// @notice target rebase rate limit, based on past rates and funds available.\\n    uint64 public rebasePerSecondTarget;\\n\\n    uint256 internal constant MAX_REBASE = 0.02 ether;\\n    uint256 internal constant MAX_REBASE_PER_SECOND =\\n        uint256(0.05 ether) / 1 days;\\n\\n    // For future use\\n    uint256[43] private __gap;\\n\\n    // slither-disable-end constable-states\\n    // slither-disable-end uninitialized-state\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58f3046a1b219fd43d234f5374a4ce6ec1d8cb51a837e06eafb5532e05b0f6c1\",\"license\":\"BUSL-1.1\"},\"lib/openzeppelin/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\",\"keccak256\":\"0xd1abd028496aacc3eef98e585a744e1a449dcf9b2e818c59d15d5c0091c3f293\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161271e38038061271e83398101604081905261002f916101b8565b6001600160a01b0381166080819052819061004c90600090610085565b61007e7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92960805161008560201b60201c565b50506101e8565b61008f82826100ac565b60008281526001602052604090206100a7908261014b565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610147576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556101063390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000610160836001600160a01b038416610169565b90505b92915050565b60008181526001830160205260408120546101b057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610163565b506000610163565b6000602082840312156101ca57600080fd5b81516001600160a01b03811681146101e157600080fd5b9392505050565b6080516124a461027a6000396000818161049a01528181610833015281816108ce015281816109a501528181610b8e01528181610c7d01528181610d1a01528181610e6c01528181610f750152818161111e0152818161124b0152818161138a0152818161148a0152818161151601528181611668015281816117ad0152818161197e0152611acf01526124a46000f3fe60806040526004361061016a5760003560e01c80636dea9b19116100d1578063bec3fa171161008a578063f5b541a611610064578063f5b541a614610466578063f9081ba214610488578063fbfa77cf146104bc578063fe5f42ca146104e457600080fd5b8063bec3fa1714610406578063ca15c87314610426578063d547741f1461044657600080fd5b80636dea9b191461034e5780639010d07c1461037657806391d1485414610396578063a217fddf146103b6578063aeaf191b146103cb578063b20e8a86146103f357600080fd5b80632f2ff15d116101235780632f2ff15d1461027e57806336568abe146102a057806339c0b139146102c05780633fc8cef3146103005780634dccc6991461031b5780636b1ed0a41461033b57600080fd5b806301ffc9a7146101765780630978b26b146101ab5780631a3f60f0146101d957806321dce9221461020e578063248a9ca31461022e57806326fc419d1461025e57600080fd5b3661017157005b600080fd5b34801561018257600080fd5b50610196610191366004612031565b61050c565b60405190151581526020015b60405180910390f35b3480156101b757600080fd5b506101cb6101c636600461205b565b610537565b6040519081526020016101a2565b3480156101e557600080fd5b506101f56745849994fc9c7b1581565b60405167ffffffffffffffff90911681526020016101a2565b34801561021a57600080fd5b506101cb61022936600461205b565b610596565b34801561023a57600080fd5b506101cb61024936600461205b565b60009081526020819052604090206001015490565b34801561026a57600080fd5b506101cb61027936600461205b565b6105e2565b34801561028a57600080fd5b5061029e61029936600461208b565b610621565b005b3480156102ac57600080fd5b5061029e6102bb36600461208b565b61064c565b3480156102cc57600080fd5b506102e87380c864704dd06c3693ed5179190786ee38acf83581565b6040516001600160a01b0390911681526020016101a2565b34801561030c57600080fd5b506102e86006602160991b0181565b34801561032757600080fd5b506101cb6103363660046120c5565b6106ca565b61029e61034936600461205b565b610711565b34801561035a57600080fd5b506102e873dbfefd2e8460a6ee4955a68582f85708baea60a381565b34801561038257600080fd5b506102e86103913660046120f5565b610784565b3480156103a257600080fd5b506101966103b136600461208b565b61079c565b3480156103c257600080fd5b506101cb600081565b3480156103d757600080fd5b506102e873d8724322f44e5c58d7a815f542036fb17dbbf83981565b61029e61040136600461205b565b6107c5565b34801561041257600080fd5b5061029e610421366004612117565b610828565b34801561043257600080fd5b506101cb61044136600461205b565b610a25565b34801561045257600080fd5b5061029e61046136600461208b565b610a3c565b34801561047257600080fd5b506101cb60008051602061244f83398151915281565b34801561049457600080fd5b506102e87f000000000000000000000000000000000000000000000000000000000000000081565b3480156104c857600080fd5b506102e87398a0cbef61bd2d21435f433be4cd42b56b38cc9381565b3480156104f057600080fd5b506102e873881e3a65b4d4a04dd529061dd0071cf975f58bcd81565b60006001600160e01b03198216635a05180f60e01b1480610531575061053182610a62565b92915050565b600061055160008051602061244f8339815191523361079c565b6105765760405162461bcd60e51b815260040161056d90612141565b60405180910390fd5b6000610583836001610a97565b905061058e816107c5565b90505b919050565b60006105b060008051602061244f8339815191523361079c565b6105cc5760405162461bcd60e51b815260040161056d90612141565b60006105d7836110ba565b905061058e81610711565b60006105fc60008051602061244f8339815191523361079c565b6106185760405162461bcd60e51b815260040161056d90612141565b610531826110ba565b60008281526020819052604090206001015461063d8133611701565b6106478383611765565b505050565b6001600160a01b03811633146106bc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161056d565b6106c68282611787565b5050565b60006106e460008051602061244f8339815191523361079c565b6107005760405162461bcd60e51b815260040161056d90612141565b61070a8383610a97565b9392505050565b61072960008051602061244f8339815191523361079c565b6107455760405162461bcd60e51b815260040161056d90612141565b61078173881e3a65b4d4a04dd529061dd0071cf975f58bcd6745849994fc9c7b1573d8724322f44e5c58d7a815f542036fb17dbbf839846117a9565b50565b600082815260016020526040812061070a9083611c00565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6107dd60008051602061244f8339815191523361079c565b6107f95760405162461bcd60e51b815260040161056d90612141565b61078173881e3a65b4d4a04dd529061dd0071cf975f58bcd6745849994fc9c7b156006602160991b01846117a9565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108a05760405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206973206e6f7420746865207361666520636f6e747261637400604482015260640161056d565b6001600160a01b03821661091757600081116108bc57476108be565b805b6040519091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015610647573d6000803e3d6000fd5b6000811161098c576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190612178565b61098e565b805b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190612191565b600081815260016020526040812061053190611c0c565b600082815260208190526040902060010154610a588133611701565b6106478383611787565b60006001600160e01b03198216637965db0b60e01b148061053157506301ffc9a760e01b6001600160e01b0319831614610531565b60007380c864704dd06c3693ed5179190786ee38acf8356001600160a01b0316636c7138336040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190612178565b507398a0cbef61bd2d21435f433be4cd42b56b38cc936001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000925073dbfefd2e8460a6ee4955a68582f85708baea60a391506370a0823190602401602060405180830381865afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190612178565b604080517380c864704dd06c3693ed5179190786ee38acf8356024820152604480820188905282518083039091018152606490910182526020810180516001600160e01b031663095ea7b360e01b179052905163468721a760e01b81529192506000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a791610cd39173d8724322f44e5c58d7a815f542036fb17dbbf8399186919082906004016121fe565b6020604051808303816000875af1158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190612191565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77380c864704dd06c3693ed5179190786ee38acf835600063d6e772a460e01b89604051602401610d7991815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b9092168252610dc39392916000906004016121fe565b6020604051808303816000875af1158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190612191565b905080610e555760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206465706f736974206272696467656420574f45544800604482015260640161056d565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152829073dbfefd2e8460a6ee4955a68582f85708baea60a3906370a0823190602401602060405180830381865afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190612178565b610efd919061224f565b91507398a0cbef61bd2d21435f433be4cd42b56b38cc936001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f4e57600080fd5b505af1158015610f62573d6000803e3d6000fd5b5050505083610f7357509050610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77398a0cbef61bd2d21435f433be4cd42b56b38cc936000637cbc237360e01b8687604051602401610fdd929190918252602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b90921682526110279392916000906004016121fe565b6020604051808303816000875af1158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612191565b9050806110b25760405162461bcd60e51b81526020600482015260166024820152752330b4b632b2103a37903932b232b2b69027a2aa243160511b604482015260640161056d565b509392505050565b604080517398a0cbef61bd2d21435f433be4cd42b56b38cc936024820152604480820184905282518083039091018152606490910182526020810180516001600160e01b031663095ea7b360e01b179052905163468721a760e01b815260009182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a791611167916006602160991b019186919082906004016121fe565b6020604051808303816000875af1158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190612191565b9050806111f25760405162461bcd60e51b815260206004820152601660248201527508cc2d2d8cac840e8de40c2e0e0e4deecca40ae8aa8960531b604482015260640161056d565b604080516006602160991b01602482015260448101859052606480820186905282518083039091018152608490910182526020810180516001600160e01b0316630ab714fb60e11b179052905163468721a760e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a7916112a2917398a0cbef61bd2d21435f433be4cd42b56b38cc93916000919082906004016121fe565b6020604051808303816000875af11580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e59190612191565b90508061132b5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379036b4b73a1027a2aa243160611b604482015260640161056d565b604080517380c864704dd06c3693ed5179190786ee38acf8356024820152604480820186905282518083039091018152606490910182526020810180516001600160e01b031663095ea7b360e01b179052905163468721a760e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a7916113e19173dbfefd2e8460a6ee4955a68582f85708baea60a3916000919082906004016121fe565b6020604051808303816000875af1158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190612191565b9050806114735760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20617070726f7665204f45544862000000000000000000604482015260640161056d565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073d8724322f44e5c58d7a815f542036fb17dbbf839906370a0823190602401602060405180830381865afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190612178565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77380c864704dd06c3693ed5179190786ee38acf8356000632579fe8a60e01b8860405160240161157591815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b90921682526115bf9392916000906004016121fe565b6020604051808303816000875af11580156115de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116029190612191565b9150816116515760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f207769746864726177206272696467656420574f455448604482015260640161056d565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152819073d8724322f44e5c58d7a815f542036fb17dbbf839906370a0823190602401602060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef9190612178565b6116f9919061224f565b949350505050565b61170b828261079c565b6106c657611723816001600160a01b03166014611c16565b61172e836020611c16565b60405160200161173f929190612262565b60408051601f198184030181529082905262461bcd60e51b825261056d916004016122d7565b61176f8282611db2565b60008281526001602052604090206106479082611e36565b6117918282611e4b565b60008281526001602052604090206106479082611eb0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a784600063095ea7b360e01b898760405160240161180c9291906001600160a01b03929092168252602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b90921682526118569392916000906004016121fe565b6020604051808303816000875af1158015611875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118999190612191565b9050806118e85760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20617070726f766520746f6b656e000000000000000000604482015260640161056d565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816118ff57905050905060006040518060400160405280866001600160a01b03168152602001858152509050808260008151811061195e5761195e612300565b60209081029190910101526040805160a081019091526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660c08201526000908060e0810160405160208183030381529060405281526020016040516020016119da90602080825260009082015260400190565b604051602081830303815290604052815260200184815260200160006001600160a01b03168152602001611a546040518060200160405280600081525060408051915160248084019190915281518084039091018152604490920190526020810180516001600160e01b03166397a657c960e01b17905290565b90526040516320487ded60e01b81529091506000906001600160a01b038a16906320487ded90611a8a908b908690600401612316565b602060405180830381865afa158015611aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acb9190612178565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a78a836396f4e9f960e01b8c87604051602401611b19929190612316565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b9092168252611b639392916000906004016121fe565b6020604051808303816000875af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba69190612191565b945084611bf55760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2073656e642043434950206d6573736167650000000000604482015260640161056d565b505050505050505050565b600061070a8383611ec5565b6000610531825490565b60606000611c258360026123f7565b611c3090600261240e565b67ffffffffffffffff811115611c4857611c486122ea565b6040519080825280601f01601f191660200182016040528015611c72576020820181803683370190505b509050600360fc1b81600081518110611c8d57611c8d612300565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611cbc57611cbc612300565b60200101906001600160f81b031916908160001a9053506000611ce08460026123f7565b611ceb90600161240e565b90505b6001811115611d63576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d1f57611d1f612300565b1a60f81b828281518110611d3557611d35612300565b60200101906001600160f81b031916908160001a90535060049490941c93611d5c81612421565b9050611cee565b50831561070a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161056d565b611dbc828261079c565b6106c6576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611df23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061070a836001600160a01b038416611eef565b611e55828261079c565b156106c6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061070a836001600160a01b038416611f3e565b6000826000018281548110611edc57611edc612300565b9060005260206000200154905092915050565b6000818152600183016020526040812054611f3657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610531565b506000610531565b60008181526001830160205260408120548015612027576000611f6260018361224f565b8554909150600090611f769060019061224f565b9050818114611fdb576000866000018281548110611f9657611f96612300565b9060005260206000200154905080876000018481548110611fb957611fb9612300565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fec57611fec612438565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610531565b6000915050610531565b60006020828403121561204357600080fd5b81356001600160e01b03198116811461070a57600080fd5b60006020828403121561206d57600080fd5b5035919050565b80356001600160a01b038116811461059157600080fd5b6000806040838503121561209e57600080fd5b823591506120ae60208401612074565b90509250929050565b801515811461078157600080fd5b600080604083850312156120d857600080fd5b8235915060208301356120ea816120b7565b809150509250929050565b6000806040838503121561210857600080fd5b50508035926020909101359150565b6000806040838503121561212a57600080fd5b61213383612074565b946020939093013593505050565b60208082526019908201527f43616c6c6572206973206e6f7420616e206f70657261746f7200000000000000604082015260600190565b60006020828403121561218a57600080fd5b5051919050565b6000602082840312156121a357600080fd5b815161070a816120b7565b60005b838110156121c95781810151838201526020016121b1565b50506000910152565b600081518084526121ea8160208601602086016121ae565b601f01601f19169290920160200192915050565b60018060a01b038516815283602082015260806040820152600061222560808301856121d2565b905060ff8316606083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561053157610531612239565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161229a8160178501602088016121ae565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516122cb8160288401602088016121ae565b01602801949350505050565b60208152600061070a60208301846121d2565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff83168152604060208201526000825160a0604084015261234260e08401826121d2565b90506020840151603f1984830301606085015261235f82826121d2565b6040860151858203603f19016080870152805180835260209182019450600093509101905b808310156123bb57835180516001600160a01b03168352602090810151818401529093019260019290920191604090910190612384565b5060608601516001600160a01b031660a08601526080860151858203603f190160c087015292506123ec81846121d2565b979650505050505050565b808202811582820484141761053157610531612239565b8082018082111561053157610531612239565b60008161243057612430612239565b506000190190565b634e487b7160e01b600052603160045260246000fdfe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a26469706673582212205d9d84fc52d2b48af4f2bd3bfc9f492c14dc3e74b1fc79cde395791d48aacea964736f6c634300081c0033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c80636dea9b19116100d1578063bec3fa171161008a578063f5b541a611610064578063f5b541a614610466578063f9081ba214610488578063fbfa77cf146104bc578063fe5f42ca146104e457600080fd5b8063bec3fa1714610406578063ca15c87314610426578063d547741f1461044657600080fd5b80636dea9b191461034e5780639010d07c1461037657806391d1485414610396578063a217fddf146103b6578063aeaf191b146103cb578063b20e8a86146103f357600080fd5b80632f2ff15d116101235780632f2ff15d1461027e57806336568abe146102a057806339c0b139146102c05780633fc8cef3146103005780634dccc6991461031b5780636b1ed0a41461033b57600080fd5b806301ffc9a7146101765780630978b26b146101ab5780631a3f60f0146101d957806321dce9221461020e578063248a9ca31461022e57806326fc419d1461025e57600080fd5b3661017157005b600080fd5b34801561018257600080fd5b50610196610191366004612031565b61050c565b60405190151581526020015b60405180910390f35b3480156101b757600080fd5b506101cb6101c636600461205b565b610537565b6040519081526020016101a2565b3480156101e557600080fd5b506101f56745849994fc9c7b1581565b60405167ffffffffffffffff90911681526020016101a2565b34801561021a57600080fd5b506101cb61022936600461205b565b610596565b34801561023a57600080fd5b506101cb61024936600461205b565b60009081526020819052604090206001015490565b34801561026a57600080fd5b506101cb61027936600461205b565b6105e2565b34801561028a57600080fd5b5061029e61029936600461208b565b610621565b005b3480156102ac57600080fd5b5061029e6102bb36600461208b565b61064c565b3480156102cc57600080fd5b506102e87380c864704dd06c3693ed5179190786ee38acf83581565b6040516001600160a01b0390911681526020016101a2565b34801561030c57600080fd5b506102e86006602160991b0181565b34801561032757600080fd5b506101cb6103363660046120c5565b6106ca565b61029e61034936600461205b565b610711565b34801561035a57600080fd5b506102e873dbfefd2e8460a6ee4955a68582f85708baea60a381565b34801561038257600080fd5b506102e86103913660046120f5565b610784565b3480156103a257600080fd5b506101966103b136600461208b565b61079c565b3480156103c257600080fd5b506101cb600081565b3480156103d757600080fd5b506102e873d8724322f44e5c58d7a815f542036fb17dbbf83981565b61029e61040136600461205b565b6107c5565b34801561041257600080fd5b5061029e610421366004612117565b610828565b34801561043257600080fd5b506101cb61044136600461205b565b610a25565b34801561045257600080fd5b5061029e61046136600461208b565b610a3c565b34801561047257600080fd5b506101cb60008051602061244f83398151915281565b34801561049457600080fd5b506102e87f000000000000000000000000000000000000000000000000000000000000000081565b3480156104c857600080fd5b506102e87398a0cbef61bd2d21435f433be4cd42b56b38cc9381565b3480156104f057600080fd5b506102e873881e3a65b4d4a04dd529061dd0071cf975f58bcd81565b60006001600160e01b03198216635a05180f60e01b1480610531575061053182610a62565b92915050565b600061055160008051602061244f8339815191523361079c565b6105765760405162461bcd60e51b815260040161056d90612141565b60405180910390fd5b6000610583836001610a97565b905061058e816107c5565b90505b919050565b60006105b060008051602061244f8339815191523361079c565b6105cc5760405162461bcd60e51b815260040161056d90612141565b60006105d7836110ba565b905061058e81610711565b60006105fc60008051602061244f8339815191523361079c565b6106185760405162461bcd60e51b815260040161056d90612141565b610531826110ba565b60008281526020819052604090206001015461063d8133611701565b6106478383611765565b505050565b6001600160a01b03811633146106bc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161056d565b6106c68282611787565b5050565b60006106e460008051602061244f8339815191523361079c565b6107005760405162461bcd60e51b815260040161056d90612141565b61070a8383610a97565b9392505050565b61072960008051602061244f8339815191523361079c565b6107455760405162461bcd60e51b815260040161056d90612141565b61078173881e3a65b4d4a04dd529061dd0071cf975f58bcd6745849994fc9c7b1573d8724322f44e5c58d7a815f542036fb17dbbf839846117a9565b50565b600082815260016020526040812061070a9083611c00565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6107dd60008051602061244f8339815191523361079c565b6107f95760405162461bcd60e51b815260040161056d90612141565b61078173881e3a65b4d4a04dd529061dd0071cf975f58bcd6745849994fc9c7b156006602160991b01846117a9565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108a05760405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206973206e6f7420746865207361666520636f6e747261637400604482015260640161056d565b6001600160a01b03821661091757600081116108bc57476108be565b805b6040519091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015610647573d6000803e3d6000fd5b6000811161098c576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190612178565b61098e565b805b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190612191565b600081815260016020526040812061053190611c0c565b600082815260208190526040902060010154610a588133611701565b6106478383611787565b60006001600160e01b03198216637965db0b60e01b148061053157506301ffc9a760e01b6001600160e01b0319831614610531565b60007380c864704dd06c3693ed5179190786ee38acf8356001600160a01b0316636c7138336040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b119190612178565b507398a0cbef61bd2d21435f433be4cd42b56b38cc936001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000925073dbfefd2e8460a6ee4955a68582f85708baea60a391506370a0823190602401602060405180830381865afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190612178565b604080517380c864704dd06c3693ed5179190786ee38acf8356024820152604480820188905282518083039091018152606490910182526020810180516001600160e01b031663095ea7b360e01b179052905163468721a760e01b81529192506000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a791610cd39173d8724322f44e5c58d7a815f542036fb17dbbf8399186919082906004016121fe565b6020604051808303816000875af1158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190612191565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77380c864704dd06c3693ed5179190786ee38acf835600063d6e772a460e01b89604051602401610d7991815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b9092168252610dc39392916000906004016121fe565b6020604051808303816000875af1158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190612191565b905080610e555760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206465706f736974206272696467656420574f45544800604482015260640161056d565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152829073dbfefd2e8460a6ee4955a68582f85708baea60a3906370a0823190602401602060405180830381865afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190612178565b610efd919061224f565b91507398a0cbef61bd2d21435f433be4cd42b56b38cc936001600160a01b031663af14052c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f4e57600080fd5b505af1158015610f62573d6000803e3d6000fd5b5050505083610f7357509050610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77398a0cbef61bd2d21435f433be4cd42b56b38cc936000637cbc237360e01b8687604051602401610fdd929190918252602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b90921682526110279392916000906004016121fe565b6020604051808303816000875af1158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612191565b9050806110b25760405162461bcd60e51b81526020600482015260166024820152752330b4b632b2103a37903932b232b2b69027a2aa243160511b604482015260640161056d565b509392505050565b604080517398a0cbef61bd2d21435f433be4cd42b56b38cc936024820152604480820184905282518083039091018152606490910182526020810180516001600160e01b031663095ea7b360e01b179052905163468721a760e01b815260009182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a791611167916006602160991b019186919082906004016121fe565b6020604051808303816000875af1158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190612191565b9050806111f25760405162461bcd60e51b815260206004820152601660248201527508cc2d2d8cac840e8de40c2e0e0e4deecca40ae8aa8960531b604482015260640161056d565b604080516006602160991b01602482015260448101859052606480820186905282518083039091018152608490910182526020810180516001600160e01b0316630ab714fb60e11b179052905163468721a760e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a7916112a2917398a0cbef61bd2d21435f433be4cd42b56b38cc93916000919082906004016121fe565b6020604051808303816000875af11580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e59190612191565b90508061132b5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379036b4b73a1027a2aa243160611b604482015260640161056d565b604080517380c864704dd06c3693ed5179190786ee38acf8356024820152604480820186905282518083039091018152606490910182526020810180516001600160e01b031663095ea7b360e01b179052905163468721a760e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163468721a7916113e19173dbfefd2e8460a6ee4955a68582f85708baea60a3916000919082906004016121fe565b6020604051808303816000875af1158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190612191565b9050806114735760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20617070726f7665204f45544862000000000000000000604482015260640161056d565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073d8724322f44e5c58d7a815f542036fb17dbbf839906370a0823190602401602060405180830381865afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190612178565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77380c864704dd06c3693ed5179190786ee38acf8356000632579fe8a60e01b8860405160240161157591815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b90921682526115bf9392916000906004016121fe565b6020604051808303816000875af11580156115de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116029190612191565b9150816116515760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f207769746864726177206272696467656420574f455448604482015260640161056d565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152819073d8724322f44e5c58d7a815f542036fb17dbbf839906370a0823190602401602060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef9190612178565b6116f9919061224f565b949350505050565b61170b828261079c565b6106c657611723816001600160a01b03166014611c16565b61172e836020611c16565b60405160200161173f929190612262565b60408051601f198184030181529082905262461bcd60e51b825261056d916004016122d7565b61176f8282611db2565b60008281526001602052604090206106479082611e36565b6117918282611e4b565b60008281526001602052604090206106479082611eb0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a784600063095ea7b360e01b898760405160240161180c9291906001600160a01b03929092168252602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b90921682526118569392916000906004016121fe565b6020604051808303816000875af1158015611875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118999190612191565b9050806118e85760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20617070726f766520746f6b656e000000000000000000604482015260640161056d565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816118ff57905050905060006040518060400160405280866001600160a01b03168152602001858152509050808260008151811061195e5761195e612300565b60209081029190910101526040805160a081019091526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660c08201526000908060e0810160405160208183030381529060405281526020016040516020016119da90602080825260009082015260400190565b604051602081830303815290604052815260200184815260200160006001600160a01b03168152602001611a546040518060200160405280600081525060408051915160248084019190915281518084039091018152604490920190526020810180516001600160e01b03166397a657c960e01b17905290565b90526040516320487ded60e01b81529091506000906001600160a01b038a16906320487ded90611a8a908b908690600401612316565b602060405180830381865afa158015611aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acb9190612178565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a78a836396f4e9f960e01b8c87604051602401611b19929190612316565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b9092168252611b639392916000906004016121fe565b6020604051808303816000875af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba69190612191565b945084611bf55760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f2073656e642043434950206d6573736167650000000000604482015260640161056d565b505050505050505050565b600061070a8383611ec5565b6000610531825490565b60606000611c258360026123f7565b611c3090600261240e565b67ffffffffffffffff811115611c4857611c486122ea565b6040519080825280601f01601f191660200182016040528015611c72576020820181803683370190505b509050600360fc1b81600081518110611c8d57611c8d612300565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611cbc57611cbc612300565b60200101906001600160f81b031916908160001a9053506000611ce08460026123f7565b611ceb90600161240e565b90505b6001811115611d63576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d1f57611d1f612300565b1a60f81b828281518110611d3557611d35612300565b60200101906001600160f81b031916908160001a90535060049490941c93611d5c81612421565b9050611cee565b50831561070a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161056d565b611dbc828261079c565b6106c6576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611df23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061070a836001600160a01b038416611eef565b611e55828261079c565b156106c6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061070a836001600160a01b038416611f3e565b6000826000018281548110611edc57611edc612300565b9060005260206000200154905092915050565b6000818152600183016020526040812054611f3657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610531565b506000610531565b60008181526001830160205260408120548015612027576000611f6260018361224f565b8554909150600090611f769060019061224f565b9050818114611fdb576000866000018281548110611f9657611f96612300565b9060005260206000200154905080876000018481548110611fb957611fb9612300565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fec57611fec612438565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610531565b6000915050610531565b60006020828403121561204357600080fd5b81356001600160e01b03198116811461070a57600080fd5b60006020828403121561206d57600080fd5b5035919050565b80356001600160a01b038116811461059157600080fd5b6000806040838503121561209e57600080fd5b823591506120ae60208401612074565b90509250929050565b801515811461078157600080fd5b600080604083850312156120d857600080fd5b8235915060208301356120ea816120b7565b809150509250929050565b6000806040838503121561210857600080fd5b50508035926020909101359150565b6000806040838503121561212a57600080fd5b61213383612074565b946020939093013593505050565b60208082526019908201527f43616c6c6572206973206e6f7420616e206f70657261746f7200000000000000604082015260600190565b60006020828403121561218a57600080fd5b5051919050565b6000602082840312156121a357600080fd5b815161070a816120b7565b60005b838110156121c95781810151838201526020016121b1565b50506000910152565b600081518084526121ea8160208601602086016121ae565b601f01601f19169290920160200192915050565b60018060a01b038516815283602082015260806040820152600061222560808301856121d2565b905060ff8316606083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561053157610531612239565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161229a8160178501602088016121ae565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516122cb8160288401602088016121ae565b01602801949350505050565b60208152600061070a60208301846121d2565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff83168152604060208201526000825160a0604084015261234260e08401826121d2565b90506020840151603f1984830301606085015261235f82826121d2565b6040860151858203603f19016080870152805180835260209182019450600093509101905b808310156123bb57835180516001600160a01b03168352602090810151818401529093019260019290920191604090910190612384565b5060608601516001600160a01b031660a08601526080860151858203603f190160c087015292506123ec81846121d2565b979650505050505050565b808202811582820484141761053157610531612239565b8082018082111561053157610531612239565b60008161243057612430612239565b506000190190565b634e487b7160e01b600052603160045260246000fdfe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a26469706673582212205d9d84fc52d2b48af4f2bd3bfc9f492c14dc3e74b1fc79cde395791d48aacea964736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "bridgeWETHToEthereum(uint256)": {
        "details": "Bridges WETH to Ethereum.",
        "params": {
          "wethAmount": "Amount of WETH to bridge."
        }
      },
      "bridgeWOETHToEthereum(uint256)": {
        "details": "Bridges wOETH to Ethereum.",
        "params": {
          "woethAmount": "Amount of wOETH to bridge."
        }
      },
      "depositWETHAndRedeemWOETH(uint256)": {
        "details": "Deposits WETH into the Vault and redeems wOETH from the bridgedWOETH strategy.",
        "params": {
          "wethAmount": "Amount of WETH to deposit."
        },
        "returns": {
          "_0": "Amount of wOETH received."
        }
      },
      "depositWOETH(uint256,bool)": {
        "details": "Deposits wOETH into the bridgedWOETH strategy.",
        "params": {
          "redeemWithVault": "Whether to redeem the wOETH for WETH using the Vault.",
          "woethAmount": "Amount of wOETH to deposit."
        },
        "returns": {
          "_0": "Amount of WETH received."
        }
      },
      "depositWOETHAndBridgeWETH(uint256)": {
        "details": "Deposits wOETH into the bridgedWOETH strategy and bridges it to Ethereum.",
        "params": {
          "woethAmount": "Amount of wOETH to deposit."
        },
        "returns": {
          "_0": "Amount of WETH received."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferTokens(address,uint256)": {
        "details": "Helps recovering any tokens accidentally sent to this module.",
        "params": {
          "amount": "Amount to transfer. 0 to transfer all balance.",
          "token": "Token to transfer. 0x0 to transfer Native token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "contracts/automation/BaseBridgeHelperModule.sol:BaseBridgeHelperModule",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)127_storage)"
      },
      {
        "astId": 435,
        "contract": "contracts/automation/BaseBridgeHelperModule.sol:BaseBridgeHelperModule",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2541_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2541_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2541_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)127_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)127_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2541_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2540,
            "contract": "contracts/automation/BaseBridgeHelperModule.sol:BaseBridgeHelperModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2240_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)127_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 124,
            "contract": "contracts/automation/BaseBridgeHelperModule.sol:BaseBridgeHelperModule",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 126,
            "contract": "contracts/automation/BaseBridgeHelperModule.sol:BaseBridgeHelperModule",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2240_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2235,
            "contract": "contracts/automation/BaseBridgeHelperModule.sol:BaseBridgeHelperModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2239,
            "contract": "contracts/automation/BaseBridgeHelperModule.sol:BaseBridgeHelperModule",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
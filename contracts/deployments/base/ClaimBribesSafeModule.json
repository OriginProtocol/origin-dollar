{
  "address": "0x5bd73897E92Ecf3E6295FFe5C1104E99000d2c98",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bribePool",
          "type": "address"
        }
      ],
      "name": "BribePoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bribePool",
          "type": "address"
        }
      ],
      "name": "BribePoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "NFTIdAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "NFTIdRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "addBribePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "addNFTIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bribePool",
          "type": "address"
        }
      ],
      "name": "bribePoolExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftIndexStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftIndexEnd",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "silent",
          "type": "bool"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNFTIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBribePoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTIdsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "nftIdExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "removeBribePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "removeNFTIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeAddress",
      "outputs": [
        {
          "internalType": "contract ISafe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "contract IAerodromeVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1242807776f8777c0439fa181e29a4effb3caa613cabbaa3232f535236dc2061",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0x5bd73897E92Ecf3E6295FFe5C1104E99000d2c98",
    "transactionIndex": 559,
    "gasUsed": "2090845",
    "logsBloom": "0x00000004000001000000000000000000000000000000000000000000000000010000000000000000000000000001000000000000020000000281000010000000000400000000000000000000000000000000000000000000000000000000000000000000020000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000004008000000000000000000000000000000000000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9647d2ff1a0aa3fecdb8150ad8398b34959a24ddc4f97530e63c4d71364cae0b",
    "transactionHash": "0x1242807776f8777c0439fa181e29a4effb3caa613cabbaa3232f535236dc2061",
    "logs": [
      {
        "transactionIndex": 559,
        "blockNumber": 30051208,
        "transactionHash": "0x1242807776f8777c0439fa181e29a4effb3caa613cabbaa3232f535236dc2061",
        "address": "0x5bd73897E92Ecf3E6295FFe5C1104E99000d2c98",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b6d85ce798660076152d6fd3a484129668839c95",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 275,
        "blockHash": "0x9647d2ff1a0aa3fecdb8150ad8398b34959a24ddc4f97530e63c4d71364cae0b"
      },
      {
        "transactionIndex": 559,
        "blockNumber": 30051208,
        "transactionHash": "0x1242807776f8777c0439fa181e29a4effb3caa613cabbaa3232f535236dc2061",
        "address": "0x5bd73897E92Ecf3E6295FFe5C1104E99000d2c98",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x000000000000000000000000b6d85ce798660076152d6fd3a484129668839c95",
          "0x00000000000000000000000058890a9cb27586e83cb51d2d26bbe18a1a647245"
        ],
        "data": "0x",
        "logIndex": 276,
        "blockHash": "0x9647d2ff1a0aa3fecdb8150ad8398b34959a24ddc4f97530e63c4d71364cae0b"
      }
    ],
    "blockNumber": 30051208,
    "cumulativeGasUsed": "52468321",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb6D85Ce798660076152d6FD3a484129668839c95",
    "0x16613524e02ad97eDfeF371bC883F2F5d6C480A5",
    "0xebf418fe2512e7e6bd9b87a8f0f294acdc67e6b4"
  ],
  "numDeployments": 1,
  "solcInputHash": "02e8cd78d9c969b3971fd23128e9de2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribePool\",\"type\":\"address\"}],\"name\":\"BribePoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribePool\",\"type\":\"address\"}],\"name\":\"BribePoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NFTIdAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NFTIdRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"addBribePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"addNFTIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bribePool\",\"type\":\"address\"}],\"name\":\"bribePoolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftIndexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftIndexEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"silent\",\"type\":\"bool\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNFTIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBribePoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTIdsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"nftIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"removeBribePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"removeNFTIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeAddress\",\"outputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IAerodromeVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addNFTIds(uint256[])\":{\"details\":\"Add NFT IDs to the list\",\"params\":{\"_nftIds\":\"The NFT IDs to add\"}},\"bribePoolExists(address)\":{\"details\":\"Check if a bribe pool exists\",\"params\":{\"bribePool\":\"The address of the pool to check\"},\"returns\":{\"_0\":\"true if the pool exists, false otherwise\"}},\"claimBribes(uint256,uint256,bool)\":{\"details\":\"Claim bribes for a range of NFTs\",\"params\":{\"nftIndexEnd\":\"The end index of the NFTs\",\"nftIndexStart\":\"The start index of the NFTs\",\"silent\":\"Doesn't revert if the claim fails when true\"}},\"getAllNFTIds()\":{\"details\":\"Get all NFT IDs\",\"returns\":{\"_0\":\"The NFT IDs\"}},\"getBribePoolsLength()\":{\"details\":\"Get the length of the bribe pools list\",\"returns\":{\"_0\":\"The length of the bribe pools list\"}},\"getNFTIdsLength()\":{\"details\":\"Get the length of the nftIds list\",\"returns\":{\"_0\":\"The length of the nftIds list\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"nftIdExists(uint256)\":{\"details\":\"Check if a NFT exists on the list\",\"params\":{\"nftId\":\"The NFT ID to check\"},\"returns\":{\"_0\":\"true if the NFT ID exists, false otherwise\"}},\"removeBribePool(address)\":{\"details\":\"Remove a bribe pool from the list\",\"params\":{\"_poolAddress\":\"The address of the pool to remove\"}},\"removeNFTIds(uint256[])\":{\"details\":\"Remove NFT IDs from the list\",\"params\":{\"_nftIds\":\"The NFT IDs to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateRewardTokenAddresses()\":{\"details\":\"Update the reward token addresses for all pools\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automation/ClaimBribesSafeModule.sol\":\"ClaimBribesSafeModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x1304796e9cdc64294735b4222849a240363b2aff374bb58b7c728f8dc0f4aa75\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/automation/ClaimBribesSafeModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ICLGauge } from \\\"../interfaces/aerodrome/ICLGauge.sol\\\";\\nimport { ICLPool } from \\\"../interfaces/aerodrome/ICLPool.sol\\\";\\n\\nstruct BribePoolInfo {\\n    address poolAddress;\\n    address rewardContractAddress;\\n    address[] rewardTokens;\\n}\\n\\ninterface IAerodromeVoter {\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n}\\n\\ninterface IVeNFT {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\ninterface ISafe {\\n    function execTransactionFromModule(\\n        address,\\n        uint256,\\n        bytes memory,\\n        uint8\\n    ) external returns (bool);\\n}\\n\\ninterface ICLRewardContract {\\n    function rewards(uint256 index) external view returns (address);\\n\\n    function rewardsListLength() external view returns (uint256);\\n}\\n\\ncontract ClaimBribesSafeModule is AccessControlEnumerable {\\n    ISafe public immutable safeAddress;\\n    IAerodromeVoter public immutable voter;\\n    address public immutable veNFT;\\n\\n    uint256[] nftIds;\\n    mapping(uint256 => uint256) nftIdIndex;\\n\\n    BribePoolInfo[] bribePools;\\n    mapping(address => uint256) bribePoolIndex;\\n\\n    event NFTIdAdded(uint256 nftId);\\n    event NFTIdRemoved(uint256 nftId);\\n\\n    event BribePoolAdded(address bribePool);\\n    event BribePoolRemoved(address bribePool);\\n\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\n    modifier onlySafe() {\\n        require(\\n            msg.sender == address(safeAddress),\\n            \\\"Caller is not the Gnosis Safe\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        require(\\n            hasRole(EXECUTOR_ROLE, msg.sender),\\n            \\\"Caller is not the Executor\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _safeAddress,\\n        address _voter,\\n        address _veNFT\\n    ) {\\n        safeAddress = ISafe(_safeAddress);\\n        voter = IAerodromeVoter(_voter);\\n        veNFT = _veNFT;\\n\\n        // Safe is the admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, _safeAddress);\\n        _setupRole(EXECUTOR_ROLE, _safeAddress);\\n    }\\n\\n    /**\\n     * @dev Claim bribes for a range of NFTs\\n     * @param nftIndexStart The start index of the NFTs\\n     * @param nftIndexEnd The end index of the NFTs\\n     * @param silent Doesn't revert if the claim fails when true\\n     */\\n    function claimBribes(\\n        uint256 nftIndexStart,\\n        uint256 nftIndexEnd,\\n        bool silent\\n    ) external onlyExecutor {\\n        if (nftIndexEnd < nftIndexStart) {\\n            (nftIndexStart, nftIndexEnd) = (nftIndexEnd, nftIndexStart);\\n        }\\n        uint256 nftCount = nftIds.length;\\n        nftIndexEnd = nftCount < nftIndexEnd ? nftCount : nftIndexEnd;\\n\\n        (\\n            address[] memory rewardContractAddresses,\\n            address[][] memory rewardTokens\\n        ) = _getRewardsInfoArray();\\n\\n        for (uint256 i = nftIndexStart; i < nftIndexEnd; i++) {\\n            uint256 nftId = nftIds[i];\\n            bool success = ISafe(safeAddress).execTransactionFromModule(\\n                address(voter),\\n                0, // Value\\n                abi.encodeWithSelector(\\n                    IAerodromeVoter.claimBribes.selector,\\n                    rewardContractAddresses,\\n                    rewardTokens,\\n                    nftId\\n                ),\\n                0 // Call\\n            );\\n\\n            require(success || silent, \\\"ClaimBribes failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the reward contract address and reward tokens for all pools\\n     * @return rewardContractAddresses The reward contract addresses\\n     * @return rewardTokens The reward tokens\\n     */\\n    function _getRewardsInfoArray()\\n        internal\\n        view\\n        returns (\\n            address[] memory rewardContractAddresses,\\n            address[][] memory rewardTokens\\n        )\\n    {\\n        BribePoolInfo[] memory _bribePools = bribePools;\\n        uint256 bribePoolCount = _bribePools.length;\\n        rewardContractAddresses = new address[](bribePoolCount);\\n        rewardTokens = new address[][](bribePoolCount);\\n\\n        for (uint256 i = 0; i < bribePoolCount; i++) {\\n            rewardContractAddresses[i] = _bribePools[i].rewardContractAddress;\\n            rewardTokens[i] = _bribePools[i].rewardTokens;\\n        }\\n    }\\n\\n    /***************************************\\n                NFT Management\\n    ****************************************/\\n    /**\\n     * @dev Add NFT IDs to the list\\n     * @param _nftIds The NFT IDs to add\\n     */\\n    function addNFTIds(uint256[] memory _nftIds) external onlySafe {\\n        for (uint256 i = 0; i < _nftIds.length; i++) {\\n            uint256 nftId = _nftIds[i];\\n            if (nftIdExists(nftId)) {\\n                // If it already exists, skip\\n                continue;\\n            }\\n\\n            // Make sure the NFT is owned by the Safe\\n            require(\\n                IVeNFT(veNFT).ownerOf(nftId) == address(safeAddress),\\n                \\\"NFT not owned by safe\\\"\\n            );\\n\\n            nftIdIndex[nftId] = nftIds.length;\\n            nftIds.push(nftId);\\n\\n            emit NFTIdAdded(nftId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove NFT IDs from the list\\n     * @param _nftIds The NFT IDs to remove\\n     */\\n    function removeNFTIds(uint256[] memory _nftIds) external onlySafe {\\n        for (uint256 i = 0; i < _nftIds.length; i++) {\\n            uint256 nftId = _nftIds[i];\\n            if (!nftIdExists(nftId)) {\\n                // If it doesn't exist, skip\\n                continue;\\n            }\\n\\n            uint256 index = nftIdIndex[nftId];\\n            uint256 lastNftId = nftIds[nftIds.length - 1];\\n            nftIds[index] = lastNftId;\\n            nftIdIndex[lastNftId] = index;\\n            nftIds.pop();\\n\\n            emit NFTIdRemoved(nftId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if a NFT exists on the list\\n     * @param nftId The NFT ID to check\\n     * @return true if the NFT ID exists, false otherwise\\n     */\\n    function nftIdExists(uint256 nftId) public view returns (bool) {\\n        uint256 index = nftIdIndex[nftId];\\n        uint256[] memory _nftIds = nftIds;\\n        return (index < _nftIds.length) && _nftIds[index] == nftId;\\n    }\\n\\n    /**\\n     * @dev Get the length of the nftIds list\\n     * @return The length of the nftIds list\\n     */\\n    function getNFTIdsLength() external view returns (uint256) {\\n        return nftIds.length;\\n    }\\n\\n    /**\\n     * @dev Get all NFT IDs\\n     * @return The NFT IDs\\n     */\\n    function getAllNFTIds() external view returns (uint256[] memory) {\\n        return nftIds;\\n    }\\n\\n    /***************************************\\n            Bribe Pool Management\\n    ****************************************/\\n    // @dev Whitelist a pool to claim bribes from\\n    // @param _poolAddress The address of the pool to whitelist\\n    function addBribePool(address _poolAddress) external onlySafe {\\n        // Find the gauge address\\n        address _gaugeAddress = ICLPool(_poolAddress).gauge();\\n        // And the reward contract address\\n        address _rewardContractAddress = ICLGauge(_gaugeAddress)\\n            .feesVotingReward();\\n\\n        BribePoolInfo memory bribePool = BribePoolInfo({\\n            poolAddress: _poolAddress,\\n            rewardContractAddress: _rewardContractAddress,\\n            rewardTokens: _getRewardTokenAddresses(_rewardContractAddress)\\n        });\\n\\n        if (bribePoolExists(_poolAddress)) {\\n            // Update if it already exists\\n            bribePools[bribePoolIndex[_poolAddress]] = bribePool;\\n        } else {\\n            // If not, Append to the list\\n            bribePoolIndex[_poolAddress] = bribePools.length;\\n            bribePools.push(bribePool);\\n        }\\n\\n        emit BribePoolAdded(_poolAddress);\\n    }\\n\\n    /**\\n     * @dev Update the reward token addresses for all pools\\n     */\\n    function updateRewardTokenAddresses() external onlyExecutor {\\n        BribePoolInfo[] storage _bribePools = bribePools;\\n        for (uint256 i = 0; i < _bribePools.length; i++) {\\n            BribePoolInfo storage bribePool = _bribePools[i];\\n            bribePool.rewardTokens = _getRewardTokenAddresses(\\n                bribePool.rewardContractAddress\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the reward token addresses for a given reward contract address\\n     * @param _rewardContractAddress The address of the reward contract\\n     * @return _rewardTokens The reward token addresses\\n     */\\n    function _getRewardTokenAddresses(address _rewardContractAddress)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory _rewardTokens = new address[](\\n            ICLRewardContract(_rewardContractAddress).rewardsListLength()\\n        );\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            _rewardTokens[i] = ICLRewardContract(_rewardContractAddress)\\n                .rewards(i);\\n        }\\n\\n        return _rewardTokens;\\n    }\\n\\n    /**\\n     * @dev Remove a bribe pool from the list\\n     * @param _poolAddress The address of the pool to remove\\n     */\\n    function removeBribePool(address _poolAddress) external onlySafe {\\n        if (!bribePoolExists(_poolAddress)) {\\n            // If it doesn't exist, skip\\n            return;\\n        }\\n\\n        uint256 index = bribePoolIndex[_poolAddress];\\n        BribePoolInfo memory lastBribePool = bribePools[bribePools.length - 1];\\n        bribePools[index] = lastBribePool;\\n        bribePoolIndex[lastBribePool.poolAddress] = index;\\n        bribePools.pop();\\n\\n        emit BribePoolRemoved(_poolAddress);\\n    }\\n\\n    /**\\n     * @dev Check if a bribe pool exists\\n     * @param bribePool The address of the pool to check\\n     * @return true if the pool exists, false otherwise\\n     */\\n    function bribePoolExists(address bribePool) public view returns (bool) {\\n        BribePoolInfo[] memory _bribePools = bribePools;\\n        uint256 poolIndex = bribePoolIndex[bribePool];\\n        return\\n            poolIndex < _bribePools.length &&\\n            _bribePools[poolIndex].poolAddress == bribePool;\\n    }\\n\\n    /**\\n     * @dev Get the length of the bribe pools list\\n     * @return The length of the bribe pools list\\n     */\\n    function getBribePoolsLength() external view returns (uint256) {\\n        return bribePools.length;\\n    }\\n}\\n\",\"keccak256\":\"0x0455dd4f71269c34c3fe5b58257d49fdacf41602709081e6aea5d147171b23cc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/aerodrome/ICLGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ICLGauge {\\n    /// @notice Returns the claimable rewards for a given account and tokenId\\n    /// @dev Throws if account is not the position owner\\n    /// @dev pool.updateRewardsGrowthGlobal() needs to be called first, to return the correct claimable rewards\\n    /// @param account The address of the user\\n    /// @param tokenId The tokenId of the position\\n    /// @return The amount of claimable reward\\n    function earned(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Retrieve rewards for all tokens owned by an account\\n    /// @dev Throws if not called by the voter\\n    /// @param account The account of the user\\n    function getReward(address account) external;\\n\\n    /// @notice Retrieve rewards for a tokenId\\n    /// @dev Throws if not called by the position owner\\n    /// @param tokenId The tokenId of the position\\n    function getReward(uint256 tokenId) external;\\n\\n    /// @notice Notifies gauge of gauge rewards.\\n    /// @param amount Amount of gauge rewards (emissions) to notify. Must be greater than 604_800.\\n    function notifyRewardAmount(uint256 amount) external;\\n\\n    /// @dev Notifies gauge of gauge rewards without distributing its fees.\\n    ///      Assumes gauge reward tokens is 18 decimals.\\n    ///      If not 18 decimals, rewardRate may have rounding issues.\\n    /// @param amount Amount of gauge rewards (emissions) to notify. Must be greater than 604_800.\\n    function notifyRewardWithoutClaim(uint256 amount) external;\\n\\n    /// @notice Used to deposit a CL position into the gauge\\n    /// @notice Allows the user to receive emissions instead of fees\\n    /// @param tokenId The tokenId of the position\\n    function deposit(uint256 tokenId) external;\\n\\n    /// @notice Used to withdraw a CL position from the gauge\\n    /// @notice Allows the user to receive fees instead of emissions\\n    /// @notice Outstanding emissions will be collected on withdrawal\\n    /// @param tokenId The tokenId of the position\\n    function withdraw(uint256 tokenId) external;\\n\\n    // /// @notice Fetch all tokenIds staked by a given account\\n    // /// @param depositor The address of the user\\n    // /// @return The tokenIds of the staked positions\\n    // function stakedValues(address depositor) external view returns (uint256[] memory);\\n\\n    // /// @notice Fetch a staked tokenId by index\\n    // /// @param depositor The address of the user\\n    // /// @param index The index of the staked tokenId\\n    // /// @return The tokenId of the staked position\\n    // function stakedByIndex(address depositor, uint256 index) external view returns (uint256);\\n\\n    // /// @notice Check whether a position is staked in the gauge by a certain user\\n    // /// @param depositor The address of the user\\n    // /// @param tokenId The tokenId of the position\\n    // /// @return Whether the position is staked in the gauge\\n    // function stakedContains(address depositor, uint256 tokenId) external view returns (bool);\\n\\n    // /// @notice The amount of positions staked in the gauge by a certain user\\n    // /// @param depositor The address of the user\\n    // /// @return The amount of positions staked in the gauge\\n    // function stakedLength(address depositor) external view returns (uint256);\\n\\n    function feesVotingReward() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3269108fabb9d276e1477fa063571ff0918b9ba16c86859dcbeb26a07fb42bca\",\"license\":\"MIT\"},\"contracts/interfaces/aerodrome/ICLPool.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title The interface for a CL Pool\\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface ICLPool {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            bool unlocked\\n        );\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The gauge corresponding to this pool\\n    /// @return The gauge contract address\\n    function gauge() external view returns (address);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @dev This value includes staked liquidity\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from\\n    /// the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise\\n    /// equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xbc17eee10486bad6fd3fb0f28c3bdb03521c579487e34b2ad0185b041ebdce95\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516123f43803806123f483398101604081905261002f916101e1565b6001600160a01b0380841660805282811660a052811660c052610053600084610085565b61007d7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6384610085565b505050610224565b61008f8282610093565b5050565b61009d82826100ba565b60008281526001602052604090206100b59082610158565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661008f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556101143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061016d836001600160a01b038416610176565b90505b92915050565b60008181526001830160205260408120546101bd57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610170565b506000610170565b80516001600160a01b03811681146101dc57600080fd5b919050565b6000806000606084860312156101f657600080fd5b6101ff846101c5565b925061020d602085016101c5565b915061021b604085016101c5565b90509250925092565b60805160a05160c05161216961028b600039600081816102fc0152610bb401526000818161024201526105b301526000818161028101528181610584015281816108be01528181610b0d01528181610b8a01528181610d5d015261119f01526121696000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806385cbb1de116100c3578063bed0c8cd1161007c578063bed0c8cd14610326578063ca15c87314610339578063d547741f1461034c578063e2c6c42c1461035f578063e3ebc1d814610372578063e80d3bec1461038557600080fd5b806385cbb1de146102ab5780639010d07c146102be57806391d14854146102d157806396269198146102e457806396b096bf146102f7578063a217fddf1461031e57600080fd5b80632f2ff15d116101155780632f2ff15d1461020f5780633218861f1461022257806336568abe1461022a57806346c96aac1461023d5780635578110c1461027c5780636359cfd7146102a357600080fd5b806301ffc9a71461015d57806307bd0265146101855780630d5b6218146101ba5780630f1dbc63146101c4578063248a9ca3146101d75780632dbefa23146101fa575b600080fd5b61017061016b366004611c07565b610398565b60405190151581526020015b60405180910390f35b6101ac7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b60405190815260200161017c565b6101c26103c3565b005b6101c26101d2366004611c3f565b6104ae565b6101ac6101e5366004611c78565b60009081526020819052604090206001015490565b6102026106dd565b60405161017c9190611c91565b6101c261021d366004611ce9565b610735565b6004546101ac565b6101c2610238366004611ce9565b610760565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161017c565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b6002546101ac565b6101706102b9366004611c78565b6107da565b6102646102cc366004611d19565b61086b565b6101706102df366004611ce9565b61088a565b6101c26102f2366004611d3b565b6108b3565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b6101ac600081565b6101c2610334366004611d6e565b610b02565b6101ac610347366004611c78565b610d15565b6101c261035a366004611ce9565b610d2c565b6101c261036d366004611d3b565b610d52565b610170610380366004611d3b565b61105e565b6101c2610393366004611d6e565b611194565b60006001600160e01b03198216635a05180f60e01b14806103bd57506103bd826112f8565b92915050565b6103ed7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e633361088a565b61043e5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865204578656375746f7200000000000060448201526064015b60405180910390fd5b600460005b81548110156104aa57600082828154811061046057610460611e3b565b60009182526020909120600390910201600181015490915061048a906001600160a01b031661132d565b80516104a0916002840191602090910190611b73565b5050600101610443565b5050565b6104d87fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e633361088a565b6105245760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865204578656375746f720000000000006044820152606401610435565b82821015610530579091905b6002548281106105405782610542565b805b925060008061054f611485565b9092509050855b858110156106d45760006002828154811061057357610573611e3b565b9060005260206000200154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77f00000000000000000000000000000000000000000000000000000000000000006000637715ee7560e01b8989886040516024016105f193929190611e96565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b909216825261063b939291600090600401611f66565b6020604051808303816000875af115801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190611fa1565b905080806106895750865b6106ca5760405162461bcd60e51b815260206004820152601260248201527110db185a5b509c9a58995cc819985a5b195960721b6044820152606401610435565b5050600101610556565b50505050505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561072b57602002820191906000526020600020905b815481526020019060010190808311610717575b5050505050905090565b600082815260208190526040902060010154610751813361169a565b61075b83836116fe565b505050565b6001600160a01b03811633146107d05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610435565b6104aa8282611720565b6000818152600360209081526040808320546002805483518186028101860190945280845291938593929083018282801561083457602002820191906000526020600020905b815481526020019060010190808311610820575b5050505050905080518210801561086357508381838151811061085957610859611e3b565b6020026020010151145b949350505050565b60008281526001602052604081206108839083611742565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108fb5760405162461bcd60e51b815260040161043590611fbe565b6109048161105e565b15610aff576001600160a01b038116600090815260056020526040812054600480549192916109359060019061200b565b8154811061094557610945611e3b565b600091825260209182902060408051606081018252600390930290910180546001600160a01b0390811684526001820154168385015260028101805483518187028101870185528181529495929493860193928301828280156109d157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109b3575b505050505081525050905080600483815481106109f0576109f0611e3b565b6000918252602091829020835160039092020180546001600160a01b039283166001600160a01b03199182161782558484015160018301805491909416911617909155604083015180519192610a4e92600285019290910190611b73565b505081516001600160a01b03166000908152600560205260409020839055506004805480610a7e57610a7e61201e565b60008281526020812060036000199093019283020180546001600160a01b03199081168255600182018054909116905590610abc6002830182611bd8565b505090556040516001600160a01b03841681527f62c49c687b2520927b470628236b60ea30e2d1b819783be5b3b4bbdc6f331dcd9060200160405180910390a150505b50565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b4a5760405162461bcd60e51b815260040161043590611fbe565b60005b81518110156104aa576000828281518110610b6a57610b6a611e3b565b60200260200101519050610b7d816107da565b15610b885750610d0d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e836040518263ffffffff1660e01b8152600401610c0091815260200190565b602060405180830381865afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190612034565b6001600160a01b031614610c8f5760405162461bcd60e51b81526020600482015260156024820152744e4654206e6f74206f776e6564206279207361666560581b6044820152606401610435565b600280546000838152600360205260408082208390556001830184559290527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01829055517f902ae6d9a7af3a2a1fa490511404d9a6128e3b4fb5ee47a09cc93bd1663e1fb290610d039083815260200190565b60405180910390a1505b600101610b4d565b60008181526001602052604081206103bd9061174e565b600082815260208190526040902060010154610d48813361169a565b61075b8383611720565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d9a5760405162461bcd60e51b815260040161043590611fbe565b6000816001600160a01b031663a6f19c846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190612034565b90506000816001600160a01b0316630fe2f7116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e649190612034565b905060006040518060600160405280856001600160a01b03168152602001836001600160a01b03168152602001610e9a8461132d565b90529050610ea78461105e565b15610f41576001600160a01b038416600090815260056020526040902054600480548392908110610eda57610eda611e3b565b6000918252602091829020835160039092020180546001600160a01b039283166001600160a01b03199182161782558484015160018301805491909416911617909155604083015180519192610f3892600285019290910190611b73565b5090505061101c565b600480546001600160a01b03808716600090815260056020908152604080832085905560018501865594909152845160039093027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810180549484166001600160a01b0319958616178155868301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c83018054919095169516949094179092559284015180518594611018937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d01920190611b73565b5050505b6040516001600160a01b03851681527f04ac231d3bf53fe932a340af339ec54fbb3da7fc1a0d222c55d26e8f890d24249060200160405180910390a150505050565b6000806004805480602002602001604051908101604052809291908181526020016000905b8282101561112e576000848152602090819020604080516060810182526003860290920180546001600160a01b03908116845260018201541683850152600281018054835181870281018701855281815294959294938601939283018282801561111657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110f8575b50505050508152505081526020019060010190611083565b505050506001600160a01b038416600090815260056020526040902054815191925090811080156108635750836001600160a01b031682828151811061117657611176611e3b565b6020026020010151600001516001600160a01b031614949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111dc5760405162461bcd60e51b815260040161043590611fbe565b60005b81518110156104aa5760008282815181106111fc576111fc611e3b565b6020026020010151905061120f816107da565b61121957506112f0565b6000818152600360205260408120546002805491929161123b9060019061200b565b8154811061124b5761124b611e3b565b90600052602060002001549050806002838154811061126c5761126c611e3b565b6000918252602080832090910192909255828152600390915260409020829055600280548061129d5761129d61201e565b600190038181906000526020600020016000905590557f79246bc6e0aae098ed0639837e8404e2e0a8ed69330b640329110dd8dbaa49d9836040516112e491815260200190565b60405180910390a15050505b6001016111df565b60006001600160e01b03198216637965db0b60e01b14806103bd57506301ffc9a760e01b6001600160e01b03198316146103bd565b60606000826001600160a01b031663e68863966040518163ffffffff1660e01b8152600401602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190612051565b67ffffffffffffffff8111156113ab576113ab611d58565b6040519080825280602002602001820160405280156113d4578160200160208202803683370190505b50905060005b815181101561147e57604051637980d7a160e11b8152600481018290526001600160a01b0385169063f301af4290602401602060405180830381865afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190612034565b82828151811061145e5761145e611e3b565b6001600160a01b03909216602092830291909101909101526001016113da565b5092915050565b60608060006004805480602002602001604051908101604052809291908181526020016000905b82821015611557576000848152602090819020604080516060810182526003860290920180546001600160a01b03908116845260018201541683850152600281018054835181870281018701855281815294959294938601939283018282801561153f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611521575b505050505081525050815260200190600101906114ac565b505082519293508291505067ffffffffffffffff81111561157a5761157a611d58565b6040519080825280602002602001820160405280156115a3578160200160208202803683370190505b5093508067ffffffffffffffff8111156115bf576115bf611d58565b6040519080825280602002602001820160405280156115f257816020015b60608152602001906001900390816115dd5790505b50925060005b818110156116935782818151811061161257611612611e3b565b60200260200101516020015185828151811061163057611630611e3b565b60200260200101906001600160a01b031690816001600160a01b03168152505082818151811061166257611662611e3b565b60200260200101516040015184828151811061168057611680611e3b565b60209081029190910101526001016115f8565b5050509091565b6116a4828261088a565b6104aa576116bc816001600160a01b03166014611758565b6116c7836020611758565b6040516020016116d892919061206a565b60408051601f198184030181529082905262461bcd60e51b8252610435916004016120df565b61170882826118f4565b600082815260016020526040902061075b9082611978565b61172a828261198d565b600082815260016020526040902061075b90826119f2565b60006108838383611a07565b60006103bd825490565b606060006117678360026120f2565b611772906002612109565b67ffffffffffffffff81111561178a5761178a611d58565b6040519080825280601f01601f1916602001820160405280156117b4576020820181803683370190505b509050600360fc1b816000815181106117cf576117cf611e3b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106117fe576117fe611e3b565b60200101906001600160f81b031916908160001a90535060006118228460026120f2565b61182d906001612109565b90505b60018111156118a5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061186157611861611e3b565b1a60f81b82828151811061187757611877611e3b565b60200101906001600160f81b031916908160001a90535060049490941c9361189e8161211c565b9050611830565b5083156108835760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610435565b6118fe828261088a565b6104aa576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556119343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610883836001600160a01b038416611a31565b611997828261088a565b156104aa576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610883836001600160a01b038416611a80565b6000826000018281548110611a1e57611a1e611e3b565b9060005260206000200154905092915050565b6000818152600183016020526040812054611a78575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103bd565b5060006103bd565b60008181526001830160205260408120548015611b69576000611aa460018361200b565b8554909150600090611ab89060019061200b565b9050818114611b1d576000866000018281548110611ad857611ad8611e3b565b9060005260206000200154905080876000018481548110611afb57611afb611e3b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b2e57611b2e61201e565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103bd565b60009150506103bd565b828054828255906000526020600020908101928215611bc8579160200282015b82811115611bc857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611b93565b50611bd4929150611bf2565b5090565b5080546000825590600052602060002090810190610aff91905b5b80821115611bd45760008155600101611bf3565b600060208284031215611c1957600080fd5b81356001600160e01b03198116811461088357600080fd5b8015158114610aff57600080fd5b600080600060608486031215611c5457600080fd5b83359250602084013591506040840135611c6d81611c31565b809150509250925092565b600060208284031215611c8a57600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b81811015611cc9578351835260209384019390920191600101611cab565b509095945050505050565b6001600160a01b0381168114610aff57600080fd5b60008060408385031215611cfc57600080fd5b823591506020830135611d0e81611cd4565b809150509250929050565b60008060408385031215611d2c57600080fd5b50508035926020909101359150565b600060208284031215611d4d57600080fd5b813561088381611cd4565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611d8057600080fd5b813567ffffffffffffffff811115611d9757600080fd5b8201601f81018413611da857600080fd5b803567ffffffffffffffff811115611dc257611dc2611d58565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611def57611def611d58565b604052918252602081840181019290810187841115611e0d57600080fd5b6020850194505b83851015611e3057843580825260209586019590935001611e14565b509695505050505050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020840193506020830160005b82811015611e8c5781516001600160a01b0316865260209586019590910190600101611e65565b5093949350505050565b606081526000611ea96060830186611e51565b828103602084015280855180835260208301915060208160051b8401016020880160005b83811015611eff57601f19868403018552611ee9838351611e51565b6020958601959093509190910190600101611ecd565b505080945050505050826040830152949350505050565b60005b83811015611f31578181015183820152602001611f19565b50506000910152565b60008151808452611f52816020860160208601611f16565b601f01601f19169290920160200192915050565b60018060a01b0385168152836020820152608060408201526000611f8d6080830185611f3a565b905060ff8316606083015295945050505050565b600060208284031215611fb357600080fd5b815161088381611c31565b6020808252601d908201527f43616c6c6572206973206e6f742074686520476e6f7369732053616665000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156103bd576103bd611ff5565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561204657600080fd5b815161088381611cd4565b60006020828403121561206357600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516120a2816017850160208801611f16565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516120d3816028840160208801611f16565b01602801949350505050565b6020815260006108836020830184611f3a565b80820281158282048414176103bd576103bd611ff5565b808201808211156103bd576103bd611ff5565b60008161212b5761212b611ff5565b50600019019056fea264697066735822122034ef0e92a9a2368ec2536f47f21ffa8b2a1223d76a9f8ce05a072a19da9ecc3c64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806385cbb1de116100c3578063bed0c8cd1161007c578063bed0c8cd14610326578063ca15c87314610339578063d547741f1461034c578063e2c6c42c1461035f578063e3ebc1d814610372578063e80d3bec1461038557600080fd5b806385cbb1de146102ab5780639010d07c146102be57806391d14854146102d157806396269198146102e457806396b096bf146102f7578063a217fddf1461031e57600080fd5b80632f2ff15d116101155780632f2ff15d1461020f5780633218861f1461022257806336568abe1461022a57806346c96aac1461023d5780635578110c1461027c5780636359cfd7146102a357600080fd5b806301ffc9a71461015d57806307bd0265146101855780630d5b6218146101ba5780630f1dbc63146101c4578063248a9ca3146101d75780632dbefa23146101fa575b600080fd5b61017061016b366004611c07565b610398565b60405190151581526020015b60405180910390f35b6101ac7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b60405190815260200161017c565b6101c26103c3565b005b6101c26101d2366004611c3f565b6104ae565b6101ac6101e5366004611c78565b60009081526020819052604090206001015490565b6102026106dd565b60405161017c9190611c91565b6101c261021d366004611ce9565b610735565b6004546101ac565b6101c2610238366004611ce9565b610760565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161017c565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b6002546101ac565b6101706102b9366004611c78565b6107da565b6102646102cc366004611d19565b61086b565b6101706102df366004611ce9565b61088a565b6101c26102f2366004611d3b565b6108b3565b6102647f000000000000000000000000000000000000000000000000000000000000000081565b6101ac600081565b6101c2610334366004611d6e565b610b02565b6101ac610347366004611c78565b610d15565b6101c261035a366004611ce9565b610d2c565b6101c261036d366004611d3b565b610d52565b610170610380366004611d3b565b61105e565b6101c2610393366004611d6e565b611194565b60006001600160e01b03198216635a05180f60e01b14806103bd57506103bd826112f8565b92915050565b6103ed7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e633361088a565b61043e5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865204578656375746f7200000000000060448201526064015b60405180910390fd5b600460005b81548110156104aa57600082828154811061046057610460611e3b565b60009182526020909120600390910201600181015490915061048a906001600160a01b031661132d565b80516104a0916002840191602090910190611b73565b5050600101610443565b5050565b6104d87fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e633361088a565b6105245760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865204578656375746f720000000000006044820152606401610435565b82821015610530579091905b6002548281106105405782610542565b805b925060008061054f611485565b9092509050855b858110156106d45760006002828154811061057357610573611e3b565b9060005260206000200154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663468721a77f00000000000000000000000000000000000000000000000000000000000000006000637715ee7560e01b8989886040516024016105f193929190611e96565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e086901b909216825261063b939291600090600401611f66565b6020604051808303816000875af115801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190611fa1565b905080806106895750865b6106ca5760405162461bcd60e51b815260206004820152601260248201527110db185a5b509c9a58995cc819985a5b195960721b6044820152606401610435565b5050600101610556565b50505050505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561072b57602002820191906000526020600020905b815481526020019060010190808311610717575b5050505050905090565b600082815260208190526040902060010154610751813361169a565b61075b83836116fe565b505050565b6001600160a01b03811633146107d05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610435565b6104aa8282611720565b6000818152600360209081526040808320546002805483518186028101860190945280845291938593929083018282801561083457602002820191906000526020600020905b815481526020019060010190808311610820575b5050505050905080518210801561086357508381838151811061085957610859611e3b565b6020026020010151145b949350505050565b60008281526001602052604081206108839083611742565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108fb5760405162461bcd60e51b815260040161043590611fbe565b6109048161105e565b15610aff576001600160a01b038116600090815260056020526040812054600480549192916109359060019061200b565b8154811061094557610945611e3b565b600091825260209182902060408051606081018252600390930290910180546001600160a01b0390811684526001820154168385015260028101805483518187028101870185528181529495929493860193928301828280156109d157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109b3575b505050505081525050905080600483815481106109f0576109f0611e3b565b6000918252602091829020835160039092020180546001600160a01b039283166001600160a01b03199182161782558484015160018301805491909416911617909155604083015180519192610a4e92600285019290910190611b73565b505081516001600160a01b03166000908152600560205260409020839055506004805480610a7e57610a7e61201e565b60008281526020812060036000199093019283020180546001600160a01b03199081168255600182018054909116905590610abc6002830182611bd8565b505090556040516001600160a01b03841681527f62c49c687b2520927b470628236b60ea30e2d1b819783be5b3b4bbdc6f331dcd9060200160405180910390a150505b50565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b4a5760405162461bcd60e51b815260040161043590611fbe565b60005b81518110156104aa576000828281518110610b6a57610b6a611e3b565b60200260200101519050610b7d816107da565b15610b885750610d0d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e836040518263ffffffff1660e01b8152600401610c0091815260200190565b602060405180830381865afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190612034565b6001600160a01b031614610c8f5760405162461bcd60e51b81526020600482015260156024820152744e4654206e6f74206f776e6564206279207361666560581b6044820152606401610435565b600280546000838152600360205260408082208390556001830184559290527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01829055517f902ae6d9a7af3a2a1fa490511404d9a6128e3b4fb5ee47a09cc93bd1663e1fb290610d039083815260200190565b60405180910390a1505b600101610b4d565b60008181526001602052604081206103bd9061174e565b600082815260208190526040902060010154610d48813361169a565b61075b8383611720565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d9a5760405162461bcd60e51b815260040161043590611fbe565b6000816001600160a01b031663a6f19c846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190612034565b90506000816001600160a01b0316630fe2f7116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e649190612034565b905060006040518060600160405280856001600160a01b03168152602001836001600160a01b03168152602001610e9a8461132d565b90529050610ea78461105e565b15610f41576001600160a01b038416600090815260056020526040902054600480548392908110610eda57610eda611e3b565b6000918252602091829020835160039092020180546001600160a01b039283166001600160a01b03199182161782558484015160018301805491909416911617909155604083015180519192610f3892600285019290910190611b73565b5090505061101c565b600480546001600160a01b03808716600090815260056020908152604080832085905560018501865594909152845160039093027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810180549484166001600160a01b0319958616178155868301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c83018054919095169516949094179092559284015180518594611018937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d01920190611b73565b5050505b6040516001600160a01b03851681527f04ac231d3bf53fe932a340af339ec54fbb3da7fc1a0d222c55d26e8f890d24249060200160405180910390a150505050565b6000806004805480602002602001604051908101604052809291908181526020016000905b8282101561112e576000848152602090819020604080516060810182526003860290920180546001600160a01b03908116845260018201541683850152600281018054835181870281018701855281815294959294938601939283018282801561111657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110f8575b50505050508152505081526020019060010190611083565b505050506001600160a01b038416600090815260056020526040902054815191925090811080156108635750836001600160a01b031682828151811061117657611176611e3b565b6020026020010151600001516001600160a01b031614949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111dc5760405162461bcd60e51b815260040161043590611fbe565b60005b81518110156104aa5760008282815181106111fc576111fc611e3b565b6020026020010151905061120f816107da565b61121957506112f0565b6000818152600360205260408120546002805491929161123b9060019061200b565b8154811061124b5761124b611e3b565b90600052602060002001549050806002838154811061126c5761126c611e3b565b6000918252602080832090910192909255828152600390915260409020829055600280548061129d5761129d61201e565b600190038181906000526020600020016000905590557f79246bc6e0aae098ed0639837e8404e2e0a8ed69330b640329110dd8dbaa49d9836040516112e491815260200190565b60405180910390a15050505b6001016111df565b60006001600160e01b03198216637965db0b60e01b14806103bd57506301ffc9a760e01b6001600160e01b03198316146103bd565b60606000826001600160a01b031663e68863966040518163ffffffff1660e01b8152600401602060405180830381865afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190612051565b67ffffffffffffffff8111156113ab576113ab611d58565b6040519080825280602002602001820160405280156113d4578160200160208202803683370190505b50905060005b815181101561147e57604051637980d7a160e11b8152600481018290526001600160a01b0385169063f301af4290602401602060405180830381865afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190612034565b82828151811061145e5761145e611e3b565b6001600160a01b03909216602092830291909101909101526001016113da565b5092915050565b60608060006004805480602002602001604051908101604052809291908181526020016000905b82821015611557576000848152602090819020604080516060810182526003860290920180546001600160a01b03908116845260018201541683850152600281018054835181870281018701855281815294959294938601939283018282801561153f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611521575b505050505081525050815260200190600101906114ac565b505082519293508291505067ffffffffffffffff81111561157a5761157a611d58565b6040519080825280602002602001820160405280156115a3578160200160208202803683370190505b5093508067ffffffffffffffff8111156115bf576115bf611d58565b6040519080825280602002602001820160405280156115f257816020015b60608152602001906001900390816115dd5790505b50925060005b818110156116935782818151811061161257611612611e3b565b60200260200101516020015185828151811061163057611630611e3b565b60200260200101906001600160a01b031690816001600160a01b03168152505082818151811061166257611662611e3b565b60200260200101516040015184828151811061168057611680611e3b565b60209081029190910101526001016115f8565b5050509091565b6116a4828261088a565b6104aa576116bc816001600160a01b03166014611758565b6116c7836020611758565b6040516020016116d892919061206a565b60408051601f198184030181529082905262461bcd60e51b8252610435916004016120df565b61170882826118f4565b600082815260016020526040902061075b9082611978565b61172a828261198d565b600082815260016020526040902061075b90826119f2565b60006108838383611a07565b60006103bd825490565b606060006117678360026120f2565b611772906002612109565b67ffffffffffffffff81111561178a5761178a611d58565b6040519080825280601f01601f1916602001820160405280156117b4576020820181803683370190505b509050600360fc1b816000815181106117cf576117cf611e3b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106117fe576117fe611e3b565b60200101906001600160f81b031916908160001a90535060006118228460026120f2565b61182d906001612109565b90505b60018111156118a5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061186157611861611e3b565b1a60f81b82828151811061187757611877611e3b565b60200101906001600160f81b031916908160001a90535060049490941c9361189e8161211c565b9050611830565b5083156108835760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610435565b6118fe828261088a565b6104aa576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556119343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610883836001600160a01b038416611a31565b611997828261088a565b156104aa576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610883836001600160a01b038416611a80565b6000826000018281548110611a1e57611a1e611e3b565b9060005260206000200154905092915050565b6000818152600183016020526040812054611a78575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103bd565b5060006103bd565b60008181526001830160205260408120548015611b69576000611aa460018361200b565b8554909150600090611ab89060019061200b565b9050818114611b1d576000866000018281548110611ad857611ad8611e3b565b9060005260206000200154905080876000018481548110611afb57611afb611e3b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b2e57611b2e61201e565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103bd565b60009150506103bd565b828054828255906000526020600020908101928215611bc8579160200282015b82811115611bc857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611b93565b50611bd4929150611bf2565b5090565b5080546000825590600052602060002090810190610aff91905b5b80821115611bd45760008155600101611bf3565b600060208284031215611c1957600080fd5b81356001600160e01b03198116811461088357600080fd5b8015158114610aff57600080fd5b600080600060608486031215611c5457600080fd5b83359250602084013591506040840135611c6d81611c31565b809150509250925092565b600060208284031215611c8a57600080fd5b5035919050565b602080825282518282018190526000918401906040840190835b81811015611cc9578351835260209384019390920191600101611cab565b509095945050505050565b6001600160a01b0381168114610aff57600080fd5b60008060408385031215611cfc57600080fd5b823591506020830135611d0e81611cd4565b809150509250929050565b60008060408385031215611d2c57600080fd5b50508035926020909101359150565b600060208284031215611d4d57600080fd5b813561088381611cd4565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611d8057600080fd5b813567ffffffffffffffff811115611d9757600080fd5b8201601f81018413611da857600080fd5b803567ffffffffffffffff811115611dc257611dc2611d58565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715611def57611def611d58565b604052918252602081840181019290810187841115611e0d57600080fd5b6020850194505b83851015611e3057843580825260209586019590935001611e14565b509695505050505050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020840193506020830160005b82811015611e8c5781516001600160a01b0316865260209586019590910190600101611e65565b5093949350505050565b606081526000611ea96060830186611e51565b828103602084015280855180835260208301915060208160051b8401016020880160005b83811015611eff57601f19868403018552611ee9838351611e51565b6020958601959093509190910190600101611ecd565b505080945050505050826040830152949350505050565b60005b83811015611f31578181015183820152602001611f19565b50506000910152565b60008151808452611f52816020860160208601611f16565b601f01601f19169290920160200192915050565b60018060a01b0385168152836020820152608060408201526000611f8d6080830185611f3a565b905060ff8316606083015295945050505050565b600060208284031215611fb357600080fd5b815161088381611c31565b6020808252601d908201527f43616c6c6572206973206e6f742074686520476e6f7369732053616665000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156103bd576103bd611ff5565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561204657600080fd5b815161088381611cd4565b60006020828403121561206357600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516120a2816017850160208801611f16565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516120d3816028840160208801611f16565b01602801949350505050565b6020815260006108836020830184611f3a565b80820281158282048414176103bd576103bd611ff5565b808201808211156103bd576103bd611ff5565b60008161212b5761212b611ff5565b50600019019056fea264697066735822122034ef0e92a9a2368ec2536f47f21ffa8b2a1223d76a9f8ce05a072a19da9ecc3c64736f6c634300081c0033",
  "libraries": {},
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addNFTIds(uint256[])": {
        "details": "Add NFT IDs to the list",
        "params": {
          "_nftIds": "The NFT IDs to add"
        }
      },
      "bribePoolExists(address)": {
        "details": "Check if a bribe pool exists",
        "params": {
          "bribePool": "The address of the pool to check"
        },
        "returns": {
          "_0": "true if the pool exists, false otherwise"
        }
      },
      "claimBribes(uint256,uint256,bool)": {
        "details": "Claim bribes for a range of NFTs",
        "params": {
          "nftIndexEnd": "The end index of the NFTs",
          "nftIndexStart": "The start index of the NFTs",
          "silent": "Doesn't revert if the claim fails when true"
        }
      },
      "getAllNFTIds()": {
        "details": "Get all NFT IDs",
        "returns": {
          "_0": "The NFT IDs"
        }
      },
      "getBribePoolsLength()": {
        "details": "Get the length of the bribe pools list",
        "returns": {
          "_0": "The length of the bribe pools list"
        }
      },
      "getNFTIdsLength()": {
        "details": "Get the length of the nftIds list",
        "returns": {
          "_0": "The length of the nftIds list"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "nftIdExists(uint256)": {
        "details": "Check if a NFT exists on the list",
        "params": {
          "nftId": "The NFT ID to check"
        },
        "returns": {
          "_0": "true if the NFT ID exists, false otherwise"
        }
      },
      "removeBribePool(address)": {
        "details": "Remove a bribe pool from the list",
        "params": {
          "_poolAddress": "The address of the pool to remove"
        }
      },
      "removeNFTIds(uint256[])": {
        "details": "Remove NFT IDs from the list",
        "params": {
          "_nftIds": "The NFT IDs to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateRewardTokenAddresses()": {
        "details": "Update the reward token addresses for all pools"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1104_storage)"
      },
      {
        "astId": 1468,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "nftIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1472,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "nftIdIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1476,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "bribePools",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(BribePoolInfo)1407_storage)dyn_storage"
      },
      {
        "astId": 1480,
        "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
        "label": "bribePoolIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(BribePoolInfo)1407_storage)dyn_storage": {
        "base": "t_struct(BribePoolInfo)1407_storage",
        "encoding": "dynamic_array",
        "label": "struct BribePoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1104_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1104_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1104_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1103,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)803_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BribePoolInfo)1407_storage": {
        "encoding": "inplace",
        "label": "struct BribePoolInfo",
        "members": [
          {
            "astId": 1401,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1403,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "rewardContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1406,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "rewardTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)803_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 798,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 802,
            "contract": "contracts/automation/ClaimBribesSafeModule.sol:ClaimBribesSafeModule",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
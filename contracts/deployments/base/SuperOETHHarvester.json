{
  "address": "0x74c9097cb03bEe2C0fDB45Bb40E1E1438681D32D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dripper",
          "type": "address"
        }
      ],
      "name": "DripperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SupportedStrategyUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "harvestAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "harvestAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dripper",
          "type": "address"
        }
      ],
      "name": "setDripper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStrategistAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "setSupportedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc7c0a10ddf54f10b68ae7bd13d3c93e1b8dc6cb49037432a6625993dd67f04c",
  "receipt": {
    "to": null,
    "from": "0x58890A9cB27586E83Cb51d2d26bbE18a1a647245",
    "contractAddress": "0x74c9097cb03bEe2C0fDB45Bb40E1E1438681D32D",
    "transactionIndex": 1,
    "gasUsed": "1004475",
    "logsBloom": "0x
    "blockHash": "0x3b58682eb09c26d56fae400b29050f9cd4adca71f741cbff4a11019853455340",
    "transactionHash": "0xcc7c0a10ddf54f10b68ae7bd13d3c93e1b8dc6cb49037432a6625993dd67f04c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32622395,
        "transactionHash": "0xcc7c0a10ddf54f10b68ae7bd13d3c93e1b8dc6cb49037432a6625993dd67f04c",
        "address": "0x74c9097cb03bEe2C0fDB45Bb40E1E1438681D32D",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3b58682eb09c26d56fae400b29050f9cd4adca71f741cbff4a11019853455340"
      }
    ],
    "blockNumber": 32622395,
    "cumulativeGasUsed": "1050631",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 2,
  "solcInputHash": "3e269793a4cde902a0e56587aecae15f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dripper\",\"type\":\"address\"}],\"name\":\"DripperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SupportedStrategyUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"harvestAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"harvestAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dripper\",\"type\":\"address\"}],\"name\":\"setDripper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStrategistAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"setSupportedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"harvestAndTransfer(address)\":{\"params\":{\"_strategy\":\"Address of the strategy to harvest\"}},\"harvestAndTransfer(address[])\":{\"params\":{\"_strategies\":\"Array of strategy addresses to harvest\"}},\"setDripper(address)\":{\"params\":{\"_dripper\":\"Address of the dripper\"}},\"setStrategistAddr(address)\":{\"details\":\"Set address of Strategist\",\"params\":{\"_address\":\"Address of Strategist\"}},\"setSupportedStrategy(address,bool)\":{\"params\":{\"_isSupported\":\"Boolean indicating if strategy is supported\",\"_strategy\":\"Address of the strategy\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to transfer\",\"_asset\":\"Address of the token\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Harvested(address,address,uint256,address)\":{\"notice\":\"--- EVENTS\"}},\"kind\":\"user\",\"methods\":{\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"dripper()\":{\"notice\":\"Dripper address\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"harvestAndTransfer(address)\":{\"notice\":\"Harvest rewards from a strategy and transfer to strategist or dripper\"},\"harvestAndTransfer(address[])\":{\"notice\":\"Harvest rewards from multiple strategies and transfer to strategist or dripper\"},\"initialize()\":{\"notice\":\"Initialize the contract\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"setDripper(address)\":{\"notice\":\"Set the dripper address\"},\"setSupportedStrategy(address,bool)\":{\"notice\":\"Set supported strategy\"},\"supportedStrategies(address)\":{\"notice\":\"Mapping of supported strategies\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer tokens to strategist\"},\"wrappedNativeToken()\":{\"notice\":\"wrapped native token address (WETH or wS)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/harvest/SuperOETHHarvester.sol\":\"SuperOETHHarvester\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        emit GovernorshipTransferred(_governor(), newGovernor);\\n\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xf32f873c8bfbacf2e5f01d0cf37bc7f54fbd5aa656e95c8a599114229946f107\",\"license\":\"BUSL-1.1\"},\"contracts/governance/Strategizable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Governable } from \\\"./Governable.sol\\\";\\n\\ncontract Strategizable is Governable {\\n    event StrategistUpdated(address _address);\\n\\n    // Address of strategist\\n    address public strategistAddr;\\n\\n    // For future use\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Verifies that the caller is either Governor or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == strategistAddr || isGovernor(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function setStrategistAddr(address _address) external onlyGovernor {\\n        _setStrategistAddr(_address);\\n    }\\n\\n    /**\\n     * @dev Set address of Strategist\\n     * @param _address Address of Strategist\\n     */\\n    function _setStrategistAddr(address _address) internal {\\n        strategistAddr = _address;\\n        emit StrategistUpdated(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x21f153fc02a5e44f073e3bb4ccdf60934cef6cf9eaf15cef0cf4a68b6858a9db\",\"license\":\"BUSL-1.1\"},\"contracts/harvest/OETHHarvesterSimple.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Strategizable } from \\\"../governance/Strategizable.sol\\\";\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\n\\n/// @title OETH Harvester Simple Contract\\n/// @notice Contract to harvest rewards from strategies\\n/// @author Origin Protocol Inc\\ncontract OETHHarvesterSimple is Initializable, Strategizable {\\n    using SafeERC20 for IERC20;\\n\\n    ////////////////////////////////////////////////////\\n    /// --- CONSTANTS & IMMUTABLES\\n    ////////////////////////////////////////////////////\\n    /// @notice wrapped native token address (WETH or wS)\\n    address public immutable wrappedNativeToken;\\n\\n    ////////////////////////////////////////////////////\\n    /// --- STORAGE\\n    ////////////////////////////////////////////////////\\n    /// @notice Dripper address\\n    address public dripper;\\n\\n    /// @notice Mapping of supported strategies\\n    mapping(address => bool) public supportedStrategies;\\n\\n    /// @notice Gap for upgrade safety\\n    uint256[48] private ___gap;\\n\\n    ////////////////////////////////////////////////////\\n    /// --- EVENTS\\n    ////////////////////////////////////////////////////\\n    event Harvested(\\n        address indexed strategy,\\n        address token,\\n        uint256 amount,\\n        address indexed receiver\\n    );\\n    event SupportedStrategyUpdated(address strategy, bool status);\\n    event DripperUpdated(address dripper);\\n\\n    ////////////////////////////////////////////////////\\n    /// --- CONSTRUCTOR\\n    ////////////////////////////////////////////////////\\n    constructor(address _wrappedNativeToken) {\\n        wrappedNativeToken = _wrappedNativeToken;\\n\\n        // prevent implementation contract to be governed\\n        _setGovernor(address(0));\\n    }\\n\\n    /// @notice Initialize the contract\\n    function initialize() external onlyGovernor initializer {\\n        // Call it to set `initialized` to true and to prevent the implementation\\n        // from getting initialized in future through the proxy\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    /// --- MUTATIVE FUNCTIONS\\n    ////////////////////////////////////////////////////\\n    /// @notice Harvest rewards from a strategy and transfer to strategist or dripper\\n    /// @param _strategy Address of the strategy to harvest\\n    function harvestAndTransfer(address _strategy) external {\\n        _harvestAndTransfer(_strategy);\\n    }\\n\\n    /// @notice Harvest rewards from multiple strategies and transfer to strategist or dripper\\n    /// @param _strategies Array of strategy addresses to harvest\\n    function harvestAndTransfer(address[] calldata _strategies) external {\\n        for (uint256 i = 0; i < _strategies.length; i++) {\\n            _harvestAndTransfer(_strategies[i]);\\n        }\\n    }\\n\\n    /// @notice Internal logic to harvest rewards from a strategy\\n    function _harvestAndTransfer(address _strategy) internal virtual {\\n        // Ensure strategy is supported\\n        require(supportedStrategies[_strategy], \\\"Strategy not supported\\\");\\n\\n        // Store locally for some gas savings\\n        address _strategist = strategistAddr;\\n        address _dripper = dripper;\\n\\n        // Harvest rewards\\n        IStrategy(_strategy).collectRewardTokens();\\n\\n        // Cache reward tokens\\n        address[] memory rewardTokens = IStrategy(_strategy)\\n            .getRewardTokenAddresses();\\n\\n        uint256 len = rewardTokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            // Cache balance\\n            address token = rewardTokens[i];\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (balance > 0) {\\n                // Determine receiver\\n                address receiver = token == wrappedNativeToken\\n                    ? _dripper\\n                    : _strategist;\\n                require(receiver != address(0), \\\"Invalid receiver\\\");\\n\\n                // Transfer to the Strategist or the Dripper\\n                IERC20(token).safeTransfer(receiver, balance);\\n                emit Harvested(_strategy, token, balance, receiver);\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    /// --- GOVERNANCE\\n    ////////////////////////////////////////////////////\\n    /// @notice Set supported strategy\\n    /// @param _strategy Address of the strategy\\n    /// @param _isSupported Boolean indicating if strategy is supported\\n    function setSupportedStrategy(address _strategy, bool _isSupported)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        require(_strategy != address(0), \\\"Invalid strategy\\\");\\n        supportedStrategies[_strategy] = _isSupported;\\n        emit SupportedStrategyUpdated(_strategy, _isSupported);\\n    }\\n\\n    /// @notice Transfer tokens to strategist\\n    /// @param _asset Address of the token\\n    /// @param _amount Amount of tokens to transfer\\n    function transferToken(address _asset, uint256 _amount)\\n        external\\n        onlyGovernorOrStrategist\\n    {\\n        IERC20(_asset).safeTransfer(strategistAddr, _amount);\\n    }\\n\\n    /// @notice Set the dripper address\\n    /// @param _dripper Address of the dripper\\n    function setDripper(address _dripper) external onlyGovernor {\\n        _setDripper(_dripper);\\n    }\\n\\n    /// @notice Internal logic to set the dripper address\\n    function _setDripper(address _dripper) internal {\\n        require(_dripper != address(0), \\\"Invalid dripper\\\");\\n        dripper = _dripper;\\n        emit DripperUpdated(_dripper);\\n    }\\n}\\n\",\"keccak256\":\"0xdbeaa07423a68d351f596ffa48d9eecbcd75395c8ab33ea31a7aff01e8bd8031\",\"license\":\"BUSL-1.1\"},\"contracts/harvest/SuperOETHHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { OETHHarvesterSimple, IERC20, IStrategy, SafeERC20 } from \\\"./OETHHarvesterSimple.sol\\\";\\n\\ncontract SuperOETHHarvester is OETHHarvesterSimple {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address _wrappedNativeToken)\\n        OETHHarvesterSimple(_wrappedNativeToken)\\n    {}\\n\\n    /// @inheritdoc OETHHarvesterSimple\\n    function _harvestAndTransfer(address _strategy) internal virtual override {\\n        // Ensure strategy is supported\\n        require(supportedStrategies[_strategy], \\\"Strategy not supported\\\");\\n\\n        address receiver = strategistAddr;\\n        require(receiver != address(0), \\\"Invalid receiver\\\");\\n\\n        // Harvest rewards\\n        IStrategy(_strategy).collectRewardTokens();\\n\\n        // Cache reward tokens\\n        address[] memory rewardTokens = IStrategy(_strategy)\\n            .getRewardTokenAddresses();\\n\\n        uint256 len = rewardTokens.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            // Cache balance\\n            address token = rewardTokens[i];\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (balance > 0) {\\n                // Transfer everything to the strategist\\n                IERC20(token).safeTransfer(receiver, balance);\\n                emit Harvested(_strategy, token, balance, receiver);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc103199e7971b2f00e0ffd1693e2c7e5c0d7cb820d30bc6cfcfac0a51b133cb1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n\\n    function harvesterAddress() external view returns (address);\\n\\n    function transferToken(address token, uint256 amount) external;\\n\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external;\\n}\\n\",\"keccak256\":\"0x79ca47defb3b5a56bba13f14c440838152fd1c1aa640476154516a16da4da8ba\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x50d39ebf38a3d3111f2b77a6c75ece1d4ae731552fec4697ab16fcf6c0d4d5e8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161122f38038061122f83398101604081905261002f916100b5565b6001600160a01b03811660805280610047600061004e565b50506100e5565b6001600160a01b03811661006e60008051602061120f8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a360008051602061120f83398151915255565b6000602082840312156100c757600080fd5b81516001600160a01b03811681146100de57600080fd5b9392505050565b60805161110f610100600039600061014c015261110f6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063603ea03b11610097578063b8a02d0411610066578063b8a02d04146101dd578063c7af3352146101f0578063d38bfff414610208578063ee3be5f51461021b57600080fd5b8063603ea03b1461019c57806365f6fa94146101af578063773540b3146101c25780638129fc1c146101d557600080fd5b806317fcb39b116100d357806317fcb39b146101475780632e9958ab1461016e578063570d8e1d146101815780635d36b1901461019457600080fd5b806308765741146100fa5780630c340a241461010f5780631072cbea14610134575b600080fd5b61010d610108366004610d7e565b61023e565b005b61011761024a565b6040516001600160a01b0390911681526020015b60405180910390f35b61010d610142366004610d9b565b610267565b6101177f000000000000000000000000000000000000000000000000000000000000000081565b61010d61017c366004610d7e565b6102c6565b603354610117906001600160a01b031681565b61010d6102f3565b606654610117906001600160a01b031681565b61010d6101bd366004610dd5565b610399565b61010d6101d0366004610d7e565b61047d565b61010d6104aa565b61010d6101eb366004610e0e565b610580565b6101f86105c7565b604051901515815260200161012b565b61010d610216366004610d7e565b6105f8565b6101f8610229366004610d7e565b60676020526000908152604090205460ff1681565b6102478161069c565b50565b60006102626000805160206110ba8339815191525490565b905090565b6033546001600160a01b031633148061028357506102836105c7565b6102a85760405162461bcd60e51b815260040161029f90610e85565b60405180910390fd5b6033546102c2906001600160a01b0384811691168361091a565b5050565b6102ce6105c7565b6102ea5760405162461bcd60e51b815260040161029f90610ecd565b6102478161096c565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b03161461038e5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161029f565b61039733610a09565b565b6033546001600160a01b03163314806103b557506103b56105c7565b6103d15760405162461bcd60e51b815260040161029f90610e85565b6001600160a01b03821661041a5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420737472617465677960801b604482015260640161029f565b6001600160a01b038216600081815260676020908152604091829020805460ff19168515159081179091558251938452908301527f3ca7a8b51f893d82f3035738ff1da9ae735b29cf93d0e61bb859313c379b3e76910160405180910390a15050565b6104856105c7565b6104a15760405162461bcd60e51b815260040161029f90610ecd565b61024781610a68565b6104b26105c7565b6104ce5760405162461bcd60e51b815260040161029f90610ecd565b600054610100900460ff16806104e7575060005460ff16155b61054a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161029f565b600054610100900460ff1615801561056c576000805461ffff19166101011790555b8015610247576000805461ff001916905550565b60005b818110156105c2576105ba8383838181106105a0576105a0610f04565b90506020020160208101906105b59190610d7e565b61069c565b600101610583565b505050565b60006105df6000805160206110ba8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6106006105c7565b61061c5760405162461bcd60e51b815260040161029f90610ecd565b610644817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b03166106646000805160206110ba8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b03811660009081526067602052604090205460ff166106fd5760405162461bcd60e51b815260206004820152601660248201527514dd1c985d1959de481b9bdd081cdd5c1c1bdc9d195960521b604482015260640161029f565b6033546001600160a01b0316806107495760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b604482015260640161029f565b816001600160a01b0316635a063f636040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b505050506000826001600160a01b031663f6ca71b06040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108049190810190610f40565b805190915060005b8181101561091357600083828151811061082857610828610f04565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190611010565b90508015610909576108bd6001600160a01b038316878361091a565b604080516001600160a01b0384811682526020820184905280891692908a16917f64176c791992d34a042a9aad3aa4ace3970c8ce117529438b7d285a47dd40f07910160405180910390a35b505060010161080c565b5050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105c2908490610ab6565b6001600160a01b0381166109b45760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210323934b83832b960891b604482015260640161029f565b606680546001600160a01b0319166001600160a01b0383169081179091556040519081527f4cd8d6305ee3d38746117f069329b1a466ee9e483d5cbaebdbfd9d294278533f906020015b60405180910390a150565b6001600160a01b038116610a5f5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161029f565b61024781610b88565b603380546001600160a01b0319166001600160a01b0383169081179091556040519081527f869e0abd13cc3a975de7b93be3df1cb2255c802b1cead85963cc79d99f131bee906020016109fe565b6000610b0b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bef9092919063ffffffff16565b8051909150156105c25780806020019051810190610b299190611029565b6105c25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161029f565b806001600160a01b0316610ba86000805160206110ba8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36000805160206110ba83398151915255565b6060610bfe8484600085610c08565b90505b9392505050565b606082471015610c695760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161029f565b843b610cb75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029f565b600080866001600160a01b03168587604051610cd3919061106a565b60006040518083038185875af1925050503d8060008114610d10576040519150601f19603f3d011682016040523d82523d6000602084013e610d15565b606091505b5091509150610d25828286610d30565b979650505050505050565b60608315610d3f575081610c01565b825115610d4f5782518084602001fd5b8160405162461bcd60e51b815260040161029f9190611086565b6001600160a01b038116811461024757600080fd5b600060208284031215610d9057600080fd5b8135610c0181610d69565b60008060408385031215610dae57600080fd5b8235610db981610d69565b946020939093013593505050565b801515811461024757600080fd5b60008060408385031215610de857600080fd5b8235610df381610d69565b91506020830135610e0381610dc7565b809150509250929050565b60008060208385031215610e2157600080fd5b823567ffffffffffffffff811115610e3857600080fd5b8301601f81018513610e4957600080fd5b803567ffffffffffffffff811115610e6057600080fd5b8560208260051b8401011115610e7557600080fd5b6020919091019590945092505050565b60208082526028908201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060408201526723b7bb32b93737b960c11b606082015260800190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8051610f3b81610d69565b919050565b600060208284031215610f5257600080fd5b815167ffffffffffffffff811115610f6957600080fd5b8201601f81018413610f7a57600080fd5b805167ffffffffffffffff811115610f9457610f94610f1a565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715610fc157610fc1610f1a565b604052918252602081840181019290810187841115610fdf57600080fd5b6020850194505b8385101561100557610ff785610f30565b815260209485019401610fe6565b509695505050505050565b60006020828403121561102257600080fd5b5051919050565b60006020828403121561103b57600080fd5b8151610c0181610dc7565b60005b83811015611061578181015183820152602001611049565b50506000910152565b6000825161107c818460208701611046565b9190910192915050565b60208152600082518060208401526110a5816040850160208701611046565b601f01601f1916919091016040019291505056fe7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa264697066735822122038fcb46a265ed78501e0079f0fa76af8b3e4fab6f2e31ee65b3a8fb1a6566f3564736f6c634300081c00337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "harvestAndTransfer(address)": {
        "params": {
          "_strategy": "Address of the strategy to harvest"
        }
      },
      "harvestAndTransfer(address[])": {
        "params": {
          "_strategies": "Array of strategy addresses to harvest"
        }
      },
      "setDripper(address)": {
        "params": {
          "_dripper": "Address of the dripper"
        }
      },
      "setStrategistAddr(address)": {
        "details": "Set address of Strategist",
        "params": {
          "_address": "Address of Strategist"
        }
      },
      "setSupportedStrategy(address,bool)": {
        "params": {
          "_isSupported": "Boolean indicating if strategy is supported",
          "_strategy": "Address of the strategy"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "_amount": "Amount of tokens to transfer",
          "_asset": "Address of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Harvested(address,address,uint256,address)": {
        "notice": "--- EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "dripper()": {
        "notice": "Dripper address"
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "harvestAndTransfer(address)": {
        "notice": "Harvest rewards from a strategy and transfer to strategist or dripper"
      },
      "harvestAndTransfer(address[])": {
        "notice": "Harvest rewards from multiple strategies and transfer to strategist or dripper"
      },
      "initialize()": {
        "notice": "Initialize the contract"
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "setDripper(address)": {
        "notice": "Set the dripper address"
      },
      "setSupportedStrategy(address,bool)": {
        "notice": "Set supported strategy"
      },
      "supportedStrategies(address)": {
        "notice": "Mapping of supported strategies"
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer tokens to strategist"
      },
      "wrappedNativeToken()": {
        "notice": "wrapped native token address (WETH or wS)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1405,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1408,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1448,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 808,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 812,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 884,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "dripper",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 889,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "supportedStrategies",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 894,
        "contract": "contracts/harvest/SuperOETHHarvester.sol:SuperOETHHarvester",
        "label": "___gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
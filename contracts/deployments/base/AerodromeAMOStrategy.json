{
  "address": "0xcDD21c5544A5B07fab409284cEE6c6097091B589",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "platformAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultAddress",
              "type": "address"
            }
          ],
          "internalType": "struct InitializableAbstractStrategy.BaseStrategyConfig",
          "name": "_stratConfig",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oethbAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nonfungiblePositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_clPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_clGauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sugarHelper",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "_lowerBoundingTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_upperBoundingTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_tickClosestToParity",
          "type": "int24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredWeth",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughWethForSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredWeth",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughWethLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "currentTick",
          "type": "int24"
        }
      ],
      "name": "OutsideExpectedTickRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentPoolWethShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowedWethShareStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowedWethShareEnd",
          "type": "uint256"
        }
      ],
      "name": "PoolRebalanceOutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethAmountDesired",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oethbAmountDesired",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethAmountSupplied",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oethbAmountSupplied",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAssets",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawLiquidityShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removedWETHAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removedOETHbAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethAmountCollected",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oethbAmountCollected",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAssets",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPoolWethShare",
          "type": "uint256"
        }
      ],
      "name": "PoolRebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowedWethShareStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowedWethShareEnd",
          "type": "uint256"
        }
      ],
      "name": "PoolWethShareIntervalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAssets",
          "type": "uint256"
        }
      ],
      "name": "UnderlyingAssetsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OETHb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SOLVENCY_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedWethShareEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedWethShareStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clGauge",
      "outputs": [
        {
          "internalType": "contract ICLGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clPool",
      "outputs": [
        {
          "internalType": "contract ICLPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTradingTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "_currentTick",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolX96Price",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "_sqrtRatioX96",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountWeth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOethb",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "helper",
      "outputs": [
        {
          "internalType": "contract ISugarHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lowerTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_swapWeth",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenReceived",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allowedWethShareStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allowedWethShareEnd",
          "type": "uint256"
        }
      ],
      "name": "setAllowedPoolWethShareInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sqrtRatioX96TickClosestToParity",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sqrtRatioX96TickHigher",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sqrtRatioX96TickLower",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tickSpacing",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upperTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x81101179b1606b90be7a185386cd26dedc76166d35a0cc235af911456ed3858b",
  "receipt": {
    "to": null,
    "from": "0xFD9E6005187F448957a0972a7d0C0A6dA2911236",
    "contractAddress": "0xcDD21c5544A5B07fab409284cEE6c6097091B589",
    "transactionIndex": 3,
    "gasUsed": "4455784",
    "logsBloom": "0x
    "blockHash": "0x61af98ed97fa813aa0c3a428a5012d41309f4be15c140fcba0ac43eb222d6e2f",
    "transactionHash": "0x81101179b1606b90be7a185386cd26dedc76166d35a0cc235af911456ed3858b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 19046359,
        "transactionHash": "0x81101179b1606b90be7a185386cd26dedc76166d35a0cc235af911456ed3858b",
        "address": "0xcDD21c5544A5B07fab409284cEE6c6097091B589",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd9e6005187f448957a0972a7d0c0a6da2911236"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x61af98ed97fa813aa0c3a428a5012d41309f4be15c140fcba0ac43eb222d6e2f"
      }
    ],
    "blockNumber": 19046359,
    "cumulativeGasUsed": "4683684",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000",
      "0x98a0CbeF61bD2D21435f433bE4CD42B56B38CC93"
    ],
    "0x4200000000000000000000000000000000000006",
    "0xDBFeFD2e8460a6Ee4955A68582F85708BAEA60A3",
    "0xBE6D8f0d05cC4be24d5167a3eF062215bE6D18a5",
    "0x827922686190790b37229fd06084350E74485b72",
    "0x6446021F4E396dA3df4235C62537431372195D38",
    "0xdD234DBe2efF53BED9E8fC0e427ebcd74ed4F429",
    "0x0AD09A66af0154a84e86F761313d02d0abB6edd5",
    -1,
    0,
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "bffb0e82f7ec959a92d3d152b9df9ca8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct InitializableAbstractStrategy.BaseStrategyConfig\",\"name\":\"_stratConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oethbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nonfungiblePositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clGauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sugarHelper\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_lowerBoundingTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_upperBoundingTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_tickClosestToParity\",\"type\":\"int24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredWeth\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWethForSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredWeth\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWethLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"currentTick\",\"type\":\"int24\"}],\"name\":\"OutsideExpectedTickRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPoolWethShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedWethShareStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedWethShareEnd\",\"type\":\"uint256\"}],\"name\":\"PoolRebalanceOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmountDesired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oethbAmountDesired\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmountSupplied\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oethbAmountSupplied\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAssets\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawLiquidityShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removedWETHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removedOETHbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmountCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oethbAmountCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAssets\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPoolWethShare\",\"type\":\"uint256\"}],\"name\":\"PoolRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedWethShareStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedWethShareEnd\",\"type\":\"uint256\"}],\"name\":\"PoolWethShareIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAssets\",\"type\":\"uint256\"}],\"name\":\"UnderlyingAssetsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OETHb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLVENCY_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedWethShareEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedWethShareStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clGauge\",\"outputs\":[{\"internalType\":\"contract ICLGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clPool\",\"outputs\":[{\"internalType\":\"contract ICLPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTradingTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"_currentTick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolX96Price\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"_sqrtRatioX96\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountWeth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOethb\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helper\",\"outputs\":[{\"internalType\":\"contract ISugarHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapWeth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenReceived\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedWethShareStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedWethShareEnd\",\"type\":\"uint256\"}],\"name\":\"setAllowedPoolWethShareInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sqrtRatioX96TickClosestToParity\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sqrtRatioX96TickHigher\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sqrtRatioX96TickLower\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"details\":\"Get the total asset value held in the platform\",\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"_0\":\"balance    Total value of the asset in the platform\"}},\"constructor\":{\"params\":{\"_clGauge\":\"Address of the Aerodrome slipstream pool gauge\",\"_clPool\":\"Address of the Aerodrome concentrated liquidity pool\",\"_lowerBoundingTick\":\"Smaller bounding tick of our liquidity position\",\"_nonfungiblePositionManager\":\"Address of position manager to add/remove         the liquidity\",\"_oethbAddress\":\"Address of the Erc20 OETHb Token contract\",\"_stratConfig\":\"the basic strategy configuration\",\"_sugarHelper\":\"Address of the Aerodrome Sugar helper contract\",\"_swapRouter\":\"Address of the Aerodrome Universal Swap Router\",\"_tickClosestToParity\":\"Tick that is closer to 1:1 price parity\",\"_upperBoundingTick\":\"Larger bounding tick of our liquidity position\",\"_wethAddress\":\"Address of the Erc20 WETH Token contract\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"Units of asset to deposit\",\"_asset\":\"Address for the asset\"}},\"getCurrentTradingTick()\":{\"returns\":{\"_currentTick\":\"Current pool trading tick\"}},\"getPoolX96Price()\":{\"returns\":{\"_sqrtRatioX96\":\"Pool price\"}},\"getPositionPrincipal()\":{\"details\":\"Returns the balance of both tokens in a given position (excluding fees)\",\"returns\":{\"_amountOethb\":\"Amount of OETHb in position\",\"_amountWeth\":\"Amount of WETH in position\"}},\"getRewardTokenAddresses()\":{\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"initialize(address[])\":{\"params\":{\"_rewardTokenAddresses\":\"Address of reward token for platform\"}},\"rebalance(uint256,bool,uint256)\":{\"params\":{\"_amountToSwap\":\"The amount of the token to swap\",\"_minTokenReceived\":\"Slippage check -> minimum amount of token expected in return\",\"_swapWeth\":\"Swap using WETH when true, use OETHb when false\"}},\"removePToken(uint256)\":{\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets\"},\"setAllowedPoolWethShareInterval(uint256,uint256)\":{\"params\":{\"_allowedWethShareEnd\":\"End of WETH share interval expressed as 18 decimal amount\",\"_allowedWethShareStart\":\"Start of WETH share interval expressed as 18 decimal amount\"}},\"setHarvesterAddress(address)\":{\"params\":{\"_harvesterAddress\":\"Address of the harvester contract.\"}},\"setPTokenAddress(address,address)\":{\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"params\":{\"_rewardTokenAddresses\":\"Array of reward token addresses\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of WETH to withdraw\",\"_asset\":\"WETH address\",\"_recipient\":\"Address to which the asset should be sent\"}}},\"stateVariables\":{\"SOLVENCY_THRESHOLD\":{\"details\":\"a threshold under which the contract no longer allows for the protocol to rebalance. Guarding      against a strategist / guardian being taken over and with multiple transactions draining the      protocol funds.\"},\"__reserved\":{\"details\":\"reserved for inheritance\"},\"clGauge\":{\"details\":\"can become an immutable once the gauge is created on the base main-net\"},\"sqrtRatioX96TickClosestToParity\":{\"details\":\"tick closest to 1:1 price parity      Correctly assessing which tick is closer to 1:1 price parity is important since it affects      the way we calculate the underlying assets in check Balance. The underlying aerodrome pool      orders the tokens depending on the values of their addresses. If OETH token is token0 in the pool      then sqrtRatioX96TickClosestToParity=sqrtRatioX96TickLower. If it is token1 in the pool then      sqrtRatioX96TickClosestToParity=sqrtRatioX96TickHigher\"},\"sqrtRatioX96TickHigher\":{\"details\":\"tick higher has value 0 and represents 1:1 price parity of WETH to OETHb\"},\"sqrtRatioX96TickLower\":{\"details\":\"tick lower has value -1 and represents the lowest price of WETH priced in OETHb. Meaning the pool offers less than 1 OETHb for 1 WETH. In other terms to get 1 OETHB the swap needs to offer 1.0001 WETH this is where purchasing OETHb with WETH within the liquidity position is most expensive\"},\"underlyingAssets\":{\"details\":\"Minimum amount of tokens the strategy would be able to withdraw from the pool.      minimum amount of tokens are withdrawn at a 1:1 price\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OETHb()\":{\"notice\":\"The address of the OETHb token contract\"},\"WETH()\":{\"notice\":\"The address of the Wrapped ETH (WETH) token contract\"},\"allowedWethShareEnd()\":{\"notice\":\"Marks the end of the interval that defines the allowed range of WETH share in the pre-configured pool's liquidity ticker\"},\"allowedWethShareStart()\":{\"notice\":\"Marks the start of the interval that defines the allowed range of WETH share in the pre-configured pool's liquidity ticker\"},\"assetToPToken(address)\":{\"notice\":\"asset => pToken (Platform Specific Token Address)\"},\"clGauge()\":{\"notice\":\"the gauge for the corresponding Slipstream pool (clPool)\"},\"clPool()\":{\"notice\":\"the underlying AMO Slipstream pool\"},\"claimGovernance()\":{\"notice\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"notice\":\"Collect accumulated reward token and send to Vault.\"},\"constructor\":{\"notice\":\"the constructor\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit an amount of assets into the strategy contract. Calling deposit doesn't         automatically deposit funds into the underlying Aerodrome pool\"},\"depositAll()\":{\"notice\":\"Deposit WETH to the strategy contract. This function does not add liquidity to the         underlying Aerodrome pool.\"},\"getCurrentTradingTick()\":{\"notice\":\"Returns the current active trading tick of the underlying pool\"},\"getPoolX96Price()\":{\"notice\":\"Returns the current pool price in X96 format\"},\"getRewardTokenAddresses()\":{\"notice\":\"Get the reward token addresses.\"},\"governor()\":{\"notice\":\"Returns the address of the current Governor.\"},\"harvesterAddress()\":{\"notice\":\"Address of the Harvester contract allowed to collect reward tokens\"},\"helper()\":{\"notice\":\"helper contract for liquidity and ticker math\"},\"initialize(address[])\":{\"notice\":\"initialize function, to set up initial internal state\"},\"isGovernor()\":{\"notice\":\"Returns true if the caller is the current Governor.\"},\"lowerTick()\":{\"notice\":\"lower tick set to -1 representing the price of 1.0001 of WETH for 1 OETHb.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Ref: https://docs.openzeppelin.com/contracts/3.x/api/token/erc721#IERC721Receiver-onERC721Received-address-address-uint256-bytes-\"},\"platformAddress()\":{\"notice\":\"Address of the underlying platform\"},\"positionManager()\":{\"notice\":\"the Position manager contract that is used to manage the pool's position\"},\"rebalance(uint256,bool,uint256)\":{\"notice\":\"Rebalance the pool to the desired token split and Deposit any WETH on the contract to the underlying aerodrome pool. Print the required amount of corresponding OETHb. After the rebalancing is done burn any potentially remaining OETHb tokens still on the strategy contract. This function has a slightly different behaviour depending on the status of the underlying Aerodrome slipstream pool. The function consists of the following 3 steps: 1. withdrawPartialLiqidity -> so that moving the activeTrading price via  a swap is cheaper 2. swapToDesiredPosition   -> move active trading price in the pool to be able to deposit WETH & OETHb                               tokens with the desired pre-configured shares 3. addLiquidity            -> add liquidity into the pool respecting share split configuration Scenario 1: When there is no liquidity in the pool from the strategy but there is from other LPs then             only step 1 is skipped. (It is important to note that liquidity needs to exist in the configured             strategy tick ranges in order for the swap to be possible) Step 3 mints new liquidity position             instead of adding to an existing one. Scenario 2: When there is strategy's liquidity in the pool all 3 steps are taken Exact _amountToSwap, _swapWeth & _minTokenReceived parameters shall be determined by simulating the transaction off-chain. The strategy checks that after the swap the share of the tokens is in the expected ranges.\"},\"removePToken(uint256)\":{\"notice\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\"},\"rewardTokenAddresses(uint256)\":{\"notice\":\"Address of the reward tokens. eg CRV, BAL, CVX, AURA\"},\"setAllowedPoolWethShareInterval(uint256,uint256)\":{\"notice\":\"Set allowed pool weth share interval. After the rebalance happens the share of WETH token in the ticker needs to be withing the specifications of the interval.\"},\"setHarvesterAddress(address)\":{\"notice\":\"Set the Harvester contract that can collect rewards.\"},\"setPTokenAddress(address,address)\":{\"notice\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\"},\"setRewardTokenAddresses(address[])\":{\"notice\":\"Set the reward token addresses. Any old addresses will be overwritten.\"},\"sqrtRatioX96TickHigher()\":{\"notice\":\"sqrtRatioX96TickHigher\"},\"sqrtRatioX96TickLower()\":{\"notice\":\"sqrtRatioX96TickLower\"},\"swapRouter()\":{\"notice\":\"the swapRouter for performing swaps\"},\"tickSpacing()\":{\"notice\":\"tick spacing of the pool (set to 1)\"},\"tokenId()\":{\"notice\":\"tokenId of the liquidity position\"},\"transferGovernance(address)\":{\"notice\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\"},\"upperTick()\":{\"notice\":\"lower tick set to 0 representing the price of 1.0000 of WETH for 1 OETHb.\"},\"vaultAddress()\":{\"notice\":\"Address of the OToken vault\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraw an `amount` of assets from the platform and         send to the `_recipient`.\"},\"withdrawAll()\":{\"notice\":\"Withdraw WETH and sends it to the Vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/aerodrome/AerodromeAMOStrategy.sol\":\"AerodromeAMOStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base for contracts that are managed by the Origin Protocol's Governor.\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @notice Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0xb7133d6ce7a9e673ff79fcedb3fd41ae6e58e251f94915bb65731abe524270b4\",\"license\":\"MIT\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa562062698aa12572123b36dfd2072f1a39e44fed2031cc19c2c9fd522f96ec2\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardTokens() external;\\n\\n    /**\\n     * @dev The address array of the reward tokens for the Strategy.\\n     */\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xb291e409a9b95527f9ed19cd6bff8eeb9921a21c1f5194a48c0bb9ce6613959a\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { VaultStorage } from \\\"../vault/VaultStorage.sol\\\";\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function ousdMetaStrategy() external view returns (address);\\n\\n    function setSwapper(address _swapperAddr) external;\\n\\n    function setSwapAllowedUndervalue(uint16 _percentageBps) external;\\n\\n    function setOracleSlippage(address _asset, uint16 _allowedOracleSlippageBps)\\n        external;\\n\\n    function supportAsset(address _asset, uint8 _supportsAsset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function priceUnitMint(address asset) external view returns (uint256);\\n\\n    function priceUnitRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function withdrawFromStrategy(\\n        address _strategyFromAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function depositToStrategy(\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintForStrategy(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function burnForStrategy(uint256 _amount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function swapCollateral(\\n        address fromAsset,\\n        address toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 minToAssetAmount,\\n        bytes calldata data\\n    ) external returns (uint256 toAssetAmount);\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAssetConfig(address _asset)\\n        external\\n        view\\n        returns (VaultStorage.Asset memory config);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function swapper() external view returns (address);\\n\\n    function allowedSwapUndervalue() external view returns (uint256);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n\\n    function netOusdMintForStrategyThreshold() external view returns (uint256);\\n\\n    function setOusdMetaStrategy(address _ousdMetaStrategy) external;\\n\\n    function setNetOusdMintForStrategyThreshold(uint256 _threshold) external;\\n\\n    function netOusdMintedForStrategy() external view returns (int256);\\n\\n    function setDripper(address _dripper) external;\\n\\n    function weth() external view returns (address);\\n\\n    function cacheWETHAssetIndex() external;\\n\\n    function wethAssetIndex() external view returns (uint256);\\n\\n    function initialize(address, address) external;\\n\\n    function setAdminImpl(address) external;\\n\\n    function removeAsset(address _asset) external;\\n\\n    // These are OETH specific functions\\n    function addWithdrawalQueueLiquidity() external;\\n\\n    function requestWithdrawal(uint256 _amount)\\n        external\\n        returns (uint256 requestId, uint256 queued);\\n\\n    function claimWithdrawal(uint256 requestId)\\n        external\\n        returns (uint256 amount);\\n\\n    function claimWithdrawals(uint256[] memory requestIds)\\n        external\\n        returns (uint256[] memory amounts, uint256 totalAmount);\\n\\n    function withdrawalQueueMetadata()\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalQueueMetadata memory);\\n\\n    function withdrawalRequests(uint256 requestId)\\n        external\\n        view\\n        returns (VaultStorage.WithdrawalRequest memory);\\n\\n    // OETHb specific functions\\n    function addStrategyToMintWhitelist(address strategyAddr) external;\\n\\n    function removeStrategyFromMintWhitelist(address strategyAddr) external;\\n\\n    function isMintWhitelistedStrategy(address strategyAddr)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x63d0874265af03db9fb4195a35105a1b3a91cb4d1ce6e6966e52be20f5c3cb0f\",\"license\":\"MIT\"},\"contracts/interfaces/aerodrome/ICLGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ICLGauge {\\n    /// @notice Returns the claimable rewards for a given account and tokenId\\n    /// @dev Throws if account is not the position owner\\n    /// @dev pool.updateRewardsGrowthGlobal() needs to be called first, to return the correct claimable rewards\\n    /// @param account The address of the user\\n    /// @param tokenId The tokenId of the position\\n    /// @return The amount of claimable reward\\n    function earned(address account, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Retrieve rewards for all tokens owned by an account\\n    /// @dev Throws if not called by the voter\\n    /// @param account The account of the user\\n    function getReward(address account) external;\\n\\n    /// @notice Retrieve rewards for a tokenId\\n    /// @dev Throws if not called by the position owner\\n    /// @param tokenId The tokenId of the position\\n    function getReward(uint256 tokenId) external;\\n\\n    /// @notice Notifies gauge of gauge rewards.\\n    /// @param amount Amount of gauge rewards (emissions) to notify. Must be greater than 604_800.\\n    function notifyRewardAmount(uint256 amount) external;\\n\\n    /// @dev Notifies gauge of gauge rewards without distributing its fees.\\n    ///      Assumes gauge reward tokens is 18 decimals.\\n    ///      If not 18 decimals, rewardRate may have rounding issues.\\n    /// @param amount Amount of gauge rewards (emissions) to notify. Must be greater than 604_800.\\n    function notifyRewardWithoutClaim(uint256 amount) external;\\n\\n    /// @notice Used to deposit a CL position into the gauge\\n    /// @notice Allows the user to receive emissions instead of fees\\n    /// @param tokenId The tokenId of the position\\n    function deposit(uint256 tokenId) external;\\n\\n    /// @notice Used to withdraw a CL position from the gauge\\n    /// @notice Allows the user to receive fees instead of emissions\\n    /// @notice Outstanding emissions will be collected on withdrawal\\n    /// @param tokenId The tokenId of the position\\n    function withdraw(uint256 tokenId) external;\\n\\n    // /// @notice Fetch all tokenIds staked by a given account\\n    // /// @param depositor The address of the user\\n    // /// @return The tokenIds of the staked positions\\n    // function stakedValues(address depositor) external view returns (uint256[] memory);\\n\\n    // /// @notice Fetch a staked tokenId by index\\n    // /// @param depositor The address of the user\\n    // /// @param index The index of the staked tokenId\\n    // /// @return The tokenId of the staked position\\n    // function stakedByIndex(address depositor, uint256 index) external view returns (uint256);\\n\\n    // /// @notice Check whether a position is staked in the gauge by a certain user\\n    // /// @param depositor The address of the user\\n    // /// @param tokenId The tokenId of the position\\n    // /// @return Whether the position is staked in the gauge\\n    // function stakedContains(address depositor, uint256 tokenId) external view returns (bool);\\n\\n    // /// @notice The amount of positions staked in the gauge by a certain user\\n    // /// @param depositor The address of the user\\n    // /// @return The amount of positions staked in the gauge\\n    // function stakedLength(address depositor) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4bdf058d60d0b1923c608938dcb49a3b02ea9cadc2c84f06114a2d8e0ca5d26\",\"license\":\"MIT\"},\"contracts/interfaces/aerodrome/ICLPool.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title The interface for a CL Pool\\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface ICLPool {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            bool unlocked\\n        );\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The gauge corresponding to this pool\\n    /// @return The gauge contract address\\n    function gauge() external view returns (address);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @dev This value includes staked liquidity\\n    function liquidity() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xcf6433082f22ac22d03827619af1e650da13a86515cce2be4590675338a009fd\"},\"contracts/interfaces/aerodrome/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps CL positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\n// slither-disable-start erc20-interface\\ninterface INonfungiblePositionManager {\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) external returns (address);\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return tickSpacing The tick spacing associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            int24 tickSpacing,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        int24 tickSpacing;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n        uint160 sqrtPriceX96;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    /// @dev The use of this function can cause a loss to users of the NonfungiblePositionManager\\n    /// @dev for tokens that have very high decimals.\\n    /// @dev The amount of tokens necessary for the loss is: 3.4028237e+38.\\n    /// @dev This is equivalent to 1e20 value with 18 decimals.\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @notice Used to update staked positions before deposit and withdraw\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n\\n    /// @notice Sets a new Token Descriptor\\n    /// @param _tokenDescriptor Address of the new Token Descriptor to be chosen\\n    function setTokenDescriptor(address _tokenDescriptor) external;\\n\\n    /// @notice Sets a new Owner address\\n    /// @param _owner Address of the new Owner to be chosen\\n    function setOwner(address _owner) external;\\n}\\n// slither-disable-end erc20-interface\\n\",\"keccak256\":\"0x308f7c2621bd314508906e55c4b72a8df09f785b0c11336ccaa4b9159bf07b86\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/aerodrome/ISugarHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\npragma abicoder v2;\\n\\nimport { INonfungiblePositionManager } from \\\"./INonfungiblePositionManager.sol\\\";\\n\\ninterface ISugarHelper {\\n    struct PopulatedTick {\\n        int24 tick;\\n        uint160 sqrtRatioX96;\\n        int128 liquidityNet;\\n        uint128 liquidityGross;\\n    }\\n\\n    ///\\n    /// Wrappers for LiquidityAmounts\\n    ///\\n\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) external pure returns (uint256 amount0, uint256 amount1);\\n\\n    function getLiquidityForAmounts(\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96\\n    ) external pure returns (uint256 liquidity);\\n\\n    /// @notice Computes the amount of token0 for a given amount of token1 and price range\\n    /// @param amount1 Amount of token1 to estimate liquidity\\n    /// @param pool Address of the pool to be used\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param tickLow Lower tick boundary\\n    /// @param tickLow Upper tick boundary\\n    /// @dev   If the given pool address is not the zero address, will fetch `sqrtRatioX96` from pool\\n    /// @return amount0 Estimated amount of token0\\n    function estimateAmount0(\\n        uint256 amount1,\\n        address pool,\\n        uint160 sqrtRatioX96,\\n        int24 tickLow,\\n        int24 tickHigh\\n    ) external view returns (uint256 amount0);\\n\\n    /// @notice Computes the amount of token1 for a given amount of token0 and price range\\n    /// @param amount0 Amount of token0 to estimate liquidity\\n    /// @param pool Address of the pool to be used\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param tickLow Lower tick boundary\\n    /// @param tickLow Upper tick boundary\\n    /// @dev   If the given pool address is not the zero address, will fetch `sqrtRatioX96` from pool\\n    /// @return amount1 Estimated amount of token1\\n    function estimateAmount1(\\n        uint256 amount0,\\n        address pool,\\n        uint160 sqrtRatioX96,\\n        int24 tickLow,\\n        int24 tickHigh\\n    ) external view returns (uint256 amount1);\\n\\n    ///\\n    /// Wrappers for PositionValue\\n    ///\\n\\n    function principal(\\n        INonfungiblePositionManager positionManager,\\n        uint256 tokenId,\\n        uint160 sqrtRatioX96\\n    ) external view returns (uint256 amount0, uint256 amount1);\\n\\n    function fees(INonfungiblePositionManager positionManager, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    ///\\n    /// Wrappers for TickMath\\n    ///\\n\\n    function getSqrtRatioAtTick(int24 tick)\\n        external\\n        pure\\n        returns (uint160 sqrtRatioX96);\\n\\n    function getTickAtSqrtRatio(uint160 sqrtRatioX96)\\n        external\\n        pure\\n        returns (int24 tick);\\n\\n    /// @notice Fetches Tick Data for all populated Ticks in given bitmaps\\n    /// @param pool Address of the pool from which to fetch data\\n    /// @param startTick Tick from which the first bitmap will be fetched\\n    /// @dev   The number of bitmaps fetched by this function should always be `MAX_BITMAPS`,\\n    ///        unless there are less than `MAX_BITMAPS` left to iterate through\\n    /// @return populatedTicks Array of all Populated Ticks in the provided bitmaps\\n    function getPopulatedTicks(address pool, int24 startTick)\\n        external\\n        view\\n        returns (PopulatedTick[] memory populatedTicks);\\n}\\n\",\"keccak256\":\"0x21719f61697965415b71bde11b9b7fdb3806e939fd82d4917561568bec66e837\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/aerodrome/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via CL\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        int24 tickSpacing;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        int24 tickSpacing;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x1d1fb103a1abbfa8433d6a4a10d415b0978bab2c18677924138110f72dc53a1f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/strategies/aerodrome/AerodromeAMOStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Aerodrome AMO strategy\\n * @author Origin Protocol Inc\\n */\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../../utils/InitializableAbstractStrategy.sol\\\";\\nimport { StableMath } from \\\"../../utils/StableMath.sol\\\";\\n\\nimport { ISugarHelper } from \\\"../../interfaces/aerodrome/ISugarHelper.sol\\\";\\nimport { INonfungiblePositionManager } from \\\"../../interfaces/aerodrome/INonfungiblePositionManager.sol\\\";\\nimport { ISwapRouter } from \\\"../../interfaces/aerodrome/ISwapRouter.sol\\\";\\nimport { ICLPool } from \\\"../../interfaces/aerodrome/ICLPool.sol\\\";\\nimport { ICLGauge } from \\\"../../interfaces/aerodrome/ICLGauge.sol\\\";\\nimport { IVault } from \\\"../../interfaces/IVault.sol\\\";\\n\\ncontract AerodromeAMOStrategy is InitializableAbstractStrategy {\\n    using StableMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n\\n    /************************************************\\n            Important (!) setup configuration\\n    *************************************************/\\n\\n    /**\\n     * In order to be able to remove a reasonable amount of complexity from the contract one of the\\n     * preconditions for this contract to function correctly is to have an outside account mint a small\\n     * amount of liquidity in the tick space where the contract will deploy's its liquidity and then send\\n     * that NFT LP position to a dead address (transfer to zero address not allowed.) See example of such\\n     * NFT LP token:\\n     * https://basescan.org/token/0x827922686190790b37229fd06084350e74485b72?a=413296#inventory\\n     */\\n\\n    /***************************************\\n            Storage slot members\\n    ****************************************/\\n\\n    /// @notice tokenId of the liquidity position\\n    uint256 public tokenId;\\n    /// @dev Minimum amount of tokens the strategy would be able to withdraw from the pool.\\n    ///      minimum amount of tokens are withdrawn at a 1:1 price\\n    uint256 public underlyingAssets;\\n    /// @notice Marks the start of the interval that defines the allowed range of WETH share in\\n    /// the pre-configured pool's liquidity ticker\\n    uint256 public allowedWethShareStart;\\n    /// @notice Marks the end of the interval that defines the allowed range of WETH share in\\n    /// the pre-configured pool's liquidity ticker\\n    uint256 public allowedWethShareEnd;\\n    /// @dev reserved for inheritance\\n    int256[46] private __reserved;\\n\\n    /***************************************\\n          Constants, structs and events\\n    ****************************************/\\n\\n    /// @notice The address of the Wrapped ETH (WETH) token contract\\n    address public immutable WETH;\\n    /// @notice The address of the OETHb token contract\\n    address public immutable OETHb;\\n    /// @notice lower tick set to -1 representing the price of 1.0001 of WETH for 1 OETHb.\\n    int24 public immutable lowerTick;\\n    /// @notice lower tick set to 0 representing the price of 1.0000 of WETH for 1 OETHb.\\n    int24 public immutable upperTick;\\n    /// @notice tick spacing of the pool (set to 1)\\n    int24 public immutable tickSpacing;\\n    /// @notice the swapRouter for performing swaps\\n    ISwapRouter public immutable swapRouter;\\n    /// @notice the underlying AMO Slipstream pool\\n    ICLPool public immutable clPool;\\n    /// @notice the gauge for the corresponding Slipstream pool (clPool)\\n    /// @dev can become an immutable once the gauge is created on the base main-net\\n    ICLGauge public immutable clGauge;\\n    /// @notice the Position manager contract that is used to manage the pool's position\\n    INonfungiblePositionManager public immutable positionManager;\\n    /// @notice helper contract for liquidity and ticker math\\n    ISugarHelper public immutable helper;\\n    /// @notice sqrtRatioX96TickLower\\n    /// @dev tick lower has value -1 and represents the lowest price of WETH priced in OETHb. Meaning the pool\\n    /// offers less than 1 OETHb for 1 WETH. In other terms to get 1 OETHB the swap needs to offer 1.0001 WETH\\n    /// this is where purchasing OETHb with WETH within the liquidity position is most expensive\\n    uint160 public immutable sqrtRatioX96TickLower;\\n    /// @notice sqrtRatioX96TickHigher\\n    /// @dev tick higher has value 0 and represents 1:1 price parity of WETH to OETHb\\n    uint160 public immutable sqrtRatioX96TickHigher;\\n    /// @dev tick closest to 1:1 price parity\\n    ///      Correctly assessing which tick is closer to 1:1 price parity is important since it affects\\n    ///      the way we calculate the underlying assets in check Balance. The underlying aerodrome pool\\n    ///      orders the tokens depending on the values of their addresses. If OETH token is token0 in the pool\\n    ///      then sqrtRatioX96TickClosestToParity=sqrtRatioX96TickLower. If it is token1 in the pool then\\n    ///      sqrtRatioX96TickClosestToParity=sqrtRatioX96TickHigher\\n    uint160 public immutable sqrtRatioX96TickClosestToParity;\\n\\n    /// @dev a threshold under which the contract no longer allows for the protocol to rebalance. Guarding\\n    ///      against a strategist / guardian being taken over and with multiple transactions draining the\\n    ///      protocol funds.\\n    uint256 public constant SOLVENCY_THRESHOLD = 0.998 ether;\\n\\n    error NotEnoughWethForSwap(uint256 wethBalance, uint256 requiredWeth); // 0x989e5ca8\\n    error NotEnoughWethLiquidity(uint256 wethBalance, uint256 requiredWeth); // 0xa6737d87\\n    error PoolRebalanceOutOfBounds(\\n        uint256 currentPoolWethShare,\\n        uint256 allowedWethShareStart,\\n        uint256 allowedWethShareEnd\\n    ); // 0x3681e8e0\\n    error OutsideExpectedTickRange(int24 currentTick); // 0x5a2eba75\\n\\n    event PoolRebalanced(uint256 currentPoolWethShare);\\n\\n    event PoolWethShareIntervalUpdated(\\n        uint256 allowedWethShareStart,\\n        uint256 allowedWethShareEnd\\n    );\\n\\n    event LiquidityRemoved(\\n        uint256 withdrawLiquidityShare,\\n        uint256 removedWETHAmount,\\n        uint256 removedOETHbAmount,\\n        uint256 wethAmountCollected,\\n        uint256 oethbAmountCollected,\\n        uint256 underlyingAssets\\n    );\\n\\n    event LiquidityAdded(\\n        uint256 wethAmountDesired,\\n        uint256 oethbAmountDesired,\\n        uint256 wethAmountSupplied,\\n        uint256 oethbAmountSupplied,\\n        uint256 tokenId,\\n        uint256 underlyingAssets\\n    );\\n\\n    event UnderlyingAssetsUpdated(uint256 underlyingAssets);\\n\\n    /**\\n     * @dev Verifies that the caller is the Governor, or Strategist.\\n     */\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == IVault(vaultAddress).strategistAddr() ||\\n                msg.sender == governor(),\\n            \\\"Not the Governor or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Un-stakes the token from the gauge for the execution duration of\\n     * the function and after that re-stakes it back in.\\n     *\\n     * It is important that the token is unstaked and owned by the strategy contract\\n     * during any liquidity altering operations and that it is re-staked back into the\\n     * gauge after liquidity changes. If the token fails to re-stake back to the\\n     * gauge it is not earning incentives.\\n     */\\n    // all functions using this modifier are used by functions with reentrancy check\\n    // slither-disable-start reentrancy-no-eth\\n    modifier gaugeUnstakeAndRestake() {\\n        // because of solidity short-circuit _isLpTokenStakedInGauge doesn't get called\\n        // when tokenId == 0\\n        if (tokenId != 0 && _isLpTokenStakedInGauge()) {\\n            clGauge.withdraw(tokenId);\\n        }\\n        _;\\n        // because of solidity short-circuit _isLpTokenStakedInGauge doesn't get called\\n        // when tokenId == 0\\n        if (tokenId != 0 && !_isLpTokenStakedInGauge()) {\\n            /**\\n             * It can happen that a withdrawal (or a full withdrawal) transactions would\\n             * remove all of the liquidity from the token with a NFT token still existing.\\n             * In that case the token can not be staked into the gauge, as some liquidity\\n             * needs to be added to it first.\\n             */\\n            if (_getLiquidity() > 0) {\\n                // if token liquidity changes the positionManager requires re-approval.\\n                // to any contract pre-approved to handle the token.\\n                positionManager.approve(address(clGauge), tokenId);\\n                clGauge.deposit(tokenId);\\n            }\\n        }\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    /// @notice the constructor\\n    /// @param _stratConfig the basic strategy configuration\\n    /// @param _wethAddress Address of the Erc20 WETH Token contract\\n    /// @param _oethbAddress Address of the Erc20 OETHb Token contract\\n    /// @param _swapRouter Address of the Aerodrome Universal Swap Router\\n    /// @param _nonfungiblePositionManager Address of position manager to add/remove\\n    ///         the liquidity\\n    /// @param _clPool Address of the Aerodrome concentrated liquidity pool\\n    /// @param _clGauge Address of the Aerodrome slipstream pool gauge\\n    /// @param _sugarHelper Address of the Aerodrome Sugar helper contract\\n    /// @param _lowerBoundingTick Smaller bounding tick of our liquidity position\\n    /// @param _upperBoundingTick Larger bounding tick of our liquidity position\\n    /// @param _tickClosestToParity Tick that is closer to 1:1 price parity\\n    constructor(\\n        BaseStrategyConfig memory _stratConfig,\\n        address _wethAddress,\\n        address _oethbAddress,\\n        address _swapRouter,\\n        address _nonfungiblePositionManager,\\n        address _clPool,\\n        address _clGauge,\\n        address _sugarHelper,\\n        int24 _lowerBoundingTick,\\n        int24 _upperBoundingTick,\\n        int24 _tickClosestToParity\\n    ) InitializableAbstractStrategy(_stratConfig) {\\n        require(\\n            _lowerBoundingTick == _tickClosestToParity ||\\n                _upperBoundingTick == _tickClosestToParity,\\n            \\\"Misconfigured tickClosestToParity\\\"\\n        );\\n        require(\\n            ICLPool(_clPool).token0() == _wethAddress,\\n            \\\"Only WETH supported as token0\\\"\\n        );\\n        require(\\n            ICLPool(_clPool).token1() == _oethbAddress,\\n            \\\"Only OETHb supported as token1\\\"\\n        );\\n        int24 _tickSpacing = ICLPool(_clPool).tickSpacing();\\n        // when we generalize AMO we might support other tick spacings\\n        require(_tickSpacing == 1, \\\"Unsupported tickSpacing\\\");\\n\\n        WETH = _wethAddress;\\n        OETHb = _oethbAddress;\\n        swapRouter = ISwapRouter(_swapRouter);\\n        positionManager = INonfungiblePositionManager(\\n            _nonfungiblePositionManager\\n        );\\n        clPool = ICLPool(_clPool);\\n        clGauge = ICLGauge(_clGauge);\\n        helper = ISugarHelper(_sugarHelper);\\n        sqrtRatioX96TickLower = ISugarHelper(_sugarHelper).getSqrtRatioAtTick(\\n            _lowerBoundingTick\\n        );\\n        sqrtRatioX96TickHigher = ISugarHelper(_sugarHelper).getSqrtRatioAtTick(\\n            _upperBoundingTick\\n        );\\n        sqrtRatioX96TickClosestToParity = ISugarHelper(_sugarHelper)\\n            .getSqrtRatioAtTick(_tickClosestToParity);\\n\\n        lowerTick = _lowerBoundingTick;\\n        upperTick = _upperBoundingTick;\\n        tickSpacing = _tickSpacing;\\n    }\\n\\n    /**\\n     * @notice initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     */\\n    function initialize(address[] memory _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n        initializer\\n    {\\n        InitializableAbstractStrategy._initialize(\\n            _rewardTokenAddresses,\\n            new address[](0),\\n            new address[](0)\\n        );\\n    }\\n\\n    /***************************************\\n                  Configuration \\n    ****************************************/\\n\\n    /**\\n     * @notice Set allowed pool weth share interval. After the rebalance happens\\n     * the share of WETH token in the ticker needs to be withing the specifications\\n     * of the interval.\\n     *\\n     * @param _allowedWethShareStart Start of WETH share interval expressed as 18 decimal amount\\n     * @param _allowedWethShareEnd End of WETH share interval expressed as 18 decimal amount\\n     */\\n    function setAllowedPoolWethShareInterval(\\n        uint256 _allowedWethShareStart,\\n        uint256 _allowedWethShareEnd\\n    ) external onlyGovernor {\\n        require(\\n            _allowedWethShareStart < _allowedWethShareEnd,\\n            \\\"Invalid interval\\\"\\n        );\\n        // can not go below 1% weth share\\n        require(_allowedWethShareStart > 0.01 ether, \\\"Invalid interval start\\\");\\n        // can not go above 95% weth share\\n        require(_allowedWethShareEnd < 0.95 ether, \\\"Invalid interval end\\\");\\n\\n        allowedWethShareStart = _allowedWethShareStart;\\n        allowedWethShareEnd = _allowedWethShareEnd;\\n        emit PoolWethShareIntervalUpdated(\\n            allowedWethShareStart,\\n            allowedWethShareEnd\\n        );\\n    }\\n\\n    /***************************************\\n                Periphery utils\\n    ****************************************/\\n\\n    function _isLpTokenStakedInGauge() internal view returns (bool) {\\n        require(tokenId != 0, \\\"Missing NFT LP token\\\");\\n\\n        address owner = positionManager.ownerOf(tokenId);\\n        require(\\n            owner == address(clGauge) || owner == address(this),\\n            \\\"Unexpected token owner\\\"\\n        );\\n        return owner == address(clGauge);\\n    }\\n\\n    /***************************************\\n               Strategy overrides \\n    ****************************************/\\n\\n    /**\\n     * @notice Deposit an amount of assets into the strategy contract. Calling deposit doesn't\\n     *         automatically deposit funds into the underlying Aerodrome pool\\n     * @param _asset   Address for the asset\\n     * @param _amount  Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        _deposit(_asset, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit WETH to the strategy contract. This function does not add liquidity to the\\n     *         underlying Aerodrome pool.\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        uint256 _wethBalance = IERC20(WETH).balanceOf(address(this));\\n        if (_wethBalance > 0) {\\n            _deposit(WETH, _wethBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposit WETH to the contract. This function doesn't deposit the liquidity to the\\n     *      pool, that is done via the rebalance call.\\n     * @param _asset Address of the asset to deposit\\n     * @param _amount Amount of assets to deposit\\n     */\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        require(_asset == WETH, \\\"Unsupported asset\\\");\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n        emit Deposit(_asset, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Rebalance the pool to the desired token split and Deposit any WETH on the contract to the\\n     * underlying aerodrome pool. Print the required amount of corresponding OETHb. After the rebalancing is\\n     * done burn any potentially remaining OETHb tokens still on the strategy contract.\\n     *\\n     * This function has a slightly different behaviour depending on the status of the underlying Aerodrome\\n     * slipstream pool. The function consists of the following 3 steps:\\n     * 1. withdrawPartialLiqidity -> so that moving the activeTrading price via  a swap is cheaper\\n     * 2. swapToDesiredPosition   -> move active trading price in the pool to be able to deposit WETH & OETHb\\n     *                               tokens with the desired pre-configured shares\\n     * 3. addLiquidity            -> add liquidity into the pool respecting share split configuration\\n     *\\n     * Scenario 1: When there is no liquidity in the pool from the strategy but there is from other LPs then\\n     *             only step 1 is skipped. (It is important to note that liquidity needs to exist in the configured\\n     *             strategy tick ranges in order for the swap to be possible) Step 3 mints new liquidity position\\n     *             instead of adding to an existing one.\\n     * Scenario 2: When there is strategy's liquidity in the pool all 3 steps are taken\\n     *\\n     *\\n     * Exact _amountToSwap, _swapWeth & _minTokenReceived parameters shall be determined by simulating the\\n     * transaction off-chain. The strategy checks that after the swap the share of the tokens is in the\\n     * expected ranges.\\n     *\\n     * @param _amountToSwap The amount of the token to swap\\n     * @param _swapWeth Swap using WETH when true, use OETHb when false\\n     * @param _minTokenReceived Slippage check -> minimum amount of token expected in return\\n     */\\n    function rebalance(\\n        uint256 _amountToSwap,\\n        bool _swapWeth,\\n        uint256 _minTokenReceived\\n    ) external nonReentrant onlyGovernorOrStrategist {\\n        /**\\n         * Would be nice to check if there is any total liquidity in the pool before performing this swap\\n         * but there is no easy way to do that in UniswapV3:\\n         * - clPool.liquidity() -> only liquidity in the active tick\\n         * - asset[1&2].balanceOf(address(clPool)) -> will include uncollected tokens of LP providers\\n         *   after their liquidity position has been decreased\\n         */\\n\\n        /**\\n         * When rebalance is called for the first time there is no strategy\\n         * liquidity in the pool yet. The full liquidity removal is thus skipped.\\n         */\\n        if (tokenId != 0) {\\n            _removeLiquidity(1e18);\\n        }\\n        // in some cases we will just want to add liquidity and not issue a swap to move the\\n        // active trading position within the pool\\n        if (_amountToSwap > 0) {\\n            _swapToDesiredPosition(_amountToSwap, _swapWeth, _minTokenReceived);\\n        }\\n        // calling check liquidity early so we don't get unexpected errors when adding liquidity\\n        // in the later stages of this function\\n        _checkForExpectedPoolPrice();\\n\\n        _addLiquidity();\\n        // this call shouldn't be necessary, since adding liquidity shouldn't affect the active\\n        // trading price. It is a defensive programming measure.\\n        _checkForExpectedPoolPrice();\\n\\n        // revert if protocol insolvent\\n        _solvencyAssert();\\n    }\\n\\n    /**\\n     * Checks that the protocol is solvent, protecting from a rogue Strategist / Guardian that can\\n     * keep rebalancing the pool in both directions making the protocol lose a tiny amount of\\n     * funds each time.\\n     *\\n     * Protocol must be at least SOLVENCY_THRESHOLD (99,8 %) backed in order for the rebalances to\\n     * function.\\n     */\\n    function _solvencyAssert() internal view {\\n        uint256 _totalVaultValue = IVault(vaultAddress).totalValue();\\n        uint256 _totalOethbSupply = IERC20(OETHb).totalSupply();\\n\\n        if (\\n            _totalVaultValue.divPrecisely(_totalOethbSupply) <\\n            SOLVENCY_THRESHOLD\\n        ) {\\n            revert(\\\"Protocol insolvent\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Decrease partial or all liquidity from the pool.\\n     * @param _liquidityToDecrease The amount of liquidity to remove expressed in 18 decimal point\\n     */\\n    function _removeLiquidity(uint256 _liquidityToDecrease)\\n        internal\\n        gaugeUnstakeAndRestake\\n    {\\n        require(_liquidityToDecrease > 0, \\\"Must remove some liquidity\\\");\\n\\n        uint128 _liquidity = _getLiquidity();\\n        // need to convert to uint256 since intermittent result is to big for uint128 to handle\\n        uint128 _liqudityToRemove = uint256(_liquidity)\\n            .mulTruncate(_liquidityToDecrease)\\n            .toUint128();\\n\\n        /**\\n         * There is no liquidity to remove -> exit function early. This can happen after a\\n         * withdraw/withdrawAll removes all of the liquidity while retaining the NFT token.\\n         */\\n        if (_liquidity == 0 || _liqudityToRemove == 0) {\\n            return;\\n        }\\n\\n        (uint256 _amountWeth, uint256 _amountOethb) = positionManager\\n            .decreaseLiquidity(\\n                // Both expected amounts can be 0 since we don't really care if any swaps\\n                // happen just before the liquidity removal.\\n                INonfungiblePositionManager.DecreaseLiquidityParams({\\n                    tokenId: tokenId,\\n                    liquidity: _liqudityToRemove,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    deadline: block.timestamp\\n                })\\n            );\\n\\n        (\\n            uint256 _amountWethCollected,\\n            uint256 _amountOethbCollected\\n        ) = positionManager.collect(\\n                INonfungiblePositionManager.CollectParams({\\n                    tokenId: tokenId,\\n                    recipient: address(this),\\n                    amount0Max: type(uint128).max, // defaults to all tokens owed\\n                    amount1Max: type(uint128).max // defaults to all tokens owed\\n                })\\n            );\\n\\n        _updateUnderlyingAssets();\\n\\n        emit LiquidityRemoved(\\n            _liquidityToDecrease,\\n            _amountWeth, //removedWethAmount\\n            _amountOethb, //removedOethbAmount\\n            _amountWethCollected,\\n            _amountOethbCollected,\\n            underlyingAssets\\n        );\\n    }\\n\\n    /**\\n     * @dev Perform a swap so that after the swap the ticker has the desired WETH to OETHb token share.\\n     */\\n    function _swapToDesiredPosition(\\n        uint256 _amountToSwap,\\n        bool _swapWeth,\\n        uint256 _minTokenReceived\\n    ) internal {\\n        IERC20 _tokenToSwap = IERC20(_swapWeth ? WETH : OETHb);\\n        uint256 _balance = _tokenToSwap.balanceOf(address(this));\\n\\n        if (_balance < _amountToSwap) {\\n            if (_swapWeth) {\\n                revert NotEnoughWethForSwap(_balance, _amountToSwap);\\n            }\\n            // if swapping OETHb\\n            uint256 mintForSwap = _amountToSwap - _balance;\\n            IVault(vaultAddress).mintForStrategy(mintForSwap);\\n        }\\n\\n        // Swap it\\n        swapRouter.exactInputSingle(\\n            // sqrtPriceLimitX96 is just a rough sanity check that we are within 0 -> 1 tick\\n            // a more fine check is performed in _checkForExpectedPoolPrice\\n            // Note: this needs further work if we want to generalize this approach\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: address(_tokenToSwap),\\n                tokenOut: _swapWeth ? OETHb : WETH,\\n                tickSpacing: tickSpacing, // set to 1\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: _amountToSwap,\\n                amountOutMinimum: _minTokenReceived, // slippage check\\n                sqrtPriceLimitX96: _swapWeth\\n                    ? sqrtRatioX96TickLower\\n                    : sqrtRatioX96TickHigher\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Add liquidity into the pool in the pre-configured WETH to OETHb share ratios\\n     * defined by the allowedPoolWethShareStart|End interval. This function will respect\\n     * liquidity ratios when there no liquidity yet in the pool. If liquidity is already\\n     * present then it relies on the `_swapToDesiredPosition` function in a step before\\n     * to already move the trading price to desired position (with some tolerance).\\n     */\\n    // rebalance already has re-entrency checks\\n    // slither-disable-start reentrancy-no-eth\\n    function _addLiquidity() internal gaugeUnstakeAndRestake {\\n        uint256 _wethBalance = IERC20(WETH).balanceOf(address(this));\\n        uint256 _oethbBalance = IERC20(OETHb).balanceOf(address(this));\\n        require(_wethBalance > 0, \\\"Must add some WETH\\\");\\n\\n        uint160 _currentPrice = getPoolX96Price();\\n        /**\\n         * Sanity check active trading price is positioned within our desired tick.\\n         *\\n         * We revert when price is equal to the lower tick even though that is still\\n         * a valid amount in regards to ticker position by Sugar.estimateAmount call.\\n         * Current price equaling tick bound at the 1:1 price parity results in\\n         * uint overfow when calculating the OETHb balance to deposit.\\n         */\\n        if (\\n            _currentPrice <= sqrtRatioX96TickLower ||\\n            _currentPrice >= sqrtRatioX96TickHigher\\n        ) {\\n            revert OutsideExpectedTickRange(getCurrentTradingTick());\\n        }\\n\\n        /**\\n         * If estimateAmount1 call fails it could be due to _currentPrice being really\\n         * close to a tick and amount1 is a larger number than the sugar helper is able\\n         * to compute.\\n         *\\n         * If token addresses were reversed estimateAmount0 would be required here\\n         */\\n        uint256 _oethbRequired = helper.estimateAmount1(\\n            _wethBalance,\\n            address(0), // no need to pass pool address when current price is specified\\n            _currentPrice,\\n            lowerTick,\\n            upperTick\\n        );\\n\\n        if (_oethbRequired > _oethbBalance) {\\n            IVault(vaultAddress).mintForStrategy(\\n                _oethbRequired - _oethbBalance\\n            );\\n        }\\n\\n        uint256 _wethAmountSupplied;\\n        uint256 _oethbAmountSupplied;\\n        if (tokenId == 0) {\\n            (\\n                tokenId,\\n                ,\\n                _wethAmountSupplied,\\n                _oethbAmountSupplied\\n            ) = positionManager.mint(\\n                /** amount0Min & amount1Min are left at 0 because slippage protection is ensured by the\\n                 * _checkForExpectedPoolPrice\\n                 *\\u203a\\n                 * Also sqrtPriceX96 is 0 because the pool is already created\\n                 * non zero amount attempts to create a new instance of the pool\\n                 */\\n                INonfungiblePositionManager.MintParams({\\n                    token0: WETH,\\n                    token1: OETHb,\\n                    tickSpacing: tickSpacing,\\n                    tickLower: lowerTick,\\n                    tickUpper: upperTick,\\n                    amount0Desired: _wethBalance,\\n                    amount1Desired: _oethbRequired,\\n                    amount0Min: 0,\\n                    amount1Min: 0,\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    sqrtPriceX96: 0\\n                })\\n            );\\n        } else {\\n            (, _wethAmountSupplied, _oethbAmountSupplied) = positionManager\\n                .increaseLiquidity(\\n                    /** amount0Min & amount1Min are left at 0 because slippage protection is ensured by the\\n                     * _checkForExpectedPoolPrice\\n                     */\\n                    INonfungiblePositionManager.IncreaseLiquidityParams({\\n                        tokenId: tokenId,\\n                        amount0Desired: _wethBalance,\\n                        amount1Desired: _oethbRequired,\\n                        amount0Min: 0,\\n                        amount1Min: 0,\\n                        deadline: block.timestamp\\n                    })\\n                );\\n        }\\n\\n        _updateUnderlyingAssets();\\n        emit LiquidityAdded(\\n            _wethBalance, // wethAmountDesired\\n            _oethbRequired, // oethbAmountDesired\\n            _wethAmountSupplied, // wethAmountSupplied\\n            _oethbAmountSupplied, // oethbAmountSupplied\\n            tokenId, // tokenId\\n            underlyingAssets\\n        );\\n\\n        // burn remaining OETHb\\n        _burnOethbOnTheContract();\\n    }\\n\\n    // slither-disable-end reentrancy-no-eth\\n\\n    /**\\n     * @dev Check that the Aerodrome pool price is within the expected\\n     *      parameters.\\n     *      This function works whether the strategy contract has liquidity\\n     *      position in the pool or not.\\n     */\\n    function _checkForExpectedPoolPrice() internal {\\n        require(\\n            allowedWethShareStart != 0 && allowedWethShareEnd != 0,\\n            \\\"Weth share interval not set\\\"\\n        );\\n\\n        uint160 _currentPrice = getPoolX96Price();\\n\\n        /**\\n         * First check we are in expected tick range\\n         *\\n         * We revert even though price being equal to the lower tick would still\\n         * count being within lower tick for the purpose of Sugar.estimateAmount calls\\n         */\\n        if (\\n            _currentPrice <= sqrtRatioX96TickLower ||\\n            _currentPrice >= sqrtRatioX96TickHigher\\n        ) {\\n            revert OutsideExpectedTickRange(getCurrentTradingTick());\\n        }\\n\\n        /**\\n         * If estimateAmount1 call fails it could be due to _currentPrice being really\\n         * close to a tick and amount1 too big to compute.\\n         *\\n         * If token addresses were reversed estimateAmount0 would be required here\\n         */\\n        uint256 _normalizedWethAmount = 1 ether;\\n        uint256 _correspondingOethAmount = helper.estimateAmount1(\\n            _normalizedWethAmount,\\n            address(0), // no need to pass pool address when current price is specified\\n            _currentPrice,\\n            lowerTick,\\n            upperTick\\n        );\\n\\n        // 18 decimal number expressed weth tick share\\n        uint256 _wethSharePct = _normalizedWethAmount.divPrecisely(\\n            _normalizedWethAmount + _correspondingOethAmount\\n        );\\n\\n        if (\\n            _wethSharePct < allowedWethShareStart ||\\n            _wethSharePct > allowedWethShareEnd\\n        ) {\\n            revert PoolRebalanceOutOfBounds(\\n                _wethSharePct,\\n                allowedWethShareStart,\\n                allowedWethShareEnd\\n            );\\n        }\\n        emit PoolRebalanced(_wethSharePct);\\n    }\\n\\n    /**\\n     * Burns any OETHb tokens remaining on the strategy contract\\n     */\\n    function _burnOethbOnTheContract() internal {\\n        uint256 _oethbBalance = IERC20(OETHb).balanceOf(address(this));\\n        if (_oethbBalance > 0) {\\n            IVault(vaultAddress).burnForStrategy(_oethbBalance);\\n        }\\n    }\\n\\n    /// @dev This function assumes there are no uncollected tokens in the clPool owned by the strategy contract.\\n    ///      For that reason any liquidity withdrawals must also collect the tokens.\\n    function _updateUnderlyingAssets() internal {\\n        if (tokenId == 0) {\\n            underlyingAssets = 0;\\n            emit UnderlyingAssetsUpdated(underlyingAssets);\\n            return;\\n        }\\n\\n        uint128 _liquidity = _getLiquidity();\\n\\n        /**\\n         * Our net value represent the smallest amount of tokens we are able to extract from the position\\n         * given our liquidity.\\n         *\\n         * The least amount of tokens extraditable from the position is where the active trading price is\\n         * at the ticker 0 meaning the pool is offering 1:1 trades between WETH & OETHb. At that moment the pool\\n         * consists completely of OETHb and no WETH.\\n         *\\n         * The more swaps from WETH -> OETHb happen on the pool the more the price starts to move towards the -1\\n         * ticker making OETHb (priced in WETH) more expensive.\\n         *\\n         * An additional note: when liquidity is 0 then the helper returns 0 for both token amounts. And the\\n         * function set underlying assets to 0.\\n         */\\n        (uint256 _wethAmount, uint256 _oethbAmount) = helper\\n            .getAmountsForLiquidity(\\n                sqrtRatioX96TickClosestToParity, // sqrtRatioX96\\n                sqrtRatioX96TickLower, // sqrtRatioAX96\\n                sqrtRatioX96TickHigher, // sqrtRatioBX96\\n                _liquidity\\n            );\\n\\n        require(_wethAmount == 0, \\\"Non zero wethAmount\\\");\\n        underlyingAssets = _oethbAmount;\\n        emit UnderlyingAssetsUpdated(underlyingAssets);\\n    }\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     *         send to the `_recipient`.\\n     * @param _recipient  Address to which the asset should be sent\\n     * @param _asset      WETH address\\n     * @param _amount     Amount of WETH to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_asset == WETH, \\\"Unsupported asset\\\");\\n        require(_recipient == vaultAddress, \\\"Only withdraw to vault allowed\\\");\\n\\n        uint256 _wethBalance = IERC20(WETH).balanceOf(address(this));\\n        if (_wethBalance < _amount) {\\n            require(tokenId != 0, \\\"No liquidity available\\\");\\n            uint256 _additionalWethRequired = _amount - _wethBalance;\\n            (uint256 _wethInThePool, ) = getPositionPrincipal();\\n\\n            if (_wethInThePool < _additionalWethRequired) {\\n                revert NotEnoughWethLiquidity(\\n                    _wethInThePool,\\n                    _additionalWethRequired\\n                );\\n            }\\n\\n            uint256 shareOfWethToRemove = Math.min(\\n                _additionalWethRequired.divPrecisely(_wethInThePool) + 1,\\n                1e18\\n            );\\n            _removeLiquidity(shareOfWethToRemove);\\n        }\\n\\n        // burn remaining OETHb\\n        _burnOethbOnTheContract();\\n        _withdraw(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw WETH and sends it to the Vault.\\n     */\\n    function withdrawAll() external override onlyVault nonReentrant {\\n        if (tokenId != 0) {\\n            _removeLiquidity(1e18);\\n        }\\n\\n        uint256 _balance = IERC20(WETH).balanceOf(address(this));\\n        if (_balance > 0) {\\n            _withdraw(vaultAddress, _balance);\\n        }\\n        // burn remaining OETHb\\n        _burnOethbOnTheContract();\\n    }\\n\\n    function _withdraw(address _recipient, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient == vaultAddress, \\\"Only withdraw to vault allowed\\\");\\n\\n        IERC20(WETH).safeTransfer(_recipient, _amount);\\n        emit Withdrawal(WETH, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Collect the AERO token from the gauge\\n     */\\n    function _collectRewardTokens() internal override {\\n        if (tokenId != 0 && _isLpTokenStakedInGauge()) {\\n            clGauge.getReward(tokenId);\\n        }\\n        super._collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset) public view override returns (bool) {\\n        return _asset == WETH;\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets\\n     */\\n    function safeApproveAllTokens()\\n        external\\n        override\\n        onlyGovernor\\n        nonReentrant\\n    {\\n        // to add liquidity to the clPool\\n        IERC20(WETH).safeApprove(address(positionManager), type(uint256).max);\\n        IERC20(OETHb).safeApprove(address(positionManager), type(uint256).max);\\n        // to be able to rebalance using the swapRouter\\n        IERC20(WETH).safeApprove(address(swapRouter), type(uint256).max);\\n        IERC20(OETHb).safeApprove(address(swapRouter), type(uint256).max);\\n    }\\n\\n    /***************************************\\n            Balances and Fees\\n    ****************************************/\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_asset == WETH, \\\"Only WETH supported\\\");\\n\\n        // we could in theory deposit to the strategy and forget to call rebalance in the same\\n        // governance transaction batch. In that case the WETH that is on the strategy contract\\n        // also needs to be accounted for.\\n        uint256 _wethBalance = IERC20(WETH).balanceOf(address(this));\\n        // just paranoia check, in case there is OETHb in the strategy that for some reason hasn't\\n        // been burned yet.\\n        uint256 _oethbBalance = IERC20(OETHb).balanceOf(address(this));\\n        return underlyingAssets + _wethBalance + _oethbBalance;\\n    }\\n\\n    /**\\n     * @dev Returns the balance of both tokens in a given position (excluding fees)\\n     * @return _amountWeth Amount of WETH in position\\n     * @return _amountOethb Amount of OETHb in position\\n     */\\n    function getPositionPrincipal()\\n        public\\n        view\\n        returns (uint256 _amountWeth, uint256 _amountOethb)\\n    {\\n        if (tokenId == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint160 _sqrtRatioX96 = getPoolX96Price();\\n        (_amountWeth, _amountOethb) = helper.principal(\\n            positionManager,\\n            tokenId,\\n            _sqrtRatioX96\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the current pool price in X96 format\\n     * @return _sqrtRatioX96 Pool price\\n     */\\n    function getPoolX96Price() public view returns (uint160 _sqrtRatioX96) {\\n        (_sqrtRatioX96, , , , , ) = clPool.slot0();\\n    }\\n\\n    /**\\n     * @notice Returns the current active trading tick of the underlying pool\\n     * @return _currentTick Current pool trading tick\\n     */\\n    function getCurrentTradingTick() public view returns (int24 _currentTick) {\\n        (, _currentTick, , , , ) = clPool.slot0();\\n    }\\n\\n    /**\\n     * @notice Returns the amount of liquidity in the contract's LP position\\n     * @return _liquidity Amount of liquidity in the position\\n     */\\n    function _getLiquidity() internal view returns (uint128 _liquidity) {\\n        if (tokenId == 0) {\\n            revert(\\\"No LP position\\\");\\n        }\\n\\n        (, , , , , , , _liquidity, , , , ) = positionManager.positions(tokenId);\\n    }\\n\\n    /***************************************\\n            Hidden functions\\n    ****************************************/\\n    /// @inheritdoc InitializableAbstractStrategy\\n    function setPTokenAddress(address, address) external override {\\n        // The pool tokens can never change.\\n        revert(\\\"Unsupported method\\\");\\n    }\\n\\n    /// @inheritdoc InitializableAbstractStrategy\\n    function removePToken(uint256) external override {\\n        // The pool tokens can never change.\\n        revert(\\\"Unsupported method\\\");\\n    }\\n\\n    /**\\n     * @dev Not supported\\n     */\\n    function _abstractSetPToken(address, address) internal override {\\n        // the deployer shall call safeApproveAllTokens() to set necessary approvals\\n        revert(\\\"Unsupported method\\\");\\n    }\\n\\n    /***************************************\\n            ERC721 management\\n    ****************************************/\\n\\n    /// @notice Callback function for whenever a NFT is transferred to this contract\\n    //  solhint-disable-next-line max-line-length\\n    /// Ref: https://docs.openzeppelin.com/contracts/3.x/api/token/erc721#IERC721Receiver-onERC721Received-address-address-uint256-bytes-\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x14289409466af5295fcfe417ec1b86a14701108dfd3df505ad7c2e40d54cd273\",\"license\":\"MIT\"},\"contracts/token/OUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OUSD Token Contract\\n * @dev ERC20 compatible contract for OUSD\\n * @dev Implements an elastic supply\\n * @author Origin Protocol Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with OUSD should be aware.\\n */\\n\\ncontract OUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdatedHighres(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n    event AccountRebasingEnabled(address account);\\n    event AccountRebasingDisabled(address account);\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded;\\n\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress,\\n        uint256 _initialCreditsPerToken\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = _initialCreditsPerToken;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of OUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return Low resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return Low resolution total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\n    }\\n\\n    /**\\n     * @return High resolution rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return High resolution total number of rebasing credits\\n     */\\n    function rebasingCreditsHighres() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @dev Backwards compatible with old low res credits per token.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 cpt = _creditsPerToken(_account);\\n        if (cpt == 1e27) {\\n            // For a period before the resolution upgrade, we created all new\\n            // contract accounts at high resolution. Since they are not changing\\n            // as a result of this upgrade, we will return their true values\\n            return (_creditBalances[_account], cpt);\\n        } else {\\n            return (\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\n                cpt / RESOLUTION_INCREASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address, and isUpgraded\\n     */\\n    function creditsBalanceOfHighres(address _account)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _creditBalances[_account],\\n            _creditsPerToken(_account),\\n            isUpgraded[_account] == 1\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of OUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            emit AccountRebasingDisabled(_account);\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable rebasing for an account.\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     * @param _account Address of the account.\\n     */\\n    function governanceRebaseOptIn(address _account)\\n        public\\n        nonReentrant\\n        onlyGovernor\\n    {\\n        _rebaseOptIn(_account);\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        _rebaseOptIn(msg.sender);\\n    }\\n\\n    function _rebaseOptIn(address _account) internal {\\n        require(_isNonRebasingAccount(_account), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[_account]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(_account));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(_account));\\n\\n        _creditBalances[_account] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[_account]);\\n\\n        rebaseState[_account] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[_account];\\n        emit AccountRebasingEnabled(_account);\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n        emit AccountRebasingDisabled(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and OUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of OUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdatedHighres(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdatedHighres(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2dc66b1ba02716d64eb47dd9117fda62650d8b57669e6c351437e0ad29ad5f19\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x108b7a69e0140da0072ca18f90a03a3340574400f81aa6076cd2cccdf13699c2\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract any contracts that need to initialize state after deployment.\\n * @author Origin Protocol Inc\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xaadbcc138114afed4af4f353c2ced2916e6ee14be91434789187f192caf0d786\",\"license\":\"MIT\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Base contract for vault strategies.\\n * @author Origin Protocol Inc\\n */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event HarvesterAddressesUpdated(\\n        address _oldHarvesterAddress,\\n        address _newHarvesterAddress\\n    );\\n\\n    /// @notice Address of the underlying platform\\n    address public immutable platformAddress;\\n    /// @notice Address of the OToken vault\\n    address public immutable vaultAddress;\\n\\n    /// @dev Replaced with an immutable variable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_platformAddress;\\n\\n    /// @dev Replaced with an immutable\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_vaultAddress;\\n\\n    /// @notice asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    /// @notice Full list of all assets supported by the strategy\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_rewardTokenAddress;\\n\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\n    // slither-disable-next-line constable-states\\n    uint256 private _deprecated_rewardLiquidationThreshold;\\n\\n    /// @notice Address of the Harvester contract allowed to collect reward tokens\\n    address public harvesterAddress;\\n\\n    /// @notice Address of the reward tokens. eg CRV, BAL, CVX, AURA\\n    address[] public rewardTokenAddresses;\\n\\n    /* Reserved for future expansion. Used to be 100 storage slots\\n     * and has decreased to accommodate:\\n     * - harvesterAddress\\n     * - rewardTokenAddresses\\n     */\\n    int256[98] private _reserved;\\n\\n    struct BaseStrategyConfig {\\n        address platformAddress; // Address of the underlying platform\\n        address vaultAddress; // Address of the OToken's Vault\\n    }\\n\\n    /**\\n     * @param _config The platform and OToken vault addresses\\n     */\\n    constructor(BaseStrategyConfig memory _config) {\\n        platformAddress = _config.platformAddress;\\n        vaultAddress = _config.vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _rewardTokenAddresses Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function _initialize(\\n        address[] memory _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; ++i) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Default implementation that transfers reward tokens to the Harvester\\n     * Implementing strategies need to add custom logic to collect the rewards.\\n     */\\n    function _collectRewardTokens() internal virtual {\\n        uint256 rewardTokenCount = rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                emit RewardTokenCollected(\\n                    harvesterAddress,\\n                    address(rewardToken),\\n                    balance\\n                );\\n                rewardToken.safeTransfer(harvesterAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\n     */\\n    modifier onlyVaultOrGovernorOrStrategist() {\\n        require(\\n            msg.sender == vaultAddress ||\\n                msg.sender == governor() ||\\n                msg.sender == IVault(vaultAddress).strategistAddr(),\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the reward token addresses. Any old addresses will be overwritten.\\n     * @param _rewardTokenAddresses Array of reward token addresses\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        uint256 rewardTokenCount = _rewardTokenAddresses.length;\\n        for (uint256 i = 0; i < rewardTokenCount; ++i) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external virtual onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @notice Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        virtual\\n        onlyGovernor\\n    {\\n        require(!supportsAsset(_asset), \\\"Cannot transfer supported asset\\\");\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /**\\n     * @notice Set the Harvester contract that can collect rewards.\\n     * @param _harvesterAddress Address of the harvester contract.\\n     */\\n    function setHarvesterAddress(address _harvesterAddress)\\n        external\\n        onlyGovernor\\n    {\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\n        harvesterAddress = _harvesterAddress;\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @notice Deposit an amount of assets into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @notice Deposit all supported assets in this strategy contract to the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @notice Withdraw an `amount` of assets from the platform and\\n     * send to the `_recipient`.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @notice Withdraw all supported assets from platform and\\n     * sends to the OToken's Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @notice Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @notice Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x4b6b5a929421e03809ab58240ad85643da74f4f484af503246231576d3158987\",\"license\":\"MIT\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n * @author Origin Protocol Inc\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to OUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xe35ac2d813a30d845a3b52bba72588d7e936c2b3f3373d15568c14db46aeed60\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            // slither-disable-next-line divide-before-multiply\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x1eb49f6f79045d9e0a8e1dced8e01d9e559e5fac554dcbb53e43140b601b04e7\",\"license\":\"MIT\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OToken VaultStorage contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author Origin Protocol Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { OUSD } from \\\"../token/OUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetRemoved(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event OusdMetaStrategyUpdated(address _ousdMetaStrategy);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event NetOusdMintForStrategyThresholdChanged(uint256 _threshold);\\n    event SwapperChanged(address _address);\\n    event SwapAllowedUndervalueChanged(uint256 _basis);\\n    event SwapSlippageChanged(address _asset, uint256 _basis);\\n    event Swapped(\\n        address indexed _fromAsset,\\n        address indexed _toAsset,\\n        uint256 _fromAssetAmount,\\n        uint256 _toAssetAmount\\n    );\\n    event StrategyAddedToMintWhitelist(address indexed strategy);\\n    event StrategyRemovedFromMintWhitelist(address indexed strategy);\\n    event DripperChanged(address indexed _dripper);\\n    event WithdrawalRequested(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount,\\n        uint256 _queued\\n    );\\n    event WithdrawalClaimed(\\n        address indexed _withdrawer,\\n        uint256 indexed _requestId,\\n        uint256 _amount\\n    );\\n    event WithdrawalClaimable(uint256 _claimable, uint256 _newClaimable);\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    enum UnitConversion {\\n        DECIMALS,\\n        GETEXCHANGERATE\\n    }\\n    // Changed to fit into a single storage slot so the decimals needs to be recached\\n    struct Asset {\\n        // Note: OETHVaultCore doesn't use `isSupported` when minting,\\n        // redeeming or checking balance of assets.\\n        bool isSupported;\\n        UnitConversion unitConversion;\\n        uint8 decimals;\\n        // Max allowed slippage from the Oracle price when swapping collateral assets in basis points.\\n        // For example 40 == 0.4% slippage\\n        uint16 allowedOracleSlippageBps;\\n    }\\n\\n    /// @dev mapping of supported vault assets to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Asset) internal assets;\\n    /// @dev list of all assets supported by the vault.\\n    // slither-disable-next-line uninitialized-state\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    /// @dev mapping of strategy contracts to their configuration\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => Strategy) internal strategies;\\n    /// @dev list of all vault strategies\\n    address[] internal allStrategies;\\n\\n    /// @notice Address of the Oracle price provider contract\\n    // slither-disable-next-line uninitialized-state\\n    address public priceProvider;\\n    /// @notice pause rebasing if true\\n    bool public rebasePaused = false;\\n    /// @notice pause operations that change the OToken supply.\\n    /// eg mint, redeem, allocate, mint/burn for strategy\\n    bool public capitalPaused = true;\\n    /// @notice Redemption fee in basis points. eg 50 = 0.5%\\n    uint256 public redeemFeeBps;\\n    /// @notice Percentage of assets to keep in Vault to handle (most) withdrawals. 100% = 1e18.\\n    uint256 public vaultBuffer;\\n    /// @notice OToken mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    /// @notice OToken mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    /// @dev Address of the OToken token. eg OUSD or OETH.\\n    // slither-disable-next-line uninitialized-state\\n    OUSD internal oUSD;\\n\\n    //keccak256(\\\"OUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Deprecated: Address of Uniswap\\n    // slither-disable-next-line constable-states\\n    address private _deprecated_uniswapAddr = address(0);\\n\\n    /// @notice Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    /// @notice Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    /// @notice Max difference between total supply and total value of assets. 18 decimals.\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public maxSupplyDiff;\\n\\n    /// @notice Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    /// @notice Amount of yield collected in basis points. eg 2000 = 20%\\n    uint256 public trusteeFeeBps;\\n\\n    /// @dev Deprecated: Tokens that should be swapped for stablecoins\\n    address[] private _deprecated_swapTokens;\\n\\n    uint256 constant MINT_MINIMUM_UNIT_PRICE = 0.998e18;\\n\\n    /// @notice Metapool strategy that is allowed to mint/burn OTokens without changing collateral\\n\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public ousdMetaStrategy;\\n\\n    /// @notice How much OTokens are currently minted by the strategy\\n    // slither-disable-next-line uninitialized-state\\n    int256 public netOusdMintedForStrategy;\\n\\n    /// @notice How much net total OTokens are allowed to be minted by all strategies\\n    // slither-disable-next-line uninitialized-state\\n    uint256 public netOusdMintForStrategyThreshold;\\n\\n    // slither-disable-end constable-states\\n\\n    uint256 constant MIN_UNIT_PRICE_DRIFT = 0.7e18;\\n    uint256 constant MAX_UNIT_PRICE_DRIFT = 1.3e18;\\n\\n    /// @notice Collateral swap configuration.\\n    /// @dev is packed into a single storage slot to save gas.\\n    struct SwapConfig {\\n        // Contract that swaps the vault's collateral assets\\n        address swapper;\\n        // Max allowed percentage the total value can drop below the total supply in basis points.\\n        // For example 100 == 1%\\n        uint16 allowedUndervalueBps;\\n    }\\n    SwapConfig internal swapConfig = SwapConfig(address(0), 0);\\n\\n    // List of strategies that can mint oTokens directly\\n    // Used in OETHBaseVaultCore\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => bool) public isMintWhitelistedStrategy;\\n\\n    /// @notice Address of the Dripper contract that streams harvested rewards to the Vault\\n    /// @dev The vault is proxied so needs to be set with setDripper against the proxy contract.\\n    // slither-disable-start constable-states\\n    // slither-disable-next-line uninitialized-state\\n    address public dripper;\\n    // slither-disable-end constable-states\\n\\n    /// Withdrawal Queue Storage /////\\n\\n    struct WithdrawalQueueMetadata {\\n        // cumulative total of all withdrawal requests included the ones that have already been claimed\\n        uint128 queued;\\n        // cumulative total of all the requests that can be claimed including the ones that have already been claimed\\n        uint128 claimable;\\n        // total of all the requests that have been claimed\\n        uint128 claimed;\\n        // index of the next withdrawal request starting at 0\\n        uint128 nextWithdrawalIndex;\\n    }\\n\\n    /// @notice Global metadata for the withdrawal queue including:\\n    /// queued - cumulative total of all withdrawal requests included the ones that have already been claimed\\n    /// claimable - cumulative total of all the requests that can be claimed including the ones already claimed\\n    /// claimed - total of all the requests that have been claimed\\n    /// nextWithdrawalIndex - index of the next withdrawal request starting at 0\\n    // slither-disable-next-line uninitialized-state\\n    WithdrawalQueueMetadata public withdrawalQueueMetadata;\\n\\n    struct WithdrawalRequest {\\n        address withdrawer;\\n        bool claimed;\\n        uint40 timestamp; // timestamp of the withdrawal request\\n        // Amount of oTokens to redeem. eg OETH\\n        uint128 amount;\\n        // cumulative total of all withdrawal requests including this one.\\n        // this request can be claimed when this queued amount is less than or equal to the queue's claimable amount.\\n        uint128 queued;\\n    }\\n\\n    /// @notice Mapping of withdrawal request indices to the user withdrawal request data\\n    mapping(uint256 => WithdrawalRequest) public withdrawalRequests;\\n\\n    // For future use\\n    uint256[45] private __gap;\\n\\n    /**\\n     * @notice set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x38c105631acf3a5ccd1abd18b0aa1b08282499f2ab1fd6045d1a387439a97507\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102606040523480156200001257600080fd5b506040516200597e3803806200597e833981016040819052620000359162000641565b8a6200004e336000805160206200595e83398151915255565b6000805160206200595e833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a380516001600160601b0319606091821b8116608052602090920151901b1660a052600283810b9082900b1480620000d257508060020b8260020b145b6200012e5760405162461bcd60e51b815260206004820152602160248201527f4d6973636f6e66696775726564207469636b436c6f73657374546f50617269746044820152607960f81b60648201526084015b60405180910390fd5b896001600160a01b0316866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017257600080fd5b505afa15801562000187573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ad9190620005fc565b6001600160a01b031614620002055760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79205745544820737570706f7274656420617320746f6b656e30000000604482015260640162000125565b886001600160a01b0316866001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200024957600080fd5b505afa1580156200025e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002849190620005fc565b6001600160a01b031614620002dc5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79204f4554486220737570706f7274656420617320746f6b656e310000604482015260640162000125565b6000866001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200031857600080fd5b505afa1580156200032d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000353919062000623565b90508060020b600114620003aa5760405162461bcd60e51b815260206004820152601760248201527f556e737570706f72746564207469636b53706163696e67000000000000000000604482015260640162000125565b6001600160601b031960608c811b821660c0528b811b821660e0528a811b82166101605289811b82166101c05288811b82166101805287811b82166101a05286901b166101e05260405163986cfba360e01b8152600285900b60048201526001600160a01b0386169063986cfba39060240160206040518083038186803b1580156200043557600080fd5b505afa1580156200044a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004709190620005fc565b60601b6001600160601b0319166102005260405163986cfba360e01b8152600284900b60048201526001600160a01b0386169063986cfba39060240160206040518083038186803b158015620004c557600080fd5b505afa158015620004da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005009190620005fc565b60601b6001600160601b0319166102205260405163986cfba360e01b8152600283900b60048201526001600160a01b0386169063986cfba39060240160206040518083038186803b1580156200055557600080fd5b505afa1580156200056a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005909190620005fc565b60601b6001600160601b03191661024052600293840b840b60e890811b6101005292840b840b831b61012052830b90920b901b61014052506200079c975050505050505050565b8051620005e48162000783565b919050565b8051600281900b8114620005e457600080fd5b6000602082840312156200060f57600080fd5b81516200061c8162000783565b9392505050565b6000602082840312156200063657600080fd5b6200061c82620005e9565b60008060008060008060008060008060008b8d036101808112156200066557600080fd5b60408112156200067457600080fd5b50604080519081016001600160401b0381118282101715620006a657634e487b7160e01b600052604160045260246000fd5b6040528c51620006b68162000783565b815260208d0151620006c88162000783565b60208201529a50620006dd60408d01620005d7565b9950620006ed60608d01620005d7565b9850620006fd60808d01620005d7565b97506200070d60a08d01620005d7565b96506200071d60c08d01620005d7565b95506200072d60e08d01620005d7565b94506200073e6101008d01620005d7565b93506200074f6101208d01620005e9565b9250620007606101408d01620005e9565b9150620007716101608d01620005e9565b90509295989b509295989b9093969950565b6001600160a01b03811681146200079957600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160e81c6101205160e81c6101405160e81c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c6102005160601c6102205160601c6102405160601c614e8f62000acf600039600081816104620152613f5301526000818161050301528181612733015281816128f601528181612d590152613fa301526000818161038201528181612759015281816128ba01528181612d1d0152613f7b0152600081816104dc01528181610bb1015281816129e701528181612e1f0152613fe201526000818161056401528181610b76015281816115c0015281816116160152818161216e015281816122620152818161239601528181612f3f01528181613181015281816132c501528181613afc0152613dd90152600081816103e401528181611e9401528181611ff8015281816123c30152818161244901528181612b2c015281816132f20152818161337801528181613b870152613c1401526000818161048901528181610a030152610aa10152600081816106d60152818161166c015281816116c2015261263f015260008181610705015281816126e40152612fd801526000818161053d015281816129bb01528181612df5015261302a0152600081816106010152818161299001528181612dca015261300101526000818161059e01528181610f40015281816115f4015281816116a0015281816124bc015281816126b401528181612c4e01528181612fa90152818161347301526136d901526000818161064f0152818161069c0152818161096401528181610e0e01528181610e9b015281816112540152818161159e0152818161164a015281816118cb015281816119d701528181611bdb01528181611c6a01528181611d5b015281816124e20152818161268e01528181612ba901528181612f7a01528181613638015261367801526000818161040b01528181610c3f0152818161103f015281816111b0015281816112e3015281816118560152818161194001528181611b50015281816125d701528181612eaf015281816133de015281816135ac0152613779015260006107520152614e8f6000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c806367c7066c11610167578063aa388af6116100ce578063d0c93a7c11610087578063d0c93a7c14610700578063d38bfff414610727578063d9caed121461073a578063dbe55e561461074d578063de5f626814610774578063f6ca71b01461077c57600080fd5b8063aa388af61461063f578063ad1728cb1461068f578063ad5c464814610697578063c2e1e3f4146106be578063c31c9c07146106d1578063c7af3352146106f857600080fd5b8063853828b611610120578063853828b6146105d35780639136616a146105db57806396d538bb146105e95780639b1344ac146105fc5780639c1eb3da14610623578063a224cee71461062c57600080fd5b806367c7066c14610525578063727dd22814610538578063791b98bc1461055f5780637b2d9b2c146105865780637b3b6068146105995780637f1a327c146105c057600080fd5b80633d6953d71161020b578063571fbf60116101c4578063571fbf60146104ab5780635a063f63146104b45780635d36b190146104bc5780635f515226146104c457806363b0e66a146104d757806365f1389d146104fe57600080fd5b80633d6953d7146103df578063430bf08a1461040657806345557c1f1461042d57806347e7ef241461044a5780634bc9c4771461045d5780634c0339b41461048457600080fd5b8063150b7a021161025d578063150b7a0214610345578063153eb6d11461037d57806317d70f7c146103a45780631b91d0cc146103ad57806330c83576146103bc57806330dbda18146103c457600080fd5b806301701fe9146102a5578063042e586e146102ba5780630c340a24146102d65780630ed57b3a146102f65780630fc3b4c4146103095780631072cbea14610332575b600080fd5b6102b86102b3366004614933565b610791565b005b6102c360a05481565b6040519081526020015b60405180910390f35b6102de6108e4565b6040516001600160a01b0390911681526020016102cd565b6102b861030436600461454c565b610901565b6102de610317366004614512565b6035602052600090815260409020546001600160a01b031681565b6102b8610340366004614665565b61093e565b6103646103533660046145c6565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102cd565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102c3609d5481565b6102c3670dd99bb65dd7000081565b6102de6109ff565b6103cc610a9d565b60405160029190910b81526020016102cd565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b610435610b3b565b604080519283526020830191909152016102cd565b6102b8610458366004614665565b610c34565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102c3609f5481565b6102b8610cc5565b6102b8610d64565b6102c36104d2366004614512565b610e0a565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6039546102de906001600160a01b031681565b6103cc7f000000000000000000000000000000000000000000000000000000000000000081565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102de61059436600461489e565b610fdd565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102b86105ce3660046148d0565b611007565b6102b86111a5565b6102b861030436600461489e565b6102b86105f7366004614691565b611318565b6103cc7f000000000000000000000000000000000000000000000000000000000000000081565b6102c3609e5481565b6102b861063a366004614706565b61143e565b61067f61064d366004614512565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016102cd565b6102b8611537565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102b86106cc366004614512565b6116e9565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b61067f611776565b6103cc7f000000000000000000000000000000000000000000000000000000000000000081565b6102b8610735366004614512565b6117a7565b6102b8610748366004614585565b61184b565b6102de7f000000000000000000000000000000000000000000000000000000000000000081565b6102b8611b45565b610784611c8f565b6040516102cd9190614a76565b610799611776565b6107be5760405162461bcd60e51b81526004016107b590614bc5565b60405180910390fd5b8082106108005760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081a5b9d195c9d985b60821b60448201526064016107b5565b662386f26fc10000821161084f5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081a5b9d195c9d985b081cdd185c9d60521b60448201526064016107b5565b670d2f13f7789f0000811061089d5760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081a5b9d195c9d985b08195b9960621b60448201526064016107b5565b609f82905560a081905560408051838152602081018390527ffb25072e740f40f37c0adb21abfa08b090c754a216aa3dce33b68fab089eff91910160405180910390a15050565b60006108fc600080516020614e3a8339815191525490565b905090565b60405162461bcd60e51b8152602060048201526012602482015271155b9cdd5c1c1bdc9d1959081b595d1a1bd960721b60448201526064016107b5565b610946611776565b6109625760405162461bcd60e51b81526004016107b590614bc5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690831614156109df5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220737570706f727465642061737365740060448201526064016107b5565b6109fb6109ea6108e4565b6001600160a01b0384169083611cf1565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b158015610a5a57600080fd5b505afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190614824565b509395945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b158015610af857600080fd5b505afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190614824565b509295945050505050565b600080609d5460001415610b525750600091829150565b6000610b5c6109ff565b609d54604051632263539760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482019290925282821660448201529192507f00000000000000000000000000000000000000000000000000000000000000001690632263539790606401604080518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190614955565b9094909350915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c7c5760405162461bcd60e51b81526004016107b590614b8e565b600080516020614e1a83398151915280546002811415610cae5760405162461bcd60e51b81526004016107b590614bfc565b60028255610cbc8484611d59565b50600190555050565b6039546001600160a01b03163314610d1f5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f742074686520486172766573746572000000000060448201526064016107b5565b600080516020614e1a83398151915280546002811415610d515760405162461bcd60e51b81526004016107b590614bfc565b60028255610d5d611e61565b5060019055565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db546001600160a01b0316336001600160a01b031614610dff5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016107b5565b610e0833611f01565b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610e835760405162461bcd60e51b815260206004820152601360248201527213db9b1e4815d15512081cdd5c1c1bdc9d1959606a1b60448201526064016107b5565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610ee557600080fd5b505afa158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d91906148b7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610f8257600080fd5b505afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba91906148b7565b90508082609e54610fcb9190614cfd565b610fd59190614cfd565b949350505050565b603a8181548110610fed57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080516020614e1a833981519152805460028114156110395760405162461bcd60e51b81526004016107b590614bfc565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109657600080fd5b505afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce919061452f565b6001600160a01b0316336001600160a01b0316148061110557506110f06108e4565b6001600160a01b0316336001600160a01b0316145b6111515760405162461bcd60e51b815260206004820152601e60248201527f4e6f742074686520476f7665726e6f72206f722053747261746567697374000060448201526064016107b5565b609d541561116a5761116a670de0b6b3a7640000611fc5565b841561117b5761117b8585856124b3565b61118361284e565b61118b612af9565b61119361284e565b61119b6133da565b5060019055505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111ed5760405162461bcd60e51b81526004016107b590614b8e565b600080516020614e1a8339815191528054600281141561121f5760405162461bcd60e51b81526004016107b590614bfc565b60028255609d541561123c5761123c670de0b6b3a7640000611fc5565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561129e57600080fd5b505afa1580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d691906148b7565b90508015611308576113087f00000000000000000000000000000000000000000000000000000000000000008261355a565b6113106136c1565b505060019055565b611320611776565b61133c5760405162461bcd60e51b81526004016107b590614bc5565b8060005b818110156113ef57600084848381811061135c5761135c614dca565b90506020020160208101906113719190614512565b6001600160a01b031614156113df5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b60648201526084016107b5565b6113e881614d99565b9050611340565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a848460405161142493929190614ac3565b60405180910390a1611438603a84846143f3565b50505050565b611446611776565b6114625760405162461bcd60e51b81526004016107b590614bc5565b600054610100900460ff168061147b575060005460ff16155b6114de5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107b5565b600054610100900460ff16158015611500576000805461ffff19166101011790555b60408051600080825260208201908152818301909252611522918491906137b0565b80156109fb576000805461ff00191690555050565b61153f611776565b61155b5760405162461bcd60e51b81526004016107b590614bc5565b600080516020614e1a8339815191528054600281141561158d5760405162461bcd60e51b81526004016107b590614bfc565b600282556115e76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019613864565b61163d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019613864565b6116936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019613864565b610d5d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019613864565b6116f1611776565b61170d5760405162461bcd60e51b81526004016107b590614bc5565b603954604080516001600160a01b03928316815291831660208301527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a1603980546001600160a01b0319166001600160a01b0392909216919091179055565b600061178e600080516020614e3a8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6117af611776565b6117cb5760405162461bcd60e51b81526004016107b590614bc5565b6117f3817f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b806001600160a01b0316611813600080516020614e3a8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118935760405162461bcd60e51b81526004016107b590614b8e565b600080516020614e1a833981519152805460028114156118c55760405162461bcd60e51b81526004016107b590614bfc565b600282557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161461193e5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b60448201526064016107b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316146119bf5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920776974686472617720746f207661756c7420616c6c6f776564000060448201526064016107b5565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611a2157600080fd5b505afa158015611a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5991906148b7565b905083811015611b2857609d54611aab5760405162461bcd60e51b81526020600482015260166024820152754e6f206c697175696469747920617661696c61626c6560501b60448201526064016107b5565b6000611ab78286614d56565b90506000611ac3610b3b565b50905081811015611af15760405163a6737d8760e01b815260048101829052602481018390526044016107b5565b6000611b19611b008484613988565b611b0b906001614cfd565b670de0b6b3a76400006139a9565b9050611b2481611fc5565b5050505b611b306136c1565b611b3a868561355a565b505060019055505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b8d5760405162461bcd60e51b81526004016107b590614b8e565b600080516020614e1a83398151915280546002811415611bbf5760405162461bcd60e51b81526004016107b590614bfc565b600282556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611c2557600080fd5b505afa158015611c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5d91906148b7565b90508015611310576113107f000000000000000000000000000000000000000000000000000000000000000082611d59565b6060603a805480602002602001604051908101604052809291908181526020018280548015611ce757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611cc9575b5050505050905090565b6040516001600160a01b038316602482015260448101829052611d5490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526139c1565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614611dce5760405162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b60448201526064016107b5565b60008111611e175760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b60448201526064016107b5565b6040805160008152602081018390526001600160a01b038416917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6291015b60405180910390a25050565b609d5415801590611e755750611e75613a93565b15611ef957609d54604051631c4b774b60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631c4b774b90602401600060405180830381600087803b158015611ee057600080fd5b505af1158015611ef4573d6000803e3d6000fd5b505050505b610e08613c4d565b6001600160a01b038116611f575760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016107b5565b806001600160a01b0316611f77600080516020614e3a8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611fc281600080516020614e3a83398151915255565b50565b609d5415801590611fd95750611fd9613a93565b1561205d57609d54604051632e1a7d4d60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561204457600080fd5b505af1158015612058573d6000803e3d6000fd5b505050505b600081116120ad5760405162461bcd60e51b815260206004820152601a60248201527f4d7573742072656d6f766520736f6d65206c697175696469747900000000000060448201526064016107b5565b60006120b7613d79565b905060006120d66120d16001600160801b03841685613e6d565b613e82565b90506001600160801b03821615806120f557506001600160801b038116155b15612101575050612348565b6040805160a081018252609d5481526001600160801b038381166020830190815260008385018181526060850182815242608087019081529651630624e65f60e11b81529551600487015292519093166024850152915160448401525160648301529151608482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630c49ccbe9060a4016040805180830381600087803b1580156121b957600080fd5b505af11580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f19190614955565b60408051608081018252609d54815230602082019081526001600160801b0382840181815260608401828152945163fc6f786560e01b81529351600485015291516001600160a01b0390811660248501529151811660448401529251909216606482015292945090925060009182917f0000000000000000000000000000000000000000000000000000000000000000169063fc6f7865906084016040805180830381600087803b1580156122a557600080fd5b505af11580156122b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122dd9190614955565b915091506122e9613eef565b609e546040805189815260208101879052808201869052606081018590526080810184905260a0810192909252517fede5d7a610050b00dde41dd385fe2d91a558dde29318267aa4e011678b58cfc59181900360c00190a15050505050505b609d541580159061235e575061235c613a93565b155b15611fc257600061236d613d79565b6001600160801b03161115611fc257609d5460405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163095ea7b3916123ff917f0000000000000000000000000000000000000000000000000000000000000000916004016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561241957600080fd5b505af115801561242d573d6000803e3d6000fd5b5050609d5460405163b6b55f2560e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063b6b55f2591506024015b600060405180830381600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b5050505050565b6000826124e0577f0000000000000000000000000000000000000000000000000000000000000000612502565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561254757600080fd5b505afa15801561255b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257f91906148b7565b90508481101561263d5783156125b257604051631313cb9560e31b815260048101829052602481018690526044016107b5565b60006125be8287614d56565b60405163ab80dafb60e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ab80dafb90602401600060405180830381600087803b15801561262357600080fd5b505af1158015612637573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a026383e604051806101000160405280856001600160a01b03168152602001876126b2577f00000000000000000000000000000000000000000000000000000000000000006126d4565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000060020b8152602001306001600160a01b0316815260200142815260200188815260200186815260200187612757577f0000000000000000000000000000000000000000000000000000000000000000612779565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b039081169091526040805160e085811b6001600160e01b03191682528451841660048301526020850151841660248301529184015160020b60448201526060840151831660648201526080840151608482015260a084015160a482015260c084015160c48201529201511660e482015261010401602060405180830381600087803b15801561280e57600080fd5b505af1158015612822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284691906148b7565b505050505050565b609f5415801590612860575060a05415155b6128ac5760405162461bcd60e51b815260206004820152601b60248201527f5765746820736861726520696e74657276616c206e6f7420736574000000000060448201526064016107b5565b60006128b66109ff565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031611158061292b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031610155b1561295857612938610a9d565b604051635a2eba7560e01b815260029190910b60048201526024016107b5565b604051630155925960e21b8152670de0b6b3a7640000600482018190526000602483018190526001600160a01b0384811660448501527f0000000000000000000000000000000000000000000000000000000000000000600290810b60648601527f0000000000000000000000000000000000000000000000000000000000000000900b6084850152919290917f0000000000000000000000000000000000000000000000000000000000000000169063055649649060a40160206040518083038186803b158015612a2957600080fd5b505afa158015612a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6191906148b7565b90506000612a79612a728385614cfd565b8490613988565b9050609f54811080612a8c575060a05481115b15612ac057609f5460a0546040516301b40f4760e51b815260048101849052602481019290925260448201526064016107b5565b6040518181527f0d0d42e29eda809becae4f120dfbc3799e17df829fa338f8035c724579423b899060200160405180910390a150505050565b609d5415801590612b0d5750612b0d613a93565b15612b9157609d54604051632e1a7d4d60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015612b7857600080fd5b505af1158015612b8c573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612bf357600080fd5b505afa158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2b91906148b7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612c9057600080fd5b505afa158015612ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc891906148b7565b905060008211612d0f5760405162461bcd60e51b815260206004820152601260248201527109aeae6e840c2c8c840e6dedaca40ae8aa8960731b60448201526064016107b5565b6000612d196109ff565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316111580612d8e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031610155b15612d9b57612938610a9d565b604051630155925960e21b8152600481018490526000602482018190526001600160a01b0383811660448401527f0000000000000000000000000000000000000000000000000000000000000000600290810b60648501527f0000000000000000000000000000000000000000000000000000000000000000900b608484015290917f00000000000000000000000000000000000000000000000000000000000000009091169063055649649060a40160206040518083038186803b158015612e6357600080fd5b505afa158015612e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9b91906148b7565b905082811115612f2f576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ab80dafb612ede8584614d56565b6040518263ffffffff1660e01b8152600401612efc91815260200190565b600060405180830381600087803b158015612f1657600080fd5b505af1158015612f2a573d6000803e3d6000fd5b505050505b600080609d546000141561310e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b5007d1f6040518061018001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000060020b81526020017f000000000000000000000000000000000000000000000000000000000000000060020b81526020017f000000000000000000000000000000000000000000000000000000000000000060020b81526020018981526020018681526020016000815260200160008152602001306001600160a01b0316815260200142815260200160006001600160a01b03168152506040518263ffffffff1660e01b81526004016130aa9190614c24565b608060405180830381600087803b1580156130c457600080fd5b505af11580156130d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fc91906148f7565b609d9390935593509091506132049050565b6040805160c081018252609d54815260208101888152818301868152600060608401818152608085019182524260a08601908152955163219f5d1760e01b815294516004860152925160248501529051604484015290516064830152516084820152905160a48201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063219f5d179060c401606060405180830381600087803b1580156131c557600080fd5b505af11580156131d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131fd91906147ef565b9093509150505b61320c613eef565b609d54609e54604080518981526020810187905290810185905260608101849052608081019290925260a08201527f1530ec748a27514ffab0987654233a80256393e127bdf02d94e32ff3c7148ec69060c00160405180910390a161326f6136c1565b505050505050609d5460001415801561328d575061328b613a93565b155b15610e0857600061329c613d79565b6001600160801b03161115610e0857609d5460405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163095ea7b39161332e917f0000000000000000000000000000000000000000000000000000000000000000916004016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561334857600080fd5b505af115801561335c573d6000803e3d6000fd5b5050609d5460405163b6b55f2560e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063b6b55f259150602401600060405180830381600087803b1580156133c657600080fd5b505af1158015611438573d6000803e3d6000fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b15801561343557600080fd5b505afa158015613449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346d91906148b7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156134ca57600080fd5b505afa1580156134de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350291906148b7565b9050670dd99bb65dd700006135178383613988565b10156109fb5760405162461bcd60e51b8152602060048201526012602482015271141c9bdd1bd8dbdb081a5b9cdbdb1d995b9d60721b60448201526064016107b5565b600081116135aa5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e6700000000000000000060448201526064016107b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161461362b5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920776974686472617720746f207661756c7420616c6c6f776564000060448201526064016107b5565b61365f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611cf1565b6040805160008152602081018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989101611e55565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561372357600080fd5b505afa158015613737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375b91906148b7565b90508015611fc25760405163310bf9f560e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636217f3ea9060240161247e565b82516137c390603a906020860190614452565b5081518151811461380d5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b60448201526064016107b5565b60005b818110156124ac5761385484828151811061382d5761382d614dca565b602002602001015184838151811061384757613847614dca565b60200260200101516140e4565b61385d81614d99565b9050613810565b8015806138ed5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156138b357600080fd5b505afa1580156138c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138eb91906148b7565b155b6139585760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016107b5565b6040516001600160a01b038316602482015260448101829052611d5490849063095ea7b360e01b90606401611d1d565b60008061399d84670de0b6b3a7640000614249565b9050610fd58184614255565b60008183106139b857816139ba565b825b9392505050565b6000613a16826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142619092919063ffffffff16565b805190915015611d545780806020019051810190613a3491906147d2565b611d545760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107b5565b6000609d5460001415613adf5760405162461bcd60e51b815260206004820152601460248201527326b4b9b9b4b7339027232a102628103a37b5b2b760611b60448201526064016107b5565b609d546040516331a9108f60e11b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636352211e91613b339160040190815260200190565b60206040518083038186803b158015613b4b57600080fd5b505afa158015613b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b83919061452f565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161480613bcd57506001600160a01b03811630145b613c125760405162461bcd60e51b81526020600482015260166024820152752ab732bc3832b1ba32b2103a37b5b2b71037bbb732b960511b60448201526064016107b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161491505090565b603a5460005b818110156109fb576000603a8281548110613c7057613c70614dca565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015613cbe57600080fd5b505afa158015613cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf691906148b7565b90508015613d6657603954604080516001600160a01b039283168152918416602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a1603954613d66906001600160a01b03848116911683611cf1565b505080613d7290614d99565b9050613c53565b6000609d5460001415613dbf5760405162461bcd60e51b815260206004820152600e60248201526d2737902628103837b9b4ba34b7b760911b60448201526064016107b5565b609d5460405163133f757160e31b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906399fbab88906024016101806040518083038186803b158015613e2457600080fd5b505afa158015613e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5c9190614979565b50929b9a5050505050505050505050565b60006139ba8383670de0b6b3a7640000614270565b60006001600160801b03821115613eeb5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016107b5565b5090565b609d54613f32576000609e8190556040519081527fab1ece054738c773b84a8a32f5f969323c50dc7e28634302f91c7b75cb8387829060200160405180910390a1565b6000613f3c613d79565b60405163c72e160b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000811660448301526001600160801b038316606483015291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063c72e160b90608401604080518083038186803b15801561402557600080fd5b505afa158015614039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405d9190614955565b91509150816000146140a75760405162461bcd60e51b8152602060048201526013602482015272139bdb881e995c9bc81dd95d1a105b5bdd5b9d606a1b60448201526064016107b5565b609e8190556040518181527fab1ece054738c773b84a8a32f5f969323c50dc7e28634302f91c7b75cb8387829060200160405180910390a1505050565b6001600160a01b0382811660009081526035602052604090205416156141415760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b60448201526064016107b5565b6001600160a01b0382161580159061416157506001600160a01b03811615155b6141a15760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b60448201526064016107b5565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26109fb8282610901565b60006139ba8284614d37565b60006139ba8284614d15565b6060610fd58484600085614292565b60008061427d8585614249565b90506142898184614255565b95945050505050565b6060824710156142f35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107b5565b843b6143415760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107b5565b600080866001600160a01b0316858760405161435d9190614a5a565b60006040518083038185875af1925050503d806000811461439a576040519150601f19603f3d011682016040523d82523d6000602084013e61439f565b606091505b50915091506143af8282866143ba565b979650505050505050565b606083156143c95750816139ba565b8251156143d95782518084602001fd5b8160405162461bcd60e51b81526004016107b59190614b5b565b828054828255906000526020600020908101928215614446579160200282015b828111156144465781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614413565b50613eeb9291506144a7565b828054828255906000526020600020908101928215614446579160200282015b8281111561444657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614472565b5b80821115613eeb57600081556001016144a8565b80356144c781614df6565b919050565b80516144c781614df6565b8051600281900b81146144c757600080fd5b80516001600160801b03811681146144c757600080fd5b805161ffff811681146144c757600080fd5b60006020828403121561452457600080fd5b81356139ba81614df6565b60006020828403121561454157600080fd5b81516139ba81614df6565b6000806040838503121561455f57600080fd5b823561456a81614df6565b9150602083013561457a81614df6565b809150509250929050565b60008060006060848603121561459a57600080fd5b83356145a581614df6565b925060208401356145b581614df6565b929592945050506040919091013590565b6000806000806000608086880312156145de57600080fd5b85356145e981614df6565b945060208601356145f981614df6565b935060408601359250606086013567ffffffffffffffff8082111561461d57600080fd5b818801915088601f83011261463157600080fd5b81358181111561464057600080fd5b89602082850101111561465257600080fd5b9699959850939650602001949392505050565b6000806040838503121561467857600080fd5b823561468381614df6565b946020939093013593505050565b600080602083850312156146a457600080fd5b823567ffffffffffffffff808211156146bc57600080fd5b818501915085601f8301126146d057600080fd5b8135818111156146df57600080fd5b8660208260051b85010111156146f457600080fd5b60209290920196919550909350505050565b6000602080838503121561471957600080fd5b823567ffffffffffffffff8082111561473157600080fd5b818501915085601f83011261474557600080fd5b81358181111561475757614757614de0565b8060051b604051601f19603f8301168101818110858211171561477c5761477c614de0565b604052828152858101935084860182860187018a101561479b57600080fd5b600095505b838610156147c5576147b1816144bc565b8552600195909501949386019386016147a0565b5098975050505050505050565b6000602082840312156147e457600080fd5b81516139ba81614e0b565b60008060006060848603121561480457600080fd5b61480d846144e9565b925060208401519150604084015190509250925092565b60008060008060008060c0878903121561483d57600080fd5b865161484881614df6565b9550614856602088016144d7565b945061486460408801614500565b935061487260608801614500565b925061488060808801614500565b915060a087015161489081614e0b565b809150509295509295509295565b6000602082840312156148b057600080fd5b5035919050565b6000602082840312156148c957600080fd5b5051919050565b6000806000606084860312156148e557600080fd5b8335925060208401356145b581614e0b565b6000806000806080858703121561490d57600080fd5b8451935061491d602086016144e9565b6040860151606090960151949790965092505050565b6000806040838503121561494657600080fd5b50508035926020909101359150565b6000806040838503121561496857600080fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f03121561499c57600080fd5b8c516bffffffffffffffffffffffff811681146149b857600080fd5b9b506149c660208e016144cc565b9a506149d460408e016144cc565b99506149e260608e016144cc565b98506149f060808e016144d7565b97506149fe60a08e016144d7565b9650614a0c60c08e016144d7565b9550614a1a60e08e016144e9565b94506101008d015193506101208d01519250614a396101408e016144e9565b9150614a486101608e016144e9565b90509295989b509295989b509295989b565b60008251614a6c818460208701614d6d565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015614ab75783516001600160a01b031683529284019291840191600101614a92565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015614b0d5781546001600160a01b031684529284019260019182019101614ae8565b505050838103828501528481528590820160005b86811015614b4f578235614b3481614df6565b6001600160a01b031682529183019190830190600101614b21565b50979650505050505050565b6020815260008251806020840152614b7a816040850160208701614d6d565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b81516001600160a01b0316815261018081016020830151614c5060208401826001600160a01b03169052565b506040830151614c65604084018260020b9052565b506060830151614c7a606084018260020b9052565b506080830151614c8f608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151614cd5828501826001600160a01b03169052565b50506101408381015190830152610160928301516001600160a01b0316929091019190915290565b60008219821115614d1057614d10614db4565b500190565b600082614d3257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615614d5157614d51614db4565b500290565b600082821015614d6857614d68614db4565b500390565b60005b83811015614d88578181015183820152602001614d70565b838111156114385750506000910152565b6000600019821415614dad57614dad614db4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611fc257600080fd5b8015158114611fc257600080fdfe53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac45357bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4aa26469706673582212202d471fd2d09bdf67ec45c59df18cc6a34497cfe0ddc276c2745b09cc03d5cd4c64736f6c634300080700337bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "details": "Get the total asset value held in the platform",
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "_0": "balance    Total value of the asset in the platform"
        }
      },
      "constructor": {
        "params": {
          "_clGauge": "Address of the Aerodrome slipstream pool gauge",
          "_clPool": "Address of the Aerodrome concentrated liquidity pool",
          "_lowerBoundingTick": "Smaller bounding tick of our liquidity position",
          "_nonfungiblePositionManager": "Address of position manager to add/remove         the liquidity",
          "_oethbAddress": "Address of the Erc20 OETHb Token contract",
          "_stratConfig": "the basic strategy configuration",
          "_sugarHelper": "Address of the Aerodrome Sugar helper contract",
          "_swapRouter": "Address of the Aerodrome Universal Swap Router",
          "_tickClosestToParity": "Tick that is closer to 1:1 price parity",
          "_upperBoundingTick": "Larger bounding tick of our liquidity position",
          "_wethAddress": "Address of the Erc20 WETH Token contract"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "Units of asset to deposit",
          "_asset": "Address for the asset"
        }
      },
      "getCurrentTradingTick()": {
        "returns": {
          "_currentTick": "Current pool trading tick"
        }
      },
      "getPoolX96Price()": {
        "returns": {
          "_sqrtRatioX96": "Pool price"
        }
      },
      "getPositionPrincipal()": {
        "details": "Returns the balance of both tokens in a given position (excluding fees)",
        "returns": {
          "_amountOethb": "Amount of OETHb in position",
          "_amountWeth": "Amount of WETH in position"
        }
      },
      "getRewardTokenAddresses()": {
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "initialize(address[])": {
        "params": {
          "_rewardTokenAddresses": "Address of reward token for platform"
        }
      },
      "rebalance(uint256,bool,uint256)": {
        "params": {
          "_amountToSwap": "The amount of the token to swap",
          "_minTokenReceived": "Slippage check -> minimum amount of token expected in return",
          "_swapWeth": "Swap using WETH when true, use OETHb when false"
        }
      },
      "removePToken(uint256)": {
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets"
      },
      "setAllowedPoolWethShareInterval(uint256,uint256)": {
        "params": {
          "_allowedWethShareEnd": "End of WETH share interval expressed as 18 decimal amount",
          "_allowedWethShareStart": "Start of WETH share interval expressed as 18 decimal amount"
        }
      },
      "setHarvesterAddress(address)": {
        "params": {
          "_harvesterAddress": "Address of the harvester contract."
        }
      },
      "setPTokenAddress(address,address)": {
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "params": {
          "_rewardTokenAddresses": "Array of reward token addresses"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "Amount of WETH to withdraw",
          "_asset": "WETH address",
          "_recipient": "Address to which the asset should be sent"
        }
      }
    },
    "stateVariables": {
      "SOLVENCY_THRESHOLD": {
        "details": "a threshold under which the contract no longer allows for the protocol to rebalance. Guarding      against a strategist / guardian being taken over and with multiple transactions draining the      protocol funds."
      },
      "__reserved": {
        "details": "reserved for inheritance"
      },
      "clGauge": {
        "details": "can become an immutable once the gauge is created on the base main-net"
      },
      "sqrtRatioX96TickClosestToParity": {
        "details": "tick closest to 1:1 price parity      Correctly assessing which tick is closer to 1:1 price parity is important since it affects      the way we calculate the underlying assets in check Balance. The underlying aerodrome pool      orders the tokens depending on the values of their addresses. If OETH token is token0 in the pool      then sqrtRatioX96TickClosestToParity=sqrtRatioX96TickLower. If it is token1 in the pool then      sqrtRatioX96TickClosestToParity=sqrtRatioX96TickHigher"
      },
      "sqrtRatioX96TickHigher": {
        "details": "tick higher has value 0 and represents 1:1 price parity of WETH to OETHb"
      },
      "sqrtRatioX96TickLower": {
        "details": "tick lower has value -1 and represents the lowest price of WETH priced in OETHb. Meaning the pool offers less than 1 OETHb for 1 WETH. In other terms to get 1 OETHB the swap needs to offer 1.0001 WETH this is where purchasing OETHb with WETH within the liquidity position is most expensive"
      },
      "underlyingAssets": {
        "details": "Minimum amount of tokens the strategy would be able to withdraw from the pool.      minimum amount of tokens are withdrawn at a 1:1 price"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OETHb()": {
        "notice": "The address of the OETHb token contract"
      },
      "WETH()": {
        "notice": "The address of the Wrapped ETH (WETH) token contract"
      },
      "allowedWethShareEnd()": {
        "notice": "Marks the end of the interval that defines the allowed range of WETH share in the pre-configured pool's liquidity ticker"
      },
      "allowedWethShareStart()": {
        "notice": "Marks the start of the interval that defines the allowed range of WETH share in the pre-configured pool's liquidity ticker"
      },
      "assetToPToken(address)": {
        "notice": "asset => pToken (Platform Specific Token Address)"
      },
      "clGauge()": {
        "notice": "the gauge for the corresponding Slipstream pool (clPool)"
      },
      "clPool()": {
        "notice": "the underlying AMO Slipstream pool"
      },
      "claimGovernance()": {
        "notice": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "notice": "Collect accumulated reward token and send to Vault."
      },
      "constructor": {
        "notice": "the constructor"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit an amount of assets into the strategy contract. Calling deposit doesn't         automatically deposit funds into the underlying Aerodrome pool"
      },
      "depositAll()": {
        "notice": "Deposit WETH to the strategy contract. This function does not add liquidity to the         underlying Aerodrome pool."
      },
      "getCurrentTradingTick()": {
        "notice": "Returns the current active trading tick of the underlying pool"
      },
      "getPoolX96Price()": {
        "notice": "Returns the current pool price in X96 format"
      },
      "getRewardTokenAddresses()": {
        "notice": "Get the reward token addresses."
      },
      "governor()": {
        "notice": "Returns the address of the current Governor."
      },
      "harvesterAddress()": {
        "notice": "Address of the Harvester contract allowed to collect reward tokens"
      },
      "helper()": {
        "notice": "helper contract for liquidity and ticker math"
      },
      "initialize(address[])": {
        "notice": "initialize function, to set up initial internal state"
      },
      "isGovernor()": {
        "notice": "Returns true if the caller is the current Governor."
      },
      "lowerTick()": {
        "notice": "lower tick set to -1 representing the price of 1.0001 of WETH for 1 OETHb."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Ref: https://docs.openzeppelin.com/contracts/3.x/api/token/erc721#IERC721Receiver-onERC721Received-address-address-uint256-bytes-"
      },
      "platformAddress()": {
        "notice": "Address of the underlying platform"
      },
      "positionManager()": {
        "notice": "the Position manager contract that is used to manage the pool's position"
      },
      "rebalance(uint256,bool,uint256)": {
        "notice": "Rebalance the pool to the desired token split and Deposit any WETH on the contract to the underlying aerodrome pool. Print the required amount of corresponding OETHb. After the rebalancing is done burn any potentially remaining OETHb tokens still on the strategy contract. This function has a slightly different behaviour depending on the status of the underlying Aerodrome slipstream pool. The function consists of the following 3 steps: 1. withdrawPartialLiqidity -> so that moving the activeTrading price via  a swap is cheaper 2. swapToDesiredPosition   -> move active trading price in the pool to be able to deposit WETH & OETHb                               tokens with the desired pre-configured shares 3. addLiquidity            -> add liquidity into the pool respecting share split configuration Scenario 1: When there is no liquidity in the pool from the strategy but there is from other LPs then             only step 1 is skipped. (It is important to note that liquidity needs to exist in the configured             strategy tick ranges in order for the swap to be possible) Step 3 mints new liquidity position             instead of adding to an existing one. Scenario 2: When there is strategy's liquidity in the pool all 3 steps are taken Exact _amountToSwap, _swapWeth & _minTokenReceived parameters shall be determined by simulating the transaction off-chain. The strategy checks that after the swap the share of the tokens is in the expected ranges."
      },
      "removePToken(uint256)": {
        "notice": "Remove a supported asset by passing its index.      This method can only be called by the system Governor"
      },
      "rewardTokenAddresses(uint256)": {
        "notice": "Address of the reward tokens. eg CRV, BAL, CVX, AURA"
      },
      "setAllowedPoolWethShareInterval(uint256,uint256)": {
        "notice": "Set allowed pool weth share interval. After the rebalance happens the share of WETH token in the ticker needs to be withing the specifications of the interval."
      },
      "setHarvesterAddress(address)": {
        "notice": "Set the Harvester contract that can collect rewards."
      },
      "setPTokenAddress(address,address)": {
        "notice": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor"
      },
      "setRewardTokenAddresses(address[])": {
        "notice": "Set the reward token addresses. Any old addresses will be overwritten."
      },
      "sqrtRatioX96TickHigher()": {
        "notice": "sqrtRatioX96TickHigher"
      },
      "sqrtRatioX96TickLower()": {
        "notice": "sqrtRatioX96TickLower"
      },
      "swapRouter()": {
        "notice": "the swapRouter for performing swaps"
      },
      "tickSpacing()": {
        "notice": "tick spacing of the pool (set to 1)"
      },
      "tokenId()": {
        "notice": "tokenId of the liquidity position"
      },
      "transferGovernance(address)": {
        "notice": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends."
      },
      "upperTick()": {
        "notice": "lower tick set to 0 representing the price of 1.0000 of WETH for 1 OETHb."
      },
      "vaultAddress()": {
        "notice": "Address of the OToken vault"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraw an `amount` of assets from the platform and         send to the `_recipient`."
      },
      "withdrawAll()": {
        "notice": "Withdraw WETH and sends it to the Vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 46442,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 46445,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 46485,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 46565,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "_deprecated_platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 46568,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "_deprecated_vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 46573,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 46577,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 46579,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 46581,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 46584,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 46588,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 46592,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 38914,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "tokenId",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 38917,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "underlyingAssets",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 38920,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "allowedWethShareStart",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 38923,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "allowedWethShareEnd",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 38928,
        "contract": "contracts/strategies/aerodrome/AerodromeAMOStrategy.sol:AerodromeAMOStrategy",
        "label": "__reserved",
        "offset": 0,
        "slot": "161",
        "type": "t_array(t_int256)46_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)46_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
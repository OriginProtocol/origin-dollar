@startuml

skinparam tabSize 2

title "OETH Oracle Contract Dependencies"

object "OETHVault" as vault <<Origin>> #DeepSkyBlue {
assets:
    \tWETH
    \tfrxETH
    \trETH
    \tstETH
}

object "OETHOracleRouter" as router <<Origin>> #DeepSkyBlue {
pairs:
    \tWETH/ETH
    \tfrxETH/ETH
    \tstETH/ETH
    \trETH/ETH
    \tCRV/ETH
    \tCVX/ETH
    \tBAL/ETH
    \tAURA/ETH
    \tFXS/ETH
}

object "FrxEthFraxOracle" as fo <<Frax>> {
pair: frxETH/ETH
}

object "FrxEthEthDualOracle" as fdo <<Frax>> {
pair: frxETH/ETH
}

object "External\nAccess\nControlled\nAggregator" as clrETH <<Chainlink>> {
pair: rETH/ETH
}

object "External\nAccess\nControlled\nAggregator" as clstETH <<Chainlink>> {
pair: stETH/ETH
}

object "External\nAccess\nControlled\nAggregator" as cleth <<Chainlink>> {
pair: ETH/USD
}

object "External\nAccess\nControlled\nAggregator" as clfrax <<Chainlink>> {
pair: FRAX/USD
}

object "External\nAccess\nControlled\nAggregator" as clcrv <<Chainlink>> {
pair: CRV/ETH
}

object "External\nAccess\nControlled\nAggregator" as clcvx <<Chainlink>> {
pair: CVX/ETH
}

object "External\nAccess\nControlled\nAggregator" as clbal <<Chainlink>> {
pair: BAL/ETH
}

object "frxETH/ETH Pool" as cp <<Curve>> {
assets: frxETH, ETH
}

object "StaticOracle" as uso <<Uniswap>> {
}

object "frxETH/FRAX Pool" as up <<Uniswap>> {
    assets: frxETH, FRAX
}

object "AuraWETHPriceFeed" as ap <<Origin>> #DeepSkyBlue {
pair: AURA/ETH
}


object "80 AURA\n20 WETH\nPool" as auraBalPool <<Balancer>> {
pair: AURA/WETH
}


vault ..> router : price(asset)
router ...> clrETH : latestRoundData()
router ...> clstETH : latestRoundData()
router ...> clcrv : latestRoundData()
router ...> clcvx : latestRoundData()
router ...> clbal : latestRoundData()
router ..> fo : latestRoundData()
router ..> ap : latestRoundData()
fdo .> fo : addRoundData()
fdo ....> cp : price_oracle()
fdo ....> uso : quoteSpecificPoolsWithTimePeriod()
uso .> up : observe()
fdo ..> cleth : latestRoundData()
fdo ..> clfrax : latestRoundData()
ap ....> auraBalPool : getTimeWeightedAverage()

@enduml
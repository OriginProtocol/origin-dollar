@startuml

skinparam tabSize 2
hide footbox

title "Origin ETH processes"

actor "Anyone" as sender
actor "Registrator" as reg <<Origin>>
actor "Governor" as gov <<Origin>>
actor "Treasury" as treasury <<Origin>>
participant "API" as api <<P2P>>
actor "Operators" as ssvOp <<SSV>>

box "Execution Chain"
participant "Harvester" as harv <<Origin>>
participant "Native\nStaking SSV\nStrategy" as nativeStrat <<Origin>>
participant "Fee\nAccumulator" as feeAccum <<Origin>>
participant "SSV Network" as ssvNet <<SSV>>
participant "Token" as ssv <<SSV>>
participant "WETH" as weth <<Wrapped ETH>>
participant "Deposit" as dep <<Beacon>>
end box

box "Beacon chain"
participant "Validator" as val <<Beacon>>
end box

group Governor initializes the Native Staking Strategy

gov -> nativeStrat : initialize()
activate nativeStrat
nativeStrat -> ssv : approve(\nSSV Network,\namount)
activate ssv
note right : Native Staking Strategy approves\nSSV Network to spend\nSSV tokens
return
' nativeStrat -> ssvNet : setFeeRecipientAddress(\nrecipient)
' activate ssvNet
' note right : NodeDelegator set as the fee recipient
' return
return

gov -> ssv : transfer(\nfrom\nto\namount)
activate ssv
note right : transfer SSV tokens\nfrom Governor\nto Native Staking Strategy
return

end group

group Registrator creates a new SSV validator

reg -> api: POST\neth/staking/ssv/request/create\nuuid,\nvalidatorsCount,\ntype,\nwithdrawalAddress,\nfeeRecipientAddress,\nssvOwnerAddress,\noperationPeriodInDays
activate api
note right
withdrawalAddress is Native Staking Strategy
feeRecipientAddress is FeeAccumulator contract
ssvOwnerAddress is Native Staking Strategy
type is without-encrypt-key
end note
api -> api: private key
note right : generate a validator private key
api -> api: split(key)
note right : splits validator key into multiple KeyShares
return

reg -> api: status(uuid)
activate api
return status,\nvalidatorRegistration,\nshareData
note right : validatorRegistration contains the pubkey, operatorIds and cluster details

reg -> nativeStrat : registerSsvValidator(\npublicKey,\noperatorIds,\nsharesData,\namount,\ncluster,\nwithdrawal_credentials,\nsignature,\ndepositDataRoot)
activate nativeStrat
note right
cluster data:
The number of validators in the cluster
The index of network fees related to this cluster
The last index calculated for the cluster
Flag indicating whether the cluster is active
The SSV balance of the cluster
end note
nativeStrat -> ssvNet : registerValidator(\npublicKey,\noperatorIds,\nsharesData,\namount,\ncluster)
activate ssvNet
ssvNet -> ssv : transferFrom(\nfrom\nto\namount)
activate ssv
note right: transfer SSV tokens\nfrom NodeDelegator\nto SSV Network
return
return

nativeStrat -> weth : withdraw(\namount)
activate weth
note right : WETH burned for ETH
return ETH

nativeStrat -> dep : stake(\npubkey,\nwithdrawal_credentials,\nsignature,\ndepositDataRoot)
activate dep
note left : 32 ETH from Native Staking Strategy\nis sent to Beacon Deposit
return
return

note over val : Pending Deposit

... 1024 execution blocks (~4 hours) ...
... 32 consensus epochs (~3.5 hours) ...

dep -> val : 32 ETH

note over val : Pending Activation

... four validators are activated each epoch from the Validator Queue (~1.5 days) ...

note over val : Active

end group


group Registrator deposits more SSV to SSV cluster

treasury -> ssv : transfer(\nto\namount)
activate ssv
note right : transfer SSV tokens\nfrom Treasury\nto Native Staking Strategy
return

group SSV ClusterScanner
reg -> ssvNet : getPastEvents(filter)
activate ssvNet
note right : get all events where the ownerAddress\nis the Native Staking Strategy
return events

reg -> reg : getCluster(events):\n cluster
note right
cluster data:
  validatorCount
  networkFeeIndex
  index
  active
  balance
end note
end group

reg -> nativeStrat : depositSSV(\noperatorIds,\namount,\ncluster)
activate nativeStrat
nativeStrat -> ssvNet : deposit(\nclusterOwner,\noperatorIds,\namount,\ncluster)
activate ssvNet
note right
clusterOwner is Native Staking Strategy
operatorIds are the SSV Operators
amount of SSV tokens
end note
ssvNet -> ssv : transferFrom(\nfrom\nto\namount)
activate ssv
note right: transfer SSV tokens\nfrom Native Staking Strategy\nto SSV Network
return
return
return
end group

group Consensus Rewards

note over val
attesting to blocks
proposing blocks
participating in sync committees
end note
val -> val : ETH

... swept every 8-10 days ...

note over val : partial withdraw of excess ETH\nfrom validator to the Native Staking Strategy
val -> nativeStrat : ETH

note over nativeStrat : Native Staking Strategy's\nWETH balance does not change

end group

group Registrator full withdraw from validator

reg -> nativeStrat : exitSsvValidator(\npublicKey\noperatorIds)
activate nativeStrat
nativeStrat -> ssvNet : exitValidator(\npublicKey\noperatorIds)
activate ssvNet
return
return

ssvOp -> ssvOp : sign(\npk,\nexit message)
note right : voluntary exit message signed by the validator private key
ssvOp -> val : signed voluntary exit message
activate val
return

... wait until validator has exited.\nmin four epochs (~25 min), currently 1.5 hours but can take a number of days depending on the number of validators in the exit queue ...

reg -> nativeStrat : removeSsvValidator(\npublicKey,\noperatorIds,\ncluster)
activate nativeStrat
nativeStrat -> ssvNet : removeValidator(\npublicKey\noperatorIds,\ncluster)
activate ssvNet
note right : stop paying SSV to Operators\n and reduce required SSV collateral
return
return

... wait for the validator to be swept on the Beacon chain\ncurrent time is every 8.5 days ...

val -> nativeStrat : ETH
note left : transfer staked ETH and rewards\nfrom Beacon Deposit\nto Native Staking Strategy

note over nativeStrat : Native Staking Strategy's\nWETH balance does not change

end group

group Registrator does accounting of consensus rewards and validator withdrawals

reg -> nativeStrat : doAccounting()
activate nativeStrat

note over nativeStrat
get ETH balance of the Native Staking Strategy.
Calculate number of validator withdrawals.
end note

nativeStrat -> weth : deposit(\nwithdrawn ETH)
activate weth
note left : convert ETH from full withdrawals to WETH
return

nativeStrat -> weth : transfer(\nvault,\nwithdrawn ETH)
activate weth
note left : transfer withdrawn WETH\nfrom Native Staking Strategy\nto OETH Vault
return

nativeStrat -> weth : deposit(\nremaining ETH)
activate weth
note left : convert remaining ETH from consensus rewards to WETH
return

note over nativeStrat
WETH stays in the Native Staking Strategy.
Add to account of total consensus rewards in the Native Staking Strategy.
end note

return accounting valid flag

end group

group Execution Rewards

sender -> feeAccum : ETH
note right : Priority and MEV rewards

note over nativeStrat : Native Staking Strategy's\nWETH balance does not change

end group

group Harvester collects ETH rewards

sender -> harv : harvestAndSwap(\nstrtaegy)
activate harv
harv -> nativeStrat : collectRewardTokens()
activate nativeStrat

nativeStrat -> feeAccum : collect()
activate feeAccum
feeAccum -> weth : deposit(\namount)
note left: convert all ETH in\nFee Accumulator to WETH
activate weth
return
feeAccum -> weth : transfer(\nNative Staking Strategy,\namount)
activate weth
note left : transfer WETH\nfrom Fee Accumulator\nto Native Staking Strategy
return
return WETH collected

note over nativeStrat : add WETH collected to accounted Beacon rewards

nativeStrat -> weth : balanceOf(\nNative Staking Strategy)
activate weth
note left : get WETH in Native Staking Strategy
return WETH balance

note over nativeStrat : reset accounted Beacon rewards

nativeStrat -> weth : transfer(\nHarvester,\nBeacon rewards)
activate weth
note left : transfer rewards as WETH\nfrom Native Staking Strategy\nto Harvester
return

return
return

end group

@enduml
// SPDX-License-Identifier: MIT

/**
 * @title Contract containing configuration variables for the fuzzing suite.
 * @author Rappie <rappie@perimetersec.io>
 */
contract FuzzConfig {
    // Starting balance for actors that will interact with the system.
    uint256 internal constant STARTING_BALANCE = 1_000_000_000_000e18;

    // Starting balance for outsides that will not interact with the system.
    //
    // We need these to have initial balances to prevent problems caused by
    // rounding errors.
    // We want this amount to be considerably lower than the starting balance
    // of the actors, to be able to reach lower Credits Per Token (CPT) values.
    //
    uint256 internal constant STARTING_BALANCE_OUTSIDER = 1_000_000_000e18;

    // Tolerance for rounding errors when mining or redeeming OETH.
    uint256 internal constant MINT_TOLERANCE = 1;
    uint256 internal constant REDEEM_TOLERANCE = 1;

    // Tolerance for rounding errors in balance changes after rebasing.
    uint256 internal constant BALANCE_AFTER_REBASE_TOLERANCE = 1;

    // Tolerance for rounding errors in amount of yield generated by donating
    // and rebasing.
    uint256 internal constant YIELD_TOLERANCE = 10_000;

    // Tolerance for the amount of WETH that should be available in the vault
    // as a buffer for all actors (including outsiders) to be able to redeem
    // all their OETH.
    uint256 internal constant REDEEM_ALL_TOLERANCE = 1 ether / 100;

    // Tolerance for the difference between the total generated yield and the
    // total donated amount.
    //
    // Max difference found with quick optimization: 11_359_396
    //
    uint256 internal constant DONATE_VS_YIELD_TOLERANCE = 2e7;

    // Tolerance for the difference between the vault balance and the total
    // OETH in the system.
    //
    // This is strongly related to the donate vs yield tolerance, so it makes
    // sense to have the same value.
    //
    // Max difference found with quick optimization: 11_923_059
    //
    uint256 internal constant VAULT_BALANCE_VS_TOTAL_OETH_TOLERANCE = 2e7;

    // Tolerance used to the major "accounting" global invariant.
    //
    // See `globalAccounting` for more info.
    //
    uint256 internal constant ACCOUNTING_TOLERANCE = 10;

    // Total amount of WETH donated to the vault.
    uint256 totalDonated;

    // Total amount of OETH yield generated from donations to the vault.
    uint256 totalYield;
}

const { expect } = require("chai");

const { beaconChainFixture } = require("../_fixture");

describe("Beacon chain proofs", async () => {
  let fixture;
  beforeEach(async () => {
    fixture = await beaconChainFixture();
  });
  describe("Generalized index", () => {
    it("from height and index", async () => {
      const { beaconProofs } = fixture;
      expect(await beaconProofs.concatGenIndices(1, 0, 0)).eq(1);
      expect(await beaconProofs.concatGenIndices(1, 1, 0)).eq(2);
      expect(await beaconProofs.concatGenIndices(1, 1, 1)).eq(3);
      expect(await beaconProofs.concatGenIndices(1, 2, 0)).eq(4);
      expect(await beaconProofs.concatGenIndices(1, 2, 3)).eq(7);
      expect(await beaconProofs.concatGenIndices(1, 3, 0)).eq(8);
      expect(await beaconProofs.concatGenIndices(1, 3, 1)).eq(9);
      expect(await beaconProofs.concatGenIndices(1, 3, 2)).eq(10);
      expect(await beaconProofs.concatGenIndices(1, 3, 6)).eq(14);
      expect(await beaconProofs.concatGenIndices(1, 3, 7)).eq(15);
      expect(await beaconProofs.concatGenIndices(1, 6, 12)).eq(76);
    });
    it("BeaconBlock.slot", async () => {
      const { beaconProofs } = fixture;

      expect(await beaconProofs.concatGenIndices(1, 3, 0)).eq(8);
    });
    it("BeaconBlock.parentRoot", async () => {
      const { beaconProofs } = fixture;

      expect(await beaconProofs.concatGenIndices(1, 3, 2)).eq(10);
    });
    it("BeaconBlock.body", async () => {
      const { beaconProofs } = fixture;

      expect(await beaconProofs.concatGenIndices(1, 3, 4)).eq(12);
    });
    it("BeaconBlock.BeaconBlockBody.randaoReveal", async () => {
      const { beaconProofs } = fixture;

      const beaconBlockBodyGenIndex = await beaconProofs.concatGenIndices(
        1,
        3,
        4
      );
      expect(
        await beaconProofs.concatGenIndices(beaconBlockBodyGenIndex, 4, 0)
      ).eq(192);
    });
    it("BeaconBlock.BeaconState.balances", async () => {
      const { beaconProofs } = fixture;

      const beaconStateGenIndex = await beaconProofs.concatGenIndices(1, 3, 3);
      expect(
        await beaconProofs.concatGenIndices(beaconStateGenIndex, 6, 12)
      ).eq(716);
    });
    it("BeaconBlock.body.executionPayload.blockNumber", async () => {
      const { beaconProofs } = fixture;

      const beaconBlockBodyGenIndex = await beaconProofs.concatGenIndices(
        1,
        3,
        4
      );
      const executionPayloadGenIndex = await beaconProofs.concatGenIndices(
        beaconBlockBodyGenIndex,
        4,
        9
      );
      expect(
        await beaconProofs.concatGenIndices(executionPayloadGenIndex, 5, 6)
      ).eq(6438);
    });
  });
  describe("verify proofs", () => {
    it("balances container to beacon root", async () => {
      const { beaconProofs } = fixture;

      const beaconRoot =
        "0x5afbdb19dd02b8d6bf10ee1722753b4a687326f1e7c3a4515ec47be3599b0474";
      const balancesContainerLeaf =
        "0xa4181bd72c96848c06c64a28ce7c21563b6063f289ec27d2b5f05aae4dfdb57d";
      const proof =
        "0x4938a396a5a5651cdeab2dbc058f866ebcda5fd4fc85a152f22dba474c009791732bb29b9703de0515129d79481b879a3dd9123eeffe7bf8afd4aaff84378560ab5cfe225d99d908dd717ced212090862faf3d42ef6d49b90e5a3d53a13a187ba1ba6d4a2373a34ace4c3bdff56faaf6dc7e93b538bab62355581ae2b679cf30b9db93bd03ab076a7c7dce90b2fcd3162c71977e7e58a31e1ca4a0dded313be333f54b1fbc27a269a843a4d3838e0013984cc884b7a88e4d7f528a1c9a76c98c41dd7ebb8c56a217d6881589c4e09ce0055bea097be50e2dcaa07757da3df8bb1561936559cd736ba1d1802b048e118c414a17c48ff04189f0b8df768d599c9171c990856b4ce5cd0c635561d221a760c5be68a43c7a26b82c92800a16e05ddc";

      await beaconProofs.verifyBalancesContainer(
        beaconRoot,
        balancesContainerLeaf,
        proof
      );
    });
    describe("Validator balance to balances container", () => {
      it("with balance", async () => {
        const { beaconProofs } = fixture;

        const balancesContainerRoot =
          "0xdbdf8b18bb50a2ac84864bf12779da475aca1e2b98854b2a1b02506396250eff";
        const validatorIndex = 1770193;
        const balanceLeaf =
          "0x0000000000000000f5b87473070000000000000000000000dd06757307000000";
        const proof =
          "0xe882747307000000b3ae74730700000022fe7473070000000000000000000000a0e70a60b292ba301171cec7c6fc2cbab7f3bf8f0dffe2cae5eaef133d3882f8868061031e7c19c701169dba0ff8f8a16652b144b1601012aef58da66aede34f31f54712eae171f1d7115be3e615f0987382f783a846ae438a894398c615efd1cc013d1c8bf5292755492ec4672e7c4a46e680a863f85d6de9ea59412f19c5350e7ee4a0132b26adb417f5d668ee4ec6311fa6552a3f2de928a9df72946fddf09dd9e3994b879b7de86f47c5f5178e3371493dee98b9c5830a9887fda366dea4c7ead58860119d8156dd5a3eb5251eb92dfe2d9c16d3c13cea6910f66af979f2333359c758ba132cb875a4ab011c5e2997f9a9d5d055babf64822b1aca2e13f1bf325f10a9ee255ff13647c4a6237ed79411f5f3fe148c0d7dafbcaae467da03027c76f6fadae20f8aa378b9e297c02d5bf0f557287613cfa049e22ec8c8980ec970e9372314604a5d1d561c967f76f072942c82c126a872ee804848a850ecd282ea91cfb0f1785b6d9cfdf6cddd0694466023e232ee9c8d9fdf264f5ef130fba42247e45be5fed39f7738913901f0659a4b28f5f8161bf82af82b6a094cfc89fa921156f8d23ae5ff5a27b3a362bab64ba53cd6ba38757f94bf3b93542f2852662b715121ee217b0832c95ee45923102b3d39f76bf11dadd2474de2bcd6611c1973c323c3046a54b239454b99a78a8af5e881d601e29e39d98ed70b36fa061cd2fc5311499e6939e2ba3737e47d319dfbcf370deee1c9cac017b945f88eb211f956a065b2ce0f0597ad85e4779af2b74ec8b1d0099b2f71356abaec97644f25f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7476b51d0000000000000000000000000000000000000000000000000000000000";

        const balance = await beaconProofs.verifyValidatorBalance(
          balancesContainerRoot,
          balanceLeaf,
          proof,
          validatorIndex
        );
        expect(balance).to.eq("32001800437");
      });
      it("with no balance", async () => {
        const { beaconProofs } = fixture;

        const balancesContainerRoot =
          "0x4830cdf0422b784d8efeffce36b3e58c08f71404edd1115edf4bd4cf4e80354a";
        const validatorIndex = 1770193;
        const balanceLeaf =
          "0x00000000000000000000000000000000000000000000000025d28c7307000000";
        const proof =
          "0x538b8c730700000076af8c730700000061a68c730700000000000000000000009eaac9c5af52f4c6e96fec410ff8b1ff1f8ccf045487fa72c11486955329504111216e61bd2dfab786cfed2a29205b60b968f1f35d562a625e7b25295c5f8ce91627ea1634fe3ccbdb4f7f5392da1af86cf1c9bb6edb52553239023f13d21f5fd1f872cd106cfae02d4f78cae00600778b2e583e7472cc6c3383386631110ac723664a2530d1555f2d799180dc50f5fbfaa53da3e0c40fa2c9115bcd7ff46b89b22824597545d61a2ae64a66daca00c92bd4b3fc3897be1a5f72b0a7041da0b11b39856c9afcaa6eb24247450cf24bcae344b9b298e9daceb740e8997a4e0ec7ccdcba46d9a8d6d6c139e4540d1c10610c96d0b4d817d12e2bc3e99de9aedf9422156e0c6f5978db9e96d8e13fe7a8652f78b33af44d368b092252fd39145c80713d22e5cbb3e6a94e24ddcf79fe867a315a25ea8ee1915ccd6cf982eed922b50b6e700f0efd267a905143deed182ab9f93846dff91d57a510a1ece20e238a6a59c1dc05d70e5aea1483faee9e7c0dcd2fba028c0e162c0107749c339fafd89f9010b30693b00cadf785839dcd8ea23c4a87a2452c3aad0d656f5c69565cc34a4c322b39a028f12887c348d26bea3f2054aa4a4c8a442a4a190c4b615f6cb0f61ee54fb062540a21583bc4c4bd0f5806db6fe0a99211b4ba94487318985281815ab0c9d9216a00fb65a8e25be3a4bb2a486deec0d281a45da03edfcc77f067ce63fc9a41892d10cb75f59b373f4658811eb668d93f256ddd8ccf0930136358ecc0313a61cee570ddbb7cc127f60091fd8b0cbc5ae95a9025cb0c78e9cf566d27f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7301e0000000000000000000000000000000000000000000000000000000000";

        const balance = await beaconProofs.verifyValidatorBalance(
          balancesContainerRoot,
          balanceLeaf,
          proof,
          validatorIndex
        );
        expect(balance).to.eq("0");
      });
    });
    it("Validator public key to beacon block root", async () => {
      const { beaconProofs } = fixture;

      const beaconRoot =
        "0xd33574842aabc553574750a093a4f5be40c79306de9915744f0fd297a3570e6e";
      const validatorIndex = 1770193;
      const publicKeyLeaf =
        "0x54a218cedc2dd9249322cec9e8a2f721c2e53e0b7ee5d631f3c277b08acc89ff";
      const proof =
        "0x01000000000000000000000071d06f6bb8f2cdaca28c055ebfeea4eb3740955119327cb9763c96e00332bde93bdbb1032c4b796dda73e515c8c5f7ede9a419bed668ab4a931aeb2dc6b9d7a953819e3b2b7db5959d352cfd0b282f1907f273c33b3f028cee8ee43c25380f79a3cbf695aaf47ec1cb7940b1e57dfc02152b4ac594e72aabe6eef554ad751437689924380eda5fdc528a569bdc4ededc56aa673f88582bd349960667b5a8b92deade4ac0cc0ca5c6d0b229694832bfb445d65a5e32bc5c9c8ac4de6ef484dcc74dbdd395b03b371f590ad21adf060462fa445d2f90bac67740b67f24878c8aa088bb3db6bd1e5db16d2e4e7c4dd945c8e7fbd5ba2a87a5b3f71839975addaef00652ee0c029ca7f3934ca7d17fe44fcc4713c6d2a6c33af061a2cfcb7e17860c09e3138e392b3d1ebc1fe3c6f83fd27f748ea72efad920bbbdad67d891c9f86dbbdf33b269a618d17f5474e56d384bece8ac9df38a159473e143ba377e1a8dcf920a8f660cdcf8dd3b1c614ec4a445d4da3315848c18e078743449ec54c4042aad00fc57f43da63301288e6cded661020325eeb5f085847d258a4d09acb22016bc2e17a1693765496cd06203c0125caf43ba9cc72fb54bc24ff218ead202e99e80f064546398a4364c64fb18965c5e375e91575d988e3bf7414562135e24a15fc2ed1cf5c22eb007e36a95a8b6eab26bdcb4f5289015c27c4c9fa2d5bf133a5d1ffc30ae6acc0edd3cc444f204d8781bfdd91a380cfffd9d6e84268bd5c3c80de459a5cea47a61263a5b781892b40f4667ff06265914c95f1cd42fbe6f6cdc46163ae1e63075ffef7966c4c4c05310ba4704bf9c383e183d34206472066e1ef7f68faf8560bdbf52d1de5fda1e1f68bda4aaf6b51cdc4c604905ecc4a6fcb79ccc532a97d0e91d7108f37d96580e3423d7da47e3dc013479d21f4d65b88762a156b2901de33116f246f4ea21fb87597005f1438ab2c9558c49a6c4d0dbc99d6b5fc32b5ee17c3d56e38eba87e0acfac6e45ffb4e9908596d28c2a81e678287b84cc6ffdd6ed1e8c82f72965bab073827ac3fe6238a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76ad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f76b51d0000000000000000000000000000000000000000000000000000000000c6341f00000000000000000000000000000000000000000000000000000000004400e4a84a1446200c33de846baaf10b6c305c9a5fbb806f1f4239734a2993d3b67c50ea0a5f1e5ff3eccaeca13a74e6feafa7fe962d7fdcaa490d923e34199d50c40233e7bf3a27a9f06268e59c5e121cef1f7f7368edda100e8b39af9d2d378bb80f679da5b680f3596b143f0dbe3f65f105ceaeae3f9bbc1f96b51e4969fbb611c79b6b930d8588fc3cd2aac97695e422b49c87256def4015349f3234090e871c9ff223bdc9004aded09ef020f377a4783d963295aba48226e94f5feb192227a5c480a27409d02990714b6b5ee7331dd081479169780cf13d4ff832b927fd5bd50bf12101bf4a09f7e1c69f675e8b72cb60addebe2fec963bbdd0d7b64197";
      const withdrawalAddress = "0x71d06f6bb8f2cdaca28c055ebfeea4eb37409551";
      await beaconProofs.verifyValidator(
        beaconRoot,
        publicKeyLeaf,
        proof,
        validatorIndex,
        withdrawalAddress
      );
    });
    describe("Slot of first pending deposit to beacon block root", () => {
      it("with pending deposit", async () => {
        const { beaconProofs } = fixture;

        const beaconRoot =
          "0xe0ca6bf66ab87e0da1b15128d2f237c6198f477a1a07a7fe6bf17b6619a9be09";
        const slot = 11904927;
        const proof =
          "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b8c50225c464586ee6d8ccf76ed2780377ba9877bbdc91475bed1a3fb6470bac95eb6b1e0b4f5afae26c042f2ce9216452ff19087b2adc2d67a31e5c1e1c73731a59edaee6b3376ed0468677631cc4a98fdc72a936911a808dc10c387b060d63dc4f5784afc3aa33faead8cebebff58aa7aa559f725e027e56f4191019fd0be12177005aae4a6c3489c2fd4ec95ddf56cabee78d054c9d75b312cbe01a0e3ab2be16234d7e6b521a5f54ecc579825ae9ccf41dac50c6513f3031dd9288beb90118357d840e2db4fc75b36fee8a567c750069e6e8d1ed69fd53e0efed58b177abdaad0dd10e0808f59337f9859a96dd2d85c143940c4834497d7efa055505ac5e78bbdbd5962b87642095a28ea2571d9b86dec003c10396bdcd34b67dd228f09b9ebedf504a3e41f4a8915969438e938fb1da551e0a8e61cd4c0f014fca01553b470bce69a50c34a3c776724ad6b5c79f1daf1b91190077aab4bb28a9d7c0e62c2aa46ee5ae235157a7fcc28566818a008993f57a028014969cfb5c8ada054280c1869806b192ee9b0162e9546a6d8c51392e1ecf1743d613523abeba50ee347331310dbcfb2df70eaf48fd6344e3ab169116a5e42148d95458e400cb7a3e66b92ce733f73820611fa85e7412c5b85727f72513dc5cb82efa05bfda67b82cb0674b58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467650f370000000000000000000000000000000000000000000000000000000000007a414b7ec532e201524b67f53eeda99335f5e501905ebb17c10bb8cc38c171fc95374bc8b0e645c8172ec16997877fed7aed5947356df84f48f64c2a904ae81fde0d5477c7aa98d8465130b7c5941165100d004bed07c5bb31009f9b9a431aa4c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c3cff91273e2f1acf1931b6ea011f4c1c4af8e58d52092900dda8982e177180e2b2a52a1fbf5099bef456388cda92e3639f79dbae7a0a6cfb68dda815e2db37c60768d8dff09953ce4dadbd7a60d8cd6ea514315c7b06e45dc8dabf3fc03d3a60f75d8fe5c9749f66b3b1c4ef5da551bec9432ec51d7567bb91409007c4864c49";

        const isEmpty = await beaconProofs.verifyFirstPendingDeposit(
          beaconRoot,
          slot,
          proof
        );
        expect(isEmpty).to.be.false;
      });
      describe("with no pending deposit", () => {
        // From Hoodi slot 1015023
        const beaconRoot =
          "0x936a7ac91224df0522e8fc70521b604b025d37504a432ca9ea842a018ba7546c";
        const proof =
          "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa187eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1ffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220b7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5fdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85eb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467650000000000000000000000000000000000000000000000000000000000000000049c9edd0970b512318fe4a7d9ff12b2b1402164d872e40948fc7d9042ae6fa615433386cfe4fc95585fb6eeb51df3a6f619db3b3955884f7e5a2c4600ed2d47dae6d9c51743d5d9263bf2bd09c1db3bd529965d7ee7857643c919c6b696004ec78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123ceb818784738117ef339dce506dc4996cecd38ef7ed6021eb0b4382bf9c3e81b3cce9d380b4759b9c6277871c289b42feed13f46b29b78c3be52296492ef902aecd1fa730ef94dfb6efa48a62de660970894608c2e16cce90ef2b3880778f8e383e09791016e57e609c54db8d85e1e0607a528e23b6c34dc738f899f2c284d765";

        it("with zero slot", async () => {
          const { beaconProofs } = fixture;

          const slot = 0;
          const isEmpty = await beaconProofs.verifyFirstPendingDeposit(
            beaconRoot,
            slot,
            proof
          );
          expect(isEmpty).to.be.true;
        });
        it("with non-zero slot", async () => {
          const { beaconProofs } = fixture;

          const slot = 12345678; // Arbitrary non-zero slot
          const isEmpty = await beaconProofs.verifyFirstPendingDeposit(
            beaconRoot,
            slot,
            proof
          );
          expect(isEmpty).to.be.true;
        });
      });
    });
  });
});

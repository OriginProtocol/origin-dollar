const { expect } = require("chai");
const { network } = require("hardhat");
const { BigNumber } = require("ethers");
const { parseEther, parseUnits } = require("ethers").utils;
const { setBalance } = require("@nomicfoundation/hardhat-network-helpers");
const { isCI } = require("../helpers");
const { shouldBehaveLikeGovernable } = require("../behaviour/governable");
const { shouldBehaveLikeStrategy } = require("../behaviour/strategy");
const { MAX_UINT256 } = require("../../utils/constants");
const { impersonateAndFund } = require("../../utils/signers");
const { ethUnits } = require("../helpers");
const { setERC20TokenBalance } = require("../_fund");
const { zero } = require("../../utils/addresses");
const { calcDepositRoot } = require("../../tasks/beacon");
const { hashPubKey } = require("../../utils/beacon");
const { randomBytes } = require("crypto");

const {
  createFixtureLoader,
  compoundingStakingSSVStrategyFixture,
} = require("./../_fixture");

const loadFixture = createFixtureLoader(compoundingStakingSSVStrategyFixture);

const testValidators = [
  {
    // register tx 0x33258f692fe9f5cb697918d2acb0beb634142f08efd02014bf345d14eb01b0f9
    // deposit tx 0x6bee31cbe395435fac4b9632ef718f6cf6f938a48d417d05bb96502fa588cf2d
    publicKey:
      "0xb3aad1f5a7b6bfbcd81b75f8a60e6e54cc64fbf09cb05a46f92bab8c6c017106d643d1de70027b5d30fa943b9207c543",
    publicKeyHash:
      "0xb1d3e454498123d8069f9138420c9a422fab4bf97f9786849b0d7daddb359f47",
    index: 1930685,
    operatorIds: [424, 425, 426, 427],
    sharesData:
      "0xa819d1092f8c335cf85d318e9b6a4d82934190294c4a687a92ddb6cb9cd8ce3eee64676b899854535e34af10bd3575291077bb8617ed84424f80608a76664771129aea2f7a7cfcd390a6db04e87dfaefb170f057a2404210b04d1e1c0e1e9b4f886cef456a3dad1da1ac67a2976c59fe8cdb8442de60d70164ca8816dc69037a76a0ba7c06db9e954c67eadab7a4b5bdade0f92bc67ce24ef3e2a81141282124b8f00687fbf322604687b6eab9f62bdd23886c0418eb76878ffd49c26101b931a9dc12231d601a80aec054c382977168109863c1dfb477de7f32836a1d3ef53f76fe8c7c4c5ca79d8bd0194c30807f35b62fa199237b1ec2ad9f73a26a8dd561a6c9fd88b90a64a6a6e9e7c2a0401def70dd3858300366cbe1bcaec5fa8c009e57fe9150a98733ecc843d2c92f839ab31f9b73ee489ea059aff2c1576a8ae81a4db45ef417b07d640dea3fd1f70c279433a78044664e96d36c1fb7851166e601c42af2e9d7a8b7adeffd62a6e7cea8fb8de1610991b63609f833d5c7e2272c7caf07cd49645bf0d059a1f8b7b749b51b044de99df6511d378af6a72503ddb141344bb608c56965060d7d5d6bc6acb642a8b629f7997a5ebc1e6173acc538299acbd500686a0898ba6e33474fcef7f563dec872a5147b6cf13a0e86b4f8e3232698f24f429e9dfd6541bdd8be4e73d216740481ea08a77619fbc6cfc22bda7c43283d8b1057cb1cd66024735e739b875e55d5fcb5dd988dbfe9b2b2196f93d586643ba5642e2d486acb8a841e3901c53676e59ed6562ac0ea23d2e0f395bfbc12f75500352252d20178428df1799cda8c58b423a6c301549cbf75bffe97d1dd8d4ca9ef217e9f16ec2d6bb7fa5d04dc729bfafb7c262e33aa2b13bd4ff52e1050b7c9fe4768c63a8d82a5cb6c959a8e5d9170e82afb4f47b6055f246c883716a97299ee76eacb11b0d1e4beeaf5efd3ecd15f6395b40e9e29b06c308e22d833460b363c8e8ec5497f53866b1655ecca4fe5c34860a2f7d88fee2c3f98685af8729829c971fc1a16d6affb816d559e2440999e8db741148fa33db51a218ec2abdd6bdf190c4b7721b7dd36c1a1788bfb3bc14aeb979ce0e059b46bda1d182180fe46d7c56de8956f6ce64b85b2cca6e31e8c8ea30c3090bbe7454b217c80979bcdb0c802b5a4a0795edd4bcb11fdb7114bc1e59653274689530fcd6f5e84a5e7ad23e1f26129e48bfe450566791126dba7a3da69ad5e6730f498c267e3ca89760a9b6a7cb8dca4c6980fd58433193f78df0562429fb4bbe4e1484adb443e5dd50f3f4a91af0d3d37b987c623945cc5c6fb2db010fee3992c9a16d026410af8d608969da3367628feb29106497c6ef529dc7e48de81e1036c2bf0068d33e7f69ab65c3c13930b3aba111495c80e906542f6047fb7dcc3e770a7b43d87f310700d87a15ff138965bfc78f9d16e875825535d3aca4328aa725939e4a4544cd1fe8e772258485c41b6444b620200b3b2c5172a9ea13b79747157f1417fb8cb5eaf457571913696c779c7300991eeb51b7d61e99735aedb6e7aa9c24ec90f669706bafc28faa585e71d76db262d425d7882c2d7a00013ec4274c01d71564fae5e00f01f8c122728315fef1b80c4e8c1180a82565e82576e1018da9aaae9b1d3879350fd46f7cf3d93366236ea253d9dc4395237c2a06b27fcd19896294a320049773c3d9ac2001f75d3d0c34879f6ec31f4b43bde164147311d020bf5458deab4e5c804f00878d5938e228ce76034c34fff012051cd5a31cf7979cf41e6bc0c53a23b3ee4e8f0a9c20741a6167d0b15d8fbbc78adaaa687bb9c916aee900ebbeb7d75af",
    signature:
      "0x8754ee1ac90130cfb828172ed9e81fbbdf86f35298f05b3c152db673f2a6a82873e7acbdb5e2d0d035e253c396266254160e627e945a228a4c034157c7a4418efd08173e780ecbc30cedaae05f8239a453df924d8e8e11460f5e10b1c2024012",
    validatorProof: {
      // Proof from beacon chain slot 12145621 which is execution layer block 22923668
      // So next block is 22923669 which is needed to set the parent beacon block root
      bytes:
        "0x0200000000000000000000008d84e1d10dd36de832549b525d09ae02825b84b56aa845b5bc63b3e02ed893c12395270ab812d5037f07848422ca5bca0c32ad227acaed3b0df28c00dea5d73add177d61599e0557652662aed8cb0d3660c8c55834045e71eeea95af8e6387ce442bc71c97520f0c73817a12fc938c02c2df6606485fc17ba0cacb97bf60a24649fa25e8f9735f00ba290f5326abdf1ed4b666920e73bb1cd62c992f3351d1ba6df0a34804b7a4f9f771febdaaae11fc7554c516f7330a2b034453ead5abd7a67f15da2acabaa5bd3e8337dcc72c013a44ae25366e122a3d7fef271e36ebece5b34ec3864fed40915d99c8a5ea2b22b4cbaa542ede39011814f92de0b7d3d210ae7e6483b145ed980107c9052536017334ba05e74bb60c8235fcd3a0cc8387d7d50dabb6bc80d251c7cb9d925e1e5005680b13c6e901446672fca79272f255180a281292b0521f9e210512147f9981570e0eba2f5da45e079aabec89844282bd8ce2a207d86d23d3acf91931b4164c3c82a8434711d2aae9e3714fb7f3f85ec4e0b94eebacca7020f6ba9db789289830d37c95c1dc780b83824c33ed9a4602c78cb294cabe50d5288daf7f974b7890d41d0389ecc18a95ef4052e45ef3813d4cb4936346b941b57d0cfec6e6d06cab25db4e5b575332a4f8e8fe5856e09fb0307faff4c4c86cd65f1232633985eee2e835bb5543ffbc9fae96a31e59159c5d02abe69fb16abf79e038bf188feaa215596f530c8a5d78f425c93b7ae2618708a663aeea2072b39f6c82a9e94208934aac447722502091694a22167adf183c7b8989e408b1166b3aeb3e58209a5fd4b8b455008a31a137c8f30ccc0c841cab8e43a450dd228a222cffc8fd7860f457e635b33bb6039def4a443b712c255e1ff4c45acdbfd3f33467499d0ea483d3f8e8517fd3c287c463bdfa01639dd97c4958e5f01466b524822e508b655fdd114eae2c35ad358af0476ab820285053f2ac14c6bf54ca249212a0985c31965e8a844a36f3fdd1445e68ab6ebb2f6d4d1e7804c2c561f64279aa294e71a90ed4e7e1356fbbc14a378a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76ad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f85b21e0000000000000000000000000000000000000000000000000000000000c6341f000000000000000000000000000000000000000000000000000000000064f362ebbebed35401a76e4b6cd3571cb7d4aa34570a5c80968abaca292be98cb989749950f5c0a6759bc187f9ebb6fd274779f4cec4ed289be45b343f142ca5e788566b55848bce1bfd65c53e0ab603d80938d82d26d1b6a8e1052808c1ba5b0ed49f8bb58095e82dd7fa2c5502846df7b21e0939589102f5c68b1ba47b64b651c850a7171c1c56c23f7a1d3bdb116b072af1eb4f4bac80e1b8b7f68fdeca20d7241487ac6f78de4129bad248c82e219d89f3a22db57f1a5f7863ac78f67ecf8f2c61d63f9dd4a198f0de5ce9e1a7e2e38b57be9a716bbbbb4b545286b0268993a054be6fab494c904fa579e6333e89892bd616f8eaae4d23b03b984e1a1a5a",
      root: "0x52296912a63fba5a44ae4fb98542b917d41be7fd1955330caaa2c513e35b2a3b",
      nextBlockTimestamp: 1752571487,
    },
    depositProof: {
      depositAmount: 137,
      depositDataRoot:
        "0x9de115e290009d56d89d8d72d7ed1528aa2c2586609f879cbb4ba215f92f5d27",
      // Deposit on the execution layer
      depositBlockNumber: 22879304,
      depositSlot: 12101000,
      depositRoot:
        "0xb3bfff031af1d856d5a369cdc72290f058ebaef6e3f61669f54927471f16eb1d",
      // Processed on the beacon chain
      processedSlot: 12145621,
      processedBlockNumber: 22923668,
      processedRoot:
        "0x52296912a63fba5a44ae4fb98542b917d41be7fd1955330caaa2c513e35b2a3b",
      // First pending deposit slot
      firstPendingDepositSlot: 12101421,
      proof:
        "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b372eac1fcacaea3b2a9ca4e2ee0ef79578a9e0fda8157d9f0b3f55f7f1553f0fe4e8c0ef8320ac0c2b17178ef42dbd863b66d785c792db48a7026aef9ed345e7bc99457fd3895ecf2352c4ecd4b276cae33dc56a221ebca8e81e1e641d9ea930d233dc8f10150bd915442735875aba35a62b17bb3895bceb0a6769fbd911fc541c08f1bcdc7a9ec5127c57a1f8f5369e5e09cf0231e939269143cd42273e1f91592dcd8328c2e3eb9eddd7c6d2c91419c7ad0da0e56961b80f979eeaeab4237d474a594b09bcebc3eeeafc09819a8373b04fd726d53916f1d4f4344c64583dd1553345ff65640cd53bbe718dda4a3a7473fe2b6d6d4e878bba144c2f793633bf221939cf2f70bf3ce89e507f001f79b5f916d7f4111c5d57b1ac8bcc7ce761e8d2b0a10136797f6c8be69140bbe3a8662a2b45b5b11a74bc3ad3733a5dfb8408edfbc18fff0a09125b2331e025f156d506ef966a9466263dd2e66571f3999aadbb95de69beb5aece9c550f0550b1ea99fc07406ae40b609ddc6910be82cab56cfa91e33e8f986cff5901a989cde531dd30005bb48686d18c7a964aea551e3903be08f495df2d84eb6630acdd60edbb66c563dc1009c3a90727b3cdaf910fdfed5f4a87f5a9ba4be8fa61ea3a0d581e920fdef2cfb01198481c3c50de16e7f66fb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765a82b000000000000000000000000000000000000000000000000000000000000cfdbf745317e33f9cb06a5453901324f153a36cde3691bb269ca7a7844dfbce9e9cbebfbae6f4ae452bc80e7dda7fbc569c43bbc3d57cccaf383106ac65e07d04f0c7d8e82072582769b96078f962500c3f96a3628b779bcfee30986db2cb119c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c86374ad219762f056e7b4dd3d65ec897a65754d43ff29c0c9c15fbfc5fe0aa61d7241487ac6f78de4129bad248c82e219d89f3a22db57f1a5f7863ac78f67ecf8f2c61d63f9dd4a198f0de5ce9e1a7e2e38b57be9a716bbbbb4b545286b0268993a054be6fab494c904fa579e6333e89892bd616f8eaae4d23b03b984e1a1a5a",
    },
  },
  {
    // Register tx 0x8998d4f271f149cf48eabe8b8d0d6d8d0b914734758ac36f5845c042dab21eba
    // Deposit tx 0xbc44fa6de0a8e1e307aff7a4702681de4a82ec495db5eb2152a632538ac2bd86
    publicKey:
      "0x8120d1eedaa5d2fa64db35aac17a9fa6a1109ecdd45ce6f652cdb9680c8c5cc489faa351565c5dcf59a8bdf9c94493c7",
    publicKeyHash:
      "0xff08527678e0cdeb9c67bd52cff5338d11b944d63a0f28037aae135da4d8f472",
    index: 1998611,
    operatorIds: [1926, 1927, 1928, 1929],
    sharesData:
      "0xb931fab17500ef26774e34e92b3398ac3e2c188ff47f69a5b5458fa8bd9268a5ea15f835efd585dd9a4995d9b85b2d010fe70c59f75038b649e2c0e86a0c49af826fd43f98441e331d1b2d4b35b1ce07d99b85b5a8f2039dcda8810f1fef18b883e957ccb82235292da2117217dbf19ad56a8083d8ab850d014e4f7c51481015de064e59b1733572453662a00ef69e4b9024a4f4c8f3d5f0dacdd2877d6f7d4cb2523163f24401997fb484db6f1611c8fb813c63009aea92b1dd8c4f822a369bab2da23ef711e8959fe3a0d0c33e1bcb08860912c40b6e808f910094e57fc657533d35f172044e1d6ffd931988bf4e25b23e9ca90cb48e9e3cea7deca4eb52da1f944bfab07f9bf054cf5840e7955cf9e2290f2f3adf3d491c3ae764d92f5a20629e3cb40134ce98e03ce37da64a2bdb5a5197f4a1eb9b2a691eb36945c00af76c3a27fc637c4be14ea3c08234a28c9eae4014f291351d61542eb3f58592839e25a51b89a7a210265f13a091e7fe5bcdee6d760f7459038b53f78b0ff060c127855f819cd7d47836257ced4f58ff65b698f0b21f0f72dca961c8bc6563ac51731d45d3c296cddd2262864cc0ed3179a4841d3adfdb9fc46971947e79d22e370caf8804eafcd7187c208f99deddbc6cdd6217114efbadda87e3566005a057eeee3f03c124c808e002b8c640f83a8140febb4a35c9b23ba8cd7f553aed10067e26536b5fa1d50219f706f7cc13b29c356cf3f16b049ed9e0c426b811b4e4254c320dae4ed189c24628f393a65e8bccff0bf80e00d781c3b9deb86148dbcf6d1cfe6197c2ea779baabeec432a0201f7bedc2b4f8ddba26fff2fd087c06d21106eeead909d104840404ee16ead987b2def3da80337c9535636191971cd8af3d8ab151f98428e4dc07954c387081c1a7ce85eba134b92da1aa3395cab5b67dbe796ca809ddc7a564913a13f5b7340ba5db430555ae969ff7d7d70629fcb0ce457143cb4a1df4cba42472b6556c0a6c327734ce1006024e38d00d376173383ca92bcdcbb21bd9d40bae0f4bad05679db658c1290b46e4d2d1145b03717eddc1b4f728ec02999a6a19a7a29e0fa55eb69e8cda88e94aada7ad60e83b3cb137d9826e24b5ed204785ee082ed9fefdd4e39338493fdf99a77de7552c38c309ed2182ab74b3c89eab4397c9345129269c69bc8331b2456a9d1f572cf5be643dec74367423673ec10e82b2dc159c3f6c8b90ccd2765d6607c4e13a0b881355bfbecf24fe78065d9b469b1a5830d0b6be17e24279fd3147983cfeb5a96649adf174fbe1c9f4d5a8a5be93d1b65db22f5bb395cf855ccfadefbc4816ff98c7784c7936c8c67154259e0a3726c417199c2534e995e3cf8241c23273e05d38a5bd48054f73b01ddcbe03b6eb761e17cbf14f0422aaed6140fbff0804423e36c0cc05b3516778cc974208287af29873d12c3580959dd906f6c00f2dc26cbea179fecf8b3c1cddb8192d1c1767aee837dadc137e571b874ba73607c00d7db564dcf9eb4ebc6399cb52d24323aa9160eae065ce23224a0d8e6912afc53abd330a91c7c96e25cc3ccff814c0d49459363cf8e5621ee6388090effdce97a4aeca5dc468e6686cce0c425202b17e935628cccefc5d1503b730178f546ab6c8f0ab2ee7d398ee640cfec3f37629eadef4414627b065b802ae7cda778e92359c25002f5d5fa76d40f244073d8d73a6811ecc9d0cedfab9f41fdda618558cc8aff4f10a15dca2ce82a573eabccc762405bb7ab593911b26d42986cb269abf82b651749509980677b35423502549bfb4f09187e6bb1a7830304ea343ba4bf0768b6f1932966706c5b38cbabd4",
    signature:
      "0x81fee344968d68e6bb492f34cc3417e883d50ed7e69ddb35f037a17be0feb2c8c0ca595322654bfe616ae0e4b19dbc630e93e9c4840c1d891100bb21540e4c85d40933df15dce0521ac439ed64edc77e3e13ba516bbc7b2d5c478fa728a60c79",
    validatorProof: {
      // Proof from beacon chain slot 12153322 which is execution layer block 22931335
      // So next block is 22931336 which is needed to set the parent beacon block root
      bytes:
        "0x020000000000000000000000b11ce3bc3c2cf41d9e7811de7c70576be37001f31b1805668954466fb0147aeac9632ad54b018f53ef52517c2bad115ff7f7f54b11aa27d8825d812e016ae44483dcb2cd662cbd6b0c1a30b927f4c30621297271285faa7f3cc8fc020fcf920efc151101f86a5f576219b79fa974137bbdf54ee564e60ed6fcf0ec96e6bb4fe2b874b8800f2c04dc2d03714bde660e82068c666f293f51767b1e763f2b5d5844d1575e2a6b33adfe2a200aac8fd57ea2b19b1721fe0f0e29e4176c54fda924222034f8bd5b653e44a5ef08412871995c80dd58f0c84094fc565c82f324b63519347e0fd76fe247ea635a28e6867344de840963e1474d4b62ce2c5a84c2bd8a45bfeb4c905be250b3dcb9e623e6a09a6669416dae7858c75e9a1b5543670dc36a5f0f9ceaeee4ecdba9e0f7dea19440698c66b6aa40b233f228f6eb59379b3df1f1016581027b46883c8a02a76bd90e4c278b072f57ffff855e60ca76fbb0c9121d03cca892fa0e2b3f942c0ecc993e073ecb705150f334fa971a409ba43ce4e680282d7f78ab0232ac10fb723a579be2ec6a3b65396df321e2d78e736eaa9966e37ba6c9fdb035928c3dbf6905d7725d96c821eed7bb561a63beca354dd98d15cfea9bd26063a88c5bc7239c6d2e2ca005c40998df74ab529aad3821dea9319704e8ff149097c6ff492a83bb4cd5f159c131aa95b270d258f99109b582cca1dcafe591ce472275a6379645c32e912a5fb5b99c94036501abd271f2e3436341b9fcefcd5d84125e61b990dd523aad3e784e0a8f7d33db8a2f7ee98d5ab1c889450a5194b58bf7e1263e8176da26f579073261fd8c8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb26f652fef22e4abed11428d40423caa52dc662a0f0012124ece37ebf01565dd26067b9b22a54a790d27afedd28b2afb7668e8e46c0163a8027601ccc83289c17c35a19e30a9656a85279f59d3e5c9b733dca6c127aad576ad34e5c87fecb3ec46b0d8d2b3a1970d0155fc2dd4d7e6a7e0dfa109a83415ff1dd0e52589e756a5c8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76ad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f0cba1e0000000000000000000000000000000000000000000000000000000000c6341f000000000000000000000000000000000000000000000000000000000053f00cd3490234bab5baecb1b962d03da77d0f91874755e75b07504b14d7143deeca5c043fe152e2192796a8059dfcdeddb508653788bacc1df29a8c91484a4f7a97d65637c2ba366637832d74398642c6572ba69f63a6f0e891d9aa00c8ce0e58157074fd83c33a3da42d8d8373537501f49cf5bf62b9ad8a486eb2ba47b78a96cf3b980d8565df5ef1239a5b828719f2138a83ad5fe3c15371b72fc2e22fb7c18bb03029db2e0bb972ee4cf79d773b700c47099f277dfebb900ff6af1f144bd2a1456d4f01bdaa2300479e1371a9456141eb70915eb6e478d11035a42c13f602632c350c7304ef064b30e989b663e673077f15b8c5429d914a77f4693d4fcf",
      root: "0x9759e8137268a2d52cd077fc692b3f86b7510b346d8a4c04f5ed2c64b835eff3",
      nextBlockTimestamp: 1752663899,
    },
    depositProof: {
      depositAmount: 64,
      depositDataRoot:
        "0x98944436d0bb89d370a4257db513572eb867d9e17bf2d318464044e9a1b04c07",
      // Deposit on the execution layer
      depositBlockNumber: 22800000,
      depositSlot: 12021192,
      depositRoot:
        "0x10ce6748c8f8cffd653ea85bfa156c00aca8bbb131bf0dedb480617e7ff52159",
      // Processed on the beacon chain
      processedSlot: 12153000,
      processedBlockNumber: 22931013,
      processedRoot:
        "0x7b24822bfa0ba42810e0be3175e0713d2af31e3282c783ecbd84ef2fc99eef7f",
      // First pending deposit slot
      firstPendingDepositSlot: 12102739,
      proof:
        "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b376ebaf765107ae8542e3c13fde4ebae87cba9944a208569a3c4bdc204ac48e47b27efeac705ed7520e90919a9cddb375ab823b1d6fd31216244e589975698eda418c130b1246ad5a5088fcdd22bce6647dd9e22c9f20aa815dfb3ca7c1330bb840d08a988745daa40ef6713d5693d27d53d9ff25bf145da9e2dc40d592f66cc09e432ace5d9e7f26a1dc29ba9e6fe0ec17cf67cd4bd38fab9c902f973adedddea94ee569655eb806ce5fc015e559f5d3b562954e004104f128e8889f93b5498f45b546d2964a142cf7ffc79d351d6dc4d8176fe4e9f02972d35229fca2e6a0781d2379b8456a348ca53b31ff2852d984939db57ab0d0eb99ae199ecdca5e953e47cfada6e99fbd62f41e112bd37cbf08f273c0cfe76ee5d527e9412a3a195af6dd259a3820b9420d4af37dcf9b2e5609ecfb5985993a0c36f7ac44ae83c4a6ec733c4ca32f6428a8327ed032da30a4a07fec2ed98651f17a3c0c7dbe4b95539a768ffaab0ce7d1c86268105df48416aebddddf7c4717386a04ad10537d83f9e5ce98fdc442329ca3faa70a73ee3c87f1239d7755a8e46852cd536161d9aa57cb3d31a7655cd3172653e188bc093ff557416a0f927321134aa4c0f5f9e2d34ed814a5f70eca3ccf8e540243fc7a88d9cb5b318c64648932420da282ee80b199bb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765c33000000000000000000000000000000000000000000000000000000000000086e3ac2f221c9b6d7050795eaed1506bffc1046fb0596c30a5f202654fba2ae91393a55c64aefcafb6e947baeef7b5c10b9616b8a1cedb60f47178c445d1af9d0e55e24df7b5079c6709fde871a1e6fbd6d1ff2ee07b58051ee46d0868a541aec78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123cd007dcf597142b951257bf8dd81b00fad601ea98cf4c2e6a94a8111e0cbf29cbe3dfb1d879f0fdd0143f3308202cec8d0dd51396e32bdc275982ba44df3f059310aa9db22e7bd2b7e5509c09663e88d25b208ca8e7bb0784baf34382c0de5b8b79b960a2ed1da24b988bcd01575774ab9d7cc34cd7f72fcef1e418c2464c842d",
    },
  },
  {
    // register tx 0x94e113697fdae7e6be3dfaf128c8147a7a7896f46f57c42d825dfc5ad72a021f
    // deposit tx 0x5823e074eddcdfd72b79a184cb7d6b21bd4d6c959468dd00a751756125b6477d
    publicKey:
      "0xa8362aa1dd61743b73bda741c9144636e0c2af9d9e63f1b0d182d5ebdbd58c3c988d25e53f6da4bdb102efec2ae7f8bc",
    publicKeyHash:
      "0xf752db0fbb501101e6eaa793b251f19fb00cb5265c2298cd88ece23fb815570e",
    index: 1927585,
    operatorIds: [684, 685, 686, 687],
    sharesData:
      "0xb4975324cc4c5c6e79772013e87904cff08e6445310ad2a06d495ec7a8b5b80322710be8ec39619da164066ad04a1605131f2efe8c0508ea2c2d4c13aa4bbe6058a44dfd528d5a33482a7e8507486d6b91565450e8d9e695ee96a79dff065308af178eb109fc3ffaf56552b5a5f0be236b936e0a6d9896bc9b2d4040b0aae455eda40849ce803ac578b1df306ed88c0ca9b3422c268a8e9a7686338a0f8c8fc41159add5a02a419aaf281bf2f083492d8c826dfdaebc803e024619e90e4ed24a97940ff3ad744d52fd299a9aeb2f5fc14e33f0c55e133c85580e8b1e5c6b947390ceef4c3bfaf297c2d1acb28c6caa069578b43cdd722f4c48ba52a4b7247fbbf5303b3b9a730e00f908b2440dab229921e6c7f8bc657271f3009b6dc0af0da62abf71f21063b65a4707a3b610267ede2f4fabd70b8ad9b37c847ecfc6c901b2bf252216d94ad338afa2049c7781dc9a436d85d438815b446a7d8145e146d72d3db4ffbf8143217d9834e7c91031fe3266e62476676204442114b1574b14714c76466bf4bca746ff59ddf37cef15991173cc3ddafb94a101cc2f5cd7997ef272bc725d4fc4c4fda60e346a8c728e31bcfbf1f758ddf060d2a2c7a6bd13b73566101ffe0b855e5aea6477fcfbc7f258e824ac6fad557225475ca4f492619e9f0514726c8abab31502ffac4b31fae56cb9d6d0011a1e02121e10cf994eee9ecfc7efd6a75793de806a2f743a1fdef11c741c51171febfe6984374726743975ab5b1fe269baff7aa47c0d96f0cd324a979c3e4427f9806f6eb4340ba05813dcb1a4df7cc5c14f932cd9de2712b16b7ea9f5e0ec3999336463300ad83f42d942bdd439fac3dc0e9157752e656ef7e69412dc20be850426be09f8143d080170f4936b51b4460fb9096b810dbe9e683f75c6d2c707c80d8ab5bfc3801b716b43f5180eb6d876c332c8451cfbb6bb67b54750ddda1eeeb16dcb28884b9d8e0838c2245cc627d4f8758db0a92524cfac2b1dc30363afba5a87dcbe5942659e81615d139b67d22aabf28f29cb89e901220f88da55097a82d4d21ac3540ac65413e6127784784f41c6659ec1d9b77be093a7225b5bcb2a0a939d3eb797dbcb698751c99822ca87a08da5596f443a7e90036c3df0bdc6287c095f1e992b397b19f3d4db0b5befcc7ec912d544ff840c7e18ae0278869b9744ca958bd7baad3640f4ad1230e539dd8fa18474d7af254e26f623ff8b31c5cfbb899a0ff1455b0863de2c3b8055b22a7ab22ede907e260b53d4e8b163f73a302531d6d54e19433fbe6f37af28ac0ee57b2c52db7f8ea78d52295d9590d5ce698f4c5d128277988be1651682dca48ae68f456a702530c0c09881cbee5c302eb3067a8ea3c12359b8b527ce1195bbeb086a28451af3035d24af4bd1ce88cc91e0c3068cbf5f48029516dc37e54f0ea770093c27208c6b38076091708f00101410b81ab1398aa2c49a04ee3e102de1574cf47accf6565ac796699933a1f5b6448a8063dfa4d1d33ba395201492ac1e979054cd50c4005b5bca8744b8dafbac66f85266203c90f82896ecc883402d08d776f2d17a1cf0342e5023479423c0744565b5e2e901b9234e82601cf9a4ac11a1cdfd3ef43b578a2817622c8f3661dc0b5d3a486d66d9f5c7389d50e7e309a6a636d502c3de5d655b5facbf53bd00211c9feccc8e3b23ed117476e995d43fa30bad694794f4e4bc9f6290b43de4be19b93eca086b46089abeb3c69e69de1f2acee146274b4009348d9f4be26237d28f89ff40f985bcf81d53b2c78a74fee19ce3710d96b2e74ada3d61a4f4c1ea9586e94bb0454d0e5e5362dc6098be4cf3af",
    signature:
      "0xa26f9988d2df42692270c1cf4c218feabcdb30f83fd751e1d480e82d09871a208edb7b1b20b922d23f0c1ed0698d4bf502554cd2312eb3058328091e0e4ef61bba31f2b3d872aaae536278d05e9a466c10c5b4722819787b44e09e3bb5c593b6",
    validatorProof: {
      // Proof from beacon chain slot 12157238 which is execution layer block 22935232
      // So next block is 22935233 which is needed to set the parent beacon block root
      bytes:
        "0x0200000000000000000000006ec3b94cbac32bbdb1763d9352e8864c1c4252ff5e620cfe84be23c7a92a30b1f889d77cfd37a6b9dbeff1cfefbf3ed905910513e109c69f738cbbd417a83007beaeb0b06e1d034498d35d8355c81064668a171b2830c29e1cef90cc6200635db0208fc6da71a8d8e99196d13b688420d614f80a2481fc13d2e2894ae19a130f72af77babe125d211b6ad022a795dd1360b30f6e262c14fd2a32c3f0bb7b96b11f68f195af3e2a19a8948565a3d12cc40cf41916ede494e2c2248a67cc717902972cd1858ac76a68a491a8417e324cea855b3e0f6cdf8c0d3b2d0641dda555b19edf95c9f6f0c987cc88c9554e97e6a0bed9919b284d7b9359fe7df982ee321e66d473d21bfc524ed9b09a9dfbce28e87173d4bbbef8ffde9d072721496577810eb8c219b03db4b46471f0763d32a2ab768ad6938fec83626dbb7fa130b9a415b3a125500baf87ef782a67dfc9604ce38bc80ee9fb502b89ff6f2c87cf9e696a492348b2a50bbf5767e234f8672f5256ade0deff305df63fe1d11f283a0e965d95a8be4f40b5b1bead4d55dac6674bb3cbf7d1bc07bba569fa0b2f386f8efefcb24b7cfaac6be7e73eb7ae97fca38a1ebc1b9f86af24cfcac3734e7f24ff265b51285f4002d5cafd45429e59ea0375d6e288d722b8c59e62a63e0706247b3aae66b03625c25b8cc079a4e9209cb976283599b88f694f614db2843534cbeb885c71aca540188f9fdf4a8fb852337333ed4f832b8b81cf2cc5e4e17fbdbd19332d6e025dfefd4bec18be76845b67e83542af8fa4551fc2db4ca6a870d31c4a6af26e69579753f670b3ecb9fb78c3537ba48c60523fd7a19f866269d0641d303ae741648236ede160774f5d1d879a52dd2e7e0d592a2b81733384b9ac04d52e09da5b69729347840fabde387ccba6205a9d9c6f6f5bc0422fbd1bbd34fccbc7cbcabb95775d61db45174b4c1ee2a9c19e0f7d0926e1642b3868b3000319d803edeb4626b618f6989882bad8bc6405e5af997d5cc776081de63bba19d3221c89481fd39816a3b5bcc9abf2b62bc44c695fd8ee691a738a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76ad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f96bd1e0000000000000000000000000000000000000000000000000000000000c6341f000000000000000000000000000000000000000000000000000000000067dbc6df090eedc38f5a92ae4bc619634ec3b02e3cc1b4a7dac08a49ef2b85d143209ecdb5940da7745cd3d2bf738368a6e5fe17b61b0572ed2dcdb3b67092f0ce15163131a831774005f486ef272e01efee542c865a4036180c629e23687d71d8aa47543cb91ea431fc700d65bf1a88ec1ab96e5b7d32f6ff27f1b6c0c61e8220b13c660c129ecc7ca132940c264113a4f4b4644885dd64740869eafbf14d3e286cbd58dad87d95aed63c480e40d5a6b67997dcbc58a9858640d51261f530c96cbbaaca92a73e8e730f382b5d99a9235f9f4a0a25cdf59118fe06f529ba5286083eb5bf7b9953d9c6573754dc9cdc3398de3c2e9d770604f19c35a14632ffca",
      root: "0x4667c30a52ce2f9d2ebc3a173f8634c9616fcb2f1898d227958d826576b4e00f",
      nextBlockTimestamp: 1752711143,
    },
    depositProof: {
      depositAmount: 500,
      depositDataRoot:
        "0x36a4a9d68b0545fcd002334a473bc4229e59da5dfc66c72912d75030763a7b6f",
    },
  },
  {
    // First deposit of 32 in tx 0xf766074547a732de8517f6a7d531db6183ced5b1d0893163fe50f0a6910066ae
    // Second deposit of 51.497526 in tx 0xdc0a7185a57166308f2f135fe99c3c31e1fb67e070391d9b8fc4f992d001a479
    // 640 was requested to be withdrawn in tx 0x59a13d8f0a9a12a767d48e3810052ca5985b2ec44efa09a5061cbcfe0d9a5430
    // Withdrawals
    // slot 11862438 withdraw 1589.373182 ETH
    // slot 11763009 withdraw 640 ETH
    // slot 11723496 system withdraw of 0.017398
    publicKey:
      "0x970e5c88a87ee3e7cdf753b3b861812dd056e75446b0e40dbacc8547a2566b8f53c2c71090cba83ff1315040b16827fe",
    publicKeyHash:
      "0x26f5bde43076d37579ae5d1f5082883420d4178074a0ae1b39c5f2f56efab3a3",
    index: 1897126,
    operatorIds: [684, 685, 686, 687],
    sharesData:
      "0xb4975324cc4c5c6e79772013e87904cff08e6445310ad2a06d495ec7a8b5b80322710be8ec39619da164066ad04a1605131f2efe8c0508ea2c2d4c13aa4bbe6058a44dfd528d5a33482a7e8507486d6b91565450e8d9e695ee96a79dff065308af178eb109fc3ffaf56552b5a5f0be236b936e0a6d9896bc9b2d4040b0aae455eda40849ce803ac578b1df306ed88c0ca9b3422c268a8e9a7686338a0f8c8fc41159add5a02a419aaf281bf2f083492d8c826dfdaebc803e024619e90e4ed24a97940ff3ad744d52fd299a9aeb2f5fc14e33f0c55e133c85580e8b1e5c6b947390ceef4c3bfaf297c2d1acb28c6caa069578b43cdd722f4c48ba52a4b7247fbbf5303b3b9a730e00f908b2440dab229921e6c7f8bc657271f3009b6dc0af0da62abf71f21063b65a4707a3b610267ede2f4fabd70b8ad9b37c847ecfc6c901b2bf252216d94ad338afa2049c7781dc9a436d85d438815b446a7d8145e146d72d3db4ffbf8143217d9834e7c91031fe3266e62476676204442114b1574b14714c76466bf4bca746ff59ddf37cef15991173cc3ddafb94a101cc2f5cd7997ef272bc725d4fc4c4fda60e346a8c728e31bcfbf1f758ddf060d2a2c7a6bd13b73566101ffe0b855e5aea6477fcfbc7f258e824ac6fad557225475ca4f492619e9f0514726c8abab31502ffac4b31fae56cb9d6d0011a1e02121e10cf994eee9ecfc7efd6a75793de806a2f743a1fdef11c741c51171febfe6984374726743975ab5b1fe269baff7aa47c0d96f0cd324a979c3e4427f9806f6eb4340ba05813dcb1a4df7cc5c14f932cd9de2712b16b7ea9f5e0ec3999336463300ad83f42d942bdd439fac3dc0e9157752e656ef7e69412dc20be850426be09f8143d080170f4936b51b4460fb9096b810dbe9e683f75c6d2c707c80d8ab5bfc3801b716b43f5180eb6d876c332c8451cfbb6bb67b54750ddda1eeeb16dcb28884b9d8e0838c2245cc627d4f8758db0a92524cfac2b1dc30363afba5a87dcbe5942659e81615d139b67d22aabf28f29cb89e901220f88da55097a82d4d21ac3540ac65413e6127784784f41c6659ec1d9b77be093a7225b5bcb2a0a939d3eb797dbcb698751c99822ca87a08da5596f443a7e90036c3df0bdc6287c095f1e992b397b19f3d4db0b5befcc7ec912d544ff840c7e18ae0278869b9744ca958bd7baad3640f4ad1230e539dd8fa18474d7af254e26f623ff8b31c5cfbb899a0ff1455b0863de2c3b8055b22a7ab22ede907e260b53d4e8b163f73a302531d6d54e19433fbe6f37af28ac0ee57b2c52db7f8ea78d52295d9590d5ce698f4c5d128277988be1651682dca48ae68f456a702530c0c09881cbee5c302eb3067a8ea3c12359b8b527ce1195bbeb086a28451af3035d24af4bd1ce88cc91e0c3068cbf5f48029516dc37e54f0ea770093c27208c6b38076091708f00101410b81ab1398aa2c49a04ee3e102de1574cf47accf6565ac796699933a1f5b6448a8063dfa4d1d33ba395201492ac1e979054cd50c4005b5bca8744b8dafbac66f85266203c90f82896ecc883402d08d776f2d17a1cf0342e5023479423c0744565b5e2e901b9234e82601cf9a4ac11a1cdfd3ef43b578a2817622c8f3661dc0b5d3a486d66d9f5c7389d50e7e309a6a636d502c3de5d655b5facbf53bd00211c9feccc8e3b23ed117476e995d43fa30bad694794f4e4bc9f6290b43de4be19b93eca086b46089abeb3c69e69de1f2acee146274b4009348d9f4be26237d28f89ff40f985bcf81d53b2c78a74fee19ce3710d96b2e74ada3d61a4f4c1ea9586e94bb0454d0e5e5362dc6098be4cf3af",
    signature:
      "0x9D2C305E0D26E3FDECD7C224F907B211926E6D457173EA2AA66C36FCE9CB53ECBD5C86F2A33AAEBB6C991359E5CDAD73C3A6640A91EFF51EE1420F1936F57EC8A99E84EB01E9273868B9F5F8E71FBAFCF71794E053EFFFB12EFC60059800A9F6",
    validatorProof: {
      // Proof from beacon chain slot 12158264 which is execution layer block 22936255
      // So next block is 22936256 which is needed to set the parent beacon block root
      bytes:
        "0x0200000000000000000000002a2eb5aa8b6911f6b87ab2dbb37d3e9edd153947f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b99b713642e2ee8e825fea982cdaab16ec93294083e4910fe9950ccd28f1e3035a1ccfa45efdb3f6bec7ed55a981f5d01db87351f9afec41d8a50380bc2bd67a3fbd3e8dbd983cd7fbd03bc54b3938403f6d7505dc3d259e6aa86fcf49ddf27c858b5cf6165cb97b9e3ca546da60f9d31915a8f6b6f7bed3982155d2a62867e617299d9da5daf75df6bf3082eb6e17965778ea55ef7a6838e5cfae95646d6fc9ca4985ed8c929e483cf1d61c88ef13f0061f63bfac39fd0c71cfc0022437b072c71b7a19a907cea1cdabb4a7dce017525b7e2a00bedff2f23d93aa25c9c8b4261b5b33d3e4f6f050c58241affdd5d78439ecd4ec01f46fd38e0be62da2ada91940df7b24bf95f71183980d2d89a1dde8b953ce5ee9bfa6ee50b8ad5bf865a85e2aaf34e7dbb79b27ed84cdc8be096f37eefa32090ab9241787779225fba5d76f9da7ae9627c3563d9b95fee67ab53d9aeca9f5319cb8c926a88715dadb9ae9f16a815c56655f2d9f99d738d56da22ddfa68950b27ee8be873718338bbca3bd8c7f0d12cbea1cb040ce0406511d817270b7aba0216661089c1a5aaca7a33b83a0e314721f87dc2b4c885971b285c5c6cf19fec5c7e66bd626c59d5683ac1bc6c7998534184d57236bbebe9a4d4304c14409b9e07f8dbb6b3fc0d5f273b3a3b95e1b0e70adbdd9459d65973d2128654bfb7cd83b542c2a640c1c9f869f6a902362edd80ce0126069bdcb00ffa77d5aa9891b62a10da3f6087e14c2ee5b86a8da587fda203ecd612b6bf9608835609882d9cd6fed6f67aadc2f49bf93049695bfc8e6375b66eda10af23cc8f0ab907b8d745a128dbcb92309463acd27064941cd7215e6dc933dd4409545cbb0aa6be737c72d5bc72cd185df267babec812e2eb543076b6e310326178d665aab463237600ce3fbce63ffd62f7ec03604b9938c0469122d972f9e06a7355e800e1c388d856f87e5d1d42e0519417f947c1fc9f7d06e38a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74f7210d4f8e7e1039790e7bf4efa207555a10a6db1dd4b95da313aaa88b88fe76ad21b516cbc645ffe34ab5de1c8aef8cd4e7f8d2b51e8e1456adc7563cda206f8dbe1e0000000000000000000000000000000000000000000000000000000000c6341f000000000000000000000000000000000000000000000000000000000077fc3aa4d23a816a7a78a3c5be68d69929e15967b8797df9a4581d983c87256538423867718f1ef1f9f1d9a0acd6f1c8a7e59ee891ab6c3f80a5455629835a2ac8218d5c77ed033e03697d44b0fd43821badc7de8d26e105e7035daf8b6488f8e6974315ed465a721ddae8054d52fd783ece4a2f355fbe5b5f6aaf2d2a9028e6eabab4bdce8e9d311f4968ed0411640fb79cd25aaa61c67e9b4092f867cd00f9b1103e525ec8dc44ba3f79ac24cf48127da695e86b82b090e85465f8091cd5a494da8fee38bd34cef2425ce91f71ff9744bbe93234cb65acc776e34973ea17765d93dd1d7088652ff8fdaf031380743881946d4f82cfd6a36114508d7d9ef933",
      root: "0x5571b9f7d9c7ae4c56e99702e670e690bdf541fa3696f5408f223142e767eafb",
      nextBlockTimestamp: 1752723203,
    },
    depositProof: {
      depositAmount: 51.497526,
      depositDataRoot:
        "0x9824beaea8d9e59977662f6f018d1f48c81f194b0c0c361622f3aaa6bc7f6d3c",
      // Deposit on the execution layer was 22520162 but that is too old
      depositBlockNumber: 22886969,
      depositSlot: 12108720,
      depositRoot:
        "0x5b5dd1370f27f21fa34158080bbe340f84415a8ef52f44679e6a57cd1a9395fc",
      // Processed on the beacon chain
      processedSlot: 12158641,
      processedBlockNumber: 22936630,
      processedRoot:
        "0x247d5b5b3f0720d2553f359601bb4502c58beb68ddac409681caa84eeb2498a1",
      // First pending deposit slot
      firstPendingDepositSlot: 12108724,
      proof:
        "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bbe4aeb1ce1c6df34c4fda718b0c916d10773489c7211fb44b4f8b56989ddf1677066a34d8656abfbf962d959be8e5d79ec13b9e92f5f036ece10dc6b34cb7bef10a29e299cf7f5f63da9ad60009e79d4f5e243395d29c330230c5b41528e2852f7bf813e17ad42c595cb3f6a900d759efa0a320e38dda40e306e3553313791408cd901956df801e822dc641091e06bfdf51524eab6a3041cfbc7fcd289e176fcb1b36e3346a78448f7da4e18f3cbf406c0bc080ace4898ddd594d221cf57d905a697948bbd6587cdc54fcb203f31db185e9549d7a97a7f2aea46e86dcc7b268036f379a7a00b7f58fc0bb92132041db87b09b36254772d48a2ab69602e3e681cfea85951c0b2f8d05902be73f01c7166c1b31b83efa2f7690e14a0f6da08a58ae9586f50143468e4f97af75fc7aa9c7d700eee1ebc6a68076669d9a2010c0dd9702c90721cfc8e3d554e9c83ef11751818844cffa58e137bbae7bbc65caa06f488ec6fef90573d6bc23042e8eb928a06f0e760983aef7f9c6d88fd46ef7031d9180ba71ad57dee01aded9bad8f53551e05d13a56b058ce7ab2b772280a7a6c23ac3344234f91619077a5a9977ae429cf61af95012f38f4bc8a3860874893450177e92446100792067f0e8844226a5546dd55e2af004708ddf86067ada6195e43b58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765a2300000000000000000000000000000000000000000000000000000000000005aa1f0b33ed076d597709633084d4fc33d7fb8672e98c2276aae9db16761e21ac44d460ed335a779aaaf9f99d76f35e7a508087302392bc77585c5cc4227bbd9a0d19488b7ac3bf82d3e94711f87b9c3192a2818ef306bc706e8ea9c3841151ac78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c514c77cc922a66286ab35c6b33fb1ba4499a8e28c95d4279eb0cecc31cb2c71fcb8ac01686ce43507aa3f7689c16e00b94e011f87779f342712d812808bdd74548c4fe95cc9e58bcd65446f30d401978d6c6b7cfbb178f8ce1d81d806de78d87913604822c8b39740b955b78824d4948ae7522b81d554be8240871ee52e4a363",
    },
  },
];

const testBalancesProofs = [
  {
    description: "The third validator had more than 2048 ETH",
    // Slot 11763000
    blockRoot:
      "0xd117cae6578e917494ae2efe62360ceabd53be93a196b2594afc56933fdebdd2",
    validators: [1930685, 1998611, 1897126],
    firstPendingDepositSlot: 11753514,
    firstPendingDeposit: {
      slot: 11753514,
      block: 22534214,
      blockRoot:
        "0x74cec81571ed07249cd239b486a69ccaac3af90b57a7e09ed695fde51182755e",
    },
    firstPendingDepositSlotProof:
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b8223c074640d70b0ebb88741addb6f30de325777204c677e8d28d797afd6899275492f3a50c0c2127236a50c7d5fe785281f92d94b84ab2c66c99fb2e1fec76e7d92c45cab42e1eff9b53480a404f556ad09cf607f5bcecb04950ed36f9b5da2f14e7299187c17bb5c19f5b9afa12d77edd510ad3576d6f861d213018e0000f8286e7d493a8fe1dfe824cae130fce4a73446d2f8d1dcf7730aae97a3c7571a38a37dc46dd7ed3725d450aa0f03b47e83bdb9a4c825decb9dc77d95d7b7503939a2519201c393a29baefef46394f8cf01a6adf7a41e46319dfb7a6629556d20e70eb24654e8b114cdffbd46de192091f3dd539d9afe26b4fb48de3b304715e20f5bad058019d1403ed4f4f3a616b7bd64049e87955c60b83b8caa2f1f9742e04c026893dd75e0b8cbd0f17049de6dd43437919a83967f7e0bd454e350b2f5b7ae5c901c9cab5f36a2ab69ed526d709a4ddc99d1b26f2224bdc0016d65020480124b16ce2a9cee27a48bd791c4e5e9bad467fea460e51fdbf6441b93b696d2e69169a8a502144b2b5b39df7470c8c839abafb3699b83b8d151cc29b29b7d6f21ecb7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5fdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85eb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467655e0e0000000000000000000000000000000000000000000000000000000000000fa56b361e25032741bde59f276f9d74fe03f3c771c4cf604cad5f3d606338570c43867f1948870817a105b8f183521cbdf6e894bee22305f9c2d8feebbaacf652e05e9aff51b5f89dd1d1a6ae2910a03d3102ec405f3b88a67f6784353b3073c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123ca8482d0e63bcb5f1b330b993f4cf32a3e541927c2e223f551dc72759a56cbf3e9d7d0cb62dc144daf5ab52b89f03cc110726d2225b7e2f7523fd5ce395c06126d1ad393ffdfd614c962da4d1e6a403316c23003ce74cce1c562517e98dcdf0bd39224bdaf75fb3b2838691706bc4afc2cbc85b8fbaee995e7db5dfe08069fb7e",
    balancesContainerRoot:
      "0xc5ae13ec1cafd0d4528b36b2e95c3aa8d5b4d7d68e80063420a9dd4a205cc581",
    validatorContainerProof:
      "0xf14dcee88d318ba00125a38c13c9ddd67251ddd45fd59b2dbca86291a07c0ed7bbf58332f44162f1e2134582297a654bd55e1f408d776e2557fd647dcce6e58adbbfb2b4c7d7ce38a504530f3c57cb1d9519ca624520c0c816f67d0296188c984314ee15aaa639b892490dd4dd1c30d33f6620b408e0f1e2999e4b3d43a1a248971bc93f62e587e437b7170b80a317860c20e0dae4fd1d0c8180faa2011c2c49b565b1ca721f409771852c99fd99367f221d0df2ae1c7c538547de649c1982709d7d0cb62dc144daf5ab52b89f03cc110726d2225b7e2f7523fd5ce395c06126d1ad393ffdfd614c962da4d1e6a403316c23003ce74cce1c562517e98dcdf0bd39224bdaf75fb3b2838691706bc4afc2cbc85b8fbaee995e7db5dfe08069fb7e",
    validatorBalanceLeaves: [
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x00000000000000000000000000000000b57735d2060200000000000000000000",
    ],
    validatorBalanceProofs: [
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa187eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1c1a4b47064baa6932ae2e99a45171f9b2a45c24d957b5ccc23e32b3c44a55cf15a23a0cfbd10aa8822a321259fa16c90bdfa81baa66d02653fbb0f354b80a33aba90e638c0b3bd3e8c72533be69d08f22e7a4210102102985ea077aece2f72a9df6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85e04236d93dcefc2a3174296e54c7b9b0d79e7b4ffcd9b7e94d213593a8a8d04bdd49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bbbe46e5ecae4cae745951aac1829362e4befed02b5f2883fef635d29980f95ac3b1f466434bb4ed8b6dbbbd6b7c18f699f8cb4c3d629d864cc7c89c2248cfe2710e112d2aa67f468308069e186c06dad6d2ee4b5b76d2f14dcbc2eda49d2718c3f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7473611d0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa187eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1ffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220b7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5fdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85eb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784e4404bbe7e55fde78e9b2282b17deedec3615ee4516362f16437e220fa4a54c1be46e5ecae4cae745951aac1829362e4befed02b5f2883fef635d29980f95ac3b1f466434bb4ed8b6dbbbd6b7c18f699f8cb4c3d629d864cc7c89c2248cfe2710e112d2aa67f468308069e186c06dad6d2ee4b5b76d2f14dcbc2eda49d2718c3f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7473611d0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000fd8187f25c25387543c0508add503dcfdffd5a1e5e41544e6829f7f431adf888db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71f5e2dd323f21d778eb3d1f530fe54439f0b3d9e0a17ff66f873567d293d853b82cd36f1e6026a624ccb0dd33032e7ce877d4b9c1e1bf14cf40e26601fdd1a11e7a498a44340747a9aef556d72e7da6f43e6d4a2ff8c9e96cc11fe9ced5ec230e1739c8ea98f1e36473af195b09f5d82298a78a3b2453b4e59acf059cf5380dcb92d583d38370664db18db4e913eac4a476398db856ed08bdc7cefa18579e324cd823498f8bd1cc922e43635b40b5e00a044e8f71a290e1f536f736c7e5bb2ee0003d0834b50449591196cfbbfdf10faac03adedf90756fccc0ba49fa773b0cb99e3d179297b894060fb0e7a6a3fdec31cffc03b0db8baffcfe904a4e21fd3f11dc29bd4fee06e332143579e4cfec2f374bf1514e36de1734d2b05d73aa3216346b8fe3c7b685bb87a4623c6d1513a7643a773ceb863d5b5ecbeb752adb1e068c0d4562c1e0c5c2a5bd5c3e85fc656874b20ef16b790a4f9d0950c8962ceeed19537866290e44f831f355e54763429955b62e68098af96f22ab94df40224d4185d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bbbe46e5ecae4cae745951aac1829362e4befed02b5f2883fef635d29980f95ac3b1f466434bb4ed8b6dbbbd6b7c18f699f8cb4c3d629d864cc7c89c2248cfe2710e112d2aa67f468308069e186c06dad6d2ee4b5b76d2f14dcbc2eda49d2718c3f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7473611d0000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalances: [0, 0, 2228.319778741],
  },
  {
    description: "The third validator has done a partial withdrawal",
    // Slot 11787326
    blockRoot:
      "0x2632705c197d5448f6d386a40f145b6d9ee769755b6ecf712f79fc44944570f3",
    validators: [1930685, 1998611, 1897126],
    firstPendingDepositSlot: 11780284,
    firstPendingDeposit: {
      slot: 11780284,
      block: 22560770,
      blockRoot:
        "0xf7ef2f8e9cac0216c0f04521571a9335f0f25dde08c5ef46df7825933248e08e",
    },
    firstPendingDepositSlotProof:
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b1c132e82844719f0721c3a0d79ac7f3a547f9b73c8597532ab5d28f76d6ac13fcdc2284512f62aa94961dbec84440bf7fc4580c699c6a7cc2beaa43b8b19660d270c1c9e6ade4ba231b6d025c07ba39980bf2b27679122d14eb663f9ef3436f54e4f68acaa184332565e6743b37f1a969b19a5821528fecc9a1baca011b1981e5efb30323874109b9730b156d536f8ebdb59f0645dd3953ac5c937204f79156cd2735b9e437a9809ac224e1f7c3f6a3f9d8189ed243d242b26bb84996672093b17014c6312d1eb5f670adedc3c69eb0e0b94f977a416173eb3ea3c2a0b0d6e1b434448d0999c0f6b0d4c7f292a88120c54351748a057951be833f625b43664da8db91f42868797f3adc6af452383c7fca8f1fff57af1d862cdbfb52cbca4d9a142de1f2f17fe0923f28edb3adedf42c72aa220eac59ede312a9275eeabcf5a7e06eddfcd3592815bc85ff4c935b08fafaf127e85d40c0430bec6898ed239e97cffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220b7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5fdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85eb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765be030000000000000000000000000000000000000000000000000000000000002a3777ca27bf5deda8106113e75209be1bdedd27498b83d8c81519263d3793cb21c31acb067ec9840693a9258cb460696dda1452cc8e096b3d2c830fea9242e6f3513a61a01b7dddd72bb498711fa6bb524d82ec98bab47e63bf44006482507bc78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123ca6c5b795997b9cd992a9dab87dd0d7805ecbada7a8be0478f46f1096454588be6c86c5fb4261abc9b4d7e992cffc63bb34a4116fcecb7aaed26a0d0b9945fa94b0615e0bfdcfc886bf0155b1caef376a62b7c976b88414f3ad624054c9f892ff3596bd8236c5a1f31b92a52ce81f575507a28b34c40e1039dee1351747b038fa",
    balancesContainerRoot:
      "0xd23e0a1aba7d695800ec194fb3ef631efd007e3c800afae28e196ec7cd3a4f04",
    validatorContainerProof:
      "0x840c7b6b8e4d5c622a512742a78eaf87421a82469216b211157d9329bb3d26164a5389a221f4bddf742dd667cdb872ec0c8063bd171d35c530b255344e4a90ab50a6f8b54bf6ea8e89ca4cc2a0366e1f00ea86afa9fdb6a4cbe0f5d9b8d054e3973f6a817349f52706bcf5829558ee1a79ff0b888355ad0a6bd3b30affbdc60e9563af66db5fca48caf71a77e2ef381cd67ac0824b221d8d55cf9ff8fe0ad69e29d34bd172d8d333b7f839f5e8b5b73bb8bcf998cfad0ac8e95b073a18e4f1396c86c5fb4261abc9b4d7e992cffc63bb34a4116fcecb7aaed26a0d0b9945fa94b0615e0bfdcfc886bf0155b1caef376a62b7c976b88414f3ad624054c9f892ff3596bd8236c5a1f31b92a52ce81f575507a28b34c40e1039dee1351747b038fa",
    validatorBalanceLeaves: [
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x00000000000000000000000000000000290ae6f2710100000000000000000000",
    ],
    validatorBalanceProofs: [
      "0x00405973070000000040597307000000004059730700000000405973070000006b22e4c31c927e650119b5663965f7eb42e95192fe363caeb7531cbb0f94fcb0df5629268ede2323ab7cb7196a7146a72373961f5bb96be7d9c2e1af3fd0fabfd77ad2e238c5087ceec41f87465eb35684dfad8094c69ebe5f167017e930ba89536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c61c9a747d8e05e63cebfcba1f205fd80224613d1f2c60e7e1cfc0d8f6f3c4e13336d7f8815e9eeeb4f945973d091a9a0ec784123981cd6abade1fca86b330c4187eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2ca89857d266f5c5768ee796658b771c69cca41ecacd5563dc7b686897563c2e25506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e189decf2fc19d0188f06217e4c445fac4f964dab386b94cb935e0c8dc57e7a7b03b732350111182a3f68497e70f344684e1bff5bdf9edaf46fcc578ee576537757fa2c0a377185c1925cf22f403f3b68522683ebb3db0fcb7dc5813744032b0a2df6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85e69bff4ae09b54cfa7992351b91770e9fb793154ccc9f2c937bc2052d6bdd089cd49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb46ec3096a79839470ed5a4f469ca0450fa631b440b25dad09e48d834bbc86c3759a1010b5db53cc78037a6e7dc3a4e0e69079ace3c787a3d5fd6e5d1ef82836900e595b3dae1e07369bedee5707172cce49ee0dafa3fcd61de27267142c8452df893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74bc751d0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa187eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1ffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220b7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5fdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85eb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da72937845de4fb73a003937f4486b0a3ecc3f6409cf94e83333e8d7dbf08b408a6eba74d46ec3096a79839470ed5a4f469ca0450fa631b440b25dad09e48d834bbc86c3759a1010b5db53cc78037a6e7dc3a4e0e69079ace3c787a3d5fd6e5d1ef82836900e595b3dae1e07369bedee5707172cce49ee0dafa3fcd61de27267142c8452df893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74bc751d0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000fd8187f25c25387543c0508add503dcfdffd5a1e5e41544e6829f7f431adf888db56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71ae1d28fec0eea7e663d3b9a2aa32ada4cd1357cdbe1f472073ffcd00de8943e797bbf49c70da197ef5be99efc5493d2f8457d3bb9605072922e345d037155ba5231d4ae883a37f72a275fb7abb2e1b41582019d992cf48d82f6fc81cc47b034c82fc57fe62be70b7dab4c1d5c850554ea0d0fcea196fdbc7cb0892d41a28b9047f479ed29592eba8e58e127b33fe5b5c74f86cee60fc91917dadbfc933b65cea04e643fbec5501ef7bab115dd068f7f2c941f705fa63eb2d753e1638c5a278777aa744bad98a1bc1d32b2f7706b1165b5b7ccb73d14bdce00a43bf1395318028299dfa0cccded0c481b40ce3c013f4bf56c86b2e7863b852d9e416fbe5dd70b9a5e62e4beb222f67209414ed88c753409bf8b9e5cdfe87d22c930a2d229f81d06177723a2f35321d8fcabc594d5b1cfc210676e20d3dea5777e97948f90bdc047b0e1b3743d261394059d081fa913309aa8d05f19af471d1d9f2595689c89aea5f20f5ce9a9b555211f6c149aaabd7b1d37346f1e979ef57bd53f2ff63daade1d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb46ec3096a79839470ed5a4f469ca0450fa631b440b25dad09e48d834bbc86c3759a1010b5db53cc78037a6e7dc3a4e0e69079ace3c787a3d5fd6e5d1ef82836900e595b3dae1e07369bedee5707172cce49ee0dafa3fcd61de27267142c8452df893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a74bc751d0000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalances: [0, 0, 1588.918094377],
  },
  {
    description: "Only the first validator had a balance",
    // Slot 12021100
    blockRoot:
      "0x3fd4bec58e89729b7d6a17f425671356c598c92c379ffa3905b696a545362076",
    validators: [1930685, 1998611, 1897126],
    firstPendingDepositSlot: 11971119,
    firstPendingDeposit: {
      slot: 11971119,
      block: 22750232,
      blockRoot:
        "0x8ca68a8861b5ac67d438ef86f7ed19fd50ea3666754677fe7ee38da05e28dd2b",
    },
    firstPendingDepositSlotProof:
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4be8d9948918d1fc2824bbe2965d888ac85792fbeb62f8b88aed57f70c851f5245b1afd01f7475b6dd0c31458405492d608c87a4e3d273c6ef2cd8465f65f632fa2e30c498211354b124cd3729fbe372508291c15666cda546663fc106ae011d7ad5f4d20010774537d65c6795c0afe4cf893823116974959434fde772315ba39053799ca7dc7f7ca5c5df88b1033f958e59e7a59df7fa5386a547c815fa2fb58439867f18a3af4fbaceba9a80f4c5bc29a15524e11cf0eb5d2b3431033b1e5c6d404fba2c23e4a3b4b3fd3df83ec4b90e19ad6240db50ede8e9c84e7f0b364edbc0324e185391108ae97d99c9a580b40b1d55458450f2383ab35da47550be516a99af717ec6b4850482c424300040745ffe8824172d4d308460a3c5626eb032250c7b2b309889ced27a4b68e253e93fa982fe2d50a5b598cfd1924e97f3cb00b781cef39cade7ea2f4a308ddfd6a85dbcb59cc0e537a94bfa57ebbcdd98353f2813112ad4ca904bb9cdee1f0f424b7cead64fc5c9b6d71d09c4d86395ad98e3b1dbe7467bf5f4548efa262ca6d8057ed0e19134156a8d9f02efcae7f93b34c55cc22428e63b55a41f82fe2f3d0c5b532f0637f1e5897107a4306834d7bc9c63dc4ed50a7e4fddb8da32601b2dd9a1d3ed41285ba920e79fc63d9660475b9f9062b58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467654e22000000000000000000000000000000000000000000000000000000000000ec16345419affe053d428f068727e82424d9902132f770aa75bb627f057a943a802f75c85345cf42c8a97d15e09aa7f9c2b7472f1518d3226fddb115c10ce08d7136966afa445b1a6488473bc0889769eeaa7f062fc74f13f6f024583cecbe97c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c9f5bd03b1e74d8f2c1a476e4cf276edf0e6e3b8def4310d6299759a9d20b9c764ef154b7e63d373f7df682344a1f7b5de7bb0826b046cdd14166ebe9c163d25be391287a9e590fc697dc86bb293adc40a6c58621178b018aa82058c60b59fc05de0859955015d987a7b5175a46e687529a3a1abaea12f9f10dd4499c729e34b5",
    balancesContainerRoot:
      "0xcfe14ca1fc0d9fe2a2ae362d87b969cd5a341a939b676e167099eaf26f52322c",
    validatorContainerProof:
      "0x6f9d2bd9d73047fde9fda701a8c993821ef24422066e90e093d1f8d11edaa8a6ebadf3ae1e02ce94ef516ba1fcd21cdb892a2951b5285ffb176e1e0d4f1bd43dbc97b4c88df3f098ebefa510e9ec36556b3d08f9bcd2fd7ae7970b92bfa9c02952838195213463ef1a331f2f280ad6591e0d495d7b985473c18606ed18c1323b08012a47cb5ebb26fb42eccb7127c58ed0c7a2e400dc397e91aefbb3d7803989b1a96c2e4be9d40f1d066b08a3f893426bc2a4ae600ebbbdb9b86d96addd67274ef154b7e63d373f7df682344a1f7b5de7bb0826b046cdd14166ebe9c163d25be391287a9e590fc697dc86bb293adc40a6c58621178b018aa82058c60b59fc05de0859955015d987a7b5175a46e687529a3a1abaea12f9f10dd4499c729e34b5",
    validatorBalanceLeaves: [
      "0xa314c2730700000084d0d5f61f000000a50bc27307000000c2dfc17307000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalanceProofs: [
      "0x790bc27307000000880bc27307000000378ec1730700000035f9c17307000000cd3766fbbfc7c53c9a34b68a5cdd0a63e232495bc7328f6c545306d1204c17526d990b7361f6f7aa725fe0a95ae17a8b500a0be6cb10f567f03e9def30f70e1941c02204adc0fbe57974040fb37d9f1d709f2be60923954c2c87ee62d3d707a33a9f992f59bf03251b9163a73e473c56abfaa6988fbf14db481306e331f6af71ae8e551ef2680b1ea4e8e9ac2029af55685c1b0c57f89c12a045d5173e79dbe8c949f45a7ad993a9b5b28d6fd9bcec81748ff9c13a5b62599b8b37ba1cce0f113d092c5a55edb9077191fc8437eda8555dfadba7a5fed45789ca8f9aa2fd93b0cb868637225374a9b6f79acbf8843db2f00b17d9e687a387b8663c0e293c4536762c1f2ad21cf3bb509abe0acaec2f88d6140088af323ee0ba2ce58daee3caface1bf04fc14976cdb8351aed15bb7c466086255b53cfe49dcd0838d3a103809b241b650136c319536c06d684a391ddecd4c80037509d1d6dda3f579d8dcbb5342998b38d75db432cadd65f7790fb3d88166e330aa79e3edeac2227f807a72c56e4dd4f3e01d3243bdbe65c8d1b925a775bcb046e4ef14353b018ccb69ac37862f4c80979ac5e93e6ac12de7d23fd16afd43c07d7e6978e9eb5ae94a4731c6325b8dc90c641c368c566300d17bda2aa2b79ccd9d3d4796b878ad08787841f07bb3582bcc9f568223ad87aa3eef87b8db21d52202dbdd188e3fc5a05848f6779e4dc7ed11a0c65341b9faa4de38595fec48a0d4940e147b46048512094d35e3d23050dd060bfeb87461ab550829ee044efeddff8360622ca0c2c8f51d594345801f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7426451e0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30d88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa187eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1ffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92be6364cb24300098162d7453ca909ee4f6bcc1e08c8ef4ff9191672582e00c725bec3e563c894f479acd0d5ad6891ad6efd16a550007ca6b80f672c0c12b778bfdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85eb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da729378400745c0464b8cf751eec571df5152e8304e326058dc713fa8df9077bce87f0513582bcc9f568223ad87aa3eef87b8db21d52202dbdd188e3fc5a05848f6779e4dc7ed11a0c65341b9faa4de38595fec48a0d4940e147b46048512094d35e3d23050dd060bfeb87461ab550829ee044efeddff8360622ca0c2c8f51d594345801f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7426451e0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d7154116558b11c7b0a4db53eda85ccf0cdbca0c5391a5eb24df2b39b7b9e398f6f7f05bdd21b9030d37c5910313cb29428abd94b7ad5da198b39f90d8ec365796450e7a4da373f23cd784f162c1298ffa3a76d495cb96d93e718bd699cc99436d3e3f5349a438b8ba0199e979d91f7c5749748414a26f0c68463cf6a143f33a14ab6b174f995e60463b3b2d174db53b54dc95c145ccc544a533f302b6ff2492a74fa25e9bc7e20b52f6a7933c6e2d506bddc12a945e65a673dce609c8f982c7d9156b52894dc0097a5a5a163a8aa6dd2e2dfb6d502c80b1b4a513cbe52b8b51dc21a37df7878b946ba812e58db2d40f7255ec6fba3e17032b979cca7643749cd6f457e49ec0767cf4fad351277cf21f9ffd5e35ddf05845432556783efe14427bdfe98c0a5b7e7563ee59ee56a935ade5628f0faf0e38394f14a20bc21936660c61ac2057028bb5711cb8e9fbb8ef3ace4a86f8b15e86b020edf878300ff85b5338bdb6f47a7e2c0756a6ab37547ca6ccd6e9b4adc4aee088a77f2939f6a373269b8dc90c641c368c566300d17bda2aa2b79ccd9d3d4796b878ad08787841f07bb3582bcc9f568223ad87aa3eef87b8db21d52202dbdd188e3fc5a05848f6779e4dc7ed11a0c65341b9faa4de38595fec48a0d4940e147b46048512094d35e3d23050dd060bfeb87461ab550829ee044efeddff8360622ca0c2c8f51d594345801f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7426451e0000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalances: [137.28519386, 0, 0],
  },
  {
    description: "The first and second validators had a balance",
    // Slot 12153439
    blockRoot:
      "0x2fef147728f441c0c1b19f894bb5b5afc3e1a42baa233f29976e36a9e1a6310f",
    validators: [1930685, 1998611, 1897126],
    firstPendingDepositSlot: 12102975,
    firstPendingDeposit: {
      slot: 12102975,
      block: 22881265,
      blockRoot:
        "0xfb7a867efcd42ffc6ab22c8a43214cf83aa73141b84c7ea18535bd9462a869e8",
    },
    firstPendingDepositSlotProof:
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bd6ceefdc7de016363f0f5a46b8fa5e8ea4fc4414c45872374eedd3ef9f8e789f4d38915cfaf6e105cb34da847cc05f67506dcbaa0820293803140cb6045f717c1a2685988b8e6c179758fbdabdf36b1590f43a71cd71ff881999f3bfed99759bf7f2f109bd05ca2a2c999c76cd94bd74af7b8b84a1666314824a98eea7bd5a467c3e0316e922b459a270f88b18f697738af4958e167898fc2692bfd4dc76af5b7422fb78672d5717b62302d2e7a21f01c28a8fca19178239af091dae1084d2c1e627b797943ff69074bcd843f7fb9bcb80b574bb88dbe252490892f3676fc84ed5a36f677d7ee2363f5917b8a3d19f9085f5692bacc79e16a7404e4b7b7833cd2d5387674d715ec76a4cdef6530d74c3d965779b2590f60e685926b6ab9967cf8133f037629676c4ce25ec479b8872a5a3a8be35b52a012491d7847e9bb1be376a52dc5fdabc74019db3e12094591c91ae706c780a0ef92a6b364ad088b0521d0a5af8693f7f118b92f662659e6ce55b059e1e4cd2c1bf5812fceafd246b1e0cf0a6e1462212e94186d3a900e16acf120a20b1f09119d3530588c1fc7a3347c7f0ace84ca484756768ada96aff92ac7bc3d9875631a95aef568df62f6f0718abfad680d1b7afa17d59ce9bc4654416116607cad554ceaaae39ae5172aef94edbb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467659a30000000000000000000000000000000000000000000000000000000000000e0ae560ba496f96c4f29624320a452effe87b7b46eaabd7f19cf887ba355ce51f22a181c2996c6ad78bf4bcdf936a947f4de1b70c0d997b6fcbcc078e5887996462ea678962d9b7a9dcfc56f12e6865de8259a528b66c3bf24d015759e363082c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123ca748247fcecc853c1ce736bcefb1c3799d0f9621bc3d502e7a55a03264954e36b6e6086e95d327b62029b658fcf3c96af5c36622d11e40adf022be14d25dd6f83ff15e1cb8655af231f6d002d65fa6fa38f036dc55bb1834e59fdc5b162f0f6475407d90ab7c49689a3eaac8766eae5bed84012767ff8d5011063445930fb9e4",
    balancesContainerRoot:
      "0x799f1fb9856c719d0ead17cf9222934c494e73568ef79d34788bf6a2b70fddc6",
    validatorContainerProof:
      "0x0efd3bef10a1e88413d5d1be3394c79e4ac8be4abbc888d19655c0926043b84d35d362cfbbe18c2c9c6dc30eecdfcb811d85130c5629d9519066551f7b69289f7bb844c651f1a86b07377c7771c42a4efb2613f1b3cae35fe09e83d89afafbe5a7e87e9e0840c5cba3f5343626e032d8a590cc7b6e9d8b73b87a421075a4c73152d9fccd927485d01877c8d9c3f0d8e3d08ee68fc78859878ca97ab65ad94402af80ef7aa69f43d6902e649ee8492e392c84134f6909fb1b833a9f418087eb73b6e6086e95d327b62029b658fcf3c96af5c36622d11e40adf022be14d25dd6f83ff15e1cb8655af231f6d002d65fa6fa38f036dc55bb1834e59fdc5b162f0f6475407d90ab7c49689a3eaac8766eae5bed84012767ff8d5011063445930fb9e4",
    validatorBalanceLeaves: [
      "0x41f4b57307000000b88a2a0320000000c915b673070000009749b67307000000",
      "0x7bcdc6750700000066dca37307000000faeb672708000000a62703e90e000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalanceProofs: [
      "0xd552b673070000006639b673070000005889b573070000003453b67307000000b3099a8a826cb1ba94ca652e0a1740a10bbc4fb0a7ded5da81299828a5752733f1912d7507e8b6cadf1dd3e7aafb9438ced1a35606ba923010bd89d8264a9a56264732b1cabbbeb5838e4e806eee6561fd45d2d654920d509b16fe1c6a45eb51a64dfcb871407cf2f43cbcef26ee644fbc0e9332ddc2f09616108b52093e29cdbabfa17f57f089dada86a0c787afb0eda6b6a9cf5f3a19d318623193a2e6eb5397b00d2287b4c872dfa16c742d7ad3a89ad0695db3871c54aaf0b89101a2b480bb48d7f1beb3c041909540f5e3cbcd899cb00fc87c89714100a74aba97732150f6a8418f331db0b8eb033d0d78c32219d01ee7464b76e59c3e32cdd92da0113a1f5ef6d4bda1af2fbde0cf92eaa0b16c4d91ea6539eafddd57880bb107cd548c59205390839355571ca9a68550ac946ebe9ee9c3d8b5b5360023ddc4a8631912a95b39ed85238f2815e8101811a957c408f2c2a8d8f37f78c6ab8f13d7e206271c616ca9ffb44ed10d70997e4c6ce8ccfd7c5b164431bf0272f97ca4f4713878c291b04518a16a02f230255e89a330a63a293c72ad930c5853b2ce7acba1c7193595e04cd630ce8e4b72e35ec89d6f8c1bef429ccd322590e6b07dcbe12be3325182e631d8259e30b75a96e15cb057b8ae5940e6db188fce3b88445d5256bd1e3d9f97c705470565a9c019c6860626e5d0b512aae876d9d7e68bae4df2967547cb1be68faeb645c9d0bc5c1963ed10aa6b36de7d7cad1103f6988b77451bddb33d2cc08806c92076bd539bc0e0af349c53306b2312cb052f9befd4e3bf6aabb5f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7424ba1e0000000000000000000000000000000000000000000000000000000000",
      "0x8b5f81740700000080eca3730700000087e2a37307000000f7dba373070000003c9b315b036f4b138cba7297c1e6e53c80583b71e141698542848658ef4a3e3838dd29d62bc62309409b788d55d101e520d41ea8e3f72386fd569b08eadb627ddd962e9e4c8c2600e06a63122153ae2db660530572b133594a9f214dcaa7ead83ec0450e7c693a9754cf852ab1cf691258245f919d7137cdc13094fbd53538aa2a2f75fae7038ab4b74ecb6e1eff9970b0c48f5caa1d93f215b33c6bddc150dfda81c88fe313f4cb9cf1e5441ebea9670a8613d629cc1c9967811e4c049ed937632d1cecfacda3fa3e1641150a4657f8544a9fdce6286d30b41f0ffa25206181806b5f9ba807a1b19f83100b65296326631108872b13a3f7c2689e3c1063726ae9b71564f851519f3f0cdc8d65c659a306f92f7e774de0a3f8c183a862410c443e701cdc49280b903ce10af5948b67e13970be1b7f8f4db9594345677e12e22f4d50a2e2df55ceb7481fc18b8432af32e170cd28703b632a3aed51e94767a75b96071faed1905908d2b9dd7f6ae359f7e2e93173845e5e7e3a5f1d82d9c4994e6066f1749f111aec44d60b50b1ca4cb6d45dbc580b4657c27a0376afeffcf10db58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784891cfbd6e3470b128536365717433a0baf2f5d38f664da6bb66cf93b625d8e123d9f97c705470565a9c019c6860626e5d0b512aae876d9d7e68bae4df2967547cb1be68faeb645c9d0bc5c1963ed10aa6b36de7d7cad1103f6988b77451bddb33d2cc08806c92076bd539bc0e0af349c53306b2312cb052f9befd4e3bf6aabb5f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7424ba1e0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71b36d1ac22a4fb1e5c6d2d670d2b0b0e29111a1a9a1cbdb1bbfac05e09a35f24cd3e5d619750845a647104476f92bc28f77e45ba616ef16dc537923522828bde66a92ed6476527d0a43f8fa96cc0ec7a3ca046cb5d3e2c2601d1d058ba4d0205a305ea26f4d67565efc36958b19a7252fe6debcccb91cc31ea446f4a3348fba7c9a3bfae90845a9bb26e1ac898fb328a55b23dd3e757b91f94358c3e31a8a9ccc5452116d6348b210a30f9f9fc4cae3148995869fda1db15154683968807d88a19c7b9d9e9db7d82ef53b451a46c2b298ca126f5039d5af58ad9e959b4710ba98b1719ba47d271458e21e509ed6dedbed1ab3acd3613408267d325eca6e9f3887500b602d69ef2311256163807f7e3be3d38f3b066eb0dc809fb5ad3bd786b5d4f3d297af66b23e7258915269e073eac5ea3cc7c8848a305096c8d1614ba78d128e15fb2d799fdfd7c3276424a23b5f250a68ee34730f4b6fff960ed9eab1cfb53c8044bfb21d8b97816a0559df8f4c32756241a9c212fefab25022599cf93e5b5182e631d8259e30b75a96e15cb057b8ae5940e6db188fce3b88445d5256bd1e3d9f97c705470565a9c019c6860626e5d0b512aae876d9d7e68bae4df2967547cb1be68faeb645c9d0bc5c1963ed10aa6b36de7d7cad1103f6988b77451bddb33d2cc08806c92076bd539bc0e0af349c53306b2312cb052f9befd4e3bf6aabb5f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7424ba1e0000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalances: [137.492073144, 64.03884023, 0],
  },
  {
    description: "Both validators have earned from consensus rewards",
    // Slot 12157779
    blockRoot:
      "0xc89da37b667e62431891cdf55a4c6e9ba9ec1d8202f4f1836a701272e6a9f6c2",
    validators: [1930685, 1998611, 1897126],
    firstPendingDepositSlot: 12108371,
    firstPendingDeposit: {
      slot: 12108371,
      block: 22886624,
      blockRoot:
        "0xd4311b2dacf225ce3c6334ba236798da3a19a070fffd9732f3f3cc839b8b6f1f",
    },
    firstPendingDepositSlotProof:
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b45c3ef2a654fcc872e44abb7289d4cca2dff5ec0234434f20e7a19301e39082c3814bdb0c9dbe7bf4e5e9a9d4bfbd6cec3fafe293ab383e97ba02b6d82756943d048cb439fd145acdd1daa1cb7e78914649a4215fe68cedb85344d6776af0de51f1d576d950a66f2f42856502e336733afda95e0870915c6c6720a88c338b1e4bf59da495c5c8546d9c2e9d55cb2df148436e80a90c3aa77a23e5e019ea1ff2ea448abb2e668b3ae34c48fce9fe5b443eac9a863cfb1500b5b7b9fb2e9fb7e474b2086557fa211bb1e14c3b1d95eecae980740a68af1e16515141ad0823afe434adf0303428b1d8ef5b9399289981d39c6db2e3b2482dbe5c18eaef38754d8d3c96e041ecbac3f314ca332ef1ed7e0a822de7d8d3166b68c6f95b3a5bc62ac8f58ac3aa4fd7e49d2d9d40b61377096cf0285992a311da90032024434810700dfb42da151845cf7906035deb3aac4f8e798d2c07f7c3a66684285790ec921fab00caeff6de16bffd580548d75df90b51749254de73f371ee5373092d0d46e5501d631e011495ca08a7bb9197e93590eaaf45a8251d1577d71807da7f237316e42131c6df72b043d54dcc0001a1bb3c6723c40897c1265b75391c805f80d225d05750a2b141b8659fde4e1ca4da5053eeb26083cb6632c96ebc165f0e84ce795cab58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784d49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4f893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467654c3100000000000000000000000000000000000000000000000000000000000016cef8a9b89bb43b5083deaa0256d929441637e7f3d9665ab5baf241d3a9bf2ca905124b9d1608612ed56452ac79940b2c34ee1e42fd63ba2f0b684d6bcce2abc145378404877b3350e692372912be480b0d9674156f9d673ec8747247dfa629c78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123cab377f5dfd70fe4f288db18831762fb896617f0dafae6a0c538b056091de510563514282d1ff5d555bef25f9e20829ee06f77ded97c4a813edd5a5e8e46d29c9b554c335b1c056a586bf62cb30549a2f79403604cd68a337c262c49593a3eca9ad461af32dd665e0682aa8b99ee20c4059d607e2abe7144525b026ccaccac334",
    balancesContainerRoot:
      "0x916a1eb4e0c346e87025e6dac37ec3a4cf42a9151ecd7fc33beb3498177ad570",
    validatorContainerProof:
      "0xed1943a53890b9301dabfbcc836e0d6abac3ff1366892781490631f938d84984093609ae83e3d14053cef57658d603fb5cefc11b2a4da54cb74a41dac4d51368e9caa48d343334c81f24a1a2e095575fa7156cb722dea496e011bc8ac09ff37bb5053bef3dcae7e54906fe52aecb5e96858fe46f9cc17f0990810cf5acbab83535423aa755d710f11c8a98b437693c6372834a2f91098e3e36168e96f6b5331619310b146b011abaacbd0eb472fb58a7d829ce6f0fa3d073b4df6f60cdd3479763514282d1ff5d555bef25f9e20829ee06f77ded97c4a813edd5a5e8e46d29c9b554c335b1c056a586bf62cb30549a2f79403604cd68a337c262c49593a3eca9ad461af32dd665e0682aa8b99ee20c4059d607e2abe7144525b026ccaccac334",
    validatorBalanceLeaves: [
      "0x08c0c8730700000003297a032000000068d0c873070000005e15c97307000000",
      "0x4299d975070000005a74b673070000003b717c27080000003c9c28e90e000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalanceProofs: [
      "0xc315c973070000002d05c973070000007d21c87307000000fb1ec973070000009c63543bc9a30dc5cd7d84a15f4436e52f64e6e13e7becf227ca2c4b647d6f18c17abe1a8eaf29f99c2fb4f71eb7b775b6677508088c6c6c0df3fcd3fb131fceb0aaaa7b94c2dea4451f3e9ff3e0e22e411e60de3be4e21f0dd680c8175b37aac51476cea0ce892f545aef746f671b0631e3d256c27b3e33d53008fd538da5233532c2d961b3546de59377a2790216e2006ec9efd9ce1c3abf78c1e4975cbaa220a513034a6bf36a591c583d1b21fb3b7dab107c13f7c04a0e096a4668c593069a596b6cece8ab6abca72a6f21ab60b1d4435b1554fd59638e22d6f9b09b6dfe31dee10ac6f79320b26feddab5b65ae2218657cb54a952411470fc6dd965ba8100aefe97d0473b44c5f52d21f747831f5836f09fdca33b3290983640f22c9d2a6fc574fad7e412bcdab5c6b9a7ac09132450c47a9c1726c37fe5e4d79bf2db220cabe39d6d1fd3ff23a6f9e2039f5334637b968c78f98f8a8815a6f266a1da859a9f4c85f627e05f969aa764307ac226f8b89d39456eff2fc28f440f99a4ad5d0243c7dd9605b3b6d33c9d9853faea32d1146ed2161d7a84e5db895ed02211233bffc520354d986aee7850a96464a023a0306e68f5f6c43c4d9273ed61a6e31f3b397d632647fc7ebd56d8ebad6f33fef1598bcc25862bf470042e14d788828314c5b57712546918630b31a683e69c370511e6810ae81f4de80b8926453ea500db852159999612ca027445128d2310aab7da82d9d095e3e3715a3da466c8d6a8ad4f19dde4ebb4c10fd009264376f04723c53777862e887e2069ef5142f1f5ecf893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7417be1e0000000000000000000000000000000000000000000000000000000000",
      "0x18f69374070000000674b673070000004eaeb67307000000d29eb67307000000d5b197d28f7edc0f9e79ff2db8e425f6551290d8689168acd853b41a5b9af96dcd0288729d92537a0c80f0e9de1687b14d9992637d58486993152f93e5fea1cb36d7908abf6cfd852cda172ec7a4dda3d9d5ba2e7087aedd055f2feab3d45bfce33396c4bd3402e2190f3e65cff6e20d0ddfc7f6c4a65c6c693f139029437a4a9be9b1b49f759daddbbc3a36b05db544daf9750674d3e25afd683f4c56bd4bba7b2deacc0eddb6f0f9c9dc16c6c1fcb9f58787563ff596e5924656f00641456c9cc77230f7f6b9a04bd8cf29245264ff0e482a0ab33b4eaabd348e787f6dc2258e84632ec5110bd27177397af4dacf25e8a7d09fcb23b397911f2acbf9d66ccd81da646c80b12846687ab8cb5ccdf85182214087fa4eeb59585d2b0357cf21669c1b49f2ce4552d1cf7d22b51eb4c8031dc0ed6f3f35b4825a14be94b2243c5c561e59b318c65127415c8e8ff0e91909e693b2747a5a35c585feba2df10f8fa4bfaabe4564d3c44f4d60cbdc32898004c551814b6c68d3ebad1297b25e9ff1057024f829cd2163f6fe484e7ec6b2b1655454541c826b8f38327678c24bd43e6cb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da72937845080e2a965d075349c56d6771b7041356541ec8a37b6b72040a2a212006e912114c5b57712546918630b31a683e69c370511e6810ae81f4de80b8926453ea500db852159999612ca027445128d2310aab7da82d9d095e3e3715a3da466c8d6a8ad4f19dde4ebb4c10fd009264376f04723c53777862e887e2069ef5142f1f5ecf893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7417be1e0000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d719879ecb47c5adba6f21b3a2a06406509c5d8b9fbe1e6c28c76b609258888dc7ded3ca53de3733a93a4097ea4d3e2229682149fbd5883307470a6fb3261b271a4aa7b618db40b868cb343318d8e75c471fcfac3f9edb2816f5c4b391c747e62f49e60fc7a6d3a22a886d0e6d9efe690816f5a65b2dbbd1e13f7e1779b8ad6cba9fdf4d22072a7777ae65a4f8b02c6bc56af73ebc81f7f584d08087ac8b920ab0d01a3badf968131196a94f668225e80fe53344e9e13f4f72344794319a1e4e768976901b92c9899fb88013f0608f118ec4643d4844cb6fa45edd7bb26e5e3976ec9d2ddee39a6ed81ccf0e3cc522bad265e139982f7f3fa57a2aa69bdc11a2816ef30ae19ce77fb72c1f547b0902d7ce7d976d07e063077e376778f02e7a4e4ebacd66743e2f06c94017688fba3f58b6d966df6f0da08ea1f8d9352430f456bfd45fd8dfa9524a6725348a5e3af194881be82292b234592264cd36111d4e44b27ff1c935be528cdc3ca8ca0046adfe94c043d369d1a26216daaeacb115afaebe93b397d632647fc7ebd56d8ebad6f33fef1598bcc25862bf470042e14d788828314c5b57712546918630b31a683e69c370511e6810ae81f4de80b8926453ea500db852159999612ca027445128d2310aab7da82d9d095e3e3715a3da466c8d6a8ad4f19dde4ebb4c10fd009264376f04723c53777862e887e2069ef5142f1f5ecf893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17fcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9cfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167e71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d731206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc021352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a467657cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe18869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636b5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7c6f67e02e6e4e1bdefb994c6098953f34636ba2b6ca20a4721d2b26a886722ff1c9a7e5ff1cf48b4ad1582d3f4e4a1004f3b20d8c5a2b71387a4254ad933ebc52f075ae229646b6f6aed19a5e372cf295081401eb893ff599b3f9acc0c0d3e7d328921deb59612076801e8cd61592107b5c67c79b846595cc6320c395b46362cbfb909fdb236ad2411b4e4883810a074b840464689986c3f8a8091827e17c32755d8fb3687ba3ba49f342c77f5a1f89bec83d811446e1a467139213d640b6a7417be1e0000000000000000000000000000000000000000000000000000000000",
    ],
    validatorBalances: [137.497291011, 64.041294908, 0],
  },
];

const emptyCluster = [
  0, // validatorCount
  0, // networkFeeIndex
  0, // index
  true, // active
  0, // balance
];

const ETHInGwei = BigNumber.from("1000000000"); // 1 ETH in Gwei
const GweiInWei = BigNumber.from("1000000000"); // 1 Gwei in Wei

describe("Unit test: Compounding SSV Staking Strategy", function () {
  this.timeout(0);

  // Retry up to 3 times on CI
  this.retries(isCI ? 3 : 0);
  let sGov;
  let sVault;
  let fixture;
  beforeEach(async () => {
    fixture = await loadFixture();
    const { compoundingStakingSSVStrategy, josh, weth } = fixture;
    sGov = await impersonateAndFund(
      await compoundingStakingSSVStrategy.governor()
    );
    sVault = await impersonateAndFund(
      await compoundingStakingSSVStrategy.vaultAddress()
    );
    await weth
      .connect(josh)
      .approve(compoundingStakingSSVStrategy.address, MAX_UINT256);
  });

  shouldBehaveLikeGovernable(() => ({
    ...fixture,
    strategy: fixture.compoundingStakingSSVStrategy,
  }));

  shouldBehaveLikeStrategy(() => ({
    ...fixture,
    strategy: fixture.compoundingStakingSSVStrategy,
    assets: [fixture.weth],
    valueAssets: [],
    harvester: fixture.oethHarvester,
    vault: fixture.oethVault,
  }));

  describe("Initial setup", () => {
    it("Should anyone to send ETH", async () => {
      const { compoundingStakingSSVStrategy, strategist } = fixture;

      const signer = compoundingStakingSSVStrategy.provider.getSigner(
        strategist.address
      );
      const tx = {
        to: compoundingStakingSSVStrategy.address,
        value: parseEther("2"),
      };

      await expect(signer.sendTransaction(tx)).to.not.be.reverted;
    });

    it("SSV network should have allowance to spend SSV tokens of the strategy", async () => {
      const { compoundingStakingSSVStrategy, ssv } = fixture;

      const ssvNetworkAddress =
        await compoundingStakingSSVStrategy.SSV_NETWORK();
      await expect(
        await ssv.allowance(
          compoundingStakingSSVStrategy.address,
          ssvNetworkAddress
        )
      ).to.equal(MAX_UINT256);
    });
  });

  describe("Configuring the strategy", () => {
    it("Governor should be able to change the registrator address", async () => {
      const { compoundingStakingSSVStrategy, strategist } = fixture;

      const tx = await compoundingStakingSSVStrategy
        .connect(sGov)
        .setRegistrator(strategist.address);

      await expect(tx)
        .to.emit(compoundingStakingSSVStrategy, "RegistratorChanged")
        .withArgs(strategist.address);
    });

    it("Non governor should not be able to change the registrator address", async () => {
      const { compoundingStakingSSVStrategy, strategist } = fixture;

      await expect(
        compoundingStakingSSVStrategy
          .connect(strategist)
          .setRegistrator(strategist.address)
      ).to.be.revertedWith("Caller is not the Governor");
    });

    it("Should add source strategy", async () => {
      const { compoundingStakingSSVStrategy, strategist } = fixture;

      const tx = await compoundingStakingSSVStrategy
        .connect(sGov)
        .addSourceStrategy(strategist.address);
      // Using a placeholder address for the source strategy

      await expect(tx)
        .to.emit(compoundingStakingSSVStrategy, "SourceStrategyAdded")
        .withArgs(strategist.address);
    });

    it("Non governor should not be able to add source strategy", async () => {
      const { compoundingStakingSSVStrategy, strategist } = fixture;

      await expect(
        compoundingStakingSSVStrategy
          .connect(strategist)
          .addSourceStrategy(strategist.address)
      ).to.be.revertedWith("Caller is not the Governor");
    });

    it("Should support WETH as the only asset", async () => {
      const { compoundingStakingSSVStrategy, weth } = fixture;

      const assets = await compoundingStakingSSVStrategy.supportsAsset(
        weth.address
      );
      expect(assets).to.equal(true);
    });
  });

  const processValidator = async (
    testValidator,
    state = "VERIFIED_DEPOSIT"
  ) => {
    const {
      beaconRoots,
      beaconOracle,
      compoundingStakingSSVStrategy,
      validatorRegistrator,
    } = fixture;

    const depositAmount = 1;

    // Register a new validator with the SSV Network
    const regTx = await compoundingStakingSSVStrategy
      .connect(validatorRegistrator)
      .registerSsvValidator(
        testValidator.publicKey,
        testValidator.operatorIds,
        testValidator.sharesData,
        0, // SSV amount
        emptyCluster
      );

    if (state === "REGISTERED") return regTx;

    // Stake ETH to the new validator

    await depositToStrategy(depositAmount);

    const depositDataRoot = await calcDepositRoot(
      compoundingStakingSSVStrategy.address,
      "0x02",
      testValidator.publicKey,
      testValidator.signature,
      depositAmount
    );

    const depositGwei = BigNumber.from(depositAmount).mul(ETHInGwei); // Convert ETH to Gwei

    const stakeTx = await compoundingStakingSSVStrategy
      .connect(validatorRegistrator)
      .stakeEth(
        {
          pubkey: testValidator.publicKey,
          signature: testValidator.signature,
          depositDataRoot,
        },
        depositGwei
      );

    if (state === "STAKED") return stakeTx;

    // Verify the validator

    // Set BeaconRoot for timestamp
    await beaconRoots["setBeaconRoot(uint256,bytes32)"](
      testValidator.validatorProof.nextBlockTimestamp,
      testValidator.validatorProof.root
    );

    // Verify the validator
    const verifiedValidatorTx =
      await compoundingStakingSSVStrategy.verifyValidator(
        testValidator.validatorProof.nextBlockTimestamp,
        testValidator.index,
        testValidator.publicKeyHash,
        testValidator.validatorProof.bytes
      );

    if (state === "VERIFIED_VALIDATOR") return verifiedValidatorTx;

    // Mock the deposit on the execution layer
    await beaconOracle.mapSlot(
      testValidator.depositProof.depositBlockNumber,
      testValidator.depositProof.depositSlot,
      testValidator.depositProof.depositRoot
    );

    // Mock the processing on the beacon chain
    await beaconOracle.mapSlot(
      testValidator.depositProof.processedBlockNumber,
      testValidator.depositProof.processedSlot,
      testValidator.depositProof.processedRoot
    );

    const verifiedDepositTx = await compoundingStakingSSVStrategy.verifyDeposit(
      depositDataRoot,
      testValidator.depositProof.depositBlockNumber,
      testValidator.depositProof.processedSlot,
      testValidator.depositProof.firstPendingDepositSlot,
      testValidator.depositProof.proof
    );

    if (state === "VERIFIED_DEPOSIT") return verifiedDepositTx;

    throw Error(`Invalid state: ${state}`);
  };

  const topupValidator = async (
    testValidator,
    depositAmount,
    state = "VERIFIED_DEPOSIT"
  ) => {
    const {
      beaconOracle,
      compoundingStakingSSVStrategy,
      validatorRegistrator,
    } = fixture;

    // Stake ETH to the new validator

    await depositToStrategy(depositAmount);

    const depositDataRoot = await calcDepositRoot(
      compoundingStakingSSVStrategy.address,
      "0x02",
      testValidator.publicKey,
      testValidator.signature,
      depositAmount
    );

    const depositGwei = parseUnits(depositAmount.toString(), 9);

    const stakeTx = await compoundingStakingSSVStrategy
      .connect(validatorRegistrator)
      .stakeEth(
        {
          pubkey: testValidator.publicKey,
          signature: testValidator.signature,
          depositDataRoot,
        },
        depositGwei
      );

    if (state === "STAKED") return stakeTx;

    // Mock the deposit on the execution layer
    await beaconOracle.mapSlot(
      testValidator.depositProof.depositBlockNumber,
      testValidator.depositProof.depositSlot,
      testValidator.depositProof.depositRoot
    );

    // Mock the processing on the beacon chain
    await beaconOracle.mapSlot(
      testValidator.depositProof.processedBlockNumber,
      testValidator.depositProof.processedSlot,
      testValidator.depositProof.processedRoot
    );

    const verifiedDepositTx = await compoundingStakingSSVStrategy.verifyDeposit(
      depositDataRoot,
      testValidator.depositProof.depositBlockNumber,
      testValidator.depositProof.processedSlot,
      testValidator.depositProof.firstPendingDepositSlot,
      testValidator.depositProof.proof
    );

    if (state === "VERIFIED_DEPOSIT") return verifiedDepositTx;

    throw Error(`Invalid state: ${state}`);
  };

  // Deposits WETH into the staking strategy
  const depositToStrategy = async (amount) => {
    const { compoundingStakingSSVStrategy, weth, josh } = fixture;

    const amountWei = parseEther(amount.toString());
    await weth
      .connect(josh)
      .transfer(compoundingStakingSSVStrategy.address, amountWei);
    await compoundingStakingSSVStrategy.connect(sVault).depositAll();
  };

  describe("Register and stake validators", () => {
    beforeEach(async () => {
      const { weth, josh, ssv, compoundingStakingSSVStrategy } = fixture;

      await setERC20TokenBalance(
        compoundingStakingSSVStrategy.address,
        ssv,
        "1000",
        hre
      );

      // Fund the strategy with WETH
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, ethUnits("5000"));
    });

    const stakeValidators = async (validators, amount = 32) => {
      const { compoundingStakingSSVStrategy, validatorRegistrator } = fixture;

      const amountGwei = BigNumber.from(amount.toString()).mul(ETHInGwei);

      // there is a limitation to this function as it will only check for
      // a failure transaction with the last stake call
      for (const testValidator of testValidators.slice(0, validators)) {
        expect(
          await compoundingStakingSSVStrategy.validatorState(
            testValidator.publicKeyHash
          )
        ).to.equal(0, "Validator state not 0 (NON_REGISTERED)");

        const ssvAmount = ethUnits("2");
        // Register a new validator with the SSV Network
        const regTx = await compoundingStakingSSVStrategy
          .connect(validatorRegistrator)
          .registerSsvValidator(
            testValidator.publicKey,
            testValidator.operatorIds,
            testValidator.sharesData,
            ssvAmount,
            emptyCluster
          );

        await expect(regTx)
          .to.emit(compoundingStakingSSVStrategy, "SSVValidatorRegistered")
          .withArgs(testValidator.publicKeyHash, testValidator.operatorIds);

        expect(
          await compoundingStakingSSVStrategy.validatorState(
            testValidator.publicKeyHash
          )
        ).to.equal(1, "Validator state not 1 (REGISTERED)");

        // Stake ETH to the new validator

        const depositDataRoot = await calcDepositRoot(
          compoundingStakingSSVStrategy.address,
          "0x02",
          testValidator.publicKey,
          testValidator.signature,
          amount
        );

        const stakeTx = compoundingStakingSSVStrategy
          .connect(validatorRegistrator)
          .stakeEth(
            {
              pubkey: testValidator.publicKey,
              signature: testValidator.signature,
              depositDataRoot,
            },
            amountGwei
          );

        await stakeTx;

        await expect(stakeTx)
          .to.emit(compoundingStakingSSVStrategy, "ETHStaked")
          .withArgs(
            testValidator.publicKeyHash,
            depositDataRoot,
            testValidator.publicKey,
            amountGwei.mul(GweiInWei) // Convert Gwei to Wei
          );

        expect(
          await compoundingStakingSSVStrategy.validatorState(
            testValidator.publicKeyHash
          )
        ).to.equal(2, "Validator state not 2 (STAKED)");
      }
    };

    it("Should stake to a validator: 1 ETH", async () => {
      await stakeValidators(1, 1);
    });

    it("Should stake to 2 validators: 1 ETH", async () => {
      await stakeValidators(2, 1);
    });

    it("Should stake to 3 validators: 1 ETH", async () => {
      await stakeValidators(3, 1);
    });

    it("Should stake 1 ETH then 2047 ETH to a validator", async () => {
      const {
        compoundingStakingSSVStrategy,
        validatorRegistrator,
        beaconRoots,
        beaconOracle,
        weth,
      } = fixture;

      const testValidator = testValidators[0];

      const stratbalanceBefore =
        await compoundingStakingSSVStrategy.checkBalance(weth.address);

      // Register a new validator with the SSV Network
      await compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .registerSsvValidator(
          testValidator.publicKey,
          testValidator.operatorIds,
          testValidator.sharesData,
          ethUnits("2"),
          emptyCluster
        );

      const depositDataRoot = await calcDepositRoot(
        compoundingStakingSSVStrategy.address,
        "0x02",
        testValidator.publicKey,
        testValidator.signature,
        1
      );

      // Stake 1 ETH to the new validator
      await compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .stakeEth(
          {
            pubkey: testValidator.publicKey,
            signature: testValidator.signature,
            depositDataRoot,
          },
          ETHInGwei // 1e9 Gwei = 1 ETH
        );

      // The hash of the public key should match the leaf in the proof
      expect(hashPubKey(testValidator.publicKey)).to.equal(
        testValidator.publicKeyHash
      );

      // Set BeaconRoot for timestamp
      await beaconRoots["setBeaconRoot(uint256,bytes32)"](
        testValidator.validatorProof.nextBlockTimestamp,
        testValidator.validatorProof.root
      );

      // Verify the validator
      await compoundingStakingSSVStrategy.verifyValidator(
        testValidator.validatorProof.nextBlockTimestamp,
        testValidator.index,
        testValidator.publicKeyHash,
        testValidator.validatorProof.bytes
      );

      // Mock the deposit on the execution layer
      await beaconOracle.mapSlot(
        testValidator.depositProof.depositBlockNumber,
        testValidator.depositProof.depositSlot,
        testValidator.depositProof.depositRoot
      );

      // Mock the processing on the beacon chain
      await beaconOracle.mapSlot(
        testValidator.depositProof.processedBlockNumber,
        testValidator.depositProof.processedSlot,
        testValidator.depositProof.processedRoot
      );

      await compoundingStakingSSVStrategy.verifyDeposit(
        depositDataRoot,
        testValidator.depositProof.depositBlockNumber,
        testValidator.depositProof.processedSlot,
        testValidator.depositProof.firstPendingDepositSlot,
        testValidator.depositProof.proof
      );

      // Stake 2047 ETH to the new validator

      const secondDepositAmount = 2047;
      const depositDataRoot2 = await calcDepositRoot(
        compoundingStakingSSVStrategy.address,
        "0x02",
        testValidator.publicKey,
        testValidator.signature,
        secondDepositAmount
      );

      const stakeTx = compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .stakeEth(
          {
            pubkey: testValidator.publicKey,
            signature: testValidator.signature,
            depositDataRoot: depositDataRoot2,
          },
          BigNumber.from(secondDepositAmount.toString()).mul(GweiInWei)
        );

      await expect(stakeTx)
        .to.emit(compoundingStakingSSVStrategy, "ETHStaked")
        .withArgs(
          testValidator.publicKeyHash,
          depositDataRoot2,
          testValidator.publicKey,
          parseEther(secondDepositAmount.toString())
        );

      // Cheating here by using the same proof as before
      // it works as the deposit block is after the second deposit on the execution layer
      await compoundingStakingSSVStrategy.verifyDeposit(
        depositDataRoot2,
        testValidator.depositProof.depositBlockNumber,
        testValidator.depositProof.processedSlot,
        testValidator.depositProof.firstPendingDepositSlot,
        testValidator.depositProof.proof
      );

      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(stratbalanceBefore);
    });

    it("Should revert when first stake amount is not exactly 1 ETH", async () => {
      const { compoundingStakingSSVStrategy, validatorRegistrator } = fixture;

      const testValidator = testValidators[0];

      // Register a new validator with the SSV Network
      await compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .registerSsvValidator(
          testValidator.publicKey,
          testValidator.operatorIds,
          testValidator.sharesData,
          ethUnits("2"),
          emptyCluster
        );

      // Try to stake 32 ETH to the new validator
      const stakeTx = compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .stakeEth(
          {
            pubkey: testValidator.publicKey,
            signature: testValidator.signature,
            depositDataRoot: testValidator.depositProof.depositDataRoot,
          },
          BigNumber.from("32").mul(GweiInWei) // 32 ETH
        );

      await expect(stakeTx).to.be.revertedWith("First deposit not 1 ETH");
    });

    it("Should revert when registering a validator that is already registered", async () => {
      const { compoundingStakingSSVStrategy, validatorRegistrator } = fixture;

      const testValidator = testValidators[0];

      // Register a new validator with the SSV Network
      await compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .registerSsvValidator(
          testValidator.publicKey,
          testValidator.operatorIds,
          testValidator.sharesData,
          ethUnits("2"),
          emptyCluster
        );

      // Try to register the same validator again
      await expect(
        compoundingStakingSSVStrategy
          .connect(validatorRegistrator)
          .registerSsvValidator(
            testValidator.publicKey,
            testValidator.operatorIds,
            testValidator.sharesData,
            ethUnits("2"),
            emptyCluster
          )
      ).to.be.revertedWith("Validator already registered");
    });

    it("Should revert when staking because of insufficient ETH balance", async () => {
      const { compoundingStakingSSVStrategy, validatorRegistrator, weth } =
        fixture;
      const testValidator = testValidators[0];
      let balance = await weth.balanceOf(compoundingStakingSSVStrategy.address);
      balance = balance.div(GweiInWei); // Convert from Wei to Gwei
      // Stake ETH to the unregistered validator
      const tx = compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .stakeEth(
          {
            pubkey: testValidator.publicKey,
            signature: testValidator.signature,
            depositDataRoot: testValidator.depositProof.depositDataRoot,
          },
          balance.add(1) // 1e9 Gwei = 1 ETH
        );

      await expect(tx).to.be.revertedWith("Insufficient WETH");
    });

    it("Should revert when staking a validator that hasn't been registered", async () => {
      const { compoundingStakingSSVStrategy, validatorRegistrator } = fixture;

      const testValidator = testValidators[0];

      // Stake ETH to the unregistered validator
      const tx = compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .stakeEth(
          {
            pubkey: testValidator.publicKey,
            signature: testValidator.signature,
            depositDataRoot: testValidator.depositProof.depositDataRoot,
          },
          ETHInGwei // 1e9 Gwei = 1 ETH
        );

      await expect(tx).to.be.revertedWith("Not registered or verified");
    });

    // Remove validator
    it("Should remove a validator", async () => {
      const { compoundingStakingSSVStrategy, validatorRegistrator } = fixture;

      const testValidator = testValidators[0];

      // Register a new validator with the SSV Network
      await compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .registerSsvValidator(
          testValidator.publicKey,
          testValidator.operatorIds,
          testValidator.sharesData,
          ethUnits("2"),
          emptyCluster
        );

      expect(
        await compoundingStakingSSVStrategy.validatorState(
          testValidator.publicKeyHash
        )
      ).to.equal(1, "Validator state not 1 (REGISTERED)");

      // Withdraw from the validator
      const removeTx = compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .removeSsvValidator(
          testValidator.publicKey,
          testValidator.operatorIds,
          emptyCluster
        );

      await expect(removeTx)
        .to.emit(compoundingStakingSSVStrategy, "SSVValidatorRemoved")
        .withArgs(testValidator.publicKeyHash, testValidator.operatorIds);
    });

    it("Should revert when removing a validator that is not registered", async () => {
      const { compoundingStakingSSVStrategy, validatorRegistrator } = fixture;

      const testValidator = testValidators[0];
      expect(
        await compoundingStakingSSVStrategy.validatorState(
          testValidator.publicKeyHash
        )
      ).to.equal(0, "Validator state not 0 (NON_REGISTERED)");

      // Try to remove a validator that is not registered
      const removeTx = compoundingStakingSSVStrategy
        .connect(validatorRegistrator)
        .removeSsvValidator(
          testValidator.publicKey,
          testValidator.operatorIds,
          emptyCluster
        );

      await expect(removeTx).to.be.revertedWith("Validator not regd or exited");
    });

    it("Should revert when removing a validator that has been found", async () => {
      await stakeValidators(1, 1);

      const testValidator = testValidators[0];

      const { compoundingStakingSSVStrategy } = fixture;

      expect(
        await compoundingStakingSSVStrategy.validatorState(
          testValidator.publicKeyHash
        )
      ).to.equal(2, "Validator state not 2 (STAKED)");
    });
  });

  describe("Deposit/Withdraw in the strategy", () => {
    it("Should deposit ETH in the strategy", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;
      const balBefore =
        await compoundingStakingSSVStrategy.depositedWethAccountedFor();
      const checkBalanceBefore =
        await compoundingStakingSSVStrategy.checkBalance(weth.address);

      const depositAmount = parseEther("10");
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);
      const depositTx = compoundingStakingSSVStrategy
        .connect(sVault)
        .deposit(weth.address, depositAmount);

      await expect(depositTx)
        .to.emit(compoundingStakingSSVStrategy, "Deposit")
        .withArgs(weth.address, zero, depositAmount);

      expect(
        await compoundingStakingSSVStrategy.depositedWethAccountedFor()
      ).to.equal(
        balBefore.add(depositAmount),
        "Deposit amount not set properly"
      );
      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(
        checkBalanceBefore.add(depositAmount),
        "Check balance not updated properly"
      );
    });

    it("Should depositAll ETH in the strategy when depositedWethAccountedFor is zero", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;

      const checkBalanceBefore =
        await compoundingStakingSSVStrategy.checkBalance(weth.address);
      const depositAmount = parseEther("10");
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);
      const balBefore =
        await compoundingStakingSSVStrategy.depositedWethAccountedFor();

      const depositTx = compoundingStakingSSVStrategy
        .connect(sVault)
        .depositAll();

      await expect(depositTx)
        .to.emit(compoundingStakingSSVStrategy, "Deposit")
        .withArgs(weth.address, zero, depositAmount);

      expect(
        await compoundingStakingSSVStrategy.depositedWethAccountedFor()
      ).to.equal(
        balBefore.add(depositAmount),
        "Deposit amount not set properly"
      );

      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(
        checkBalanceBefore.add(depositAmount),
        "Check balance not updated properly"
      );
    });

    it("Should depositAll ETH in the strategy when depositedWethAccountedFor is not zero", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;

      let depositAmount = parseEther("10");

      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);
      await compoundingStakingSSVStrategy
        .connect(sVault)
        .deposit(weth.address, depositAmount);

      const balBefore =
        await compoundingStakingSSVStrategy.depositedWethAccountedFor();

      expect(balBefore).to.equal(
        depositAmount,
        "Deposit amount not set properly"
      );

      depositAmount = parseEther("20");

      const checkBalanceBefore =
        await compoundingStakingSSVStrategy.checkBalance(weth.address);

      // Josh deposits more ETH
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);

      const depositTx = compoundingStakingSSVStrategy
        .connect(sVault)
        .depositAll();

      await expect(depositTx)
        .to.emit(compoundingStakingSSVStrategy, "Deposit")
        .withArgs(weth.address, zero, depositAmount);

      expect(
        await compoundingStakingSSVStrategy.depositedWethAccountedFor()
      ).to.equal(
        balBefore.add(depositAmount),
        "Deposit amount not set properly"
      );

      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(
        checkBalanceBefore.add(depositAmount),
        "Check balance not updated properly"
      );
    });

    it("Should revert when depositing 0 ETH in the strategy", async () => {
      const { compoundingStakingSSVStrategy, weth } = fixture;

      await expect(
        compoundingStakingSSVStrategy.connect(sVault).deposit(
          weth.address,
          0 // 0 ETH
        )
      ).to.be.revertedWith("Must deposit something");
    });

    it("Should withdraw ETH from the strategy, no ETH", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;

      const depositAmount = parseEther("10");
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);
      await compoundingStakingSSVStrategy
        .connect(sVault)
        .deposit(weth.address, depositAmount);

      const checkBalanceBefore =
        await compoundingStakingSSVStrategy.checkBalance(weth.address);

      const withdrawTx = compoundingStakingSSVStrategy
        .connect(sVault)
        .withdraw(josh.address, weth.address, depositAmount);

      await expect(withdrawTx)
        .to.emit(compoundingStakingSSVStrategy, "Withdrawal")
        .withArgs(weth.address, zero, depositAmount);

      expect(
        await compoundingStakingSSVStrategy.depositedWethAccountedFor()
      ).to.equal(0, "Withdraw amount not set properly");

      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(
        checkBalanceBefore.sub(depositAmount),
        "Check balance not updated properly"
      );
    });

    it("Should withdraw ETH from the strategy, withdraw some ETH", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;

      const depositAmount = parseEther("10");
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);
      await compoundingStakingSSVStrategy
        .connect(sVault)
        .deposit(weth.address, depositAmount);

      // Donate raw ETH to the strategy
      await setBalance(compoundingStakingSSVStrategy.address, parseEther("5"));

      const checkBalanceBefore =
        await compoundingStakingSSVStrategy.checkBalance(weth.address);

      const withdrawTx = compoundingStakingSSVStrategy
        .connect(sVault)
        .withdraw(
          josh.address,
          weth.address,
          depositAmount.add(parseEther("5"))
        );

      await expect(withdrawTx)
        .to.emit(compoundingStakingSSVStrategy, "Withdrawal")
        .withArgs(weth.address, zero, depositAmount.add(parseEther("5")));

      expect(
        await compoundingStakingSSVStrategy.depositedWethAccountedFor()
      ).to.equal(0, "Withdraw amount not set properly");

      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(
        checkBalanceBefore.sub(depositAmount), // The extra 5 ETH is raw ETH are not taken into account, this is expected behavior
        "Check balance not updated properly"
      );
    });

    it("Should revert when withdrawing other than WETH", async () => {
      const { compoundingStakingSSVStrategy, josh } = fixture;

      // Try to withdraw USDC instead of WETH
      await expect(
        compoundingStakingSSVStrategy
          .connect(sVault)
          .withdraw(josh.address, josh.address, parseEther("10"))
      ).to.be.revertedWith("Unsupported asset");
    });

    it("Should revert when withdrawing 0 ETH from the strategy", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;

      await expect(
        compoundingStakingSSVStrategy.connect(sVault).withdraw(
          josh.address,
          weth.address, // 0 ETH
          0 // 0 amount
        )
      ).to.be.revertedWith("Must withdraw something");
    });

    it("Should revert when withdrawing to the zero address", async () => {
      const { compoundingStakingSSVStrategy, weth } = fixture;

      await expect(
        compoundingStakingSSVStrategy.connect(sVault).withdraw(
          zero, // zero address
          weth.address,
          parseEther("10")
        )
      ).to.be.revertedWith("Must specify recipient");
    });

    it("Should withdrawAll ETH from the strategy, no ETH", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;

      const depositAmount = parseEther("10");
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);
      await compoundingStakingSSVStrategy
        .connect(sVault)
        .deposit(weth.address, depositAmount);

      const withdrawTx = compoundingStakingSSVStrategy
        .connect(sVault)
        .withdrawAll();

      await expect(withdrawTx)
        .to.emit(compoundingStakingSSVStrategy, "Withdrawal")
        .withArgs(weth.address, zero, depositAmount);

      expect(
        await compoundingStakingSSVStrategy.depositedWethAccountedFor()
      ).to.equal(0, "Withdraw amount not set properly");

      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(0, "Check balance not updated properly");
    });

    it("Should withdrawAll ETH from the strategy, withdraw some ETH", async () => {
      const { compoundingStakingSSVStrategy, weth, josh } = fixture;

      const depositAmount = parseEther("10");
      await weth
        .connect(josh)
        .transfer(compoundingStakingSSVStrategy.address, depositAmount);
      await compoundingStakingSSVStrategy
        .connect(sVault)
        .deposit(weth.address, depositAmount);

      // Donate raw ETH to the strategy
      await setBalance(compoundingStakingSSVStrategy.address, parseEther("5"));

      const withdrawTx = compoundingStakingSSVStrategy
        .connect(sVault)
        .withdrawAll();

      await expect(withdrawTx)
        .to.emit(compoundingStakingSSVStrategy, "Withdrawal")
        .withArgs(weth.address, zero, depositAmount.add(parseEther("5")));

      expect(
        await compoundingStakingSSVStrategy.depositedWethAccountedFor()
      ).to.equal(0, "Withdraw amount not set properly");

      expect(
        await compoundingStakingSSVStrategy.checkBalance(weth.address)
      ).to.equal(0, "Check balance not updated properly");
    });
  });

  describe("Strategy balances", () => {
    const snapBalances = async (beaconBlockRoot) => {
      const { compoundingStakingSSVStrategy, beaconRoots } = fixture;

      if (!beaconBlockRoot) {
        beaconBlockRoot = "0x" + randomBytes(32).toString("hex");
      }

      // Disable auto-mining dynamically
      await network.provider.send("evm_setAutomine", [false]);

      await beaconRoots["setBeaconRoot(bytes32)"](beaconBlockRoot);

      await compoundingStakingSSVStrategy.snapBalances();

      // Mine both txs
      await ethers.provider.send("evm_mine", []);
      // Enable auto-mining
      await network.provider.send("evm_setAutomine", [true]);

      const lastBlock = await ethers.provider.getBlock("latest");

      return { beaconBlockRoot, timestamp: lastBlock.timestamp };
    };

    const assertBalances = async ({
      firstPendingDepositBlockNumber,
      wethAmount,
      ethAmount,
      balancesProof,
      pendingDepositAmount,
      activeValidators,
    }) => {
      const { beaconOracle, compoundingStakingSSVStrategy, weth } = fixture;

      // If the block number of the first pending deposit is not overridden
      if (!firstPendingDepositBlockNumber) {
        firstPendingDepositBlockNumber =
          balancesProof.firstPendingDeposit.block;
      }

      if (wethAmount > 0) {
        // Set some WETH in the strategy
        await setERC20TokenBalance(
          compoundingStakingSSVStrategy.address,
          weth,
          parseEther(wethAmount.toString())
        );
      }

      if (ethAmount > 0) {
        // Set some execution rewards
        await setBalance(
          compoundingStakingSSVStrategy.address,
          parseEther(ethAmount.toString())
        );
      }

      await snapBalances(balancesProof.blockRoot);

      await beaconOracle.mapSlot(
        firstPendingDepositBlockNumber,
        balancesProof.firstPendingDeposit.slot,
        balancesProof.firstPendingDeposit.blockRoot
      );

      const filteredLeaves = balancesProof.validatorBalanceLeaves.filter(
        (_, index) => activeValidators.includes(index)
      );
      const filteredProofs = balancesProof.validatorBalanceProofs.filter(
        (_, index) => activeValidators.includes(index)
      );
      const filteredBalances = balancesProof.validatorBalances.filter(
        (_, index) => activeValidators.includes(index)
      );

      // Verify balances with pending deposits and active validators
      const tx = await compoundingStakingSSVStrategy.verifyBalances({
        ...balancesProof,
        validatorBalanceLeaves: filteredLeaves,
        validatorBalanceProofs: filteredProofs,
      });

      const totalDepositsWei = parseEther(pendingDepositAmount.toString());
      const wethBalance = parseEther(wethAmount.toString());
      const totalValidatorBalance = filteredBalances
        .map((balance) => parseEther(balance.toString()))
        .reduce((sum, balance) => sum.add(balance), parseEther("0"));
      const ethBalance = parseEther(ethAmount.toString());
      const totalBalance = totalDepositsWei
        .add(wethBalance)
        .add(totalValidatorBalance)
        .add(ethBalance);

      await expect(tx)
        .to.emit(compoundingStakingSSVStrategy, "BalancesVerified")
        .withNamedArgs({
          totalDepositsWei,
          totalValidatorBalance,
          wethBalance,
          ethBalance,
        });

      const verifiedEthBalance =
        await compoundingStakingSSVStrategy.lastVerifiedEthBalance();

      expect(verifiedEthBalance).to.equal(
        totalDepositsWei.add(totalValidatorBalance).add(ethBalance)
      );

      const stratBalance = await compoundingStakingSSVStrategy.checkBalance(
        weth.address
      );

      return {
        totalDepositsWei,
        wethBalance,
        totalValidatorBalance,
        ethBalance,
        totalBalance,
        verifiedEthBalance,
        stratBalance,
      };
    };

    describe("When no execution rewards (ETH), no pending deposits and no active validators", () => {
      const verifyBalancesNoDepositsOrValidators = async (beaconBlockRoot) => {
        const { compoundingStakingSSVStrategy } = fixture;

        const tx = await compoundingStakingSSVStrategy.verifyBalances({
          blockRoot: beaconBlockRoot,
          firstPendingDepositSlot: 0,
          firstPendingDepositSlotProof: "0x",
          balancesContainerRoot: ethers.utils.hexZeroPad("0x0", 32),
          validatorContainerProof: "0x",
          validatorBalanceLeaves: [],
          validatorBalanceProofs: [],
        });

        return tx;
      };
      it("Should verify balances with no WETH", async () => {
        const { compoundingStakingSSVStrategy, weth } = fixture;

        const { beaconBlockRoot, timestamp } = await snapBalances();

        const tx = await verifyBalancesNoDepositsOrValidators(beaconBlockRoot);

        await expect(tx)
          .to.emit(compoundingStakingSSVStrategy, "BalancesVerified")
          .withArgs(
            timestamp,
            0, // totalDepositsWei
            0, // totalValidatorBalance
            0, // wethBalance
            0 // ethBalance
          );

        expect(
          await compoundingStakingSSVStrategy.lastVerifiedEthBalance(),
          "Last verified ETH balance"
        ).to.equal(0);
        expect(
          await compoundingStakingSSVStrategy.checkBalance(weth.address)
        ).to.equal(0);
      });
      it("Should verify balances with some WETH transferred before snap", async () => {
        const { compoundingStakingSSVStrategy, josh, weth } = fixture;

        // Send some WETH to the strategy before the snap
        const wethAmountAdded = parseEther("1.23");
        await weth
          .connect(josh)
          .transfer(compoundingStakingSSVStrategy.address, wethAmountAdded);
        await compoundingStakingSSVStrategy.connect(sVault).depositAll();

        const { beaconBlockRoot, timestamp } = await snapBalances();

        const tx = await verifyBalancesNoDepositsOrValidators(beaconBlockRoot);

        await expect(tx)
          .to.emit(compoundingStakingSSVStrategy, "BalancesVerified")
          .withArgs(
            timestamp,
            0, // totalDepositsWei
            0, // totalValidatorBalance
            wethAmountAdded, // wethBalance
            0 // ethBalance
          );

        expect(
          await compoundingStakingSSVStrategy.lastVerifiedEthBalance(),
          "Last verified ETH balance"
        ).to.equal(0);
        expect(
          await compoundingStakingSSVStrategy.checkBalance(weth.address)
        ).to.equal(wethAmountAdded);
      });
      it("Should verify balances with some WETH transferred after snap", async () => {
        const { compoundingStakingSSVStrategy, josh, weth } = fixture;

        const { beaconBlockRoot, timestamp } = await snapBalances();

        // Send some WETH to the strategy after the snap
        const wethAmountAdded = parseEther("5.67");
        await weth
          .connect(josh)
          .transfer(compoundingStakingSSVStrategy.address, wethAmountAdded);

        const tx = await verifyBalancesNoDepositsOrValidators(beaconBlockRoot);

        await expect(tx)
          .to.emit(compoundingStakingSSVStrategy, "BalancesVerified")
          .withArgs(
            timestamp,
            0, // totalDepositsWei
            0, // totalValidatorBalance
            wethAmountAdded, // wethBalance
            0 // ethBalance
          );

        expect(
          await compoundingStakingSSVStrategy.lastVerifiedEthBalance(),
          "Last verified ETH balance"
        ).to.equal(0);
        expect(
          await compoundingStakingSSVStrategy.checkBalance(weth.address)
        ).to.equal(wethAmountAdded);
      });
      it("Should verify balances with some WETH transferred before and after snap", async () => {
        const { compoundingStakingSSVStrategy, josh, weth } = fixture;

        // Send some WETH to the strategy before the snap
        const wethAmountBefore = parseEther("1.23");
        await weth
          .connect(josh)
          .transfer(compoundingStakingSSVStrategy.address, wethAmountBefore);

        const { beaconBlockRoot, timestamp } = await snapBalances();

        // Send some WETH to the strategy after the snap
        const wethAmountAdded = parseEther("5.67");
        await weth
          .connect(josh)
          .transfer(compoundingStakingSSVStrategy.address, wethAmountAdded);

        const tx = await verifyBalancesNoDepositsOrValidators(beaconBlockRoot);

        await expect(tx)
          .to.emit(compoundingStakingSSVStrategy, "BalancesVerified")
          .withArgs(
            timestamp,
            0, // totalDepositsWei
            0, // totalValidatorBalance
            wethAmountBefore.add(wethAmountAdded), // wethBalance
            0 // ethBalance
          );

        expect(
          await compoundingStakingSSVStrategy.lastVerifiedEthBalance(),
          "Last verified ETH balance"
        ).to.equal(0);
        expect(
          await compoundingStakingSSVStrategy.checkBalance(weth.address)
        ).to.equal(wethAmountBefore.add(wethAmountAdded));
      });
      it("Should verify balances with one registered validator", async () => {
        await processValidator(testValidators[0], "REGISTERED");

        const balancesAfter = await assertBalances({
          pendingDepositAmount: 0,
          wethAmount: 10,
          ethAmount: 0,
          balancesProof: testBalancesProofs[2],
          activeValidators: [], // no active validators
        });

        expect(balancesAfter.wethBalance).to.equal(parseEther("10"));
        expect(balancesAfter.verifiedEthBalance).to.equal(0);
        expect(balancesAfter.stratBalance).to.equal(parseEther("10"));
      });
      it("Should verify balances with one staked validator", async () => {
        const blockNumberBefore = await ethers.provider.getBlockNumber();
        await processValidator(testValidators[0], "STAKED");

        const balancesAfter = await assertBalances({
          firstPendingDepositBlockNumber: blockNumberBefore,
          pendingDepositAmount: 1,
          wethAmount: 0,
          ethAmount: 0,
          balancesProof: testBalancesProofs[2],
          activeValidators: [], // no active validators
        });

        expect(balancesAfter.totalDepositsWei).to.equal(parseEther("1"));
        expect(balancesAfter.verifiedEthBalance).to.equal(parseEther("1"));
        expect(balancesAfter.stratBalance).to.equal(parseEther("1"));
      });
      it("Should verify balances with one verified validator", async () => {
        const blockNumberBefore = await ethers.provider.getBlockNumber();
        await processValidator(testValidators[0], "VERIFIED_VALIDATOR");

        const balancesAfter = await assertBalances({
          firstPendingDepositBlockNumber: blockNumberBefore,
          pendingDepositAmount: 1,
          wethAmount: 0,
          ethAmount: 0,
          balancesProof: testBalancesProofs[1],
          activeValidators: [0],
        });

        expect(balancesAfter.totalDepositsWei).to.equal(parseEther("1"));
        expect(balancesAfter.verifiedEthBalance).to.equal(parseEther("1"));
        expect(balancesAfter.stratBalance).to.equal(parseEther("1"));
      });
      it("Should verify balances with one verified deposit", async () => {
        await processValidator(testValidators[0], "VERIFIED_DEPOSIT");

        const balancesAfter = await assertBalances({
          pendingDepositAmount: 0,
          wethAmount: 0,
          ethAmount: 0,
          balancesProof: testBalancesProofs[2],
          activeValidators: [0],
        });

        const expectedValidatorBalance = parseEther(
          testBalancesProofs[2].validatorBalances[0].toString()
        );
        expect(balancesAfter.totalDepositsWei).to.equal(0);
        expect(balancesAfter.totalValidatorBalance).to.equal(
          expectedValidatorBalance
        );
        expect(balancesAfter.verifiedEthBalance).to.equal(
          expectedValidatorBalance
        );
        expect(balancesAfter.stratBalance).to.equal(expectedValidatorBalance);
      });
    });
    describe("When an active validator does a", () => {
      let balancesBefore;
      beforeEach(async () => {
        // Third validator is later withdrawn later
        await processValidator(testValidators[3], "VERIFIED_DEPOSIT");
        await topupValidator(
          testValidators[3],
          testValidators[3].depositProof.depositAmount - 1,
          "VERIFIED_DEPOSIT"
        );
      });
      describe("partial withdrawal", () => {
        beforeEach(async () => {
          balancesBefore = await assertBalances({
            pendingDepositAmount: 0,
            wethAmount: 0,
            ethAmount: 0,
            balancesProof: testBalancesProofs[0],
            activeValidators: [2],
          });
        });
        it("Should account for a pending partial withdrawal", async () => {
          const { compoundingStakingSSVStrategy, validatorRegistrator } =
            fixture;

          const withdrawalAmount = 640;
          // fund 1 WEI for the withdrawal request
          await setBalance(compoundingStakingSSVStrategy.address, "0x1");
          const tx = await compoundingStakingSSVStrategy
            .connect(validatorRegistrator)
            .validatorWithdrawal(
              testValidators[3].publicKey,
              parseUnits(withdrawalAmount.toString(), 9)
            );

          await expect(tx)
            .to.emit(compoundingStakingSSVStrategy, "ValidatorWithdraw")
            .withArgs(
              testValidators[3].publicKeyHash,
              parseEther(withdrawalAmount.toString())
            );

          const balancesAfter = await assertBalances({
            pendingDepositAmount: 0,
            wethAmount: 0,
            ethAmount: 0,
            balancesProof: testBalancesProofs[0],
            activeValidators: [2],
          });
          expect(balancesAfter.stratBalance).to.equal(
            balancesBefore.stratBalance
          );
        });
        it("Should account for a processed partial withdrawal", async () => {
          const { compoundingStakingSSVStrategy, validatorRegistrator } =
            fixture;

          const withdrawalAmount = 640;
          // fund 1 WEI for the withdrawal request
          await setBalance(compoundingStakingSSVStrategy.address, "0x1");
          const tx = await compoundingStakingSSVStrategy
            .connect(validatorRegistrator)
            .validatorWithdrawal(
              testValidators[3].publicKey,
              parseUnits(withdrawalAmount.toString(), 9)
            );

          await expect(tx)
            .to.emit(compoundingStakingSSVStrategy, "ValidatorWithdraw")
            .withArgs(
              testValidators[3].publicKeyHash,
              parseEther(withdrawalAmount.toString())
            );

          const concensusRewards =
            testBalancesProofs[0].validatorBalances[2] -
            testBalancesProofs[1].validatorBalances[2] -
            withdrawalAmount;

          const balancesAfter = await assertBalances({
            pendingDepositAmount: 0,
            wethAmount: 0,
            ethAmount: withdrawalAmount + concensusRewards,
            balancesProof: testBalancesProofs[1],
            activeValidators: [2],
          });
          expect(balancesAfter.stratBalance).to.equal(
            balancesBefore.stratBalance
          );
        });
      });
      describe("full withdrawal", () => {
        beforeEach(async () => {
          balancesBefore = await assertBalances({
            pendingDepositAmount: 0,
            wethAmount: 0,
            ethAmount: 0,
            balancesProof: testBalancesProofs[1],
            activeValidators: [2],
          });
        });
        it("Should account for full withdrawal", async () => {
          const { compoundingStakingSSVStrategy, validatorRegistrator } =
            fixture;

          // Validator has 1588.918094377 ETH
          const withdrawalAmount = testBalancesProofs[1].validatorBalances[2];

          // Stake before balance are verified
          const activeValidatorsBefore =
            await compoundingStakingSSVStrategy.getVerifiedValidators();
          expect(activeValidatorsBefore.length).to.eq(1);
          expect(
            await compoundingStakingSSVStrategy.validatorState(
              testValidators[3].publicKeyHash
            )
          ).to.equal(3); // VERIFIED

          // fund 1 WEI for the withdrawal request
          await setBalance(compoundingStakingSSVStrategy.address, "0x1");
          const tx = await compoundingStakingSSVStrategy
            .connect(validatorRegistrator)
            .validatorWithdrawal(
              testValidators[3].publicKey,
              parseUnits(withdrawalAmount.toString(), 9)
            );

          await expect(tx)
            .to.emit(compoundingStakingSSVStrategy, "ValidatorWithdraw")
            .withArgs(
              testValidators[3].publicKeyHash,
              parseEther(withdrawalAmount.toString())
            );

          const balancesAfter = await assertBalances({
            pendingDepositAmount: 0,
            wethAmount: 0,
            ethAmount: withdrawalAmount,
            balancesProof: testBalancesProofs[2],
            activeValidators: [2],
          });

          // Check state after the balances are verified
          expect(balancesAfter.stratBalance).to.equal(
            balancesBefore.stratBalance
          );
          const activeValidatorsAfter =
            await compoundingStakingSSVStrategy.getVerifiedValidators();
          expect(activeValidatorsAfter.length).to.eq(0);
          expect(
            await compoundingStakingSSVStrategy.validatorState(
              testValidators[3].publicKeyHash
            )
          ).to.equal(4); // EXITED
        });
      });
    });
    describe("When WETH, ETH, no pending deposits and 2 active validators", () => {
      let balancesBefore;
      beforeEach(async () => {
        // register, stake, verify validator and verify deposit
        await processValidator(testValidators[0], "VERIFIED_DEPOSIT");
        await topupValidator(
          testValidators[0],
          testValidators[0].depositProof.depositAmount - 1,
          "VERIFIED_DEPOSIT"
        );

        await processValidator(testValidators[1], "VERIFIED_DEPOSIT");
        await topupValidator(
          testValidators[1],
          testValidators[1].depositProof.depositAmount - 1,
          "VERIFIED_DEPOSIT"
        );

        balancesBefore = await assertBalances({
          pendingDepositAmount: 0,
          wethAmount: 10,
          ethAmount: 0.987,
          balancesProof: testBalancesProofs[3],
          activeValidators: [0, 1],
        });
      });
      it("consensus rewards are earned by the validators", async () => {
        const balancesAfter = await assertBalances({
          pendingDepositAmount: 0,
          wethAmount: 10,
          ethAmount: 0.987,
          balancesProof: testBalancesProofs[4],
          activeValidators: [0, 1],
        });

        // Check the increase in consensus rewards
        const consensusRewards = parseEther("0.007672545");
        expect(balancesAfter.totalValidatorBalance).to.equal(
          balancesBefore.totalValidatorBalance.add(consensusRewards)
        );
        expect(balancesAfter.totalBalance).to.equal(
          balancesBefore.totalBalance.add(consensusRewards)
        );
      });
      it("execution rewards are earned as ETH in the strategy", async () => {
        const balancesAfter = await assertBalances({
          pendingDepositAmount: 0,
          wethAmount: 10,
          ethAmount: 1,
          balancesProof: testBalancesProofs[3],
          activeValidators: [0, 1],
        });

        // Check the increase in execution rewards
        const executionRewards = parseEther("0.013");
        expect(balancesAfter.ethBalance).to.equal(
          balancesBefore.ethBalance.add(executionRewards)
        );
        expect(balancesAfter.totalBalance).to.equal(
          balancesBefore.totalBalance.add(executionRewards)
        );
      });
    });
  });
  /*
  it("Deposit alternate deposit_data_root ", async () => {
    const { depositContractUtils } = fixture;

    const withdrawalCredentials = solidityPack(
      ["bytes1", "bytes11", "address"],
      [
        "0x01",
        "0x0000000000000000000000",
        // mainnet Native Staking Strategy proxy
        "0x34edb2ee25751ee67f68a45813b22811687c0238",
      ]
    );
    expect(withdrawalCredentials).to.equal(
      "0x01000000000000000000000034edb2ee25751ee67f68a45813b22811687c0238"
    );

    const expectedDepositDataRoot =
      await depositContractUtils.calculateDepositDataRoot(
        // Mainnet fork test public key
        "0xaba6acd335d524a89fb89b9977584afdb23f34a6742547fa9ec1c656fbd2bfc0e7a234460328c2731828c9a43be06e25",
        withdrawalCredentials,
        // Mainnet fork test signature
        "0x90157a1c1b26384f0b4d41bec867d1a000f75e7b634ac7c4c6d8dfc0b0eaeb73bcc99586333d42df98c6b0a8c5ef0d8d071c68991afcd8fbbaa8b423e3632ee4fe0782bc03178a30a8bc6261f64f84a6c833fb96a0f29de1c34ede42c4a859b0"
      );

    expect(
      "0xf7d704e25a2b5bea06fafa2dfe5c6fa906816e5c1622400339b2088a11d5f446"
    ).to.equal(expectedDepositDataRoot, "Incorrect deposit data root");
  });
  */
});
